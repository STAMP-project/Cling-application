import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.weekyears();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = ethiopicChronology1.add(readablePeriod5, 0L, 51053001);
        org.joda.time.DurationField durationField9 = ethiopicChronology1.days();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = ethiopicChronology11.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology11.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = ethiopicChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = ethiopicChronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology11.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) ethiopicChronology11);
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology11.halfdayOfDay();
        org.joda.time.DurationField durationField26 = ethiopicChronology11.seconds();
        int int27 = durationField9.compareTo(durationField26);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(ethiopicChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(51053001, 626, 420, 0, 76, 102, 926);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 76 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        timeZone0.setRawOffset((-292269338));
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getStandardOffset((long) 1);
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        boolean boolean10 = timeZone0.hasSameRules(timeZone9);
        int int12 = timeZone0.getOffset((long) 2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology14 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField16 = ethiopicChronology14.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = ethiopicChronology14.getZone();
        java.lang.String str19 = dateTimeZone18.getID();
        java.lang.String str20 = dateTimeZone18.getID();
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        boolean boolean22 = timeZone0.hasSameRules(timeZone21);
        boolean boolean23 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        int int27 = timeZone0.getOffset(1888152465921L);
        int int29 = timeZone0.getOffset(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId30 = timeZone0.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: +00:00:00.010");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-81:11");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-292269338) + "'", int2 == (-292269338));
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-292269338) + "'", int12 == (-292269338));
        org.junit.Assert.assertNotNull(ethiopicChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-292269338) + "'", int27 == (-292269338));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-292269338) + "'", int29 == (-292269338));
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        int int5 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        boolean boolean7 = durationField6.isPrecise();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.days();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = ethiopicChronology1.getZone();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plus(readableDuration7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths(955);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology10 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology10.clockhourOfDay();
        org.joda.time.DurationField durationField12 = ethiopicChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology10.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = ethiopicChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology10.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.millisOfDay();
        org.joda.time.Chronology chronology28 = localDateTime24.getChronology();
        int int29 = localDateTime24.getCenturyOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusWeeks((int) (byte) 10);
        int int38 = localDateTime37.getMillisOfSecond();
        int int39 = localDateTime37.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.plusHours((int) (short) -1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime37.minusHours((int) (short) 10);
        int int45 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        int[] intArray46 = localDateTime24.getValues();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime24.withYear(999);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.minusDays(100);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime54.withYearOfCentury((int) (short) 1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.weekyear();
        org.joda.time.LocalDateTime localDateTime73 = property71.setCopy((int) (byte) 1);
        long long74 = property71.remainder();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(chronology75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localDateTime82.toDateTime(readableInstant83);
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.millisOfDay();
        int int86 = property71.compareTo((org.joda.time.ReadablePartial) localDateTime82);
        boolean boolean88 = property71.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property71.getFieldType();
        org.joda.time.LocalDateTime.Property property90 = localDateTime62.property(dateTimeFieldType89);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime24.withField(dateTimeFieldType89, 53342071);
        int int93 = localDateTime16.get(dateTimeFieldType89);
        int int94 = localDateTime6.indexOf(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(ethiopicChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 932 + "'", int38 == 932);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 932 + "'", int39 == 932);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[2000, 2, 21, 53507931]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 4287107932L + "'", long74 == 4287107932L);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2014 + "'", int93 == 2014);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("53312436");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.hours();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone11);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone16);
        boolean boolean20 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        int[] intArray22 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime19, (long) 30);
        org.joda.time.DateTimeZone dateTimeZone23 = ethiopicChronology1.getZone();
        long long25 = dateTimeZone23.convertUTCToLocal((long) 100);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.size();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 110L + "'", long25 == 110L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = property17.setCopy((int) (byte) 1);
        long long20 = property17.remainder();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfDay();
        int int32 = property17.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean34 = property17.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology36 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology36.clockhourOfDay();
        org.joda.time.DurationField durationField38 = ethiopicChronology36.weekyears();
        org.joda.time.DurationField durationField39 = ethiopicChronology36.hours();
        boolean boolean40 = property17.equals((java.lang.Object) ethiopicChronology36);
        org.joda.time.DurationField durationField41 = ethiopicChronology36.halfdays();
        java.lang.String str42 = ethiopicChronology36.toString();
        org.joda.time.DateTimeField dateTimeField43 = ethiopicChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology36.monthOfYear();
        boolean boolean45 = localDateTime7.equals((java.lang.Object) dateTimeField44);
        boolean boolean46 = dateTimeField44.isLenient();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2000-02-21T14:51:48.167" + "'", str8, "2000-02-21T14:51:48.167");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4287108167L + "'", long20 == 4287108167L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationField41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "EthiopicChronology[+00:00:00.010]" + "'", str42, "EthiopicChronology[+00:00:00.010]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale4 = new java.util.Locale("53196316");
        java.lang.String str5 = locale4.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str11 = nameProvider0.getName(locale6, "2000-01-03T00:10:19.000Z", "");
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology13 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology13.dayOfMonth();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusWeeks((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.lang.String str24 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime22, locale23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.lang.String str33 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime26, 2022, locale32);
        java.lang.String str34 = locale32.getDisplayVariant();
        java.lang.String str37 = nameProvider0.getShortName(locale32, "2022-02-14T14:46:37.492", "tedesco");
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology39 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology39.centuryOfEra();
        org.joda.time.DurationField durationField42 = ethiopicChronology39.millis();
        org.joda.time.DateTimeField dateTimeField43 = ethiopicChronology39.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology39.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField46 = ethiopicChronology39.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfDay();
        org.joda.time.DurationField durationField51 = ethiopicChronology49.weekyears();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology49.getZone();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology49);
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology49.millisOfSecond();
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("2022-02-14T14:46:42.333");
        java.lang.String str58 = locale57.toLanguageTag();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology60 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = ethiopicChronology60.hourOfDay();
        org.joda.time.DateTimeField dateTimeField62 = ethiopicChronology60.halfdayOfDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology63);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = localDateTime64.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.dayOfWeek();
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.lang.String str72 = locale71.getScript();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology74 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = ethiopicChronology74.clockhourOfDay();
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = dateTimeField75.getAsText((long) 'a', locale77);
        java.lang.String str79 = locale71.getDisplayName(locale77);
        java.lang.String str80 = dateTimeField62.getAsText((org.joda.time.ReadablePartial) localDateTime67, locale77);
        java.lang.String str81 = locale57.getDisplayLanguage(locale77);
        int int82 = dateTimeField55.getMaximumTextLength(locale57);
        java.lang.String str83 = locale57.getCountry();
        java.lang.String str84 = dateTimeField46.getAsText(22L, locale57);
        java.lang.String str87 = nameProvider0.getName(locale57, "Italian", "Englisch");
        java.lang.String str88 = locale57.getISO3Language();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale4.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "53196316" + "'", str8, "53196316");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(ethiopicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2" + "'", str24, "2");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(ethiopicChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "und" + "'", str58, "und");
        org.junit.Assert.assertNotNull(ethiopicChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(ethiopicChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "24" + "'", str78, "24");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tedesco (Germania)" + "'", str79, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0" + "'", str80, "0");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0" + "'", str84, "0");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        java.util.Locale locale1 = new java.util.Locale("53196316");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        int[] intArray16 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime13, 0L);
        org.joda.time.DurationField durationField17 = ethiopicChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology1.millisOfDay();
        long long23 = dateTimeField20.addWrapField((long) 24, 137);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1962, 4, 23, 10]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 161L + "'", long23 == 161L);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        java.util.Locale locale1 = new java.util.Locale("2022-02-14T14:50:26.870");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-14t14:50:26.870");
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property4.getAsShortText(locale6);
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(314);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYearOfEra(1962);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7" + "'", str7, "7");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology9 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = ethiopicChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = ethiopicChronology9.getZone();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology9);
        org.joda.time.DurationField durationField15 = ethiopicChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology9.hourOfHalfday();
        org.joda.time.DurationField durationField17 = ethiopicChronology9.hours();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone19);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str26 = dateTimeZone24.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone24);
        boolean boolean28 = localDateTime22.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        int[] intArray30 = ethiopicChronology9.get((org.joda.time.ReadablePartial) localDateTime27, (long) 30);
        long long32 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime27, (long) (byte) -1);
        org.joda.time.DurationField durationField33 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField34 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField35 = ethiopicChronology1.weeks();
        long long39 = ethiopicChronology1.add((long) 937, 4646828023L, 744);
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology1.millisOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(ethiopicChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1962, 4, 23, 40]");
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1888152708541L + "'", long32 == 1888152708541L);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3457240050049L + "'", long39 == 3457240050049L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.days();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.halfdays();
        int int12 = durationField10.getValue(4286881576L);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = durationField10.subtract((-4434L), 4286880739L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 99 + "'", int12 == 99);
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Koordinierte Universalzeit", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=koordinierteuniversalzeit");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-14T14:47:17.342");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = localDateTime1.getValue(785);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 785");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.year();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.millis();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.secondOfDay();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.days();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = ethiopicChronology1.getDateTimeMillis(606, 710, 136, 752, 821, 53258887, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 752 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology6 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology6.clockhourOfDay();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = dateTimeField7.getAsText((long) 'a', locale9);
        int int11 = dateTimeField4.getMaximumTextLength(locale9);
        int int13 = dateTimeField4.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.centuryOfEra();
        java.lang.String str20 = localDateTime17.toString();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, (-292275054), locale22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime17.minusDays(870);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str29 = dateTimeZone27.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone27);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.lang.String str34 = dateTimeZone32.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone32);
        boolean boolean36 = localDateTime30.isEqual((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusWeeks(0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfEvenCopy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plusWeeks((int) (byte) 10);
        int int49 = localDateTime48.getMillisOfSecond();
        int int50 = localDateTime48.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType53 = null;
        boolean boolean54 = localDateTime48.isSupported(durationFieldType53);
        org.joda.time.DateTime dateTime55 = localDateTime48.toDateTime();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.plusWeeks((int) (byte) 10);
        int int74 = localDateTime73.getMillisOfSecond();
        int int75 = localDateTime73.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType78 = null;
        boolean boolean79 = localDateTime73.isSupported(durationFieldType78);
        org.joda.time.DateTime dateTime80 = localDateTime73.toDateTime();
        boolean boolean81 = dateTime65.isAfter((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Instant instant82 = dateTime65.toInstant();
        boolean boolean83 = dateTime55.isEqual((org.joda.time.ReadableInstant) instant82);
        org.joda.time.DateTime dateTime84 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) instant82);
        org.joda.time.DateTime dateTime85 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) instant82);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(ethiopicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "24" + "'", str10, "24");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-14T14:51:48.710" + "'", str20, "2022-02-14T14:51:48.710");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-292275054" + "'", str23, "-292275054");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 710 + "'", int49 == 710);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 710 + "'", int50 == 710);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 710 + "'", int74 == 710);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 710 + "'", int75 == 710);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.hourOfDay();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.eras();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology10 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology10.centuryOfEra();
        org.joda.time.DurationField durationField13 = ethiopicChronology10.millis();
        org.joda.time.DurationField durationField14 = ethiopicChronology10.months();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = ethiopicChronology10.days();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology10.clockhourOfDay();
        org.joda.time.DurationField durationField18 = ethiopicChronology10.months();
        org.joda.time.DurationField durationField19 = ethiopicChronology10.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) ethiopicChronology1, (org.joda.time.Chronology) ethiopicChronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.EthiopicChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(ethiopicChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy((int) (byte) 1);
        long long23 = property20.remainder();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.millisOfDay();
        int int35 = property20.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        boolean boolean37 = property20.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property20.getFieldType();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime11.withField(dateTimeFieldType38, 175);
        int int41 = localDateTime11.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime11.plusHours(83);
        org.joda.time.LocalDateTime.Property property44 = localDateTime11.era();
        java.lang.String str45 = property44.toString();
        org.joda.time.LocalDateTime localDateTime46 = property44.roundFloorCopy();
        java.lang.String str47 = property44.getAsText();
        java.lang.String str48 = property44.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4287108873L + "'", long23 == 4287108873L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Property[era]" + "'", str45, "Property[era]");
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "dopo Cristo" + "'", str47, "dopo Cristo");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[era]" + "'", str48, "Property[era]");
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = dateTimeField6.getAsText(100L, locale8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfWeek();
        org.joda.time.Chronology chronology25 = localDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = ethiopicChronology27.getZone();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology27);
        org.joda.time.DurationField durationField33 = ethiopicChronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology27.hourOfHalfday();
        org.joda.time.DurationField durationField35 = ethiopicChronology27.hours();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str39 = dateTimeZone37.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone37);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone42);
        boolean boolean46 = localDateTime40.isEqual((org.joda.time.ReadablePartial) localDateTime45);
        int[] intArray48 = ethiopicChronology27.get((org.joda.time.ReadablePartial) localDateTime45, (long) 30);
        boolean boolean49 = localDateTime23.equals((java.lang.Object) intArray48);
        int int50 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17, intArray48);
        int int51 = localDateTime17.getYear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime17.minusHours(137);
        int int54 = localDateTime53.getYear();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "62" + "'", str9, "62");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1962, 4, 23, 40]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = ethiopicChronology1.getZone();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = ethiopicChronology1.add(readablePeriod8, (long) 657, 2010);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology15 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology15.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = ethiopicChronology15.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology15.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = property29.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField32 = property29.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime33 = property29.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekOfWeekyear();
        int int35 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDateTime33);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str39 = dateTimeZone37.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone37);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone42);
        boolean boolean46 = localDateTime40.isEqual((org.joda.time.ReadablePartial) localDateTime45);
        int int47 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.weekyear();
        org.joda.time.LocalDateTime localDateTime58 = property56.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField59 = property56.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime60 = property56.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusWeeks(619);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.hourOfDay();
        int int64 = localDateTime60.getWeekyear();
        boolean boolean65 = localDateTime45.equals((java.lang.Object) localDateTime60);
        org.joda.time.LocalDateTime.Property property66 = localDateTime60.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime60.plusMonths(39);
        int[] intArray70 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime60, 1888152602001L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 657L + "'", long11 == 657L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(ethiopicChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 999 + "'", int35 == 999);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 999 + "'", int47 == 999);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2000 + "'", int64 == 2000);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 2, 21, 53402011]");
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.lang.String> strCollection3 = null;
        java.util.List<java.lang.String> strList4 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection3);
        java.util.Set<java.lang.String> strSet5 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet5.clear();
        int int7 = strSet5.size();
        java.util.Locale.FilteringMode filteringMode8 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.Locale.FilteringMode filteringMode9 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.Locale.FilteringMode[] filteringModeArray10 = new java.util.Locale.FilteringMode[] { filteringMode8, filteringMode9 };
        java.util.Locale.FilteringMode[] filteringModeArray11 = strSet5.toArray(filteringModeArray10);
        strSet5.clear();
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet5, filteringMode13);
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet15.clear();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone[] dateTimeZoneArray27 = new org.joda.time.DateTimeZone[] { dateTimeZone18, dateTimeZone20, dateTimeZone22, dateTimeZone24, dateTimeZone26 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray28 = strSet15.toArray(dateTimeZoneArray27);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strSet15.spliterator();
        boolean boolean30 = strSet15.isEmpty();
        boolean boolean31 = strSet15.isEmpty();
        boolean boolean32 = strSet15.isEmpty();
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.util.stream.Stream<java.lang.String> strStream34 = strList33.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + filteringMode8 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode8.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + filteringMode9 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode9.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(filteringModeArray10);
        org.junit.Assert.assertNotNull(filteringModeArray11);
        org.junit.Assert.assertTrue("'" + filteringMode13 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode13.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZoneArray27);
        org.junit.Assert.assertNotNull(dateTimeZoneArray28);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strStream34);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(0);
        int int12 = localDateTime11.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusYears(689);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = localDateTime11.getField(4022);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 4022");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readableDuration11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 39);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(976);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusSeconds(390);
        int int19 = localDateTime14.getYearOfEra();
        boolean boolean20 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology23 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology23.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology23.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology23.secondOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology23);
        long long31 = ethiopicChronology23.add(10L, (long) 619, (int) (byte) 0);
        org.joda.time.DurationField durationField32 = ethiopicChronology23.millis();
        org.joda.time.DurationField durationField33 = ethiopicChronology23.centuries();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology23.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = ethiopicChronology23.getZone();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime10, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime10.minusMonths(51012001);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusYears(51007001);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.parse("52");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMinuteOfHour(10);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minus(readablePeriod53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.weekyear();
        org.joda.time.LocalDateTime localDateTime65 = property63.setCopy((int) (byte) 1);
        long long66 = property63.remainder();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime68.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.millisOfDay();
        int int78 = property63.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        boolean boolean80 = property63.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property63.getFieldType();
        int int82 = localDateTime52.get(dateTimeFieldType81);
        boolean boolean83 = localDateTime42.isSupported(dateTimeFieldType81);
        int int84 = localDateTime40.get(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(ethiopicChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 4287109123L + "'", long66 == 4287109123L);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 46756002 + "'", int84 == 46756002);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = ethiopicChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = ethiopicChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = ethiopicChronology2.weeks();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) 4286891307L, (org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minus(readablePeriod16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, 402);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology31 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology31.hourOfDay();
        org.joda.time.DurationField durationField33 = ethiopicChronology31.eras();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology31.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-292275054), (org.joda.time.Chronology) ethiopicChronology31);
        int int36 = localDateTime35.getWeekOfWeekyear();
        int int37 = localDateTime35.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology39 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology39.dayOfMonth();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plusWeeks((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.PRC;
        java.lang.String str50 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime48, locale49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        java.lang.String str59 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime52, 2022, locale58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime52.minusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology64 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = ethiopicChronology64.hourOfDay();
        org.joda.time.DateTimeField dateTimeField66 = ethiopicChronology64.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology64.secondOfDay();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology64);
        org.joda.time.DurationField durationField69 = ethiopicChronology64.eras();
        org.joda.time.DurationFieldType durationFieldType70 = durationField69.getType();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType70);
        boolean boolean72 = localDateTime35.isSupported(durationFieldType70);
        boolean boolean73 = localDateTime28.isSupported(durationFieldType70);
        boolean boolean74 = localDateTime17.isSupported(durationFieldType70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime76 = localDateTime12.withFieldAdded(durationFieldType70, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(ethiopicChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 44 + "'", int37 == 44);
        org.junit.Assert.assertNotNull(ethiopicChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2" + "'", str50, "2");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022" + "'", str59, "2022");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(ethiopicChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(888, 781, 853, 5, (-9950));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -9950 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.secondOfDay();
        boolean boolean8 = dateTimeField7.isLenient();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2021-11-13T14:51:24.001Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2021-11-13t14:51:24.001z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property8.getFieldType();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = locale27.getScript();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology30 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology30.clockhourOfDay();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = dateTimeField31.getAsText((long) 'a', locale33);
        java.lang.String str35 = locale27.getDisplayName(locale33);
        java.lang.String str36 = locale33.getISO3Language();
        boolean boolean37 = locale33.hasExtensions();
        java.lang.String str38 = locale33.getScript();
        int int39 = property8.getMaximumShortTextLength(locale33);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287109258L + "'", long11 == 4287109258L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(ethiopicChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "24" + "'", str34, "24");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco (Germania)" + "'", str35, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ita" + "'", str36, "ita");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology11.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology15 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology15.clockhourOfDay();
        org.joda.time.DurationField durationField17 = ethiopicChronology15.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology15.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = ethiopicChronology15.getZone();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology15);
        org.joda.time.DurationField durationField21 = ethiopicChronology15.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology15.hourOfHalfday();
        org.joda.time.DurationField durationField23 = ethiopicChronology15.hours();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone25);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone30);
        boolean boolean34 = localDateTime28.isEqual((org.joda.time.ReadablePartial) localDateTime33);
        int[] intArray36 = ethiopicChronology15.get((org.joda.time.ReadablePartial) localDateTime33, (long) 30);
        org.joda.time.DateTimeZone dateTimeZone37 = ethiopicChronology15.getZone();
        java.lang.String str39 = dateTimeZone37.getShortName(3430L);
        org.joda.time.Chronology chronology40 = ethiopicChronology11.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = localDateTime9.toDateTime(dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime9.plus(readableDuration42);
        int int44 = localDateTime43.getYearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.weekyear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = localDateTime52.getFieldTypes();
        int int55 = localDateTime43.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.minus(readablePeriod56);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(ethiopicChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(ethiopicChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfYear();
        long long11 = dateTimeField8.add(4286831975L, 4286824470L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 370381638494831975L + "'", long11 == 370381638494831975L);
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology1.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.dayOfMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.setCopy((int) (byte) 1);
        long long15 = property12.remainder();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfDay();
        int int27 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        int int28 = dateTimeField3.getMaximumValue((org.joda.time.ReadablePartial) localDateTime23);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str33 = dateTimeZone31.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(4286800429L, dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withPeriodAdded(readablePeriod35, 2014);
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.dayOfWeek();
        int int39 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4287109367L + "'", long15 == 4287109367L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 30 + "'", int28 == 30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = property15.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField18 = property15.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekOfWeekyear();
        int int21 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfDay(19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology25 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology25.clockhourOfDay();
        org.joda.time.DurationField durationField27 = ethiopicChronology25.weekyears();
        org.joda.time.DurationFieldType durationFieldType28 = durationField27.getType();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime19.withFieldAdded(durationFieldType28, 1970);
        int int31 = localDateTime19.getMillisOfSecond();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(ethiopicChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 389 + "'", int31 == 389);
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        org.joda.time.DurationField durationField32 = ethiopicChronology27.halfdays();
        java.lang.String str33 = ethiopicChronology27.toString();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology27.monthOfYear();
        org.joda.time.DurationField durationField36 = ethiopicChronology27.months();
        org.joda.time.DurationField durationField37 = ethiopicChronology27.seconds();
        long long39 = durationField37.getValueAsLong((long) 742);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287109411L + "'", long11 == 4287109411L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "EthiopicChronology[+00:00:00.010]" + "'", str33, "EthiopicChronology[+00:00:00.010]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.days();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.year();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.centuryOfEra();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:47:14.175");
        java.util.TimeZone.setDefault(timeZone1);
        java.lang.Object obj3 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology6 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology6.clockhourOfDay();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = dateTimeField7.getAsText((long) 'a', locale9);
        int int11 = dateTimeField4.getMaximumTextLength(locale9);
        int int13 = dateTimeField4.getMinimumValue((-3600001L));
        int int14 = dateTimeField4.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology16 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = ethiopicChronology16.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = ethiopicChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology16.year();
        org.joda.time.DateTimeZone dateTimeZone24 = ethiopicChronology16.getZone();
        org.joda.time.DurationField durationField25 = ethiopicChronology16.seconds();
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology16.year();
        org.joda.time.DateTimeField dateTimeField27 = ethiopicChronology16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology29 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology29.clockhourOfDay();
        org.joda.time.DurationField durationField31 = ethiopicChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology29.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology34 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology34.clockhourOfDay();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = dateTimeField35.getAsText((long) 'a', locale37);
        int int39 = dateTimeField32.getMaximumTextLength(locale37);
        int int41 = dateTimeField32.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.centuryOfEra();
        java.lang.String str48 = localDateTime45.toString();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, (-292275054), locale50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime45.withDurationAdded(readableDuration52, 22);
        java.util.Date date55 = localDateTime45.toDate();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime63);
        long long66 = ethiopicChronology16.set((org.joda.time.ReadablePartial) localDateTime45, (long) 53258887);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology69 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = ethiopicChronology69.clockhourOfDay();
        org.joda.time.DurationField durationField71 = ethiopicChronology69.weekyears();
        org.joda.time.DateTimeField dateTimeField72 = ethiopicChronology69.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone73 = ethiopicChronology69.getZone();
        org.joda.time.DurationField durationField74 = ethiopicChronology69.minutes();
        org.joda.time.DurationField durationField75 = ethiopicChronology69.hours();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology76);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = localDateTime77.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.plusMillis(955);
        int[] intArray86 = ethiopicChronology69.get((org.joda.time.ReadablePartial) localDateTime84, (long) 57);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray88 = dateTimeField4.add((org.joda.time.ReadablePartial) localDateTime45, 845, intArray86, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 845");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(ethiopicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "24" + "'", str10, "24");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 24 + "'", int14 == 24);
        org.junit.Assert.assertNotNull(ethiopicChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(ethiopicChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(ethiopicChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "24" + "'", str38, "24");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-14T14:51:49.551" + "'", str48, "2022-02-14T14:51:49.551");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-292275054" + "'", str51, "-292275054");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Mon Feb 14 14:51:49 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1887547909541L + "'", long66 == 1887547909541L);
        org.junit.Assert.assertNotNull(ethiopicChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(intArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1962, 4, 23, 67]");
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology5 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology5.yearOfEra();
        org.joda.time.DurationField durationField8 = ethiopicChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology5.yearOfCentury();
        org.joda.time.DurationField durationField10 = ethiopicChronology5.months();
        org.joda.time.DateTimeZone dateTimeZone11 = ethiopicChronology5.getZone();
        org.joda.time.Chronology chronology12 = ethiopicChronology1.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology15 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology15.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = ethiopicChronology15.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology15.millisOfSecond();
        org.joda.time.DurationField durationField21 = ethiopicChronology15.hours();
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology15.dayOfMonth();
        org.joda.time.DurationField durationField23 = ethiopicChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology15.monthOfYear();
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = dateTimeField24.getAsShortText(402, locale26);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology30 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology30.clockhourOfDay();
        org.joda.time.DurationField durationField32 = ethiopicChronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = ethiopicChronology30.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology35 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology35.clockhourOfDay();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = dateTimeField36.getAsText((long) 'a', locale38);
        int int40 = dateTimeField33.getMaximumTextLength(locale38);
        int int42 = dateTimeField33.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.centuryOfEra();
        java.lang.String str49 = localDateTime46.toString();
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.lang.String str52 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime46, (-292275054), locale51);
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.lang.String str54 = locale28.getDisplayLanguage(locale51);
        java.lang.String str55 = locale26.getDisplayLanguage(locale28);
        java.util.Set<java.lang.Character> charSet56 = locale28.getExtensionKeys();
        java.lang.String str57 = dateTimeZone11.getName(4286870187L, locale28);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(ethiopicChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(ethiopicChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "402" + "'", str27, "402");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(ethiopicChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(ethiopicChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "24" + "'", str39, "24");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-14T14:51:49.577" + "'", str49, "2022-02-14T14:51:49.577");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-292275054" + "'", str52, "-292275054");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese" + "'", str54, "Chinese");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u6cd5\u6587" + "'", str55, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(charSet56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("JP");
        java.util.Locale.Builder builder5 = builder3.setVariant("51040001");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology10 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology10.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology15 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology15.clockhourOfDay();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = dateTimeField16.getAsText((long) 'a', locale18);
        java.lang.String str20 = dateTimeField12.getAsText((int) 'a', locale18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology22 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology22.clockhourOfDay();
        org.joda.time.DurationField durationField24 = ethiopicChronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology22.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = dateTimeField28.getAsText((long) 'a', locale30);
        int int32 = dateTimeField25.getMaximumTextLength(locale30);
        java.lang.String str33 = locale18.getDisplayCountry(locale30);
        java.util.Locale.Builder builder34 = builder8.setLocale(locale30);
        java.lang.String str37 = nameProvider7.getName(locale30, "2022-02-14T14:46:37.720", "2022-02-21T14:46:48.937");
        java.util.Locale.Builder builder38 = builder6.setLocale(locale30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder38.setLanguageTag("2022-02-21T14:51:26.001");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(ethiopicChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(ethiopicChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "24" + "'", str19, "24");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "97" + "'", str20, "97");
        org.junit.Assert.assertNotNull(ethiopicChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "24" + "'", str31, "24");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.yearOfCentury();
        java.lang.String str5 = ethiopicChronology1.toString();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "EthiopicChronology[+00:00:00.010]" + "'", str5, "EthiopicChronology[+00:00:00.010]");
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology14 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology14.dayOfWeek();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime19.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = ethiopicChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology27.secondOfDay();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology27);
        int int32 = localDateTime31.getDayOfYear();
        boolean boolean33 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology35 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology35.centuryOfEra();
        org.joda.time.DurationField durationField38 = ethiopicChronology35.millis();
        org.joda.time.DateTimeField dateTimeField39 = ethiopicChronology35.weekOfWeekyear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMillisOfSecond((int) (byte) 1);
        int int54 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property55 = localDateTime49.weekyear();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime49.minusMillis(2022);
        int[] intArray59 = ethiopicChronology35.get((org.joda.time.ReadablePartial) localDateTime49, (long) '#');
        int int60 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localDateTime31, intArray59);
        int int61 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime10.minus(readableDuration62);
        org.joda.time.Chronology chronology64 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime10.plusMinutes(8);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 52);
        boolean boolean69 = localDateTime66.isAfter((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.minus(readableDuration70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.plusDays(739);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusHours(941);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime79 = localDateTime73.withDate(329, 42, 540);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(ethiopicChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 113 + "'", int32 == 113);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1962, 4, 23, 45]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone4 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.monthOfYear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond(0);
        int int14 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = localDateTime9.toString("2022-02-14T14:50:15.412");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffset(4286820372L);
        java.lang.String str3 = dateTimeZone0.toString();
        int int5 = dateTimeZone0.getOffsetFromLocal(53049600000L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        int int21 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        int int25 = localDateTime24.getEra();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.secondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime24.getFieldTypes();
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.centuryOfEra();
        java.util.Locale locale32 = new java.util.Locale("2", "UTC", "2022-02-14T14:46:47.622");
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = locale33.getScript();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology36 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology36.clockhourOfDay();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = dateTimeField37.getAsText((long) 'a', locale39);
        java.lang.String str41 = locale33.getDisplayName(locale39);
        java.lang.String str42 = locale39.getISO3Language();
        boolean boolean43 = locale39.hasExtensions();
        java.util.Locale locale44 = locale39.stripExtensions();
        java.lang.String str45 = locale32.getDisplayName(locale44);
        int int46 = property28.getMaximumTextLength(locale44);
        java.lang.String str47 = locale44.getDisplayLanguage();
        java.lang.String str48 = dateTimeZone0.getName(292278993L, locale44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = locale44.getUnicodeLocaleType("2022-02-14T14:49:00.722");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-14T14:49:00.722");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals(locale32.toString(), "2_UTC_2022-02-14T14:46:47.622");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(ethiopicChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "24" + "'", str40, "24");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tedesco (Germania)" + "'", str41, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ita" + "'", str42, "ita");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2 (UTC,2022-02-14T14:46:47.622)" + "'", str45, "2 (UTC,2022-02-14T14:46:47.622)");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 7 + "'", int46 == 7);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Italian" + "'", str47, "Italian");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        java.util.Locale locale2 = new java.util.Locale("2022-02-14T14:49:39.071", "2022-02-14T14:50:07.083");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-14t14:49:39.071_2022-02-14T14:50:07.083");
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Set<java.lang.String> strSet1 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet1.clear();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone[] dateTimeZoneArray13 = new org.joda.time.DateTimeZone[] { dateTimeZone4, dateTimeZone6, dateTimeZone8, dateTimeZone10, dateTimeZone12 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray14 = strSet1.toArray(dateTimeZoneArray13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet1.spliterator();
        boolean boolean16 = strSet1.isEmpty();
        boolean boolean17 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet1);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        boolean boolean19 = strSet0.equals((java.lang.Object) builder18);
        strSet0.clear();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZoneArray13);
        org.junit.Assert.assertNotNull(dateTimeZoneArray14);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.weekyear();
        org.joda.time.DurationField durationField17 = property16.getLeapDurationField();
        boolean boolean19 = property16.equals((java.lang.Object) "2022-02-14T14:48:27.772");
        org.joda.time.LocalDateTime localDateTime21 = property16.addWrapFieldToCopy((-292266));
        boolean boolean22 = property16.isLeap();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("JP");
        java.lang.String[] strArray7 = new java.lang.String[] { "10", "UTC", "10", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        java.util.Iterator<java.lang.String> strItor10 = strSet8.iterator();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet8.parallelStream();
        java.lang.String str12 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Set<java.lang.String> strSet13 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet13.clear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone[] dateTimeZoneArray25 = new org.joda.time.DateTimeZone[] { dateTimeZone16, dateTimeZone18, dateTimeZone20, dateTimeZone22, dateTimeZone24 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray26 = strSet13.toArray(dateTimeZoneArray25);
        java.lang.String str27 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Collection<java.lang.String> strCollection31 = null;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection31);
        java.util.Collection<java.lang.String> strCollection33 = null;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Collection<java.lang.String> strCollection38 = null;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strCollection38);
        java.util.Collection<java.lang.String> strCollection40 = null;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strCollection40);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection40, filteringMode42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Collection<java.lang.String> strCollection47 = null;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strCollection47);
        java.util.Collection<java.lang.String> strCollection49 = null;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strCollection49);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Collection<java.lang.String> strCollection54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, strCollection54);
        java.util.Collection<java.lang.String> strCollection56 = null;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, strCollection56);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strCollection56, filteringMode58);
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        boolean boolean61 = locale60.hasExtensions();
        java.util.Locale locale62 = java.util.Locale.TAIWAN;
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology67 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = ethiopicChronology67.clockhourOfDay();
        org.joda.time.DurationField durationField69 = ethiopicChronology67.weekyears();
        org.joda.time.DateTimeField dateTimeField70 = ethiopicChronology67.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology72 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField73 = ethiopicChronology72.clockhourOfDay();
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = dateTimeField73.getAsText((long) 'a', locale75);
        int int77 = dateTimeField70.getMaximumTextLength(locale75);
        java.util.Locale[] localeArray78 = new java.util.Locale[] { locale60, locale62, locale63, locale64, locale65, locale75 };
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList81, filteringMode82);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList83);
        java.util.Set<java.lang.String> strSet85 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Set<java.lang.String> strSet86 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean87 = strSet85.addAll((java.util.Collection<java.lang.String>) strSet86);
        java.lang.Object[] objArray88 = strSet86.toArray();
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet86);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZoneArray25);
        org.junit.Assert.assertNotNull(dateTimeZoneArray26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode42.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode58.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(ethiopicChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(ethiopicChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "24" + "'", str76, "24");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        int int26 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMinimumValue();
        int int30 = localDateTime29.getEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.secondOfMinute();
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        boolean boolean34 = localDateTime5.isSupported(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.era();
        int int6 = dateTimeField4.get((long) 11);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("weekyear");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology8 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology8.millisOfSecond();
        org.joda.time.DurationField durationField14 = ethiopicChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology8.yearOfEra();
        boolean boolean16 = languageRange1.equals((java.lang.Object) ethiopicChronology8);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(ethiopicChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(4286831624L, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.DurationField durationField8 = property6.getDurationField();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfDay((int) (byte) 0);
        int int14 = localDateTime13.getYear();
        int int15 = localDateTime13.getEra();
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withMillisOfSecond(16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusWeeks((int) (byte) 10);
        int int37 = localDateTime36.getMillisOfSecond();
        int int38 = localDateTime36.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType41 = null;
        boolean boolean42 = localDateTime36.isSupported(durationFieldType41);
        org.joda.time.DateTime dateTime43 = localDateTime36.toDateTime();
        boolean boolean44 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime43);
        java.lang.String str45 = dateTime28.toString();
        org.joda.time.DateTime dateTime46 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.plusWeeks((int) (byte) 10);
        int int65 = localDateTime64.getMillisOfSecond();
        int int66 = localDateTime64.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType69 = null;
        boolean boolean70 = localDateTime64.isSupported(durationFieldType69);
        org.joda.time.DateTime dateTime71 = localDateTime64.toDateTime();
        boolean boolean72 = dateTime56.isAfter((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Instant instant73 = dateTime56.toInstant();
        boolean boolean74 = dateTime46.isBefore((org.joda.time.ReadableInstant) instant73);
        int int75 = property6.getDifference((org.joda.time.ReadableInstant) instant73);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 104 + "'", int37 == 104);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 104 + "'", int38 == 104);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2000-02-21T14:51:50.104+00:00:00.010" + "'", str45, "2000-02-21T14:51:50.104+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 104 + "'", int65 == 104);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 104 + "'", int66 == 104);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-30) + "'", int75 == (-30));
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.Chronology chronology9 = ethiopicChronology1.withZone(dateTimeZone8);
        boolean boolean11 = dateTimeZone8.equals((java.lang.Object) "DurationField[weekyears]");
        java.lang.String str13 = dateTimeZone8.getName(4286821090L);
        java.util.TimeZone timeZone14 = dateTimeZone8.toTimeZone();
        int int16 = dateTimeZone8.getStandardOffset((-292271624L));
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(4121785, (int) '#', 436, 987, 990);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 987 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        long long6 = ethiopicChronology1.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.years();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DurationField durationField12 = ethiopicChronology1.hours();
        org.joda.time.DurationField durationField13 = ethiopicChronology1.weekyears();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3430L + "'", long6 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        int int11 = localDateTime9.getYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMillis(51044001);
        org.joda.time.DateTimeField dateTimeField25 = localDateTime20.getField((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minus(readableDuration26);
        int int28 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        int int29 = localDateTime27.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology31 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = ethiopicChronology31.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology31.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology31.centuryOfEra();
        org.joda.time.DurationField durationField36 = ethiopicChronology31.months();
        org.joda.time.DurationFieldType durationFieldType37 = durationField36.getType();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime27.withFieldAdded(durationFieldType37, 53323040);
        int int40 = localDateTime27.getDayOfWeek();
        int int41 = localDateTime27.getDayOfMonth();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(ethiopicChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 21 + "'", int41 == 21);
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfDay((int) (byte) 0);
        int int15 = localDateTime14.getYear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundFloorCopy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        int int32 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfCeilingCopy();
        int int36 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime35);
        int int38 = localDateTime37.getDayOfYear();
        int int39 = localDateTime37.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.withPeriodAdded(readablePeriod40, 962);
        int int43 = localDateTime37.getYear();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime37.plus(readablePeriod44);
        int int46 = property4.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withEra(0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusWeeks((int) (byte) 10);
        int int27 = localDateTime26.getMillisOfSecond();
        int int28 = localDateTime26.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType31 = null;
        boolean boolean32 = localDateTime26.isSupported(durationFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekOfWeekyear();
        java.lang.String str38 = property37.getAsText();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.centuryOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        boolean boolean56 = locale55.hasExtensions();
        boolean boolean57 = dateTime54.equals((java.lang.Object) locale55);
        int int58 = property44.getDifference((org.joda.time.ReadableInstant) dateTime54);
        int int59 = property37.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime61.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.weekyear();
        org.joda.time.LocalDateTime localDateTime70 = property68.setCopy((int) (byte) 1);
        long long71 = property68.remainder();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime73.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime79.toDateTime(readableInstant80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.millisOfDay();
        int int83 = property68.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        boolean boolean85 = property68.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property68.getFieldType();
        boolean boolean87 = dateTime54.isSupported(dateTimeFieldType86);
        boolean boolean88 = localDateTime26.isSupported(dateTimeFieldType86);
        int int89 = localDateTime18.get(dateTimeFieldType86);
        int int90 = localDateTime18.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 463 + "'", int27 == 463);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 463 + "'", int28 == 463);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "7" + "'", str38, "7");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 4287110463L + "'", long71 == 4287110463L);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-2022) + "'", int89 == (-2022));
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 51 + "'", int90 == 51);
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.monthOfYear();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        java.util.Locale locale16 = new java.util.Locale("53196316");
        java.lang.String str17 = locale16.getDisplayVariant();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        java.lang.String str20 = locale16.getDisplayName(locale18);
        java.lang.String str23 = nameProvider12.getName(locale18, "2000-01-03T00:10:19.000Z", "");
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale locale25 = builder24.build();
        java.lang.String str28 = nameProvider12.getShortName(locale25, "seconds", "2022-02-14T14:46:56.225");
        int int29 = property11.getMaximumShortTextLength(locale25);
        org.joda.time.DurationField durationField30 = property11.getDurationField();
        org.joda.time.DateTimeField dateTimeField31 = property11.getField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertEquals(locale16.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "53196316" + "'", str20, "53196316");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.centuries();
        int int9 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMonths(999);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear(614);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plus(readableDuration28);
        long long31 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime25, 4286860932L);
        org.joda.time.DurationField durationField32 = ethiopicChronology1.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = ethiopicChronology1.getDateTimeMillis(129, 51038406, 53481083, 116, 51018001, 574, 863);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 116 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3820920710783L + "'", long31 == 3820920710783L);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        int int11 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusDays(446);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology15 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology15.clockhourOfDay();
        org.joda.time.DurationField durationField17 = ethiopicChronology15.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology15.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology20 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = ethiopicChronology20.clockhourOfDay();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = dateTimeField21.getAsText((long) 'a', locale23);
        int int25 = dateTimeField18.getMaximumTextLength(locale23);
        int int27 = dateTimeField18.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.centuryOfEra();
        java.lang.String str34 = localDateTime31.toString();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, (-292275054), locale36);
        java.lang.String str38 = localDateTime31.toString();
        java.lang.String str39 = localDateTime31.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.minusDays(100);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime45.withYearOfCentury((int) (short) 1);
        int int54 = localDateTime45.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = localDateTime45.getFieldType(0);
        int int57 = localDateTime31.get(dateTimeFieldType56);
        boolean boolean58 = localDateTime9.isSupported(dateTimeFieldType56);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime9.plus(readableDuration59);
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        java.lang.String str63 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, locale61);
        java.util.Set<java.lang.String> strSet64 = locale61.getUnicodeLocaleKeys();
        java.lang.Object[] objArray65 = strSet64.toArray();
        strSet64.clear();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(ethiopicChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(ethiopicChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "24" + "'", str24, "24");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-14T14:51:50.857" + "'", str34, "2022-02-14T14:51:50.857");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-292275054" + "'", str37, "-292275054");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-14T14:51:50.857" + "'", str38, "2022-02-14T14:51:50.857");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-14T14:51:50.857" + "'", str39, "2022-02-14T14:51:50.857");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "14" + "'", str63, "14");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.DateTimeZone dateTimeZone7 = ethiopicChronology2.getZone();
        long long11 = ethiopicChronology2.add(185L, (long) (-292266), 1);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology2.hourOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-292081L) + "'", long11 == (-292081L));
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.yearOfEra();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.weekyear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = ethiopicChronology1.get(readablePeriod12, (long) 51059001);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.year();
        org.joda.time.DateTimeZone dateTimeZone9 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField11 = ethiopicChronology1.halfdays();
        org.joda.time.DurationField durationField12 = ethiopicChronology1.years();
        org.joda.time.DurationField durationField13 = ethiopicChronology1.seconds();
        int int16 = durationField13.getDifference(1888152682925L, 1888152559001L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 123 + "'", int16 == 123);
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        int int5 = localDateTime3.getYear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusMillis(51044001);
        org.joda.time.DateTimeField dateTimeField19 = localDateTime14.getField((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology21.clockhourOfDay();
        org.joda.time.DurationField durationField23 = ethiopicChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = ethiopicChronology21.hourOfHalfday();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology30 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology30.dayOfMonth();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.lang.String str41 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime39, locale40);
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category28, locale40);
        java.util.Set<java.lang.String> strSet44 = locale40.getUnicodeLocaleKeys();
        int int45 = dateTimeField27.getMaximumShortTextLength(locale40);
        int int46 = dateTimeField19.getMaximumShortTextLength(locale40);
        java.lang.String str47 = locale40.getDisplayScript();
        java.lang.Object obj48 = locale40.clone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(ethiopicChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "zh_CN");
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        int int5 = dateTimeField2.getMaximumValue((-29281166001471L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, 402);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays(46);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology20 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = ethiopicChronology20.clockhourOfDay();
        org.joda.time.DurationField durationField22 = ethiopicChronology20.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology20.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = ethiopicChronology20.getZone();
        org.joda.time.Chronology chronology25 = ethiopicChronology20.withUTC();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = ethiopicChronology27.getZone();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology27);
        org.joda.time.DurationField durationField33 = ethiopicChronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology27.hourOfHalfday();
        org.joda.time.DurationField durationField35 = ethiopicChronology27.hours();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str39 = dateTimeZone37.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone37);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone42);
        boolean boolean46 = localDateTime40.isEqual((org.joda.time.ReadablePartial) localDateTime45);
        int[] intArray48 = ethiopicChronology27.get((org.joda.time.ReadablePartial) localDateTime45, (long) 30);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.hourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology50.centuryOfEra();
        org.joda.time.DurationField durationField53 = ethiopicChronology50.millis();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology50.weekOfWeekyear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.withMillisOfSecond((int) (byte) 1);
        int int69 = localDateTime56.compareTo((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime.Property property70 = localDateTime64.weekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime64.minusMillis(2022);
        int[] intArray74 = ethiopicChronology50.get((org.joda.time.ReadablePartial) localDateTime64, (long) '#');
        ethiopicChronology20.validate((org.joda.time.ReadablePartial) localDateTime45, intArray74);
        int int76 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDateTime18, intArray74);
        int int77 = localDateTime18.getWeekyear();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(ethiopicChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(ethiopicChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(intArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1962, 4, 23, 45]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 24 + "'", int76 == 24);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        java.lang.String[] strArray5 = new java.lang.String[] { "10", "UTC", "10", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet6.stream();
        boolean boolean11 = strSet6.add("2022-02-14T14:48:08.159");
        int int12 = strSet6.size();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.Interval interval9 = property8.toInterval();
        java.lang.String str10 = property8.toString();
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale12.getCountry();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime15 = property8.setCopy("-292275054", locale12);
        java.lang.String str16 = property8.getAsText();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology18 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Chronology chronology22 = ethiopicChronology18.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        boolean boolean24 = property8.equals((java.lang.Object) chronology22);
        org.joda.time.LocalDateTime localDateTime25 = property8.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField26 = property8.getField();
        org.joda.time.DurationField durationField27 = property8.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[weekyear]" + "'", str10, "Property[weekyear]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CA" + "'", str13, "CA");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2000" + "'", str16, "2000");
        org.junit.Assert.assertNotNull(ethiopicChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNull(durationField27);
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2000-01-03T00:10:19.000Z");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology5 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology5.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = ethiopicChronology5.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology5.millisOfSecond();
        long long13 = dateTimeField10.add((long) 100, 955);
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale15.getScript();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology18 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology18.clockhourOfDay();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = dateTimeField19.getAsText((long) 'a', locale21);
        java.lang.String str23 = locale15.getDisplayName(locale21);
        java.lang.String str24 = locale21.getISO3Language();
        boolean boolean25 = locale21.hasExtensions();
        java.lang.String str26 = dateTimeField10.getAsShortText((int) (short) 1, locale21);
        java.lang.String str27 = dateTimeZone2.getShortName(4286865441L, locale21);
        long long29 = dateTimeZone2.previousTransition(1888152637897L);
        java.lang.String str31 = dateTimeZone2.getName((long) 70);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(ethiopicChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1055L + "'", long13 == 1055L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(ethiopicChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "24" + "'", str22, "24");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tedesco (Germania)" + "'", str23, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ita" + "'", str24, "ita");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1888152637897L + "'", long29 == 1888152637897L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2000-01-03T00:10:19.000Z");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        int int18 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime22 = property20.withMinimumValue();
        boolean boolean23 = dateTimeZone2.equals((java.lang.Object) localDateTime22);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Italian");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology6 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology6.clockhourOfDay();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = dateTimeField7.getAsText((long) 'a', locale9);
        int int11 = dateTimeField4.getMaximumTextLength(locale9);
        int int13 = dateTimeField4.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.centuryOfEra();
        java.lang.String str20 = localDateTime17.toString();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, (-292275054), locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        boolean boolean26 = strSet24.equals((java.lang.Object) "62");
        java.util.Spliterator<java.lang.String> strSpliterator27 = strSet24.spliterator();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(ethiopicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "24" + "'", str10, "24");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-14T14:51:51.284" + "'", str20, "2022-02-14T14:51:51.284");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-292275054" + "'", str23, "-292275054");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSpliterator27);
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-14T14:51:50.857", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-14t14:51:50.857");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.clockhourOfHalfday();
        int int15 = dateTimeField12.getDifference((long) 243, 35822873962L);
        int int17 = dateTimeField12.get(4286894272L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-9950) + "'", int15 == (-9950));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.Chronology chronology9 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.era();
        org.joda.time.Chronology chronology14 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = ethiopicChronology1.getZone();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfWeek();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.minuteOfDay();
        int int9 = dateTimeField8.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1439 + "'", int9 == 1439);
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.weekyearOfCentury();
        long long10 = ethiopicChronology1.add((long) 10, (long) 2, 2);
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = ethiopicChronology1.getDateTimeMillis(1193583021848L, 284, 152, 270, 105);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 284 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 14L + "'", long10 == 14L);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        int[] intArray16 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime13, 0L);
        int int17 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology1.clockhourOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1962, 4, 23, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(4286800429L, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long17 = dateTimeZone15.convertUTCToLocal((long) (short) 1);
        long long19 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, 3490L);
        org.joda.time.Chronology chronology20 = ethiopicChronology1.withZone(dateTimeZone10);
        int int22 = dateTimeZone10.getStandardOffset(4286860932L);
        long long26 = dateTimeZone10.convertLocalToUTC(3061497600000L, true, 4286894906L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 11L + "'", long17 == 11L);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3490L + "'", long19 == 3490L);
        org.junit.Assert.assertNotNull(chronology20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3061497599990L + "'", long26 == 3061497599990L);
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minus(readablePeriod3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime4.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusWeeks(24);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plus(readableDuration9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime4.year();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T14:51:51.919" + "'", str6, "2022-02-21T14:51:51.919");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.Chronology chronology9 = ethiopicChronology1.withUTC();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.days();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = ethiopicChronology1.add(readablePeriod11, (long) 278, (-292269338));
        java.lang.String str15 = ethiopicChronology1.toString();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology1.hourOfDay();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale locale20 = builder19.build();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = dateTimeField16.set(1888152401095L, "2022-02-21T14:47:14.175", locale20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:47:14.175\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 278L + "'", long14 == 278L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EthiopicChronology[+00:00:00.010]" + "'", str15, "EthiopicChronology[+00:00:00.010]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        long long6 = ethiopicChronology1.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.weekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfSecond((int) (byte) 1);
        int int23 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.weekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.minusYears(999);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.plus(readableDuration28);
        org.joda.time.Chronology chronology30 = localDateTime18.getChronology();
        int[] intArray32 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime18, 0L);
        org.joda.time.DateTimeField dateTimeField33 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology36 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology36.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = ethiopicChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology36.millisOfSecond();
        org.joda.time.DurationField durationField42 = ethiopicChronology36.hours();
        org.joda.time.DateTimeField dateTimeField43 = ethiopicChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology36.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone46 = ethiopicChronology36.getZone();
        long long48 = dateTimeZone34.getMillisKeepLocal(dateTimeZone46, 1894287084809L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3430L + "'", long6 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1962, 4, 23, 10]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(ethiopicChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1894287084809L + "'", long48 == 1894287084809L);
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.centuries();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekOfWeekyear();
        int int14 = localDateTime12.getYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withCenturyOfEra(595);
        long long27 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime25, (long) 244);
        long long31 = ethiopicChronology1.add(4286864520L, (long) (short) 1, 734);
        org.joda.time.DurationField durationField32 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField33 = ethiopicChronology1.years();
        // The following exception was thrown during execution in test generation
        try {
            long long38 = ethiopicChronology1.getDateTimeMillis(53381664, 373, 561, 53381664);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 373 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1816450152711963L + "'", long27 == 1816450152711963L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4286865254L + "'", long31 == 4286865254L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField11 = ethiopicChronology1.minutes();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("German (Germany)", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        java.util.Locale locale2 = new java.util.Locale("627", "53280");
        org.junit.Assert.assertEquals(locale2.toString(), "627_53280");
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minusYears(999);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusMinutes(51040001);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears((-22));
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusSeconds(22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusMonths(55);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfSecond((int) (byte) 1);
        int int43 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        int int44 = localDateTime30.getMinuteOfHour();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.minusDays(100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology58 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = ethiopicChronology58.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology58.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone61 = ethiopicChronology58.getZone();
        org.joda.time.DateTime dateTime62 = localDateTime50.toDateTime(dateTimeZone61);
        int int63 = localDateTime50.getCenturyOfEra();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(chronology64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime69.minusDays(100);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime69.withYearOfCentury((int) (short) 1);
        int int78 = localDateTime69.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = localDateTime69.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime50.withField(dateTimeFieldType80, 225);
        int int83 = localDateTime30.get(dateTimeFieldType80);
        int int84 = localDateTime24.indexOf(dateTimeFieldType80);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime24.plusDays(352);
        org.joda.time.LocalDateTime.Property property87 = localDateTime24.yearOfCentury();
        int int88 = property87.get();
        int int89 = property87.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 51 + "'", int44 == 51);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(ethiopicChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 20 + "'", int63 == 20);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2022 + "'", int83 == 2022);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 48 + "'", int88 == 48);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology1.dayOfYear();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMinutes(1);
        int int5 = localDateTime1.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusWeeks(994);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        int int22 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property23 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minusYears(999);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusMinutes(51040001);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime7.plusMinutes(940);
        int int34 = localDateTime33.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        int int5 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.monthOfYear();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        int int9 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology10 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology12 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology12.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = ethiopicChronology12.getZone();
        org.joda.time.Chronology chronology19 = ethiopicChronology1.withZone(dateTimeZone18);
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology23 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology23.clockhourOfDay();
        org.joda.time.DurationField durationField25 = ethiopicChronology23.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology23.clockhourOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) -1);
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.lang.String str33 = locale32.getScript();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology35 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology35.clockhourOfDay();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = dateTimeField36.getAsText((long) 'a', locale38);
        java.lang.String str40 = locale32.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, (int) ' ', locale38);
        java.lang.String str42 = locale21.getDisplayName(locale38);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology44 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology44.clockhourOfDay();
        org.joda.time.DurationField durationField46 = ethiopicChronology44.weekyears();
        org.joda.time.DurationField durationField47 = ethiopicChronology44.centuries();
        org.joda.time.DateTimeField dateTimeField48 = ethiopicChronology44.weekyear();
        int int49 = dateTimeField48.getMinimumValue();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withMillisOfSecond((int) (byte) 1);
        int int64 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime.Property property65 = localDateTime59.weekyear();
        org.joda.time.LocalDateTime.Property property66 = localDateTime59.millisOfDay();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime68.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        boolean boolean78 = locale77.hasExtensions();
        boolean boolean79 = dateTime76.equals((java.lang.Object) locale77);
        java.lang.String str80 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) localDateTime59, locale77);
        java.lang.String str81 = locale77.getDisplayCountry();
        java.lang.String str82 = locale77.getLanguage();
        java.lang.String str83 = locale21.getDisplayScript(locale77);
        java.lang.String str84 = locale21.getISO3Country();
        java.lang.String str85 = dateTimeZone18.getName((long) 812, locale21);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(ethiopicChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(ethiopicChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(ethiopicChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "24" + "'", str39, "24");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tedesco (Germania)" + "'", str40, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32" + "'", str41, "32");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tedesco (Germania)" + "'", str42, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(ethiopicChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-292269338) + "'", int49 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022" + "'", str80, "2022");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u5fb7\u56fd" + "'", str81, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "de" + "'", str82, "de");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "DEU" + "'", str84, "DEU");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00:00.010" + "'", str85, "+00:00:00.010");
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(49);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMillisOfSecond((int) (byte) 1);
        int int46 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property47 = localDateTime41.weekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime41.minusYears(999);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.minusMinutes(51040001);
        int int55 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = property8.addToCopy((int) (short) 10);
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("2022-02-14T14:46:42.333");
        java.lang.String str60 = locale59.toLanguageTag();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology62 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = ethiopicChronology62.hourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = ethiopicChronology62.halfdayOfDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = localDateTime66.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.dayOfWeek();
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.lang.String str74 = locale73.getScript();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology76 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField77 = ethiopicChronology76.clockhourOfDay();
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        java.lang.String str80 = dateTimeField77.getAsText((long) 'a', locale79);
        java.lang.String str81 = locale73.getDisplayName(locale79);
        java.lang.String str82 = dateTimeField64.getAsText((org.joda.time.ReadablePartial) localDateTime69, locale79);
        java.lang.String str83 = locale59.getDisplayLanguage(locale79);
        java.lang.String str84 = property8.getAsShortText(locale59);
        java.util.Locale.setDefault(locale59);
        java.lang.String str86 = locale59.getDisplayLanguage();
        java.lang.String str87 = locale59.getDisplayCountry();
        boolean boolean88 = locale59.hasExtensions();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287112247L + "'", long11 == 4287112247L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "und" + "'", str60, "und");
        org.junit.Assert.assertNotNull(ethiopicChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(ethiopicChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "24" + "'", str80, "24");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tedesco (Germania)" + "'", str81, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2000" + "'", str84, "2000");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Set<java.lang.String> strSet1 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet1.clear();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone[] dateTimeZoneArray13 = new org.joda.time.DateTimeZone[] { dateTimeZone4, dateTimeZone6, dateTimeZone8, dateTimeZone10, dateTimeZone12 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray14 = strSet1.toArray(dateTimeZoneArray13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet1.spliterator();
        boolean boolean16 = strSet1.isEmpty();
        boolean boolean17 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology19 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology19.hourOfDay();
        org.joda.time.DurationField durationField21 = ethiopicChronology19.eras();
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology19.weekOfWeekyear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.weekOfWeekyear();
        int int28 = localDateTime26.getYear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology30 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology30.dayOfMonth();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.lang.String str41 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime39, locale40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime43, 2022, locale49);
        java.lang.String str51 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime26, locale49);
        java.lang.String str52 = locale49.getISO3Language();
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleKeys();
        boolean boolean54 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet53);
        java.util.Iterator<java.lang.String> strItor55 = strSet0.iterator();
        java.lang.Object[] objArray56 = strSet0.toArray();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZoneArray13);
        org.junit.Assert.assertNotNull(dateTimeZoneArray14);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(ethiopicChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(ethiopicChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022" + "'", str50, "2022");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "7" + "'", str51, "7");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "jpn" + "'", str52, "jpn");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.year();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DurationField durationField12 = ethiopicChronology1.hours();
        org.joda.time.DurationField durationField13 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology1.dayOfYear();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet0.clear();
        java.util.Set<java.lang.String> strSet2 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet3.clear();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone[] dateTimeZoneArray15 = new org.joda.time.DateTimeZone[] { dateTimeZone6, dateTimeZone8, dateTimeZone10, dateTimeZone12, dateTimeZone14 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray16 = strSet3.toArray(dateTimeZoneArray15);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet3.spliterator();
        boolean boolean18 = strSet3.isEmpty();
        boolean boolean19 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet3);
        strSet2.clear();
        strSet2.clear();
        java.util.Set<java.lang.String> strSet22 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet22.clear();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone[] dateTimeZoneArray34 = new org.joda.time.DateTimeZone[] { dateTimeZone25, dateTimeZone27, dateTimeZone29, dateTimeZone31, dateTimeZone33 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray35 = strSet22.toArray(dateTimeZoneArray34);
        java.util.Spliterator<java.lang.String> strSpliterator36 = strSet22.spliterator();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        boolean boolean48 = locale47.hasExtensions();
        boolean boolean49 = dateTime46.equals((java.lang.Object) locale47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Collection<java.lang.String> strCollection53 = null;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, strCollection53);
        java.util.Collection<java.lang.String> strCollection55 = null;
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, strCollection55);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Collection<java.lang.String> strCollection60 = null;
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, strCollection60);
        java.util.Collection<java.lang.String> strCollection62 = null;
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, strCollection62);
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, strCollection62, filteringMode64);
        boolean boolean66 = dateTime46.equals((java.lang.Object) languageRangeList51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.centuryOfEra();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(chronology73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime74.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localDateTime80.toDateTime(readableInstant81);
        java.util.Locale locale83 = java.util.Locale.GERMANY;
        boolean boolean84 = locale83.hasExtensions();
        boolean boolean85 = dateTime82.equals((java.lang.Object) locale83);
        int int86 = property72.getDifference((org.joda.time.ReadableInstant) dateTime82);
        int int87 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        boolean boolean89 = dateTime82.isSupported(dateTimeFieldType88);
        java.util.Set<java.lang.String> strSet90 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet90.clear();
        java.lang.Object[] objArray92 = strSet90.toArray();
        boolean boolean93 = dateTime82.equals((java.lang.Object) strSet90);
        boolean boolean94 = strSet22.removeAll((java.util.Collection<java.lang.String>) strSet90);
        boolean boolean95 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet90);
        boolean boolean96 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet2);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZoneArray15);
        org.junit.Assert.assertNotNull(dateTimeZoneArray16);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZoneArray34);
        org.junit.Assert.assertNotNull(dateTimeZoneArray35);
        org.junit.Assert.assertNotNull(strSpliterator36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode64.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime8.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology13 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField15 = ethiopicChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = ethiopicChronology13.getZone();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology13);
        org.joda.time.DurationField durationField19 = ethiopicChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField21 = ethiopicChronology13.hours();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone23);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str30 = dateTimeZone28.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone28);
        boolean boolean32 = localDateTime26.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        int[] intArray34 = ethiopicChronology13.get((org.joda.time.ReadablePartial) localDateTime31, (long) 30);
        ethiopicChronology1.validate((org.joda.time.ReadablePartial) localDateTime11, intArray34);
        org.joda.time.DurationField durationField36 = ethiopicChronology1.weeks();
        long long40 = ethiopicChronology1.add(51043991L, 4286893460L, 0);
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField42 = ethiopicChronology1.halfdayOfDay();
        java.lang.String str43 = ethiopicChronology1.toString();
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology1.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long52 = ethiopicChronology1.getDateTimeMillis(163, 644, 966, 469, 0, 24, 475);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 469 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(ethiopicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 51043991L + "'", long40 == 51043991L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "EthiopicChronology[+00:00:00.010]" + "'", str43, "EthiopicChronology[+00:00:00.010]");
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("feb");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "feb");
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        int int8 = dateTimeField7.getMinimumValue();
        long long10 = dateTimeField7.roundCeiling(162220114055281L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 162220114799990L + "'", long10 == 162220114799990L);
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = property8.roundFloorCopy();
        org.joda.time.Interval interval12 = property8.toInterval();
        long long13 = property8.remainder();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDayOfWeek((-776));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -776 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(interval12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4287112727L + "'", long13 == 4287112727L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.Chronology chronology9 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = ethiopicChronology1.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology1.dayOfYear();
        long long17 = dateTimeField14.set(1624738400828L, 249);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1621282400828L + "'", long17 == 1621282400828L);
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Italian");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("UTC");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder5.setVariant("2022-02-14T14:51:41.221");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-14T14:51:41.221 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2000-01-03T00:10:19.000Z");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        boolean boolean4 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology17 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology17.secondOfDay();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology17);
        int int22 = localDateTime21.getDayOfYear();
        boolean boolean23 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime21);
        int int24 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property25 = localDateTime14.weekyear();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = property25.getDifference(readableInstant26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekOfWeekyear();
        int int33 = localDateTime31.getYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusMillis(51044001);
        org.joda.time.DateTimeField dateTimeField47 = localDateTime42.getField((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfDay();
        org.joda.time.DurationField durationField51 = ethiopicChronology49.weekyears();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology49.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology49.hourOfHalfday();
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology58 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = ethiopicChronology58.dayOfMonth();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime61.plusWeeks((int) (byte) 10);
        java.util.Locale locale68 = java.util.Locale.PRC;
        java.lang.String str69 = dateTimeField59.getAsText((org.joda.time.ReadablePartial) localDateTime67, locale68);
        java.util.Set<java.lang.String> strSet70 = locale68.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category56, locale68);
        java.util.Set<java.lang.String> strSet72 = locale68.getUnicodeLocaleKeys();
        int int73 = dateTimeField55.getMaximumShortTextLength(locale68);
        int int74 = dateTimeField47.getMaximumShortTextLength(locale68);
        java.util.Locale locale75 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str76 = locale75.toLanguageTag();
        java.lang.String str77 = locale68.getDisplayScript(locale75);
        java.lang.String str78 = property25.getAsShortText(locale68);
        java.lang.String str79 = timeZone1.getDisplayName(true, 0, locale68);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(ethiopicChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 113 + "'", int22 == 113);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2" + "'", str69, "2");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "zh-TW" + "'", str76, "zh-TW");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022" + "'", str78, "2022");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "GMT" + "'", str79, "GMT");
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.dayOfMonth();
        int int4 = dateTimeField2.getMaximumValue(4286791308L);
        org.joda.time.DurationField durationField5 = dateTimeField2.getLeapDurationField();
        long long7 = dateTimeField2.roundHalfCeiling((long) 284);
        long long9 = dateTimeField2.remainder((long) 849);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 30 + "'", int4 == 30);
        org.junit.Assert.assertNull(durationField5);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-10L) + "'", long7 == (-10L));
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 859L + "'", long9 == 859L);
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.year();
        org.joda.time.DateTimeZone dateTimeZone9 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.millis();
        org.joda.time.DateTimeZone dateTimeZone11 = ethiopicChronology1.getZone();
        boolean boolean13 = dateTimeZone11.isStandardOffset(1888451328001L);
        boolean boolean15 = dateTimeZone11.isStandardOffset(4286877944L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        long long7 = durationField4.getDifferenceAsLong(4286795973L, (long) 313);
        int int10 = durationField4.getValue(60480000000L, (long) 302);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1190L + "'", long7 == 1190L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16800 + "'", int10 == 16800);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstance();
        org.joda.time.DurationField durationField1 = ethiopicChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.DateTimeZone dateTimeZone9 = ethiopicChronology1.getZone();
        long long13 = ethiopicChronology1.add(4286795973L, (long) 51013001, 13);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4949964986L + "'", long13 == 4949964986L);
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-05-02T14:51:09.940", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-05-02t14:51:09.940");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("Property[monthOfYear]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weeks();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.days();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        int int6 = dateTimeField5.getMinimumValue();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        int int21 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        boolean boolean35 = locale34.hasExtensions();
        boolean boolean36 = dateTime33.equals((java.lang.Object) locale34);
        java.lang.String str37 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime16.minus(readableDuration38);
        int int40 = localDateTime16.getMinuteOfHour();
        int int41 = localDateTime16.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property42 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property43 = localDateTime16.millisOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292269338) + "'", int6 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 51 + "'", int40 == 51);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(4286831624L, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra(614);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = localDateTime5.getValue(845);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 845");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(4286800429L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long9 = dateTimeZone7.convertUTCToLocal((long) (short) 1);
        long long11 = dateTimeZone2.getMillisKeepLocal(dateTimeZone7, 3490L);
        long long13 = dateTimeZone2.convertUTCToLocal((-1934668800000L));
        java.lang.String str15 = dateTimeZone2.getNameKey(2805806L);
        java.util.TimeZone timeZone16 = dateTimeZone2.toTimeZone();
        java.lang.String str17 = timeZone16.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology19 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = ethiopicChronology19.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology24 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology24.clockhourOfDay();
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = dateTimeField25.getAsText((long) 'a', locale27);
        java.lang.String str29 = dateTimeField21.getAsText((int) 'a', locale27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology31 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology31.clockhourOfDay();
        org.joda.time.DurationField durationField33 = ethiopicChronology31.weekyears();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology31.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology36 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology36.clockhourOfDay();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = dateTimeField37.getAsText((long) 'a', locale39);
        int int41 = dateTimeField34.getMaximumTextLength(locale39);
        java.lang.String str42 = locale27.getDisplayCountry(locale39);
        java.lang.String str43 = timeZone16.getDisplayName(locale27);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3490L + "'", long11 == 3490L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1934668799990L) + "'", long13 == (-1934668799990L));
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(ethiopicChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(ethiopicChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "24" + "'", str28, "24");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "97" + "'", str29, "97");
        org.junit.Assert.assertNotNull(ethiopicChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(ethiopicChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "24" + "'", str40, "24");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "GMT+00:00" + "'", str43, "GMT+00:00");
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(619);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.getLocalDateTime();
        int[] intArray17 = localDateTime16.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime16.getFieldTypes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.weekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusYears((int) (short) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMillisOfSecond((int) (byte) 1);
        int int44 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property45 = localDateTime39.weekyear();
        org.joda.time.LocalDateTime.Property property46 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime39.minusYears(999);
        int int49 = localDateTime39.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime39.plusMillis(955);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology53 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology53.clockhourOfDay();
        long long58 = ethiopicChronology53.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField59 = ethiopicChronology53.clockhourOfHalfday();
        org.joda.time.DurationField durationField60 = ethiopicChronology53.weekyears();
        java.lang.String str61 = durationField60.toString();
        org.joda.time.DurationFieldType durationFieldType62 = durationField60.getType();
        boolean boolean63 = localDateTime51.isSupported(durationFieldType62);
        boolean boolean64 = localDateTime26.isSupported(durationFieldType62);
        boolean boolean65 = localDateTime16.isSupported(durationFieldType62);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime16.plusHours(53277846);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2000, 2, 21, 53513234]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(ethiopicChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3430L + "'", long58 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DurationField[weekyears]" + "'", str61, "DurationField[weekyears]");
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withYearOfEra(928);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.era();
        int int13 = property12.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property12.getFieldType();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 357 + "'", int8 == 357);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 357 + "'", int9 == 357);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        org.joda.time.DurationField durationField32 = ethiopicChronology27.halfdays();
        long long35 = durationField32.getDifferenceAsLong(4286891307L, 613L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287113400L + "'", long11 == 4287113400L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 99L + "'", long35 == 99L);
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(172, 53262991, 806, 177, 83322894, 53510001, 292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 177 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        long long21 = durationField18.subtract(3061497600000L, (long) 197);
        long long24 = durationField18.add(4286820218L, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology26 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = ethiopicChronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology26.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = ethiopicChronology26.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = ethiopicChronology26.year();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology26.minuteOfDay();
        org.joda.time.DurationField durationField35 = ethiopicChronology26.seconds();
        long long38 = durationField35.subtract((long) '#', 53049600000L);
        int int39 = durationField18.compareTo(durationField35);
        int int42 = durationField35.getDifference(4286884957L, 945L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3061497599803L + "'", long21 == 3061497599803L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4286820217L + "'", long24 == 4286820217L);
        org.junit.Assert.assertNotNull(ethiopicChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-53049599999965L) + "'", long38 == (-53049599999965L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4286884 + "'", int42 == 4286884);
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusYears((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis(491);
        int int13 = localDateTime10.getCenturyOfEra();
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.days();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.minutes();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(4286800429L, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long18 = dateTimeZone16.convertUTCToLocal((long) (short) 1);
        long long20 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, 3490L);
        org.joda.time.Chronology chronology21 = ethiopicChronology1.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime23.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMillisOfDay((int) (byte) 0);
        int int27 = localDateTime26.getYear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundFloorCopy();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMillisOfSecond((int) (byte) 1);
        int int44 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property45 = localDateTime39.weekyear();
        org.joda.time.LocalDateTime.Property property46 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfCeilingCopy();
        int int48 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.plusDays((-103));
        long long52 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime47, 4286883301L);
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField55 = ethiopicChronology1.centuries();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 11L + "'", long18 == 11L);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3490L + "'", long20 == 3490L);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1888152713478L + "'", long52 == 1888152713478L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DurationField durationField11 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField12 = ethiopicChronology1.years();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        int int5 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.monthOfYear();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.Chronology chronology10 = ethiopicChronology1.withUTC();
        org.joda.time.DurationField durationField11 = ethiopicChronology1.weekyears();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = ethiopicChronology1.getDateTimeMillis(0, 206, 355, 497, 245, 53237739, 51035001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 497 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2021-12-06T14:49:44.953", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfWeek();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        java.lang.String str11 = dateTimeField10.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfYear" + "'", str11, "dayOfYear");
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("dopo Cristo", (double) 4286915174L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4.286915174E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4287057720L);
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet0.clear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone[] dateTimeZoneArray12 = new org.joda.time.DateTimeZone[] { dateTimeZone3, dateTimeZone5, dateTimeZone7, dateTimeZone9, dateTimeZone11 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray13 = strSet0.toArray(dateTimeZoneArray12);
        boolean boolean15 = strSet0.remove((java.lang.Object) false);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Set<java.lang.String> strSet17 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet17.clear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone[] dateTimeZoneArray29 = new org.joda.time.DateTimeZone[] { dateTimeZone20, dateTimeZone22, dateTimeZone24, dateTimeZone26, dateTimeZone28 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray30 = strSet17.toArray(dateTimeZoneArray29);
        java.util.Spliterator<java.lang.String> strSpliterator31 = strSet17.spliterator();
        boolean boolean32 = strSet17.isEmpty();
        boolean boolean33 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet17);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        boolean boolean35 = strSet16.equals((java.lang.Object) builder34);
        boolean boolean36 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet16);
        java.util.Iterator<java.lang.String> strItor37 = strSet0.iterator();
        boolean boolean39 = strSet0.add("2022-02-14T14:46:37.492");
        java.util.Spliterator<java.lang.String> strSpliterator40 = strSet0.spliterator();
        int int41 = strSet0.size();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.minusMonths((int) ' ');
        boolean boolean51 = strSet0.equals((java.lang.Object) localDateTime50);
        org.joda.time.Chronology chronology52 = localDateTime50.getChronology();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZoneArray12);
        org.junit.Assert.assertNotNull(dateTimeZoneArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZoneArray29);
        org.junit.Assert.assertNotNull(dateTimeZoneArray30);
        org.junit.Assert.assertNotNull(strSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DurationField durationField9 = dateTimeField8.getRangeDurationField();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        int int24 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime19.minusYears(999);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime19.plus(readableDuration29);
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = property32.addWrapFieldToCopy(595);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology36 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology36.clockhourOfDay();
        org.joda.time.DurationField durationField38 = ethiopicChronology36.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = ethiopicChronology36.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = ethiopicChronology36.getZone();
        org.joda.time.DurationField durationField41 = ethiopicChronology36.minutes();
        org.joda.time.DurationField durationField42 = ethiopicChronology36.hours();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = localDateTime44.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusMillis(955);
        int[] intArray53 = ethiopicChronology36.get((org.joda.time.ReadablePartial) localDateTime51, (long) 57);
        int int54 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime34, intArray53);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(ethiopicChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1962, 4, 23, 67]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.secondOfDay();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.days();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.era();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        int int5 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.era();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField10.roundFloor((long) 473);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.DurationField durationField7 = ethiopicChronology2.eras();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology2.hourOfDay();
        long long11 = dateTimeField8.add(4320000000L, 4286815112L);
        long long14 = dateTimeField8.getDifferenceAsLong(4286915111L, (long) 113);
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 15432538723200000L + "'", long11 == 15432538723200000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1190L + "'", long14 == 1190L);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("1962-04-19T14:48:44.946");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("2022-02-14T14:46:57.496");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("8103-03-11T18:51:00.000");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(dateTimeZone10);
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(53493763);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.hours();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone11);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone16);
        boolean boolean20 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        int[] intArray22 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime19, (long) 30);
        org.joda.time.DateTimeZone dateTimeZone23 = ethiopicChronology1.getZone();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = ethiopicChronology1.add(readablePeriod24, (long) 613, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology31 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology31.dayOfMonth();
        org.joda.time.DurationField durationField33 = ethiopicChronology31.months();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology31.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology31.dayOfMonth();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.weekOfWeekyear();
        int int41 = localDateTime39.getYear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.plusDays(446);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology45 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = ethiopicChronology45.clockhourOfDay();
        org.joda.time.DurationField durationField47 = ethiopicChronology45.weekyears();
        org.joda.time.DateTimeField dateTimeField48 = ethiopicChronology45.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.clockhourOfDay();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = dateTimeField51.getAsText((long) 'a', locale53);
        int int55 = dateTimeField48.getMaximumTextLength(locale53);
        int int57 = dateTimeField48.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.centuryOfEra();
        java.lang.String str64 = localDateTime61.toString();
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.lang.String str67 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, (-292275054), locale66);
        java.lang.String str68 = localDateTime61.toString();
        java.lang.String str69 = localDateTime61.toString();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(chronology70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime75.minusDays(100);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime75.withYearOfCentury((int) (short) 1);
        int int84 = localDateTime75.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = localDateTime75.getFieldType(0);
        int int87 = localDateTime61.get(dateTimeFieldType86);
        boolean boolean88 = localDateTime39.isSupported(dateTimeFieldType86);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime39.plus(readableDuration89);
        java.util.Locale locale91 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.Character> charSet92 = locale91.getExtensionKeys();
        java.lang.String str93 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime90, locale91);
        java.util.Set<java.lang.String> strSet94 = locale91.getUnicodeLocaleKeys();
        java.lang.String str95 = locale91.getDisplayVariant();
        java.lang.String str96 = locale91.getVariant();
        java.lang.String str97 = dateTimeField28.getAsShortText(4286943704L, locale91);
        java.lang.String str98 = locale91.getDisplayCountry();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 613L + "'", long27 == 613L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(ethiopicChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(ethiopicChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(ethiopicChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "24" + "'", str54, "24");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-14T14:51:54.135" + "'", str64, "2022-02-14T14:51:54.135");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-292275054" + "'", str67, "-292275054");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-14T14:51:54.135" + "'", str68, "2022-02-14T14:51:54.135");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-14T14:51:54.135" + "'", str69, "2022-02-14T14:51:54.135");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2022 + "'", int87 == 2022);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "it");
        org.junit.Assert.assertNotNull(charSet92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "14" + "'", str93, "14");
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "14" + "'", str97, "14");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        int int8 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.year();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DurationField durationField11 = dateTimeField10.getDurationField();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Italian");
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("8103-03-11T18:51:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 8103-03-11T18:51:00.000 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(257);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        int int5 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.era();
        int int12 = dateTimeField10.getMaximumValue((long) 537);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.days();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = ethiopicChronology1.getDateTimeMillis(177, 491, 0, 934);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 491 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.halfdays();
        int int8 = durationField6.getValue((long) 171);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DurationField durationField6 = ethiopicChronology1.weeks();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = ethiopicChronology1.add(readablePeriod8, 4286983923L, 53262991);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = ethiopicChronology1.get(readablePeriod12, 3600619L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4286983923L + "'", long11 == 4286983923L);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        java.lang.String str6 = localDateTime3.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withPeriodAdded(readablePeriod7, 2);
        int int10 = localDateTime3.getYearOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.monthOfYear();
        int int12 = localDateTime3.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider14 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider14);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology18 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology18.dayOfMonth();
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!");
        java.lang.String str24 = dateTimeField19.getAsText((int) (byte) 10, locale23);
        long long26 = dateTimeField19.roundHalfFloor((long) 113);
        int int28 = dateTimeField19.getMaximumValue(243144000046L);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology31 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology31.dayOfMonth();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusWeeks((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.PRC;
        java.lang.String str42 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDateTime40, locale41);
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category29, locale41);
        java.util.Locale locale45 = java.util.Locale.getDefault(category29);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.lang.String str47 = locale46.getScript();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfDay();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = dateTimeField50.getAsText((long) 'a', locale52);
        java.lang.String str54 = locale46.getDisplayName(locale52);
        java.lang.String str55 = locale45.getDisplayVariant(locale46);
        java.lang.String str56 = locale45.getDisplayScript();
        java.lang.String str58 = locale45.getExtension('x');
        int int59 = dateTimeField19.getMaximumShortTextLength(locale45);
        java.lang.String str62 = nameProvider14.getShortName(locale45, "de-DE", "");
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology64 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = ethiopicChronology64.clockhourOfDay();
        org.joda.time.DurationField durationField66 = ethiopicChronology64.weekyears();
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology64.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = ethiopicChronology64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology64.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField70 = ethiopicChronology64.hourOfHalfday();
        java.util.Locale.Category category71 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology73 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone72);
        org.joda.time.DateTimeField dateTimeField74 = ethiopicChronology73.dayOfMonth();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(chronology75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.plusWeeks((int) (byte) 10);
        java.util.Locale locale83 = java.util.Locale.PRC;
        java.lang.String str84 = dateTimeField74.getAsText((org.joda.time.ReadablePartial) localDateTime82, locale83);
        java.util.Set<java.lang.String> strSet85 = locale83.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category71, locale83);
        java.util.Set<java.lang.String> strSet87 = locale83.getUnicodeLocaleKeys();
        int int88 = dateTimeField70.getMaximumShortTextLength(locale83);
        java.util.Locale locale90 = java.util.Locale.JAPAN;
        java.lang.String str91 = locale90.getCountry();
        java.lang.String str92 = dateTimeField70.getAsText(165075529L, locale90);
        java.lang.String str95 = nameProvider14.getName(locale90, "4", "2022-02-14T14:49:12.076");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = localDateTime3.toString("dopo Cristo", locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-14T14:51:54.865" + "'", str6, "2022-02-14T14:51:54.865");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(nameProvider14);
        org.junit.Assert.assertNotNull(ethiopicChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "10" + "'", str24, "10");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-10L) + "'", long26 == (-10L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 30 + "'", int28 == 30);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "24" + "'", str53, "24");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tedesco (Germania)" + "'", str54, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(ethiopicChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + category71 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category71.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2" + "'", str84, "2");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "JP" + "'", str91, "JP");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "9" + "'", str92, "9");
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology4 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology4.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime13, locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category2, locale14);
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder19 = builder1.setLocale(locale14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        int int25 = localDateTime23.getYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMillis(51044001);
        org.joda.time.DateTimeField dateTimeField39 = localDateTime34.getField((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology41 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = ethiopicChronology41.clockhourOfDay();
        org.joda.time.DurationField durationField43 = ethiopicChronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = ethiopicChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = ethiopicChronology41.hourOfHalfday();
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.dayOfMonth();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.plusWeeks((int) (byte) 10);
        java.util.Locale locale60 = java.util.Locale.PRC;
        java.lang.String str61 = dateTimeField51.getAsText((org.joda.time.ReadablePartial) localDateTime59, locale60);
        java.util.Set<java.lang.String> strSet62 = locale60.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category48, locale60);
        java.util.Set<java.lang.String> strSet64 = locale60.getUnicodeLocaleKeys();
        int int65 = dateTimeField47.getMaximumShortTextLength(locale60);
        int int66 = dateTimeField39.getMaximumShortTextLength(locale60);
        java.util.Locale.Builder builder67 = builder19.setLocale(locale60);
        java.util.Locale.Builder builder69 = builder67.setLanguage("");
        java.util.Locale.Builder builder70 = builder67.clear();
        java.util.Locale.Builder builder71 = builder70.clear();
        java.util.Locale locale72 = builder71.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2" + "'", str15, "2");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(ethiopicChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category48.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2" + "'", str61, "2");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.hourOfDay();
        org.joda.time.DurationField durationField4 = ethiopicChronology2.eras();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology2.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-292275054), (org.joda.time.Chronology) ethiopicChronology2);
        int int7 = localDateTime6.getWeekOfWeekyear();
        int int8 = localDateTime6.getEra();
        int int9 = localDateTime6.getDayOfWeek();
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField14 = ethiopicChronology1.weeks();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.dayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusWeeks((int) (byte) 10);
        int int13 = localDateTime12.getMillisOfSecond();
        int int14 = localDateTime12.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        boolean boolean18 = localDateTime12.isSupported(durationFieldType17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime12.minuteOfHour();
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider21);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider21);
        java.util.Locale locale25 = new java.util.Locale("53196316");
        java.lang.String str26 = locale25.getDisplayVariant();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str29 = locale25.getDisplayName(locale27);
        java.lang.String str32 = nameProvider21.getName(locale27, "2000-01-03T00:10:19.000Z", "");
        java.lang.String str33 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime12, 972, locale27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime12.withDate(891, 0, 341);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 960 + "'", int13 == 960);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 960 + "'", int14 == 960);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertEquals(locale25.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "53196316" + "'", str29, "53196316");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "972" + "'", str33, "972");
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.hourOfDay();
        org.joda.time.DurationField durationField11 = ethiopicChronology1.years();
        long long14 = durationField11.getMillis(972, (long) 726);
        long long17 = durationField11.getMillis((long) 53299692, (long) 481);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 30673987200000L + "'", long14 == 30673987200000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1682010360259200000L + "'", long17 == 1682010360259200000L);
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        org.joda.time.LocalDateTime localDateTime33 = property8.setCopy(168);
        java.lang.String str34 = property8.getAsString();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale35.getISO3Country();
        java.lang.String str37 = property8.getAsShortText(locale35);
        org.joda.time.LocalDateTime localDateTime38 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = property8.addWrapFieldToCopy(724);
        org.joda.time.LocalDateTime localDateTime42 = property8.setCopy(8);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287115005L + "'", long11 == 4287115005L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2000" + "'", str34, "2000");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CAN" + "'", str36, "CAN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2000" + "'", str37, "2000");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.weekyearOfCentury();
        int int4 = dateTimeField3.getMinimumValue();
        org.joda.time.DurationField durationField5 = dateTimeField3.getRangeDurationField();
        long long8 = durationField5.getValueAsLong((long) 51040001, (long) 49);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        int[] intArray16 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime13, 0L);
        org.joda.time.DurationField durationField17 = ethiopicChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology1.yearOfEra();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1962, 4, 23, 10]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        int int7 = dateTimeField6.getMaximumValue();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        int int22 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        int int23 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.monthOfYear();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfCeilingCopy();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundCeilingCopy();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 999 + "'", int7 == 999);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField4 = ethiopicChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology2.getZone();
        org.joda.time.Chronology chronology7 = ethiopicChronology2.withUTC();
        org.joda.time.DurationField durationField8 = ethiopicChronology2.seconds();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((java.lang.Object) 4286809737L, (org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology2.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMonths(955);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology21.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = ethiopicChronology21.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology21.millisOfSecond();
        org.joda.time.DurationField durationField27 = ethiopicChronology21.hours();
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology21.dayOfMonth();
        org.joda.time.DurationField durationField29 = ethiopicChronology21.days();
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology21.hourOfDay();
        int int31 = ethiopicChronology21.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology21.monthOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withYearOfCentury(0);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology44 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = ethiopicChronology44.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfDay();
        org.joda.time.DurationField durationField50 = ethiopicChronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = ethiopicChronology48.getZone();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology48);
        org.joda.time.DurationField durationField54 = ethiopicChronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.hourOfHalfday();
        org.joda.time.DurationField durationField56 = ethiopicChronology48.hours();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone58);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        java.lang.String str65 = dateTimeZone63.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone63);
        boolean boolean67 = localDateTime61.isEqual((org.joda.time.ReadablePartial) localDateTime66);
        int[] intArray69 = ethiopicChronology48.get((org.joda.time.ReadablePartial) localDateTime66, (long) 30);
        org.joda.time.DateTimeZone dateTimeZone70 = ethiopicChronology48.getZone();
        java.lang.String str72 = dateTimeZone70.getShortName(3430L);
        org.joda.time.Chronology chronology73 = ethiopicChronology44.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime74 = localDateTime42.toDateTime(dateTimeZone70);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime42.plus(readableDuration75);
        int[] intArray78 = ethiopicChronology21.get((org.joda.time.ReadablePartial) localDateTime76, 1055L);
        ethiopicChronology2.validate((org.joda.time.ReadablePartial) localDateTime17, intArray78);
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(ethiopicChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(ethiopicChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1962, 4, 23, 1065]");
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology11.clockhourOfDay();
        org.joda.time.DurationField durationField13 = ethiopicChronology11.weekyears();
        org.joda.time.DurationField durationField14 = ethiopicChronology11.hours();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology11.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = ethiopicChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology11.monthOfYear();
        java.util.Locale locale22 = new java.util.Locale("2022-02-14T14:47:17.342", "\u5fb7\u6587", "2000-02-21T14:48:10.338Z");
        java.lang.String str23 = dateTimeField17.getAsText(4286862855L, locale22);
        int int24 = dateTimeField9.getMaximumTextLength(locale22);
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Collection<java.lang.String> strCollection29 = null;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection29);
        java.util.Set<java.lang.String> strSet31 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet31.clear();
        int int33 = strSet31.size();
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.Locale.FilteringMode[] filteringModeArray36 = new java.util.Locale.FilteringMode[] { filteringMode34, filteringMode35 };
        java.util.Locale.FilteringMode[] filteringModeArray37 = strSet31.toArray(filteringModeArray36);
        strSet31.clear();
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet31, filteringMode39);
        java.util.Set<java.lang.String> strSet41 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet41.clear();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateTimeZone[] dateTimeZoneArray53 = new org.joda.time.DateTimeZone[] { dateTimeZone44, dateTimeZone46, dateTimeZone48, dateTimeZone50, dateTimeZone52 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray54 = strSet41.toArray(dateTimeZoneArray53);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strSet41.spliterator();
        boolean boolean56 = strSet41.isEmpty();
        boolean boolean57 = strSet41.isEmpty();
        boolean boolean58 = strSet41.isEmpty();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet41);
        boolean boolean60 = strSet25.retainAll((java.util.Collection<java.lang.String>) strSet41);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(ethiopicChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "\u5fb7\u6587_2000-02-21T14:48:10.338Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "6" + "'", str23, "6");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode35.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(filteringModeArray36);
        org.junit.Assert.assertNotNull(filteringModeArray37);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode39.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZoneArray53);
        org.junit.Assert.assertNotNull(dateTimeZoneArray54);
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.seconds();
        org.joda.time.Chronology chronology8 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.minutes();
        long long11 = durationField10.getUnitMillis();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 60000L + "'", long11 == 60000L);
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        boolean boolean23 = locale22.hasExtensions();
        boolean boolean24 = dateTime21.equals((java.lang.Object) locale22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Collection<java.lang.String> strCollection28 = null;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection28);
        java.util.Collection<java.lang.String> strCollection30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Collection<java.lang.String> strCollection35 = null;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strCollection35);
        java.util.Collection<java.lang.String> strCollection37 = null;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strCollection37);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection37, filteringMode39);
        boolean boolean41 = dateTime21.equals((java.lang.Object) languageRangeList26);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.centuryOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        boolean boolean59 = locale58.hasExtensions();
        boolean boolean60 = dateTime57.equals((java.lang.Object) locale58);
        int int61 = property47.getDifference((org.joda.time.ReadableInstant) dateTime57);
        int int62 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime57);
        long long63 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Instant instant64 = dateTime57.toInstant();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(chronology73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withMillisOfSecond((int) (byte) 1);
        int int79 = localDateTime66.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime.Property property80 = localDateTime74.weekyear();
        org.joda.time.LocalDateTime.Property property81 = localDateTime74.millisOfDay();
        org.joda.time.LocalDateTime localDateTime82 = property81.withMinimumValue();
        int int83 = localDateTime82.getEra();
        org.joda.time.LocalDateTime.Property property84 = localDateTime82.secondOfMinute();
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property85.getFieldType();
        boolean boolean87 = instant64.isSupported(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode39.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withHourOfDay(202);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 202 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287115619L + "'", long11 == 4287115619L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.dayOfMonth();
        long long9 = ethiopicChronology1.add(13L, (long) 2, 51058001);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMinuteOfHour(10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusYears((int) (short) 1);
        int int31 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        int int32 = localDateTime19.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime19.minusMinutes(13);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology36 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology36.dayOfMonth();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.weekyear();
        org.joda.time.LocalDateTime localDateTime49 = property47.setCopy((int) (byte) 1);
        long long50 = property47.remainder();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.millisOfDay();
        int int62 = property47.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        int int63 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) localDateTime58);
        int int64 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        long long66 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime19, (-49L));
        org.joda.time.DurationField durationField67 = ethiopicChronology1.millis();
        // The following exception was thrown during execution in test generation
        try {
            int int69 = durationField67.getValue(4287046170L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 4287046170");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 102116015L + "'", long9 == 102116015L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 51055001 + "'", int32 == 51055001);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(ethiopicChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 4287115651L + "'", long50 == 4287115651L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 30 + "'", int63 == 30);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1888150254991L + "'", long66 == 1888150254991L);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property4.getAsShortText(locale6);
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfFloorCopy();
        java.lang.String str9 = property4.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfCentury(0);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology21.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology25 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology25.clockhourOfDay();
        org.joda.time.DurationField durationField27 = ethiopicChronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology25.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = ethiopicChronology25.getZone();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology25);
        org.joda.time.DurationField durationField31 = ethiopicChronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology25.hourOfHalfday();
        org.joda.time.DurationField durationField33 = ethiopicChronology25.hours();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str37 = dateTimeZone35.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone35);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str42 = dateTimeZone40.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone40);
        boolean boolean44 = localDateTime38.isEqual((org.joda.time.ReadablePartial) localDateTime43);
        int[] intArray46 = ethiopicChronology25.get((org.joda.time.ReadablePartial) localDateTime43, (long) 30);
        org.joda.time.DateTimeZone dateTimeZone47 = ethiopicChronology25.getZone();
        java.lang.String str49 = dateTimeZone47.getShortName(3430L);
        org.joda.time.Chronology chronology50 = ethiopicChronology21.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = localDateTime19.toDateTime(dateTimeZone47);
        long long53 = dateTimeZone47.nextTransition(951144423857L);
        java.lang.String str55 = dateTimeZone47.getName((long) 2014);
        boolean boolean56 = property4.equals((java.lang.Object) dateTimeZone47);
        long long59 = dateTimeZone47.adjustOffset((long) 489, false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7" + "'", str7, "7");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[weekOfWeekyear]" + "'", str9, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(ethiopicChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(ethiopicChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 951144423857L + "'", long53 == 951144423857L);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 489L + "'", long59 == 489L);
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        org.joda.time.DurationField durationField32 = ethiopicChronology27.halfdays();
        java.lang.String str33 = ethiopicChronology27.toString();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology27.monthOfYear();
        org.joda.time.DurationField durationField36 = ethiopicChronology27.halfdays();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287115763L + "'", long11 == 4287115763L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "EthiopicChronology[+00:00:00.010]" + "'", str33, "EthiopicChronology[+00:00:00.010]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getID();
        long long8 = dateTimeZone1.convertLocalToUTC(4286816746L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.010" + "'", str5, "+00:00:00.010");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4286816736L + "'", long8 == 4286816736L);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds(197);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMonths(8035);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField14 = localDateTime12.getField(925);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 925");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology14 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField16 = ethiopicChronology14.weekyears();
        org.joda.time.DurationField durationField17 = ethiopicChronology14.centuries();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology14.weekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = ethiopicChronology14.getZone();
        org.joda.time.DateTime dateTime20 = localDateTime11.toDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology22 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology22.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = ethiopicChronology22.seconds();
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology22.minuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekyear();
        org.joda.time.LocalDateTime localDateTime37 = property35.setCopy((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readableDuration38);
        int[] intArray40 = null;
        int int41 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39, intArray40);
        boolean boolean42 = dateTime20.equals((java.lang.Object) localDateTime39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.minusSeconds((-493965190));
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withPeriodAdded(readablePeriod46, 51056001);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(ethiopicChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(ethiopicChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = localDateTime7.isSupported(durationFieldType12);
        org.joda.time.DateTime dateTime14 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusWeeks((int) (byte) 10);
        int int33 = localDateTime32.getMillisOfSecond();
        int int34 = localDateTime32.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        boolean boolean38 = localDateTime32.isSupported(durationFieldType37);
        org.joda.time.DateTime dateTime39 = localDateTime32.toDateTime();
        boolean boolean40 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Instant instant41 = dateTime24.toInstant();
        boolean boolean42 = dateTime14.isEqual((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.minusDays(100);
        org.joda.time.DateTime dateTime55 = localDateTime48.toDateTime();
        boolean boolean56 = instant41.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.centuryOfEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDateTime70.toDateTime(readableInstant71);
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        boolean boolean74 = locale73.hasExtensions();
        boolean boolean75 = dateTime72.equals((java.lang.Object) locale73);
        int int76 = property62.getDifference((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean77 = instant41.isEqual((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeZone dateTimeZone78 = instant41.getZone();
        org.joda.time.Chronology chronology79 = instant41.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long84 = chronology79.getDateTimeMillis(816, 95, 986, 67780891);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 95 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusDays(4);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.minusMillis(9);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusDays(32);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology3 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField5 = ethiopicChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology3.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = ethiopicChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        java.lang.String str9 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology11.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone14 = ethiopicChronology11.getZone();
        long long16 = dateTimeZone7.getMillisKeepLocal(dateTimeZone14, 3480L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology18 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology18.clockhourOfDay();
        org.joda.time.DurationField durationField20 = ethiopicChronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = ethiopicChronology18.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology23 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology23.clockhourOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.lang.String str27 = dateTimeField24.getAsText((long) 'a', locale26);
        int int28 = dateTimeField21.getMaximumTextLength(locale26);
        int int30 = dateTimeField21.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.centuryOfEra();
        java.lang.String str37 = localDateTime34.toString();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, (-292275054), locale39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.withDurationAdded(readableDuration41, 22);
        java.util.Date date44 = localDateTime34.toDate();
        boolean boolean45 = dateTimeZone7.isLocalDateTimeGap(localDateTime34);
        long long48 = dateTimeZone7.adjustOffset((long) 29, false);
        long long50 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 4286948177L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(ethiopicChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(ethiopicChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3480L + "'", long16 == 3480L);
        org.junit.Assert.assertNotNull(ethiopicChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(ethiopicChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "24" + "'", str27, "24");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-14T14:51:56.104" + "'", str37, "2022-02-14T14:51:56.104");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-292275054" + "'", str40, "-292275054");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Mon Feb 14 14:51:56 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 29L + "'", long48 == 29L);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 4286948167L + "'", long50 == 4286948167L);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("23");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '23' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology2.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = ethiopicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology2.minuteOfHour();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.minusDays(100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withYearOfCentury((int) (short) 1);
        long long25 = ethiopicChronology2.set((org.joda.time.ReadablePartial) localDateTime15, 4286809804L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(53049600000L, (org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.DurationField durationField27 = ethiopicChronology2.years();
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology2.monthOfYear();
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1888152715991L + "'", long25 == 1888152715991L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("clockhourOfDay", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology8 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = ethiopicChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology8.era();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime25.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withMillisOfDay((int) (byte) 0);
        int int29 = localDateTime28.getYear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = property30.addToCopy((long) 2000);
        int[] intArray34 = localDateTime33.getValues();
        int int35 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19, intArray34);
        boolean boolean36 = ethiopicChronology1.equals((java.lang.Object) int35);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(ethiopicChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[4022, 2, 21, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("\u5fb7\u6587\u5fb7\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology16 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = ethiopicChronology16.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = ethiopicChronology16.millisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = property30.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField33 = property30.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime34 = property30.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekOfWeekyear();
        int int36 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.millisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withMonthOfYear(3);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.minusDays(0);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.weekyear();
        org.joda.time.LocalDateTime localDateTime73 = property71.setCopy((int) (byte) 1);
        long long74 = property71.remainder();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(chronology75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localDateTime82.toDateTime(readableInstant83);
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.millisOfDay();
        int int86 = property71.compareTo((org.joda.time.ReadablePartial) localDateTime82);
        boolean boolean88 = property71.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property71.getFieldType();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime62.withField(dateTimeFieldType89, 175);
        boolean boolean92 = localDateTime48.isSupported(dateTimeFieldType89);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime34.withField(dateTimeFieldType89, 55);
        org.joda.time.LocalDateTime.Property property95 = localDateTime14.property(dateTimeFieldType89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime97 = property95.addToCopy(3820920672268L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 3820920672268");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 310 + "'", int8 == 310);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 310 + "'", int9 == 310);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(ethiopicChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 999 + "'", int36 == 999);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 4287116310L + "'", long74 == 4287116310L);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime25 = property8.setCopy("53280");
        int int26 = property8.get();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287116411L + "'", long11 == 4287116411L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology14 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField16 = ethiopicChronology14.weekyears();
        org.joda.time.DurationField durationField17 = ethiopicChronology14.centuries();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology14.weekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = ethiopicChronology14.getZone();
        org.joda.time.DateTime dateTime20 = localDateTime11.toDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology22 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology22.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = ethiopicChronology22.seconds();
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology22.minuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekyear();
        org.joda.time.LocalDateTime localDateTime37 = property35.setCopy((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readableDuration38);
        int[] intArray40 = null;
        int int41 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39, intArray40);
        boolean boolean42 = dateTime20.equals((java.lang.Object) localDateTime39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.minusSeconds((-493965190));
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology47 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = ethiopicChronology47.clockhourOfDay();
        org.joda.time.DurationField durationField49 = ethiopicChronology47.weekyears();
        org.joda.time.DurationField durationField50 = ethiopicChronology47.centuries();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology47.weekyear();
        int int52 = dateTimeField51.getMinimumValue();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withMillisOfSecond((int) (byte) 1);
        int int67 = localDateTime54.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime.Property property68 = localDateTime62.weekyear();
        org.joda.time.LocalDateTime.Property property69 = localDateTime62.millisOfDay();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(chronology70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(readableInstant78);
        java.util.Locale locale80 = java.util.Locale.GERMANY;
        boolean boolean81 = locale80.hasExtensions();
        boolean boolean82 = dateTime79.equals((java.lang.Object) locale80);
        java.lang.String str83 = dateTimeField51.getAsShortText((org.joda.time.ReadablePartial) localDateTime62, locale80);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime62.minus(readableDuration84);
        org.joda.time.LocalDateTime.Property property86 = localDateTime85.year();
        int int87 = localDateTime39.compareTo((org.joda.time.ReadablePartial) localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(ethiopicChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(ethiopicChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(ethiopicChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-292269338) + "'", int52 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022" + "'", str83, "2022");
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.millisOfSecond();
        long long11 = dateTimeField9.roundHalfCeiling(0L);
        int int13 = dateTimeField9.getMinimumValue(4286983992L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.years();
        org.joda.time.Chronology chronology8 = ethiopicChronology1.withUTC();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(53376068, 579, 479, 843, 596, 355, 210, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 843 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology4 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology4.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = ethiopicChronology4.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology4.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology4.clockhourOfHalfday();
        int int12 = dateTimeField10.getLeapAmount((long) (short) 1);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getScript();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology17 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology17.clockhourOfDay();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = dateTimeField18.getAsText((long) 'a', locale20);
        java.lang.String str22 = locale14.getDisplayName(locale20);
        java.lang.String str23 = locale20.getISO3Language();
        java.lang.String str24 = dateTimeField10.getAsShortText(53, locale20);
        java.lang.String str27 = nameProvider0.getShortName(locale20, "2022-02-14T14:46:37.720", "2022-02-14T14:47:00.556");
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale28.getScript();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology31 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology31.clockhourOfDay();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = dateTimeField32.getAsText((long) 'a', locale34);
        java.lang.String str36 = locale28.getDisplayName(locale34);
        java.lang.String str39 = nameProvider0.getName(locale28, "395", "_CAN");
        java.lang.String str40 = locale28.getDisplayName();
        java.util.Set<java.lang.String> strSet41 = locale28.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(ethiopicChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(ethiopicChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "24" + "'", str21, "24");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tedesco (Germania)" + "'", str22, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ita" + "'", str23, "ita");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "53" + "'", str24, "53");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(ethiopicChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "24" + "'", str35, "24");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco (Germania)" + "'", str36, "tedesco (Germania)");
        org.junit.Assert.assertNull(str39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str40, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertNotNull(strSet41);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withEra(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withMonthOfYear(2);
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.secondOfMinute();
        int int23 = property22.get();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 56 + "'", int23 == 56);
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.Chronology chronology6 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = durationField8.add((long) 468, 4287081188L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 4287081188");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(100);
        int int12 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime5.withMillisOfDay(13);
        int int15 = localDateTime5.getMillisOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        int int18 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        int int19 = localDateTime5.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53516001 + "'", int15 == 53516001);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology6 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology6.clockhourOfDay();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = dateTimeField7.getAsText((long) 'a', locale9);
        int int11 = dateTimeField4.getMaximumTextLength(locale9);
        int int13 = dateTimeField4.getMinimumValue((-3600001L));
        int int14 = dateTimeField4.getMaximumValue();
        org.joda.time.DurationField durationField15 = dateTimeField4.getRangeDurationField();
        java.util.Locale locale18 = new java.util.Locale("2022-02-14T14:47:22.056");
        java.util.Locale locale20 = new java.util.Locale("53196316");
        java.lang.String str21 = locale20.getDisplayVariant();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.lang.String str25 = locale18.getDisplayName(locale20);
        java.lang.String str26 = dateTimeField4.getAsText((-4286831), locale18);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(ethiopicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "24" + "'", str10, "24");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 24 + "'", int14 == 24);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals(locale18.toString(), "2022-02-14t14:47:22.056");
        org.junit.Assert.assertEquals(locale20.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "53196316" + "'", str24, "53196316");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-14t14:47:22.056" + "'", str25, "2022-02-14t14:47:22.056");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-4286831" + "'", str26, "-4286831");
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology5 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology5.clockhourOfDay();
        org.joda.time.DurationField durationField7 = ethiopicChronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology5.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = ethiopicChronology5.getZone();
        org.joda.time.DurationField durationField10 = ethiopicChronology5.centuries();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology13 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField15 = ethiopicChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = ethiopicChronology13.getZone();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology13);
        org.joda.time.DurationField durationField19 = ethiopicChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField21 = ethiopicChronology13.hours();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone23);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str30 = dateTimeZone28.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone28);
        boolean boolean32 = localDateTime26.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        int[] intArray34 = ethiopicChronology13.get((org.joda.time.ReadablePartial) localDateTime31, (long) 30);
        long long36 = ethiopicChronology5.set((org.joda.time.ReadablePartial) localDateTime31, (long) (byte) -1);
        org.joda.time.DurationField durationField37 = ethiopicChronology5.seconds();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology39 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology39.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Chronology chronology43 = ethiopicChronology39.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology39.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField46 = ethiopicChronology39.dayOfWeek();
        org.joda.time.DurationField durationField47 = dateTimeField46.getRangeDurationField();
        int int48 = durationField37.compareTo(durationField47);
        boolean boolean49 = ethiopicChronology1.equals((java.lang.Object) int48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        long long53 = ethiopicChronology1.add(readablePeriod50, (long) 294, 779);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(ethiopicChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(ethiopicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1962, 4, 23, 40]");
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1888152716778L + "'", long36 == 1888152716778L);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(ethiopicChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 294L + "'", long53 == 294L);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology2.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = ethiopicChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology2.minuteOfHour();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.minusDays(100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withYearOfCentury((int) (short) 1);
        long long25 = ethiopicChronology2.set((org.joda.time.ReadablePartial) localDateTime15, 4286809804L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(53049600000L, (org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMinutes(53277846);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.plusSeconds(1970);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localDateTime26.getValue(74);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 74");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1888152715991L + "'", long25 == 1888152715991L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.era();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.dayOfWeek();
        long long17 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime12, 4286800429L);
        int int18 = localDateTime12.getMinuteOfHour();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMinuteOfHour(10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusYears((int) (short) 1);
        int int40 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        int int41 = localDateTime28.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property42 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime28);
        int int44 = localDateTime12.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime12.minusHours(414);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.hourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Chronology chronology52 = ethiopicChronology48.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.millisOfSecond();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.weekyear();
        org.joda.time.LocalDateTime localDateTime64 = property62.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField65 = property62.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime66 = property62.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.weekOfWeekyear();
        int int68 = dateTimeField53.getMaximumValue((org.joda.time.ReadablePartial) localDateTime66);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        java.lang.String str72 = dateTimeZone70.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(dateTimeZone70);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        java.lang.String str77 = dateTimeZone75.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone75);
        boolean boolean79 = localDateTime73.isEqual((org.joda.time.ReadablePartial) localDateTime78);
        int int80 = dateTimeField53.getMaximumValue((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(chronology81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = localDateTime82.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.withMillisOfDay((int) (byte) 0);
        int int86 = localDateTime85.getYear();
        int int87 = localDateTime85.getEra();
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology89 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone88);
        org.joda.time.DateTimeField dateTimeField90 = ethiopicChronology89.clockhourOfDay();
        org.joda.time.DurationField durationField91 = ethiopicChronology89.weekyears();
        org.joda.time.DateTimeField dateTimeField92 = ethiopicChronology89.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField93 = ethiopicChronology89.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField94 = ethiopicChronology89.clockhourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = dateTimeField94.getType();
        int int96 = localDateTime85.indexOf(dateTimeFieldType95);
        boolean boolean97 = localDateTime78.isSupported(dateTimeFieldType95);
        boolean boolean98 = localDateTime46.isSupported(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1888099199990L + "'", long17 == 1888099199990L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51056001 + "'", int41 == 51056001);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21 + "'", int44 == 21);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 999 + "'", int68 == 999);
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 999 + "'", int80 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2022 + "'", int86 == 2022);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(ethiopicChronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.millisOfDay();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.year();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("JP");
        java.lang.String[] strArray7 = new java.lang.String[] { "10", "UTC", "10", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        java.util.Iterator<java.lang.String> strItor10 = strSet8.iterator();
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Collection<java.lang.String> strCollection17 = null;
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strCollection17);
        java.util.Collection<java.lang.String> strCollection19 = null;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strCollection19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Collection<java.lang.String> strCollection24 = null;
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strCollection24);
        java.util.Collection<java.lang.String> strCollection26 = null;
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strCollection26);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strCollection26, filteringMode28);
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        boolean boolean31 = locale30.hasExtensions();
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology37 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology37.clockhourOfDay();
        org.joda.time.DurationField durationField39 = ethiopicChronology37.weekyears();
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology37.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology42 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = ethiopicChronology42.clockhourOfDay();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = dateTimeField43.getAsText((long) 'a', locale45);
        int int47 = dateTimeField40.getMaximumTextLength(locale45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale30, locale32, locale33, locale34, locale35, locale45 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap53 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap53);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap55);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode28.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(ethiopicChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(ethiopicChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "24" + "'", str46, "24");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertNotNull(languageRangeList56);
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology18 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology18.centuryOfEra();
        org.joda.time.DurationField durationField21 = ethiopicChronology18.millis();
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology18.minuteOfHour();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime27.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.withWeekyear(951);
        int[] intArray36 = ethiopicChronology18.get((org.joda.time.ReadablePartial) localDateTime27, 4286819730L);
        org.joda.time.DurationField durationField37 = ethiopicChronology18.minutes();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.minusDays(100);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology51 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology51.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone54 = ethiopicChronology51.getZone();
        org.joda.time.DateTime dateTime55 = localDateTime43.toDateTime(dateTimeZone54);
        int int56 = localDateTime43.getCenturyOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime62.minusDays(100);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime62.withYearOfCentury((int) (short) 1);
        int int71 = localDateTime62.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = localDateTime62.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime43.withField(dateTimeFieldType73, 225);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology77 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = ethiopicChronology77.clockhourOfDay();
        org.joda.time.DurationField durationField79 = ethiopicChronology77.weekyears();
        org.joda.time.DateTimeField dateTimeField80 = ethiopicChronology77.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone81 = ethiopicChronology77.getZone();
        org.joda.time.DurationField durationField82 = ethiopicChronology77.minutes();
        org.joda.time.DurationField durationField83 = ethiopicChronology77.hours();
        org.joda.time.DurationFieldType durationFieldType84 = durationField83.getType();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime75.withFieldAdded(durationFieldType84, 742);
        boolean boolean87 = ethiopicChronology18.equals((java.lang.Object) durationFieldType84);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime9.withFieldAdded(durationFieldType84, 939);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(ethiopicChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1962, 6, 12, 53219740]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(ethiopicChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20 + "'", int56 == 20);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(ethiopicChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.lang.String> strCollection3 = null;
        java.util.List<java.lang.String> strList4 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Collection<java.lang.String> strCollection8 = null;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strCollection8);
        java.lang.String str10 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection8);
        java.util.Set<java.lang.String> strSet11 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet11.clear();
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology15 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology15.centuryOfEra();
        org.joda.time.DurationField durationField18 = ethiopicChronology15.millis();
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology15.clockhourOfHalfday();
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField20.getAsText(951144432278L, locale22);
        boolean boolean24 = strSet11.remove((java.lang.Object) 951144432278L);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Collection<java.lang.String> strCollection28 = null;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection28);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Collection<java.lang.String> strCollection33 = null;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, strCollection33);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection33);
        java.util.Set<java.lang.String> strSet36 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet36.clear();
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strSet36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology40 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = ethiopicChronology40.centuryOfEra();
        org.joda.time.DurationField durationField43 = ethiopicChronology40.millis();
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology40.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology40.clockhourOfHalfday();
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeField45.getAsText(951144432278L, locale47);
        boolean boolean49 = strSet36.remove((java.lang.Object) 951144432278L);
        boolean boolean50 = strSet11.addAll((java.util.Collection<java.lang.String>) strSet36);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(ethiopicChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2" + "'", str23, "2");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(ethiopicChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2" + "'", str48, "2");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYearOfCentury(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = ethiopicChronology1.getZone();
        org.joda.time.Chronology chronology9 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.yearOfEra();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        int int5 = localDateTime4.getYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        int int8 = property6.get();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes(621);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField14 = localDateTime10.getField(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 12");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minusDays(100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withYearOfCentury((int) (short) 1);
        boolean boolean16 = dateTimeZone1.isLocalDateTimeGap(localDateTime15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long21 = dateTimeZone1.convertLocalToUTC((-29637911491509L), true, 0L);
        long long24 = dateTimeZone1.convertLocalToUTC(4286892497L, false);
        long long27 = dateTimeZone1.convertLocalToUTC((long) 322, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-29638271491509L) + "'", long21 == (-29638271491509L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3926892497L + "'", long24 == 3926892497L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-359999678L) + "'", long27 == (-359999678L));
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = ethiopicChronology1.getDateTimeMillis(58, 3, 653, 361);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 653 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology4 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology4.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime13, locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category2, locale14);
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder19 = builder1.setLocale(locale14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        int int25 = localDateTime23.getYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMillis(51044001);
        org.joda.time.DateTimeField dateTimeField39 = localDateTime34.getField((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology41 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = ethiopicChronology41.clockhourOfDay();
        org.joda.time.DurationField durationField43 = ethiopicChronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = ethiopicChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = ethiopicChronology41.hourOfHalfday();
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.dayOfMonth();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.plusWeeks((int) (byte) 10);
        java.util.Locale locale60 = java.util.Locale.PRC;
        java.lang.String str61 = dateTimeField51.getAsText((org.joda.time.ReadablePartial) localDateTime59, locale60);
        java.util.Set<java.lang.String> strSet62 = locale60.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category48, locale60);
        java.util.Set<java.lang.String> strSet64 = locale60.getUnicodeLocaleKeys();
        int int65 = dateTimeField47.getMaximumShortTextLength(locale60);
        int int66 = dateTimeField39.getMaximumShortTextLength(locale60);
        java.util.Locale.Builder builder67 = builder19.setLocale(locale60);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder69 = builder67.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2" + "'", str15, "2");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(ethiopicChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category48.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2" + "'", str61, "2");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = ethiopicChronology1.getDateTimeMillis(712, 221, 809, 455);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 221 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMillis(955);
        int int9 = localDateTime8.getYearOfEra();
        int int10 = localDateTime8.size();
        int int11 = localDateTime8.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withMinuteOfHour(51010001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51010001 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        int int5 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.monthOfYear();
        int int8 = dateTimeField6.getMinimumValue(4286789037L);
        org.joda.time.DurationField durationField9 = dateTimeField6.getDurationField();
        long long12 = durationField9.getValueAsLong((long) 51044001, 4320000000L);
        long long15 = durationField9.getMillis((-3600001L), (long) 137);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = durationField9.add(1888152683854L, 4286826076L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 4286826076");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-8739030470400000L) + "'", long15 == (-8739030470400000L));
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.secondOfDay();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.days();
        int int12 = durationField9.getDifference((long) 760, 4286894170L);
        long long14 = durationField9.getMillis(2805806L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-49) + "'", int12 == (-49));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 242421638400000L + "'", long14 == 242421638400000L);
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.DurationField durationField7 = ethiopicChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology2.millisOfDay();
        org.joda.time.Chronology chronology9 = ethiopicChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.monthOfYear();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology1.getZone();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getStandardOffset((long) 1);
        long long12 = dateTimeZone8.previousTransition(4286789037L);
        boolean boolean14 = dateTimeZone8.equals((java.lang.Object) (-31449599999L));
        org.joda.time.Chronology chronology15 = ethiopicChronology1.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology1.millisOfDay();
        java.lang.String str18 = dateTimeField17.toString();
        long long21 = dateTimeField17.add(524486L, 53367881);
        long long23 = dateTimeField17.roundHalfCeiling(4287038173L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4286789037L + "'", long12 == 4286789037L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[millisOfDay]" + "'", str18, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 53892367L + "'", long21 == 53892367L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4287038173L + "'", long23 == 4287038173L);
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        org.joda.time.DurationField durationField32 = ethiopicChronology27.halfdays();
        java.lang.String str33 = ethiopicChronology27.toString();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology27.clockhourOfHalfday();
        java.lang.String str36 = dateTimeField35.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287117828L + "'", long11 == 4287117828L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "EthiopicChronology[+00:00:00.010]" + "'", str33, "EthiopicChronology[+00:00:00.010]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DateTimeField[clockhourOfHalfday]" + "'", str36, "DateTimeField[clockhourOfHalfday]");
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        int int5 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology8 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology8.secondOfDay();
        org.joda.time.DurationField durationField13 = ethiopicChronology8.weekyears();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) ethiopicChronology8);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMonths(999);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withPeriodAdded(readablePeriod28, 100);
        long long32 = ethiopicChronology8.set((org.joda.time.ReadablePartial) localDateTime30, 4286836392L);
        int int33 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMillis((-49));
        // The following exception was thrown during execution in test generation
        try {
            int int37 = localDateTime30.getValue(53225346);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53225346");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(ethiopicChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3820920717841L + "'", long32 == 3820920717841L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 13 + "'", int33 == 13);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusDays(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withYearOfCentury((int) (short) 1);
        boolean boolean18 = dateTimeZone3.isLocalDateTimeGap(localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.Chronology chronology20 = ethiopicChronology1.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.era();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField21.addWrapField(53220000L, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = ethiopicChronology1.getDateTimeMillis(809, (-459606), 21857, 73577001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -459606 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        org.joda.time.LocalDateTime localDateTime32 = property8.roundHalfFloorCopy();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.lang.String str34 = property8.getAsShortText(locale33);
        java.lang.String str35 = locale33.getDisplayScript();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287117914L + "'", long11 == 4287117914L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "tedesco (germania)_CA_hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2000" + "'", str34, "2000");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.minuteOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        int int22 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property23 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime17.minusMillis(2022);
        int int26 = localDateTime17.getEra();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology28 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = ethiopicChronology28.clockhourOfDay();
        org.joda.time.DurationField durationField30 = ethiopicChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology28.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology33 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology33.clockhourOfDay();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = dateTimeField34.getAsText((long) 'a', locale36);
        int int38 = dateTimeField31.getMaximumTextLength(locale36);
        int int40 = dateTimeField31.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.centuryOfEra();
        java.lang.String str47 = localDateTime44.toString();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime44, (-292275054), locale49);
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str53 = locale49.getExtension('a');
        java.lang.String str54 = locale49.getLanguage();
        java.lang.String str55 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime17, locale49);
        java.lang.Object obj56 = locale49.clone();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(ethiopicChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(ethiopicChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "24" + "'", str37, "24");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-14T14:51:58.048" + "'", str47, "2022-02-14T14:51:58.048");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-292275054" + "'", str50, "-292275054");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en" + "'", str54, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "891" + "'", str55, "891");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "en");
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField11.set((long) 817, 661);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 661 for weekyearOfCentury must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Italian");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("UTC");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.setExtension('u', "");
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider11);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider11);
        java.util.Locale locale15 = new java.util.Locale("53196316");
        java.lang.String str16 = locale15.getDisplayVariant();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.lang.String str19 = locale15.getDisplayName(locale17);
        java.lang.String str22 = nameProvider11.getName(locale17, "2000-01-03T00:10:19.000Z", "");
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale locale24 = builder23.build();
        java.lang.String str27 = nameProvider11.getShortName(locale24, "seconds", "2022-02-14T14:46:56.225");
        java.lang.String str28 = locale24.getCountry();
        java.util.Locale.Builder builder29 = builder7.setLocale(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder7.removeUnicodeLocaleAttribute("DateTimeField[secondOfMinute]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: DateTimeField[secondOfMinute] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertEquals(locale15.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "53196316" + "'", str19, "53196316");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology4 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology4.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime13, locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category2, locale14);
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder19 = builder1.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale locale21 = builder20.build();
        java.lang.String str22 = locale21.getCountry();
        java.lang.String str23 = locale21.getLanguage();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2" + "'", str15, "2");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plusMonths(760);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.year();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.weeks();
        java.lang.String str11 = durationField10.getName();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology2.getZone();
        boolean boolean6 = dateTimeZone5.isFixed();
        java.lang.String str7 = dateTimeZone5.getID();
        java.lang.String str9 = dateTimeZone5.getNameKey((long) 51040001);
        int int11 = dateTimeZone5.getStandardOffset(951L);
        long long13 = dateTimeZone5.nextTransition(955L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(4286869359L, dateTimeZone5);
        java.util.TimeZone timeZone15 = dateTimeZone5.toTimeZone();
        java.util.TimeZone.setDefault(timeZone15);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = timeZone15.getOffset((int) (short) 100, 286, 51058001, 2021, 163, 53353893);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
// flaky:         org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 955L + "'", long13 == 955L);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(848, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.minuteOfDay();
        java.lang.String str7 = dateTimeField5.getAsShortText((long) 24);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        int int9 = dateTimeField5.getMaximumTextLength(locale8);
        java.lang.String str10 = locale8.getDisplayName();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str10, "\u4e2d\u6587\u4e2d\u56fd)");
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("TW");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.clockhourOfDay();
        boolean boolean6 = dateTimeField5.isSupported();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfHour();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        long long18 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime14, (long) 626);
        org.joda.time.DurationField durationField19 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology1.secondOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1888152717991L + "'", long18 == 1888152717991L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.days();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.centuryOfEra();
        org.joda.time.Chronology chronology10 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime13.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minus(readablePeriod15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = localDateTime16.toString(dateTimeFormatter17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusWeeks(24);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus(readableDuration21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withMillisOfSecond((int) (byte) 1);
        int int37 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property38 = localDateTime32.weekyear();
        org.joda.time.LocalDateTime.Property property39 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = property39.withMinimumValue();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withMillisOfSecond((int) (byte) 1);
        int int55 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime.Property property56 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime50.minusMillis(2022);
        boolean boolean59 = localDateTime40.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        int[] intArray60 = localDateTime40.getValues();
        int int61 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime22, intArray60);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-21T14:51:58.302" + "'", str18, "2022-02-21T14:51:58.302");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[2022, 2, 21, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.dayOfMonth();
        int int4 = dateTimeField2.getMaximumValue(4286791308L);
        org.joda.time.DurationField durationField5 = dateTimeField2.getLeapDurationField();
        long long8 = dateTimeField2.add((long) 51042001, (long) 801);
        long long10 = dateTimeField2.roundCeiling((-1888101425537L));
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 30 + "'", int4 == 30);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 69257442001L + "'", long8 == 69257442001L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1888099200010L) + "'", long10 == (-1888099200010L));
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusSeconds(4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(99);
        int int14 = localDateTime13.getHourOfDay();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime13.getFields();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minus(readablePeriod16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localDateTime17.toString(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2000-02-21T14:52:02.350" + "'", str19, "2000-02-21T14:52:02.350");
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.centuryOfEra();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Italian");
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("ita");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider6);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider6);
        java.util.Locale locale10 = new java.util.Locale("53196316");
        java.lang.String str11 = locale10.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str17 = nameProvider6.getName(locale12, "2000-01-03T00:10:19.000Z", "");
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale12.getDisplayLanguage();
        java.util.Locale.Builder builder20 = builder5.setLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder5.setScript("zh_CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: zh_CN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertEquals(locale10.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "53196316" + "'", str14, "53196316");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e2d\u6587" + "'", str19, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2000-01-03T00:10:19.000Z");
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology5 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology5.dayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusWeeks((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category3, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category3);
        java.util.Locale locale20 = java.util.Locale.getDefault(category3);
        java.util.Locale locale21 = java.util.Locale.getDefault(category3);
        java.lang.String str22 = timeZone1.getDisplayName(locale21);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4" + "'", str22, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        timeZone0.setRawOffset((-292269338));
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getStandardOffset((long) 1);
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        boolean boolean10 = timeZone0.hasSameRules(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology12 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField14 = ethiopicChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = ethiopicChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        java.lang.String str18 = dateTimeZone16.getID();
        java.util.TimeZone timeZone19 = dateTimeZone16.toTimeZone();
        boolean boolean20 = timeZone9.hasSameRules(timeZone19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime22.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withMillisOfDay((int) (byte) 0);
        int int26 = localDateTime25.getYear();
        int int27 = localDateTime25.getEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime30 = property28.roundCeilingCopy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime32.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withMillisOfDay((int) (byte) 0);
        int int36 = localDateTime35.getYear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundFloorCopy();
        java.lang.String str39 = property37.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property37.getFieldType();
        org.joda.time.LocalDateTime.Property property41 = localDateTime30.property(dateTimeFieldType40);
        int int42 = localDateTime30.getMonthOfYear();
        java.util.Date date43 = localDateTime30.toDate();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.fromDateFields(date43);
        boolean boolean45 = timeZone19.inDaylightTime(date43);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4286851376L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType3 = localDateTime1.getFieldType(582);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 582");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(100);
        int int12 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime5.withMillisOfDay(13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime16.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMillis(955);
        boolean boolean24 = localDateTime5.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology26 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = ethiopicChronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology26.centuryOfEra();
        org.joda.time.DurationField durationField29 = ethiopicChronology26.millis();
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology26.weekOfWeekyear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withMillisOfSecond((int) (byte) 1);
        int int45 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property46 = localDateTime40.weekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime40.minusMillis(2022);
        int[] intArray50 = ethiopicChronology26.get((org.joda.time.ReadablePartial) localDateTime40, (long) '#');
        org.joda.time.LocalDateTime.Property property51 = localDateTime40.millisOfDay();
        int int52 = property51.get();
        org.joda.time.LocalDateTime localDateTime53 = property51.getLocalDateTime();
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = localDateTime53.getFields();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = localDateTime56.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology64 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = ethiopicChronology64.hourOfDay();
        org.joda.time.DateTimeField dateTimeField66 = ethiopicChronology64.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology64.secondOfDay();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology64);
        int int69 = localDateTime68.getDayOfYear();
        boolean boolean70 = localDateTime61.isEqual((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(chronology71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.withMillisOfSecond((int) (byte) 1);
        boolean boolean77 = localDateTime61.isAfter((org.joda.time.ReadablePartial) localDateTime72);
        int int78 = localDateTime61.getMonthOfYear();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(chronology79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime80.plusWeeks((int) (byte) 10);
        int int87 = localDateTime86.getMillisOfSecond();
        int int88 = localDateTime86.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime86.withYearOfEra(928);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = localDateTime90.getFieldType(0);
        int int93 = localDateTime61.get(dateTimeFieldType92);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime53.withField(dateTimeFieldType92, 35);
        boolean boolean96 = localDateTime5.isSupported(dateTimeFieldType92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime98 = localDateTime5.withDayOfWeek(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(ethiopicChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1962, 4, 23, 45]");
        org.junit.Assert.assertNotNull(property51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 53518689 + "'", int52 == 53518689);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(ethiopicChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 113 + "'", int69 == 113);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 689 + "'", int87 == 689);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 689 + "'", int88 == 689);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2022 + "'", int93 == 2022);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        long long6 = ethiopicChronology1.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusDays(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = property28.setCopy((int) (byte) 1);
        long long31 = property28.remainder();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.millisOfDay();
        int int43 = property28.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        boolean boolean45 = property28.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property28.getFieldType();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime19.withField(dateTimeFieldType46, 175);
        int int49 = localDateTime19.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime19.plusHours(83);
        long long53 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime51, (long) 2022);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        long long57 = ethiopicChronology1.add(readablePeriod54, (long) 491, 446);
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology61 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = ethiopicChronology61.hourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = ethiopicChronology61.monthOfYear();
        org.joda.time.DateTimeField dateTimeField64 = ethiopicChronology61.hourOfDay();
        org.joda.time.DurationField durationField65 = ethiopicChronology61.eras();
        org.joda.time.DateTimeField dateTimeField66 = ethiopicChronology61.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology61.monthOfYear();
        org.joda.time.DurationField durationField68 = ethiopicChronology61.eras();
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology61.era();
        int int70 = dateTimeField69.getMinimumValue();
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("2022-02-14T14:46:42.333");
        java.lang.String str73 = locale72.toLanguageTag();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology75 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField76 = ethiopicChronology75.hourOfDay();
        org.joda.time.DateTimeField dateTimeField77 = ethiopicChronology75.halfdayOfDay();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(chronology78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = localDateTime79.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.dayOfWeek();
        java.util.Locale locale86 = java.util.Locale.GERMANY;
        java.lang.String str87 = locale86.getScript();
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology89 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone88);
        org.joda.time.DateTimeField dateTimeField90 = ethiopicChronology89.clockhourOfDay();
        java.util.Locale locale92 = java.util.Locale.ITALIAN;
        java.lang.String str93 = dateTimeField90.getAsText((long) 'a', locale92);
        java.lang.String str94 = locale86.getDisplayName(locale92);
        java.lang.String str95 = dateTimeField77.getAsText((org.joda.time.ReadablePartial) localDateTime82, locale92);
        java.lang.String str96 = locale72.getDisplayLanguage(locale92);
        int int97 = dateTimeField69.getMaximumShortTextLength(locale72);
        java.lang.String str98 = dateTimeField58.getAsText(0, locale72);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3430L + "'", long6 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4287118746L + "'", long31 == 4287118746L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1888451517991L + "'", long53 == 1888451517991L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 491L + "'", long57 == 491L);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(ethiopicChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "und" + "'", str73, "und");
        org.junit.Assert.assertNotNull(ethiopicChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(ethiopicChronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "it");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "24" + "'", str93, "24");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "tedesco (Germania)" + "'", str94, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0" + "'", str95, "0");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "0" + "'", str98, "0");
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfYear();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.months();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.year();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = ethiopicChronology1.add(readablePeriod9, 4286799226L, 83);
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField14 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology16 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology16.clockhourOfDay();
        org.joda.time.DurationField durationField18 = ethiopicChronology16.weekyears();
        org.joda.time.DurationField durationField19 = ethiopicChronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology16.weekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = ethiopicChronology16.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 57);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = ethiopicChronology1.withZone(dateTimeZone21);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4286799226L + "'", long12 == 4286799226L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(ethiopicChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DurationField durationField9 = dateTimeField8.getDurationField();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        int int5 = localDateTime4.getYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        int int8 = property6.get();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra(65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMonthOfYear(670);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 670 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMinimumValue();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (byte) 1);
        int int29 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.withEra(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime24.yearOfEra();
        org.joda.time.LocalDateTime localDateTime35 = property34.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays(683);
        boolean boolean38 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weeks();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfHour();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusDays(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withYearOfCentury((int) (short) 1);
        long long24 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime14, 4286809804L);
        org.joda.time.Chronology chronology25 = ethiopicChronology1.withUTC();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.weekOfWeekyear();
        int int31 = localDateTime29.getYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMillis(51044001);
        int int44 = localDateTime40.getWeekyear();
        int[] intArray46 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime40, 21859200000L);
        org.joda.time.LocalDateTime.Property property47 = localDateTime40.secondOfMinute();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1888152717991L + "'", long24 == 1888152717991L);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1963, 1, 1, 10]");
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.monthOfYear();
        boolean boolean6 = dateTimeField5.isSupported();
        int int8 = dateTimeField5.getMinimumValue(0L);
        org.joda.time.DurationField durationField9 = dateTimeField5.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology11.clockhourOfDay();
        org.joda.time.DurationField durationField13 = ethiopicChronology11.weekyears();
        org.joda.time.DurationField durationField14 = ethiopicChronology11.seconds();
        org.joda.time.DateTimeZone dateTimeZone15 = ethiopicChronology11.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) durationField9, (org.joda.time.Chronology) ethiopicChronology11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(ethiopicChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.weeks();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.minuteOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology4 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology4.dayOfMonth();
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!");
        java.lang.String str10 = dateTimeField5.getAsText((int) (byte) 10, locale9);
        long long12 = dateTimeField5.roundHalfFloor((long) 113);
        int int14 = dateTimeField5.getMaximumValue(243144000046L);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology17 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology17.dayOfMonth();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusWeeks((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.lang.String str28 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime26, locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category15, locale27);
        java.util.Locale locale31 = java.util.Locale.getDefault(category15);
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.lang.String str33 = locale32.getScript();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology35 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology35.clockhourOfDay();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = dateTimeField36.getAsText((long) 'a', locale38);
        java.lang.String str40 = locale32.getDisplayName(locale38);
        java.lang.String str41 = locale31.getDisplayVariant(locale32);
        java.lang.String str42 = locale31.getDisplayScript();
        java.lang.String str44 = locale31.getExtension('x');
        int int45 = dateTimeField5.getMaximumShortTextLength(locale31);
        java.lang.String str48 = nameProvider0.getShortName(locale31, "de-DE", "");
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.clockhourOfDay();
        org.joda.time.DurationField durationField52 = ethiopicChronology50.weekyears();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology50.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology50.hourOfHalfday();
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology59 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology59.dayOfMonth();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime62.plusWeeks((int) (byte) 10);
        java.util.Locale locale69 = java.util.Locale.PRC;
        java.lang.String str70 = dateTimeField60.getAsText((org.joda.time.ReadablePartial) localDateTime68, locale69);
        java.util.Set<java.lang.String> strSet71 = locale69.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category57, locale69);
        java.util.Set<java.lang.String> strSet73 = locale69.getUnicodeLocaleKeys();
        int int74 = dateTimeField56.getMaximumShortTextLength(locale69);
        java.util.Locale locale76 = java.util.Locale.JAPAN;
        java.lang.String str77 = locale76.getCountry();
        java.lang.String str78 = dateTimeField56.getAsText(165075529L, locale76);
        java.lang.String str81 = nameProvider0.getName(locale76, "4", "2022-02-14T14:49:12.076");
        java.lang.String str82 = locale76.toString();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(ethiopicChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10" + "'", str10, "10");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-10L) + "'", long12 == (-10L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 30 + "'", int14 == 30);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2" + "'", str28, "2");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(ethiopicChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "24" + "'", str39, "24");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tedesco (Germania)" + "'", str40, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(ethiopicChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(ethiopicChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2" + "'", str70, "2");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "JP" + "'", str77, "JP");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "9" + "'", str78, "9");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ja_JP" + "'", str82, "ja_JP");
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minus(readablePeriod3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, 402);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology18 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology18.hourOfDay();
        org.joda.time.DurationField durationField20 = ethiopicChronology18.eras();
        org.joda.time.DateTimeField dateTimeField21 = ethiopicChronology18.weekyear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-292275054), (org.joda.time.Chronology) ethiopicChronology18);
        int int23 = localDateTime22.getWeekOfWeekyear();
        int int24 = localDateTime22.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology26 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = ethiopicChronology26.dayOfMonth();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusWeeks((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.PRC;
        java.lang.String str37 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime35, locale36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.lang.String str46 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime39, 2022, locale45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime39.minusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology51 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology51.hourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology51.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology51.secondOfDay();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology51);
        org.joda.time.DurationField durationField56 = ethiopicChronology51.eras();
        org.joda.time.DurationFieldType durationFieldType57 = durationField56.getType();
        boolean boolean58 = localDateTime39.isSupported(durationFieldType57);
        boolean boolean59 = localDateTime22.isSupported(durationFieldType57);
        boolean boolean60 = localDateTime15.isSupported(durationFieldType57);
        boolean boolean61 = localDateTime4.isSupported(durationFieldType57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = localDateTime4.toString("2000-02-21T14:48:10.338Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(ethiopicChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 44 + "'", int24 == 44);
        org.junit.Assert.assertNotNull(ethiopicChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2" + "'", str37, "2");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(ethiopicChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfMonth();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getScript();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology13 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology13.clockhourOfDay();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = dateTimeField14.getAsText((long) 'a', locale16);
        java.lang.String str18 = locale10.getDisplayName(locale16);
        java.lang.String str19 = locale16.getISO3Language();
        boolean boolean20 = locale16.hasExtensions();
        java.util.Locale locale21 = locale16.stripExtensions();
        java.lang.String str22 = dateTimeField8.getAsShortText((-29637911436508L), locale21);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(ethiopicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "24" + "'", str17, "24");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tedesco (Germania)" + "'", str18, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ita" + "'", str19, "ita");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "21" + "'", str22, "21");
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        java.lang.String str6 = dateTimeZone5.getID();
        java.lang.String str7 = dateTimeZone5.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology9 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology9.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone12 = ethiopicChronology9.getZone();
        long long14 = dateTimeZone5.getMillisKeepLocal(dateTimeZone12, 3480L);
        java.lang.String str16 = dateTimeZone12.getShortName(4286823333L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        boolean boolean19 = dateTimeZone12.isStandardOffset(951144594819L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(ethiopicChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3480L + "'", long14 == 3480L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.monthOfYear();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.weekyears();
        long long12 = durationField9.getDifferenceAsLong((long) 421200000, (long) 797);
        boolean boolean13 = durationField9.isPrecise();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        long long9 = durationField6.getDifferenceAsLong((long) ' ', (long) 53316);
        int int12 = durationField6.getValue((-59L), 186927098193233L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths(999);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, 100);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusWeeks((int) (byte) 10);
        int int34 = localDateTime33.getMillisOfSecond();
        int int35 = localDateTime33.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        boolean boolean39 = localDateTime33.isSupported(durationFieldType38);
        org.joda.time.DateTime dateTime40 = localDateTime33.toDateTime();
        boolean boolean41 = dateTime25.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime40.getZone();
        org.joda.time.DateTime dateTime43 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.centuryOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        boolean boolean61 = locale60.hasExtensions();
        boolean boolean62 = dateTime59.equals((java.lang.Object) locale60);
        int int63 = property49.getDifference((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean64 = dateTime43.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = localDateTime66.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology74 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = ethiopicChronology74.hourOfDay();
        org.joda.time.DateTimeField dateTimeField76 = ethiopicChronology74.secondOfDay();
        org.joda.time.DateTimeField dateTimeField77 = ethiopicChronology74.secondOfDay();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology74);
        int int79 = localDateTime78.getDayOfYear();
        boolean boolean80 = localDateTime71.isEqual((org.joda.time.ReadablePartial) localDateTime78);
        boolean boolean81 = dateTime59.equals((java.lang.Object) localDateTime71);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime71.plusYears(2012);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = localDateTime71.getValue(352);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 352");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 286 + "'", int34 == 286);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 286 + "'", int35 == 286);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(ethiopicChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 113 + "'", int79 == 113);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localDateTime83);
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.hours();
        long long11 = durationField9.getValueAsLong(492L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMinutes(1);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusDays(853);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.minusDays(911);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.era();
        java.lang.String str8 = ethiopicChronology1.toString();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.monthOfYear();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        int int12 = dateTimeField9.getMaximumTextLength(locale11);
        java.lang.String str13 = locale11.getCountry();
        java.util.Locale.setDefault(locale11);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "EthiopicChronology[+00:00:00.010]" + "'", str8, "EthiopicChronology[+00:00:00.010]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "tedesco (germania)_CA_hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CA" + "'", str13, "CA");
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("years", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfDay((int) (byte) 0);
        int int10 = localDateTime9.getYear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        int int27 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.weekyear();
        org.joda.time.LocalDateTime.Property property29 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundHalfCeilingCopy();
        int int31 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime30);
        int int33 = localDateTime32.getDayOfYear();
        int int34 = localDateTime32.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withPeriodAdded(readablePeriod35, 962);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField39 = localDateTime37.getField(53272001);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53272001");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21 + "'", int34 == 21);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours(298);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localDateTime11.toString("2022-02-14T14:48:07.066");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology6 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology6.clockhourOfDay();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = dateTimeField7.getAsText((long) 'a', locale9);
        int int11 = dateTimeField4.getMaximumTextLength(locale9);
        int int13 = dateTimeField4.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.centuryOfEra();
        java.lang.String str20 = localDateTime17.toString();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, (-292275054), locale22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.withDurationAdded(readableDuration24, 22);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withDurationAdded(readableDuration27, 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.weekyear();
        org.joda.time.LocalDateTime localDateTime40 = property38.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField41 = property38.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime42 = property38.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks(619);
        int int45 = localDateTime44.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusHours(51021001);
        boolean boolean48 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime26.withMillisOfDay(951);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime26.plus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withMillisOfSecond(13);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(ethiopicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "24" + "'", str10, "24");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-14T14:51:59.566" + "'", str20, "2022-02-14T14:51:59.566");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-292275054" + "'", str23, "-292275054");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 59 + "'", int45 == 59);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.centuryOfEra();
        java.lang.String str12 = localDateTime9.toString();
        boolean boolean13 = dateTimeZone1.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.yearOfCentury();
        java.lang.Class<?> wildcardClass15 = property14.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.010" + "'", str5, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-14T14:51:59.610" + "'", str12, "2022-02-14T14:51:59.610");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.weeks();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.monthOfYear();
        boolean boolean11 = dateTimeField10.isSupported();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology14 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology14.dayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusWeeks((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.PRC;
        java.lang.String str25 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime23, locale24);
        java.lang.String str26 = dateTimeField10.getAsText(10, locale24);
        boolean boolean28 = dateTimeField10.isLeap(614L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(ethiopicChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10" + "'", str26, "10");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Italian");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("UTC");
        java.util.Locale.Builder builder7 = builder0.setScript("");
        java.util.Locale locale8 = builder0.build();
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.String str10 = locale8.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "utc" + "'", str9, "utc");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "utc" + "'", str10, "utc");
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.secondOfMinute();
        long long11 = ethiopicChronology1.add((long) 469, (long) 160, 462);
        long long15 = ethiopicChronology1.add(1888152411778L, 1888152433750L, 339);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (byte) 0);
        boolean boolean20 = dateTimeZone17.isFixed();
        java.lang.String str22 = dateTimeZone17.getShortName(3430L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime24.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMinutes(1);
        boolean boolean28 = dateTimeZone17.equals((java.lang.Object) localDateTime24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusDays(55);
        int[] intArray32 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime24, (long) 896);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 74389L + "'", long11 == 74389L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 641971827453028L + "'", long15 == 641971827453028L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1962, 4, 23, 906]");
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        java.util.Locale locale2 = new java.util.Locale("yearOfCentury", "2022-02-14T14:49:42.001");
        org.junit.Assert.assertEquals(locale2.toString(), "yearofcentury_2022-02-14T14:49:42.001");
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.months();
        long long12 = durationField9.add(4286837263L, 55);
        int int15 = durationField9.getValue(694257082L, 4286896940L);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = durationField9.getMillis(1888152545001L, 205200640L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 1888152545001");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 138293237263L + "'", long12 == 138293237263L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.seconds();
        org.joda.time.Chronology chronology8 = ethiopicChronology1.withUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusDays(0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = property29.setCopy((int) (byte) 1);
        long long32 = property29.remainder();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.millisOfDay();
        int int44 = property29.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        boolean boolean46 = property29.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property29.getFieldType();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime20.withField(dateTimeFieldType47, 175);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime20.withDayOfMonth((int) (byte) 10);
        int[] intArray53 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime51, (long) 21);
        long long57 = ethiopicChronology1.add((long) 2922730, 82800001L, 2000);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray61 = ethiopicChronology1.get(readablePeriod58, 1888152546190L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 4287119716L + "'", long32 == 4287119716L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1962, 4, 23, 31]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 165602924730L + "'", long57 == 165602924730L);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        long long6 = ethiopicChronology1.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.years();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = ethiopicChronology1.getDateTimeMillis(1888152675001L, 308, 469, (-292269337), 116);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 308 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3430L + "'", long6 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology1.getZone();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getStandardOffset((long) 1);
        long long12 = dateTimeZone8.previousTransition(4286789037L);
        boolean boolean14 = dateTimeZone8.equals((java.lang.Object) (-31449599999L));
        org.joda.time.Chronology chronology15 = ethiopicChronology1.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField17 = ethiopicChronology1.minutes();
        org.joda.time.DurationFieldType durationFieldType18 = durationField17.getType();
        boolean boolean19 = durationField17.isSupported();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4286789037L + "'", long12 == 4286789037L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMinutes(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology6 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology6.clockhourOfDay();
        org.joda.time.DurationField durationField8 = ethiopicChronology6.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology6.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = ethiopicChronology6.getZone();
        org.joda.time.DurationField durationField11 = ethiopicChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology6.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology6.monthOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMinuteOfHour(10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusYears((int) (short) 1);
        int int35 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        int int36 = localDateTime23.getMillisOfDay();
        int int37 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime39.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology47 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = ethiopicChronology47.dayOfMonth();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusWeeks((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.PRC;
        java.lang.String str58 = dateTimeField48.getAsText((org.joda.time.ReadablePartial) localDateTime56, locale57);
        java.lang.String str59 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime44, 51040001, locale57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = localDateTime61.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withMillisOfDay((int) (byte) 0);
        int int65 = localDateTime64.getYear();
        int int66 = localDateTime64.getEra();
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.millisOfDay();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(chronology68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime69.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localDateTime75.toDateTime(readableInstant76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.millisOfDay();
        int int79 = property78.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property78.getFieldType();
        boolean boolean81 = localDateTime64.isSupported(dateTimeFieldType80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime44.withField(dateTimeFieldType80, 475);
        boolean boolean84 = localDateTime1.isSupported(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(ethiopicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 51059001 + "'", int36 == 51059001);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(ethiopicChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2" + "'", str58, "2");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "51040001" + "'", str59, "51040001");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2000-02-21T14:50:15.715Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2000-02-21T14:50:15.715Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.eras();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.secondOfDay();
        long long10 = dateTimeField8.roundCeiling(4286804280L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4286804990L + "'", long10 == 4286804990L);
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.lang.String str2 = locale1.getISO3Country();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.minuteOfHour();
        java.lang.String str11 = ethiopicChronology1.toString();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "EthiopicChronology[+00:00:00.010]" + "'", str11, "EthiopicChronology[+00:00:00.010]");
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = ethiopicChronology1.getDateTimeMillis(741, 475, 53262991, 37, 6, 197, (int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfMonth();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.minutes();
        org.joda.time.Chronology chronology10 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.minuteOfDay();
        java.lang.String str12 = dateTimeField11.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfDay((int) (byte) 0);
        int int18 = localDateTime17.getYear();
        int int19 = localDateTime17.getEra();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundCeilingCopy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime24.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 0);
        int int28 = localDateTime27.getYear();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundFloorCopy();
        java.lang.String str31 = property29.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property29.getFieldType();
        org.joda.time.LocalDateTime.Property property33 = localDateTime22.property(dateTimeFieldType32);
        int int34 = localDateTime22.getMonthOfYear();
        java.util.Date date35 = localDateTime22.toDate();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.fromDateFields(date35);
        int[] intArray38 = null;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale40.getISO3Country();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray43 = dateTimeField11.set((org.joda.time.ReadablePartial) localDateTime36, 365, intArray38, "2022-02-14T14:48:52.576", locale40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-14T14:48:52.576\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str12, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "CAN" + "'", str41, "CAN");
        org.junit.Assert.assertNotNull(strSet42);
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.years();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology6 = org.joda.time.chrono.EthiopicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology6.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = ethiopicChronology11.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology11.millisOfSecond();
        int int17 = dateTimeField16.getMaximumValue();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        int int32 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        int int33 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        long long35 = ethiopicChronology6.set((org.joda.time.ReadablePartial) localDateTime27, 4286809804L);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime27.plusMinutes(44);
        int int38 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusHours(258);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(ethiopicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(ethiopicChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 999 + "'", int17 == 999);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1888152720146L + "'", long35 == 1888152720146L);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(0);
        int int12 = localDateTime11.getMinuteOfHour();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfDay((int) (byte) 0);
        int int18 = localDateTime17.getYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.yearOfEra();
        boolean boolean20 = localDateTime11.equals((java.lang.Object) property19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime.Property property22 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = property22.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.dayOfYear();
        org.joda.time.DurationField durationField11 = ethiopicChronology1.years();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        java.util.Locale locale3 = new java.util.Locale("2022-02-14T14:50:15.081", "2022-02-14T14:49:13.772", "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-14t14:50:15.081_2022-02-14T14:49:13.772_DateTimeField[weekOfWeekyear]");
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology1.getZone();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getStandardOffset((long) 1);
        long long12 = dateTimeZone8.previousTransition(4286789037L);
        boolean boolean14 = dateTimeZone8.equals((java.lang.Object) (-31449599999L));
        org.joda.time.Chronology chronology15 = ethiopicChronology1.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology17 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology17.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology17);
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology17.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = ethiopicChronology17.getZone();
        org.joda.time.Chronology chronology24 = ethiopicChronology1.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = ethiopicChronology27.getZone();
        org.joda.time.DurationField durationField32 = ethiopicChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField33 = ethiopicChronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology27.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = ethiopicChronology27.getZone();
        org.joda.time.DateTimeZone dateTimeZone38 = ethiopicChronology27.getZone();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(1888152473001L, dateTimeZone38);
        org.joda.time.Chronology chronology40 = ethiopicChronology1.withZone(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4286789037L + "'", long12 == 4286789037L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(ethiopicChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology14 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology14.dayOfWeek();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime19.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = ethiopicChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology27.secondOfDay();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology27);
        int int32 = localDateTime31.getDayOfYear();
        boolean boolean33 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology35 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology35.centuryOfEra();
        org.joda.time.DurationField durationField38 = ethiopicChronology35.millis();
        org.joda.time.DateTimeField dateTimeField39 = ethiopicChronology35.weekOfWeekyear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMillisOfSecond((int) (byte) 1);
        int int54 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property55 = localDateTime49.weekyear();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime49.minusMillis(2022);
        int[] intArray59 = ethiopicChronology35.get((org.joda.time.ReadablePartial) localDateTime49, (long) '#');
        int int60 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localDateTime31, intArray59);
        int int61 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime10.minus(readableDuration62);
        org.joda.time.Chronology chronology64 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime10.plusMinutes(8);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 52);
        boolean boolean69 = localDateTime66.isAfter((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.minus(readableDuration70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.plusDays(739);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusHours(941);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(ethiopicChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 113 + "'", int32 == 113);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1962, 4, 23, 45]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfDay((int) (byte) 0);
        int int10 = localDateTime9.getYear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        int int27 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.weekyear();
        org.joda.time.LocalDateTime.Property property29 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundHalfCeilingCopy();
        int int31 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime30);
        int int33 = localDateTime32.getDayOfYear();
        int int34 = localDateTime32.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withPeriodAdded(readablePeriod35, 962);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = localDateTime37.getFields();
        int int39 = localDateTime37.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21 + "'", int34 == 21);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'u');
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int3 = timeZone2.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = timeZone2.getDisplayName(false, 53262991);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 53262991");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 421200000 + "'", int3 == 421200000);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy((int) (byte) 1);
        long long23 = property20.remainder();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.millisOfDay();
        int int35 = property20.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        boolean boolean37 = property20.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property20.getFieldType();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime11.withField(dateTimeFieldType38, 175);
        int int41 = localDateTime11.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime11.plusHours(83);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime11.withDayOfYear(44);
        int int46 = localDateTime45.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withSecondOfMinute(341);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 341 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4287120491L + "'", long23 == 4287120491L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology0.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology5 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology5.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = ethiopicChronology5.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology5.millisOfSecond();
        int int11 = dateTimeField10.getMaximumValue();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        int int26 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        int int27 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime21);
        long long29 = ethiopicChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 4286809804L);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.plusMinutes(44);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusDays(378);
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(ethiopicChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 999 + "'", int11 == 999);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1888152720503L + "'", long29 == 1888152720503L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        timeZone0.setRawOffset((-292269338));
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getStandardOffset((long) 1);
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        boolean boolean10 = timeZone0.hasSameRules(timeZone9);
        timeZone9.setRawOffset(53198677);
        int int13 = timeZone9.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+14:46");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(619);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths((int) 'a');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withMonthOfYear(51056001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51056001 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("JP");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.lang.String str9 = locale8.getScript();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology11.clockhourOfDay();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = dateTimeField12.getAsText((long) 'a', locale14);
        java.lang.String str16 = locale8.getDisplayName(locale14);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale locale19 = locale14.stripExtensions();
        java.util.Locale.setDefault(category7, locale19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology22 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology22.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = dateTimeField28.getAsText((long) 'a', locale30);
        java.lang.String str32 = dateTimeField24.getAsText((int) 'a', locale30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology34 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology34.clockhourOfDay();
        org.joda.time.DurationField durationField36 = ethiopicChronology34.weekyears();
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology34.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology39 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology39.clockhourOfDay();
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = dateTimeField40.getAsText((long) 'a', locale42);
        int int44 = dateTimeField37.getMaximumTextLength(locale42);
        java.lang.String str45 = locale30.getDisplayCountry(locale42);
        java.util.Locale.setDefault(category7, locale30);
        java.util.Locale.Builder builder47 = builder6.setLocale(locale30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder49 = builder6.removeUnicodeLocaleAttribute("2000-02-21T14:49:00.216Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2000-02-21T14:49:00.216Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(ethiopicChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "24" + "'", str15, "24");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tedesco (Germania)" + "'", str16, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ita" + "'", str17, "ita");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(ethiopicChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "24" + "'", str31, "24");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "97" + "'", str32, "97");
        org.junit.Assert.assertNotNull(ethiopicChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(ethiopicChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "24" + "'", str43, "24");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.centuryOfEra();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone10);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str17 = dateTimeZone15.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone15);
        boolean boolean19 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks(0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMaximumValue();
        int[] intArray25 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime23, 3820920525909L);
        int int26 = localDateTime23.size();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2083, 5, 21, 53325919]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.minuteOfHour();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(0);
        int int12 = localDateTime11.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusYears(689);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths(955);
        int int17 = localDateTime14.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withDate(686, 2014, 296);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2014 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.secondOfDay();
        boolean boolean6 = dateTimeField5.isSupported();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.year();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = ethiopicChronology1.get(readablePeriod10, (long) 103);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.year();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.year();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.millisOfSecond();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("402");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=402");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.hourOfDay();
        org.joda.time.DurationField durationField4 = ethiopicChronology2.eras();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology2.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-292275054), (org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology2.secondOfDay();
        org.joda.time.Chronology chronology8 = ethiopicChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology2.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = ethiopicChronology2.getZone();
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        timeZone0.setRawOffset((-292269338));
        int int5 = timeZone0.getRawOffset();
        int int6 = timeZone0.getRawOffset();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        int int9 = timeZone7.getOffset(0L);
        timeZone7.setRawOffset((-292269338));
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getStandardOffset((long) 1);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        int int19 = timeZone7.getOffset((long) 2);
        boolean boolean20 = timeZone0.hasSameRules(timeZone7);
        java.lang.String str21 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-292269338) + "'", int5 == (-292269338));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292269338) + "'", int6 == (-292269338));
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-292269338) + "'", int19 == (-292269338));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Greenwich Mean Time" + "'", str21, "Greenwich Mean Time");
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str2 = locale0.getUnicodeLocaleType("63");
        java.util.Locale locale3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getDisplayName(locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = ethiopicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology2.yearOfEra();
        java.util.Set<java.lang.String> strSet7 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet7.clear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone[] dateTimeZoneArray19 = new org.joda.time.DateTimeZone[] { dateTimeZone10, dateTimeZone12, dateTimeZone14, dateTimeZone16, dateTimeZone18 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray20 = strSet7.toArray(dateTimeZoneArray19);
        boolean boolean22 = strSet7.remove((java.lang.Object) false);
        int int23 = strSet7.size();
        boolean boolean24 = ethiopicChronology2.equals((java.lang.Object) strSet7);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(4286920822L, (org.joda.time.Chronology) ethiopicChronology2);
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = ethiopicChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology2.dayOfMonth();
        java.lang.String str30 = dateTimeField28.getAsText(1888152577001L);
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZoneArray19);
        org.junit.Assert.assertNotNull(dateTimeZoneArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "21" + "'", str30, "21");
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = null;
        java.lang.String str5 = nameProvider0.getShortName(locale2, "2", "+00:00");
        java.util.Locale locale6 = null;
        java.lang.String str9 = nameProvider0.getShortName(locale6, "lun", "62");
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("2022-02-21T14:47:22.589");
        java.lang.String str14 = nameProvider0.getName(locale11, "-292269338", "DEU");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology17 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology17.clockhourOfDay();
        org.joda.time.DurationField durationField19 = ethiopicChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology17.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology22 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology22.clockhourOfDay();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = dateTimeField23.getAsText((long) 'a', locale25);
        int int27 = dateTimeField20.getMaximumTextLength(locale25);
        int int29 = dateTimeField20.getMinimumValue((-3600001L));
        int int30 = dateTimeField20.getMaximumValue();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime32.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withMillisOfDay((int) (byte) 0);
        int int36 = localDateTime35.getYear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundFloorCopy();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.monthOfYear();
        org.joda.time.tz.NameProvider nameProvider52 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider52);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider52);
        java.util.Locale locale56 = new java.util.Locale("53196316");
        java.lang.String str57 = locale56.getDisplayVariant();
        java.util.Locale locale58 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale56.getDisplayName(locale58);
        java.lang.String str63 = nameProvider52.getName(locale58, "2000-01-03T00:10:19.000Z", "");
        java.util.Locale.Builder builder64 = new java.util.Locale.Builder();
        java.util.Locale locale65 = builder64.build();
        java.lang.String str68 = nameProvider52.getShortName(locale65, "seconds", "2022-02-14T14:46:56.225");
        int int69 = property51.getMaximumShortTextLength(locale65);
        java.lang.String str70 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, 923, locale65);
        java.util.Locale.setDefault(locale65);
        java.lang.String str74 = nameProvider0.getName(locale65, "2022-02-14T14:50:07.748", "2022-02-14T14:49:46.938");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(ethiopicChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(ethiopicChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "24" + "'", str26, "24");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 24 + "'", int30 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(nameProvider52);
        org.junit.Assert.assertEquals(locale56.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "53196316" + "'", str60, "53196316");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "923" + "'", str70, "923");
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.years();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfSecond((int) (byte) 1);
        int int23 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.weekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.minusMillis(2022);
        int int27 = localDateTime18.getEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        org.joda.time.LocalDateTime localDateTime38 = property36.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField39 = property36.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime40 = property36.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusDays(4);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.minusMillis(9);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.plusSeconds(4);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime61.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(chronology68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.withMillisOfSecond((int) (byte) 1);
        int int74 = localDateTime61.compareTo((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime.Property property75 = localDateTime69.weekyear();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime81.withMinuteOfHour(10);
        boolean boolean86 = localDateTime69.isEqual((org.joda.time.ReadablePartial) localDateTime85);
        boolean boolean87 = localDateTime59.isAfter((org.joda.time.ReadablePartial) localDateTime85);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime59.plusMonths(55);
        int[] intArray90 = localDateTime59.getValues();
        org.joda.time.LocalDateTime localDateTime92 = localDateTime59.minusYears(901);
        int[] intArray93 = localDateTime59.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray95 = dateTimeField8.set((org.joda.time.ReadablePartial) localDateTime46, 274, intArray93, 301);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 301 for weekyearOfCentury must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(intArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[2000, 2, 21, 53525083]");
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(intArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[2000, 2, 21, 53525083]");
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("2022-02-14T14:48:36.664");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-14T14:48:36.664 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        java.util.Locale locale7 = null;
        java.lang.String str8 = localDateTime5.toString("0", locale7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        int int10 = localDateTime5.getSecondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        int int25 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property26 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.withEra(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime20.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = property30.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusDays(683);
        boolean boolean34 = localDateTime5.equals((java.lang.Object) localDateTime33);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.monthOfYear();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.minutes();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("JP");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setScript("53346800");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 53346800 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMillisOfSecond((int) (byte) 1);
        int int46 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property47 = localDateTime41.weekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime41.minusYears(999);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.minusMinutes(51040001);
        int int55 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = property8.addToCopy((int) (short) 10);
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("2022-02-14T14:46:42.333");
        java.lang.String str60 = locale59.toLanguageTag();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology62 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = ethiopicChronology62.hourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = ethiopicChronology62.halfdayOfDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = localDateTime66.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.dayOfWeek();
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.lang.String str74 = locale73.getScript();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology76 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField77 = ethiopicChronology76.clockhourOfDay();
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        java.lang.String str80 = dateTimeField77.getAsText((long) 'a', locale79);
        java.lang.String str81 = locale73.getDisplayName(locale79);
        java.lang.String str82 = dateTimeField64.getAsText((org.joda.time.ReadablePartial) localDateTime69, locale79);
        java.lang.String str83 = locale59.getDisplayLanguage(locale79);
        java.lang.String str84 = property8.getAsShortText(locale59);
        org.joda.time.LocalDateTime localDateTime86 = property8.setCopy(53290338);
        org.joda.time.LocalDateTime localDateTime88 = property8.setCopy(2023);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287121294L + "'", long11 == 4287121294L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "und" + "'", str60, "und");
        org.junit.Assert.assertNotNull(ethiopicChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(ethiopicChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "24" + "'", str80, "24");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tedesco (Germania)" + "'", str81, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2000" + "'", str84, "2000");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.dayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusWeeks((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime10, locale11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusMinutes(27);
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean17 = strSet15.addAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray18 = strSet16.toArray();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology21.secondOfDay();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology21);
        org.joda.time.DurationField durationField26 = ethiopicChronology21.eras();
        org.joda.time.DateTimeField dateTimeField27 = ethiopicChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology21.hourOfHalfday();
        boolean boolean29 = strSet16.equals((java.lang.Object) dateTimeField28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        int int36 = localDateTime35.getYearOfEra();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = locale38.getScript();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology41 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = ethiopicChronology41.clockhourOfDay();
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = dateTimeField42.getAsText((long) 'a', locale44);
        java.lang.String str46 = locale38.getDisplayName(locale44);
        java.lang.String str47 = locale44.getDisplayCountry();
        java.lang.String str48 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime35, 809, locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = dateTimeField28.getType();
        boolean boolean50 = localDateTime10.isSupported(dateTimeFieldType49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime10.plusWeeks(724);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2" + "'", str12, "2");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(ethiopicChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(ethiopicChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "24" + "'", str45, "24");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tedesco (Germania)" + "'", str46, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "809" + "'", str48, "809");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, 402);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(46);
        int int13 = localDateTime10.getDayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = property22.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField25 = property22.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime26 = property22.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks(619);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = property29.roundFloorCopy();
        int int32 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.plusSeconds(4);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusMillis(99);
        int int49 = localDateTime48.getHourOfDay();
        org.joda.time.DateTimeField[] dateTimeFieldArray50 = localDateTime48.getFields();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.minus(readablePeriod51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.weekyear();
        org.joda.time.Interval interval62 = property61.toInterval();
        java.lang.String str63 = property61.toString();
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str66 = locale65.getCountry();
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime68 = property61.setCopy("-292275054", locale65);
        java.lang.String str69 = property61.getAsText();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology71 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = ethiopicChronology71.hourOfDay();
        org.joda.time.DateTimeField dateTimeField73 = ethiopicChronology71.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Chronology chronology75 = ethiopicChronology71.withZone(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfCentury();
        boolean boolean77 = property61.equals((java.lang.Object) chronology75);
        org.joda.time.LocalDateTime localDateTime79 = property61.addToCopy(962);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.plus(readableDuration80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = localDateTime81.getFieldType(0);
        int int84 = localDateTime48.indexOf(dateTimeFieldType83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime31.withField(dateTimeFieldType83, 53510001);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 14 + "'", int49 == 14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Property[weekyear]" + "'", str63, "Property[weekyear]");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "CA" + "'", str66, "CA");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2000" + "'", str69, "2000");
        org.junit.Assert.assertNotNull(ethiopicChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.dayOfWeek();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale12.getScript();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology15 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology15.clockhourOfDay();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = dateTimeField16.getAsText((long) 'a', locale18);
        java.lang.String str20 = locale12.getDisplayName(locale18);
        java.lang.String str21 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localDateTime8, locale18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.plusWeeks(764);
        org.joda.time.ReadablePartial readablePartial24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = localDateTime8.compareTo(readablePartial24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(ethiopicChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "24" + "'", str19, "24");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tedesco (Germania)" + "'", str20, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(131);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology5 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology5.hourOfDay();
        org.joda.time.DurationField durationField7 = ethiopicChronology5.eras();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology5.weekOfWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekOfWeekyear();
        int int14 = localDateTime12.getYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology16 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology16.dayOfMonth();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime25, locale26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime29, 2022, locale35);
        java.lang.String str37 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime12, locale35);
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale locale40 = builder39.build();
        java.lang.String str41 = dateTimeField8.getAsText((int) '4', locale40);
        java.lang.String str42 = locale40.getLanguage();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology44 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology44.dayOfMonth();
        java.util.Locale locale49 = new java.util.Locale("hi!", "hi!");
        java.lang.String str50 = dateTimeField45.getAsText((int) (byte) 10, locale49);
        java.lang.String str51 = locale40.getDisplayName(locale49);
        java.util.Locale locale53 = new java.util.Locale("53196316");
        java.lang.String str54 = locale53.getDisplayVariant();
        java.lang.String str55 = locale49.getDisplayLanguage(locale53);
        boolean boolean56 = strSet3.equals((java.lang.Object) locale53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime.Property property68 = localDateTime64.monthOfYear();
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("2022-02-14T14:46:42.333");
        java.lang.String str71 = locale70.toLanguageTag();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology73 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone72);
        org.joda.time.DateTimeField dateTimeField74 = ethiopicChronology73.hourOfDay();
        org.joda.time.DateTimeField dateTimeField75 = ethiopicChronology73.halfdayOfDay();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology76);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = localDateTime77.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property83 = localDateTime80.dayOfWeek();
        java.util.Locale locale84 = java.util.Locale.GERMANY;
        java.lang.String str85 = locale84.getScript();
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology87 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone86);
        org.joda.time.DateTimeField dateTimeField88 = ethiopicChronology87.clockhourOfDay();
        java.util.Locale locale90 = java.util.Locale.ITALIAN;
        java.lang.String str91 = dateTimeField88.getAsText((long) 'a', locale90);
        java.lang.String str92 = locale84.getDisplayName(locale90);
        java.lang.String str93 = dateTimeField75.getAsText((org.joda.time.ReadablePartial) localDateTime80, locale90);
        java.lang.String str94 = locale70.getDisplayLanguage(locale90);
        java.util.Locale.setDefault(locale90);
        java.lang.String str96 = property68.getAsShortText(locale90);
        java.lang.String str97 = locale53.getDisplayName(locale90);
        java.lang.String str98 = dateTimeZone1.getShortName(4286885427L, locale90);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(ethiopicChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(ethiopicChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2" + "'", str27, "2");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "7" + "'", str37, "7");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "52" + "'", str41, "52");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(ethiopicChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "10" + "'", str50, "10");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals(locale53.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "und" + "'", str71, "und");
        org.junit.Assert.assertNotNull(ethiopicChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(ethiopicChronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "it");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "24" + "'", str91, "24");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "tedesco (Germania)" + "'", str92, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0" + "'", str93, "0");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "feb" + "'", str96, "feb");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "53196316" + "'", str97, "53196316");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "+131:00" + "'", str98, "+131:00");
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology13 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology13.dayOfMonth();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusWeeks((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.lang.String str24 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime22, locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale23.getScript();
        java.util.Set<java.lang.Character> charSet27 = locale23.getExtensionKeys();
        java.lang.String str28 = dateTimeField10.getAsShortText((long) 1439, locale23);
        java.util.Locale.setDefault(locale23);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(ethiopicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2" + "'", str24, "2");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "4" + "'", str28, "4");
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u4e2d\u6587" + "'", str2, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-02-14T14:46:37.720");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        boolean boolean10 = strSet8.add("2000-02-21T14:49:00.216Z");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.dayOfMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusWeeks((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.lang.Object[] objArray15 = strSet14.toArray();
        java.lang.Object obj16 = null;
        boolean boolean17 = strSet14.equals(obj16);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("JP");
        java.lang.String[] strArray25 = new java.lang.String[] { "10", "UTC", "10", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        java.util.Iterator<java.lang.String> strItor28 = strSet26.iterator();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet26.parallelStream();
        java.lang.String str30 = java.util.Locale.lookupTag(languageRangeList19, (java.util.Collection<java.lang.String>) strSet26);
        boolean boolean31 = strSet14.retainAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.LinkedHashSet[] linkedHashSetArray33 = new java.util.LinkedHashSet[0];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.String>[] strSetArray34 = (java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray33;
        java.util.LinkedHashSet<java.lang.String>[] strSetArray35 = strSet14.toArray((java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology37 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = ethiopicChronology37.yearOfEra();
        org.joda.time.DurationField durationField40 = ethiopicChronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology37.yearOfEra();
        java.util.Set<java.lang.String> strSet42 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet42.clear();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.DateTimeZone[] dateTimeZoneArray54 = new org.joda.time.DateTimeZone[] { dateTimeZone45, dateTimeZone47, dateTimeZone49, dateTimeZone51, dateTimeZone53 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray55 = strSet42.toArray(dateTimeZoneArray54);
        boolean boolean57 = strSet42.remove((java.lang.Object) false);
        int int58 = strSet42.size();
        boolean boolean59 = ethiopicChronology37.equals((java.lang.Object) strSet42);
        org.joda.time.DurationField durationField60 = ethiopicChronology37.months();
        boolean boolean61 = strSet14.equals((java.lang.Object) ethiopicChronology37);
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet14, filteringMode62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2" + "'", str13, "2");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(linkedHashSetArray33);
        org.junit.Assert.assertNotNull(strSetArray34);
        org.junit.Assert.assertNotNull(strSetArray35);
        org.junit.Assert.assertNotNull(ethiopicChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZoneArray54);
        org.junit.Assert.assertNotNull(dateTimeZoneArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode62.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology8 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology8.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = property19.setCopy((int) (byte) 1);
        long long22 = property19.remainder();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.millisOfDay();
        int int34 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        int int35 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30);
        int[] intArray37 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime30, (long) (short) 0);
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology1.year();
        org.joda.time.DateTimeField dateTimeField39 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology43 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology43.clockhourOfDay();
        org.joda.time.DurationField durationField45 = ethiopicChronology43.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = ethiopicChronology43.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = ethiopicChronology43.getZone();
        java.lang.String str48 = dateTimeZone47.getID();
        java.lang.String str49 = dateTimeZone47.getID();
        java.util.TimeZone timeZone50 = dateTimeZone47.toTimeZone();
        long long52 = dateTimeZone47.convertUTCToLocal((long) (-292269338));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.Chronology chronology54 = ethiopicChronology1.withZone(dateTimeZone47);
        int int56 = dateTimeZone47.getOffset(1888811478991L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(ethiopicChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4287121812L + "'", long22 == 4287121812L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 30 + "'", int35 == 30);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1962, 4, 23, 10]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(ethiopicChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-292269328L) + "'", long52 == (-292269328L));
        org.junit.Assert.assertNotNull(chronology54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone4 = ethiopicChronology1.getZone();
        boolean boolean5 = dateTimeZone4.isFixed();
        java.lang.String str6 = dateTimeZone4.getID();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.lang.String str9 = locale8.getLanguage();
        java.lang.String str10 = dateTimeZone4.getShortName((long) 1962, locale8);
        java.util.TimeZone timeZone11 = dateTimeZone4.toTimeZone();
        java.lang.Object obj12 = timeZone11.clone();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.Interval interval9 = property8.toInterval();
        java.lang.String str10 = property8.toString();
        org.joda.time.LocalDateTime localDateTime12 = property8.addWrapFieldToCopy(816);
        int[] intArray13 = localDateTime12.getValues();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = property22.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField25 = property22.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime26 = property22.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks(619);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withYear(495);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.plus(readablePeriod32);
        java.lang.Object obj34 = null;
        boolean boolean35 = localDateTime26.equals(obj34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime26.withYear(53290338);
        int int38 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[weekyear]" + "'", str10, "Property[weekyear]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2816, 2, 22, 53521930]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime8.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology13 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField15 = ethiopicChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = ethiopicChronology13.getZone();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology13);
        org.joda.time.DurationField durationField19 = ethiopicChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField21 = ethiopicChronology13.hours();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone23);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str30 = dateTimeZone28.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone28);
        boolean boolean32 = localDateTime26.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        int[] intArray34 = ethiopicChronology13.get((org.joda.time.ReadablePartial) localDateTime31, (long) 30);
        ethiopicChronology1.validate((org.joda.time.ReadablePartial) localDateTime11, intArray34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime11.plus(readablePeriod36);
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        int int40 = property39.getMaximumValue();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(ethiopicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.years();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.minuteOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        int int5 = localDateTime4.getYear();
        int int6 = localDateTime4.getEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int11 = dateTimeField9.getMinimumValue(3966245490873L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        int int6 = dateTimeField5.getMinimumValue();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        int int21 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        boolean boolean35 = locale34.hasExtensions();
        boolean boolean36 = dateTime33.equals((java.lang.Object) locale34);
        java.lang.String str37 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime16.hourOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMillisOfSecond((int) (byte) 1);
        int int53 = localDateTime40.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property54 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime.Property property55 = localDateTime48.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = property55.withMinimumValue();
        int int57 = localDateTime56.getEra();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.secondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = localDateTime56.getFieldTypes();
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.plusHours(44);
        boolean boolean63 = localDateTime16.isEqual((org.joda.time.ReadablePartial) localDateTime62);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292269338) + "'", int6 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4286911900L);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = ethiopicChronology1.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = ethiopicChronology1.add((long) 937, 1888152620924L, 53364741);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1888152620924 * 53364741");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField12 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology14 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField16 = ethiopicChronology14.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology19 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology19.clockhourOfDay();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = dateTimeField20.getAsText((long) 'a', locale22);
        int int24 = dateTimeField17.getMaximumTextLength(locale22);
        int int26 = dateTimeField17.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.centuryOfEra();
        java.lang.String str33 = localDateTime30.toString();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, (-292275054), locale35);
        java.lang.String str37 = localDateTime30.toString();
        java.lang.String str38 = localDateTime30.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.minusDays(100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime44.withYearOfCentury((int) (short) 1);
        int int53 = localDateTime44.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = localDateTime44.getFieldType(0);
        int int56 = localDateTime30.get(dateTimeFieldType55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime30.withYearOfEra(689);
        long long60 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime30, 491L);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology62 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = ethiopicChronology62.clockhourOfDay();
        org.joda.time.DurationField durationField64 = ethiopicChronology62.weekyears();
        org.joda.time.DateTimeField dateTimeField65 = ethiopicChronology62.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = ethiopicChronology62.getZone();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology62);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.hourOfDay();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withMillisOfDay(495);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology72);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray74 = localDateTime73.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withMillisOfDay((int) (byte) 0);
        int int77 = localDateTime76.getYear();
        org.joda.time.LocalDateTime.Property property78 = localDateTime76.yearOfEra();
        org.joda.time.LocalDateTime localDateTime79 = property78.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime81 = property78.addToCopy((long) 2000);
        org.joda.time.DurationField durationField82 = property78.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property78.getFieldType();
        boolean boolean84 = localDateTime71.isSupported(dateTimeFieldType83);
        org.joda.time.Chronology chronology85 = localDateTime71.getChronology();
        long long87 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime71, 1894286832136L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(ethiopicChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(ethiopicChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "24" + "'", str23, "24");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-14T14:52:02.149" + "'", str33, "2022-02-14T14:52:02.149");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-292275054" + "'", str36, "-292275054");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-14T14:52:02.149" + "'", str37, "2022-02-14T14:52:02.149");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-14T14:52:02.149" + "'", str38, "2022-02-14T14:52:02.149");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1887547922139L + "'", long60 == 1887547922139L);
        org.junit.Assert.assertNotNull(ethiopicChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(chronology85);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1645401600485L + "'", long87 == 1645401600485L);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(4286831624L, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(772);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long3 = dateTimeZone1.previousTransition(1888152489001L);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfDay((int) (byte) 0);
        int int15 = localDateTime14.getYear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundFloorCopy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        int int32 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfCeilingCopy();
        int int36 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime35);
        int int38 = localDateTime37.getDayOfYear();
        int int39 = localDateTime37.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusMillis(0);
        boolean boolean42 = dateTimeZone1.isLocalDateTimeGap(localDateTime41);
        int int43 = localDateTime41.getSecondOfMinute();
        int int44 = localDateTime41.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1888152489001L + "'", long3 == 1888152489001L);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        java.util.Locale locale1 = new java.util.Locale("97");
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "97");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("26", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=26");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.yearOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = ethiopicChronology1.getDateTimeMillis((long) 657, 216, 962, 435857, 14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 216 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.millisOfDay();
        org.joda.time.DurationField durationField12 = ethiopicChronology1.minutes();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        java.util.Locale locale1 = new java.util.Locale("53298441");
        org.junit.Assert.assertEquals(locale1.toString(), "53298441");
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.millisOfDay();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.hours();
        long long11 = durationField9.getMillis(4287054319L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 15433395548400000L + "'", long11 == 15433395548400000L);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DurationField durationField11 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.dayOfYear();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        java.lang.String str26 = property8.getAsText();
        int int27 = property8.getMaximumValue();
        boolean boolean28 = property8.isLeap();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287122542L + "'", long11 == 4287122542L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2000" + "'", str26, "2000");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.secondOfMinute();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMonths(999);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withPeriodAdded(readablePeriod20, 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekyear(614);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plus(readableDuration25);
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        java.util.Locale locale31 = new java.util.Locale("53196316");
        java.lang.String str32 = locale31.getDisplayVariant();
        java.util.Locale locale33 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str38 = nameProvider27.getName(locale33, "2000-01-03T00:10:19.000Z", "");
        java.lang.String str39 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDateTime26, locale33);
        java.lang.String str40 = locale33.getDisplayCountry();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(nameProvider27);
        org.junit.Assert.assertEquals(locale31.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53196316" + "'", str35, "53196316");
        org.junit.Assert.assertNull(str38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2" + "'", str39, "2");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Taiwan" + "'", str40, "Taiwan");
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.hourOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        int int16 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property17 = localDateTime11.weekyear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMinuteOfHour(10);
        boolean boolean28 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withMonthOfYear((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.yearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withYear(325);
        int int34 = dateTimeField1.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.weekyear();
        org.joda.time.LocalDateTime localDateTime45 = property43.setCopy((int) (byte) 1);
        long long46 = property43.remainder();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.millisOfDay();
        int int58 = property43.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        boolean boolean60 = property43.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology62 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = ethiopicChronology62.clockhourOfDay();
        org.joda.time.DurationField durationField64 = ethiopicChronology62.weekyears();
        org.joda.time.DurationField durationField65 = ethiopicChronology62.hours();
        boolean boolean66 = property43.equals((java.lang.Object) ethiopicChronology62);
        org.joda.time.LocalDateTime localDateTime67 = property43.roundHalfCeilingCopy();
        boolean boolean68 = localDateTime33.equals((java.lang.Object) property43);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime33.plusHours(561);
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 4287122673L + "'", long46 == 4287122673L);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        java.lang.String str6 = dateTimeZone5.getID();
        java.lang.String str7 = dateTimeZone5.getID();
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        long long10 = dateTimeZone5.convertUTCToLocal((long) (-292269338));
        java.lang.String str12 = dateTimeZone5.getName((long) 686);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology14 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField16 = ethiopicChronology14.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = ethiopicChronology14.getZone();
        java.lang.String str19 = dateTimeZone18.getID();
        int int21 = dateTimeZone18.getStandardOffset((long) (-1));
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (byte) 0);
        boolean boolean26 = dateTimeZone23.isFixed();
        java.lang.String str28 = dateTimeZone23.getShortName(3430L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = localDateTime30.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusMinutes(1);
        boolean boolean34 = dateTimeZone23.equals((java.lang.Object) localDateTime30);
        long long36 = dateTimeZone18.getMillisKeepLocal(dateTimeZone23, 4286804280L);
        long long40 = dateTimeZone23.convertLocalToUTC(955L, true, 11L);
        boolean boolean41 = dateTimeZone5.equals((java.lang.Object) 955L);
        long long43 = dateTimeZone5.convertUTCToLocal(4320000000L);
        boolean boolean44 = dateTimeZone5.isFixed();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-292269328L) + "'", long10 == (-292269328L));
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(ethiopicChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4286804280L + "'", long36 == 4286804280L);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 945L + "'", long40 == 945L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 4320000010L + "'", long43 == 4320000010L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = property8.roundFloorCopy();
        int int12 = localDateTime11.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval15 = property13.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.monthOfYear();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.months();
        long long13 = durationField10.subtract((long) 387, 535);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1299023999613L) + "'", long13 == (-1299023999613L));
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime8.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology13 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField15 = ethiopicChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = ethiopicChronology13.getZone();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology13);
        org.joda.time.DurationField durationField19 = ethiopicChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField21 = ethiopicChronology13.hours();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone23);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str30 = dateTimeZone28.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone28);
        boolean boolean32 = localDateTime26.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        int[] intArray34 = ethiopicChronology13.get((org.joda.time.ReadablePartial) localDateTime31, (long) 30);
        ethiopicChronology1.validate((org.joda.time.ReadablePartial) localDateTime11, intArray34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime11.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime11.plus(readablePeriod38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime11.millisOfSecond();
        org.joda.time.DurationField durationField41 = property40.getLeapDurationField();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(ethiopicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNull(durationField41);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusWeeks((int) (byte) 10);
        int int18 = localDateTime17.getMillisOfSecond();
        int int19 = localDateTime17.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = localDateTime17.isSupported(durationFieldType22);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime();
        boolean boolean25 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime24.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology29 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology29.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = ethiopicChronology29.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology29.millisOfSecond();
        org.joda.time.DurationField durationField35 = ethiopicChronology29.hours();
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology29.dayOfMonth();
        org.joda.time.DurationField durationField37 = ethiopicChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology29.monthOfYear();
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = dateTimeField38.getAsShortText(402, locale40);
        java.lang.String str42 = dateTimeZone26.getName(3430L, locale40);
        java.lang.String str43 = locale40.getDisplayVariant();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 81 + "'", int18 == 81);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 81 + "'", int19 == 81);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(ethiopicChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "402" + "'", str41, "402");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = ethiopicChronology1.getDateTimeMillis(86399, 482, 51023001, 0, (-3121), 475, 380);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3121 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology9 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = ethiopicChronology9.weekyears();
        org.joda.time.DurationField durationField12 = ethiopicChronology9.hours();
        int int13 = ethiopicChronology9.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField14 = ethiopicChronology9.halfdays();
        org.joda.time.DurationField durationField15 = ethiopicChronology9.millis();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(689);
        org.joda.time.Chronology chronology18 = ethiopicChronology9.withZone(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.Chronology chronology20 = ethiopicChronology1.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField21 = chronology20.centuries();
        java.lang.String str22 = durationField21.getName();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(ethiopicChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "centuries" + "'", str22, "centuries");
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        int int32 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.minusMillis(2022);
        boolean boolean36 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField38 = localDateTime27.getField(177);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 177");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet0.clear();
        int int2 = strSet0.size();
        java.util.Locale.FilteringMode filteringMode3 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.Locale.FilteringMode filteringMode4 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.Locale.FilteringMode[] filteringModeArray5 = new java.util.Locale.FilteringMode[] { filteringMode3, filteringMode4 };
        java.util.Locale.FilteringMode[] filteringModeArray6 = strSet0.toArray(filteringModeArray5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology8 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology8.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = ethiopicChronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology8.dayOfWeek();
        boolean boolean16 = strSet0.equals((java.lang.Object) ethiopicChronology8);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet0.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Collection<java.lang.String> strCollection21 = null;
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, strCollection21);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, strCollection23);
        java.util.stream.Stream<java.lang.String> strStream25 = strList24.parallelStream();
        boolean boolean26 = strSet0.removeAll((java.util.Collection<java.lang.String>) strList24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology28 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = ethiopicChronology28.dayOfMonth();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusWeeks((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.lang.String str39 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime37, locale38);
        java.util.Set<java.lang.String> strSet40 = locale38.getUnicodeLocaleKeys();
        java.lang.Object[] objArray41 = strSet40.toArray();
        java.lang.Object obj42 = null;
        boolean boolean43 = strSet40.equals(obj42);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.parse("JP");
        java.lang.String[] strArray51 = new java.lang.String[] { "10", "UTC", "10", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        java.util.Iterator<java.lang.String> strItor54 = strSet52.iterator();
        java.util.stream.Stream<java.lang.String> strStream55 = strSet52.parallelStream();
        java.lang.String str56 = java.util.Locale.lookupTag(languageRangeList45, (java.util.Collection<java.lang.String>) strSet52);
        boolean boolean57 = strSet40.retainAll((java.util.Collection<java.lang.String>) strSet52);
        boolean boolean58 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet52);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology60 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = ethiopicChronology60.hourOfDay();
        org.joda.time.DurationField durationField62 = ethiopicChronology60.eras();
        org.joda.time.DateTimeField dateTimeField63 = ethiopicChronology60.weekOfWeekyear();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(chronology64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.weekOfWeekyear();
        int int69 = localDateTime67.getYear();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology71 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = ethiopicChronology71.dayOfMonth();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(chronology73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime74.plusWeeks((int) (byte) 10);
        java.util.Locale locale81 = java.util.Locale.PRC;
        java.lang.String str82 = dateTimeField72.getAsText((org.joda.time.ReadablePartial) localDateTime80, locale81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(chronology83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime84.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale90 = java.util.Locale.JAPAN;
        java.lang.String str91 = dateTimeField72.getAsText((org.joda.time.ReadablePartial) localDateTime84, 2022, locale90);
        java.lang.String str92 = dateTimeField63.getAsShortText((org.joda.time.ReadablePartial) localDateTime67, locale90);
        java.lang.String str93 = locale90.getISO3Language();
        java.util.Set<java.lang.String> strSet94 = locale90.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream95 = strSet94.stream();
        java.util.stream.Stream<java.lang.String> strStream96 = strSet94.stream();
        int int97 = strSet94.size();
        boolean boolean98 = strSet52.retainAll((java.util.Collection<java.lang.String>) strSet94);
        java.lang.Object[] objArray99 = strSet94.toArray();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + filteringMode3 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode3.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + filteringMode4 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode4.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(filteringModeArray5);
        org.junit.Assert.assertNotNull(filteringModeArray6);
        org.junit.Assert.assertNotNull(ethiopicChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2" + "'", str39, "2");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(ethiopicChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2" + "'", str82, "2");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2022" + "'", str91, "2022");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "7" + "'", str92, "7");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "jpn" + "'", str93, "jpn");
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNotNull(strStream95);
        org.junit.Assert.assertNotNull(strStream96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(objArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray99), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray99), "[]");
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getScript();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology3 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology3.clockhourOfDay();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = dateTimeField4.getAsText((long) 'a', locale6);
        java.lang.String str8 = locale0.getDisplayName(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strSet9.spliterator();
        boolean boolean11 = strSet9.isEmpty();
        java.util.Set<java.lang.String> strSet12 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet12.clear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone[] dateTimeZoneArray24 = new org.joda.time.DateTimeZone[] { dateTimeZone15, dateTimeZone17, dateTimeZone19, dateTimeZone21, dateTimeZone23 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray25 = strSet12.toArray(dateTimeZoneArray24);
        boolean boolean27 = strSet12.remove((java.lang.Object) false);
        java.util.Set<java.lang.String> strSet28 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Set<java.lang.String> strSet29 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet29.clear();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTimeZone[] dateTimeZoneArray41 = new org.joda.time.DateTimeZone[] { dateTimeZone32, dateTimeZone34, dateTimeZone36, dateTimeZone38, dateTimeZone40 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray42 = strSet29.toArray(dateTimeZoneArray41);
        java.util.Spliterator<java.lang.String> strSpliterator43 = strSet29.spliterator();
        boolean boolean44 = strSet29.isEmpty();
        boolean boolean45 = strSet28.containsAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        boolean boolean47 = strSet28.equals((java.lang.Object) builder46);
        boolean boolean48 = strSet12.addAll((java.util.Collection<java.lang.String>) strSet28);
        java.lang.String[] strArray54 = new java.lang.String[] { "10", "UTC", "10", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        java.util.Iterator<java.lang.String> strItor57 = strSet55.iterator();
        boolean boolean58 = strSet12.addAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean59 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet55);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(ethiopicChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "24" + "'", str7, "24");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tedesco (Germania)" + "'", str8, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSpliterator10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZoneArray24);
        org.junit.Assert.assertNotNull(dateTimeZoneArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZoneArray41);
        org.junit.Assert.assertNotNull(dateTimeZoneArray42);
        org.junit.Assert.assertNotNull(strSpliterator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weeks();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getStandardOffset((long) 1);
        long long13 = dateTimeZone9.previousTransition(4286789037L);
        int int15 = dateTimeZone9.getOffsetFromLocal((long) 22);
        org.joda.time.Chronology chronology16 = ethiopicChronology1.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology1.era();
        int int18 = dateTimeField17.getMinimumValue();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4286789037L + "'", long13 == 4286789037L);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DurationField durationField6 = ethiopicChronology1.weeks();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.halfdayOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(446, 802, 1190, 53235140, (-106), 51055001, 81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53235140 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-14T14:48:12.598");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.days();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.hourOfDay();
        org.joda.time.Chronology chronology11 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DurationField durationField15 = ethiopicChronology1.days();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMinuteOfHour(10);
        boolean boolean26 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withMonthOfYear((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYear(325);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMillis(53302090);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("742");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '742' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology4 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology4.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology9 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology9.clockhourOfDay();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = dateTimeField10.getAsText((long) 'a', locale12);
        java.lang.String str14 = dateTimeField6.getAsText((int) 'a', locale12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology16 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology16.clockhourOfDay();
        org.joda.time.DurationField durationField18 = ethiopicChronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology16.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology21.clockhourOfDay();
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = dateTimeField22.getAsText((long) 'a', locale24);
        int int26 = dateTimeField19.getMaximumTextLength(locale24);
        java.lang.String str27 = locale12.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider0.getName(locale12, "Etc/UTC", "2022-02-14T14:46:37.720");
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = locale31.getScript();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology34 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology34.clockhourOfDay();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = dateTimeField35.getAsText((long) 'a', locale37);
        java.lang.String str39 = locale31.getDisplayName(locale37);
        java.lang.String str40 = locale37.getDisplayCountry();
        java.lang.String str43 = nameProvider0.getName(locale37, "22", "2022-02-14T14:46:37.492");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(ethiopicChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(ethiopicChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "24" + "'", str13, "24");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "97" + "'", str14, "97");
        org.junit.Assert.assertNotNull(ethiopicChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(ethiopicChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "24" + "'", str25, "24");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(ethiopicChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "24" + "'", str38, "24");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tedesco (Germania)" + "'", str39, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.yearOfEra();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField13 = ethiopicChronology1.millis();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = durationField6.subtract((long) 607, 4286817452L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis(853);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("JP");
        java.lang.String[] strArray7 = new java.lang.String[] { "10", "UTC", "10", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        java.util.Iterator<java.lang.String> strItor10 = strSet8.iterator();
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Collection<java.lang.String> strCollection15 = null;
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strCollection15);
        java.util.Collection<java.lang.String> strCollection17 = null;
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strCollection17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Collection<java.lang.String> strCollection22 = null;
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection22);
        java.util.Collection<java.lang.String> strCollection24 = null;
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection24);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strCollection24, filteringMode26);
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology35 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology35.clockhourOfDay();
        org.joda.time.DurationField durationField37 = ethiopicChronology35.weekyears();
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology35.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology40 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology40.clockhourOfDay();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = dateTimeField41.getAsText((long) 'a', locale43);
        int int45 = dateTimeField38.getMaximumTextLength(locale43);
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale28, locale30, locale31, locale32, locale33, locale43 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale50 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology52 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology52.dayOfMonth();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.plusWeeks((int) (byte) 10);
        java.util.Locale locale62 = java.util.Locale.PRC;
        java.lang.String str63 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime61, locale62);
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleKeys();
        java.lang.Object[] objArray65 = strSet64.toArray();
        java.lang.Object obj66 = null;
        boolean boolean67 = strSet64.equals(obj66);
        boolean boolean68 = strSet64.isEmpty();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology70 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = ethiopicChronology70.clockhourOfDay();
        org.joda.time.DurationField durationField72 = ethiopicChronology70.weekyears();
        org.joda.time.DateTimeField dateTimeField73 = ethiopicChronology70.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology75 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField76 = ethiopicChronology75.clockhourOfDay();
        java.util.Locale locale78 = java.util.Locale.ITALIAN;
        java.lang.String str79 = dateTimeField76.getAsText((long) 'a', locale78);
        int int80 = dateTimeField73.getMaximumTextLength(locale78);
        int int82 = dateTimeField73.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(chronology83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property87 = localDateTime86.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property88 = localDateTime86.centuryOfEra();
        java.lang.String str89 = localDateTime86.toString();
        java.util.Locale locale91 = java.util.Locale.ENGLISH;
        java.lang.String str92 = dateTimeField73.getAsShortText((org.joda.time.ReadablePartial) localDateTime86, (-292275054), locale91);
        java.util.Set<java.lang.String> strSet93 = locale91.getUnicodeLocaleKeys();
        boolean boolean94 = strSet64.addAll((java.util.Collection<java.lang.String>) strSet93);
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet93);
        java.util.Spliterator<java.lang.String> strSpliterator96 = strSet93.spliterator();
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode26.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(ethiopicChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(ethiopicChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "24" + "'", str44, "24");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(ethiopicChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2" + "'", str63, "2");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(ethiopicChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(ethiopicChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "24" + "'", str79, "24");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(property88);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-14T14:52:03.520" + "'", str89, "2022-02-14T14:52:03.520");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "-292275054" + "'", str92, "-292275054");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(strSpliterator96);
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.year();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.weekOfWeekyear();
        int int12 = dateTimeField10.getLeapAmount(100L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(readableInstant10);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        boolean boolean13 = locale12.hasExtensions();
        boolean boolean14 = dateTime11.equals((java.lang.Object) locale12);
        java.lang.String str15 = locale0.getDisplayVariant(locale12);
        java.lang.String str16 = locale12.getScript();
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getScript();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology3 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology3.clockhourOfDay();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = dateTimeField4.getAsText((long) 'a', locale6);
        java.lang.String str8 = locale0.getDisplayName(locale6);
        boolean boolean9 = locale6.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology11.clockhourOfDay();
        org.joda.time.DurationField durationField13 = ethiopicChronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology11.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = ethiopicChronology11.getZone();
        org.joda.time.DurationField durationField16 = ethiopicChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology11.monthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMinuteOfHour(10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusYears((int) (short) 1);
        int int40 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        int int41 = localDateTime28.getMillisOfDay();
        int int42 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology44 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology44.clockhourOfDay();
        org.joda.time.DurationField durationField46 = ethiopicChronology44.weekyears();
        org.joda.time.DurationField durationField47 = ethiopicChronology44.centuries();
        org.joda.time.DateTimeField dateTimeField48 = ethiopicChronology44.weekyear();
        int int49 = dateTimeField48.getMinimumValue();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withMillisOfSecond((int) (byte) 1);
        int int64 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime.Property property65 = localDateTime59.weekyear();
        org.joda.time.LocalDateTime.Property property66 = localDateTime59.millisOfDay();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime68.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        boolean boolean78 = locale77.hasExtensions();
        boolean boolean79 = dateTime76.equals((java.lang.Object) locale77);
        java.lang.String str80 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) localDateTime59, locale77);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime59.minus(readableDuration81);
        int int83 = localDateTime59.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime59.plusYears(2);
        int int86 = localDateTime59.getSecondOfMinute();
        java.util.Locale locale89 = new java.util.Locale("hi!", "hi!");
        java.lang.String str90 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime59, locale89);
        java.lang.String str91 = locale6.getDisplayName(locale89);
        java.util.Locale locale92 = locale6.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = locale6.getUnicodeLocaleType("2022-02-14T14:47:34.035");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-14T14:47:34.035");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(ethiopicChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "24" + "'", str7, "24");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tedesco (Germania)" + "'", str8, "tedesco (Germania)");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51003001 + "'", int41 == 51003001);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
        org.junit.Assert.assertNotNull(ethiopicChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-292269338) + "'", int49 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022" + "'", str80, "2022");
        org.junit.Assert.assertNotNull(localDateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(localDateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertEquals(locale89.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "2" + "'", str90, "2");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Italian" + "'", str91, "Italian");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "it");
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = localDateTime7.getFieldType(303);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 303");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        java.util.Locale locale2 = new java.util.Locale("2", "CAN");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for CAN");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "2_CAN");
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(100);
        org.joda.time.DateTime dateTime12 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfMonth(51058001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51058001 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = ethiopicChronology1.getDateTimeMillis(303, 343, 14, 0, 53382579, 21, 53295242);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53382579 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        timeZone0.setRawOffset((-292269338));
        int int5 = timeZone0.getRawOffset();
        int int6 = timeZone0.getRawOffset();
        boolean boolean7 = timeZone0.observesDaylightTime();
        int int9 = timeZone0.getOffset((long) 2014);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("2000-02-21T14:47:20.100Z");
        java.lang.String str12 = timeZone11.getID();
        int int14 = timeZone11.getOffset(1888152473927L);
        java.lang.String str15 = timeZone11.getID();
        boolean boolean16 = timeZone0.hasSameRules(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str18 = timeZone11.getID();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-292269338) + "'", int5 == (-292269338));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292269338) + "'", int6 == (-292269338));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292269338) + "'", int9 == (-292269338));
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GMT" + "'", str12, "GMT");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GMT" + "'", str15, "GMT");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GMT" + "'", str18, "GMT");
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.parse("52");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((int) (short) -1);
        int[] intArray10 = localDateTime9.getValues();
        ethiopicChronology1.validate((org.joda.time.ReadablePartial) localDateTime5, intArray10);
        org.joda.time.DurationField durationField12 = ethiopicChronology1.halfdays();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology1.millisOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 2, 21, 53524978]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology18 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology18.centuryOfEra();
        org.joda.time.DurationField durationField21 = ethiopicChronology18.millis();
        org.joda.time.DurationField durationField22 = ethiopicChronology18.months();
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology18.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology27.minuteOfDay();
        java.lang.String str33 = dateTimeField31.getAsShortText((long) 24);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        int int35 = dateTimeField31.getMaximumTextLength(locale34);
        java.lang.String str36 = dateTimeField24.getAsShortText(0L, locale34);
        int int37 = property15.getMaximumShortTextLength(locale34);
        java.util.Locale locale41 = new java.util.Locale("2022-02-14T14:47:16.226", "2000-02-21T14:46:47.690Z", "italiano");
        int int42 = property15.getMaximumShortTextLength(locale41);
        int int43 = property15.getMinimumValue();
        long long44 = property15.remainder();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(ethiopicChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "20" + "'", str36, "20");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals(locale41.toString(), "2022-02-14t14:47:16.226_2000-02-21T14:46:47.690Z_italiano");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-292275054) + "'", int43 == (-292275054));
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 4287123997L + "'", long44 == 4287123997L);
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(0);
        int int12 = localDateTime11.getMinuteOfHour();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfDay((int) (byte) 0);
        int int18 = localDateTime17.getYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.yearOfEra();
        boolean boolean20 = localDateTime11.equals((java.lang.Object) property19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withSecondOfMinute(955);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 955 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.millis();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = ethiopicChronology1.add(readablePeriod11, 4286841817L, 734);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4286841817L + "'", long14 == 4286841817L);
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology0.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray5 = ethiopicChronology0.get(readablePeriod3, 1193583157629L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.secondOfDay();
        long long15 = dateTimeField12.set(4286805806L, (int) (short) 100);
        boolean boolean17 = dateTimeField12.isLeap((long) 16);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4233700806L + "'", long15 == 4233700806L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.seconds();
        boolean boolean11 = durationField10.isPrecise();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Italian");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("lun");
        org.joda.time.tz.NameProvider nameProvider5 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str10 = nameProvider5.getShortName(locale6, "2022-02-14T14:46:37.492", "2022-02-14T14:46:36.704");
        java.util.Locale.Builder builder11 = builder2.setLocale(locale6);
        java.util.Locale.Builder builder12 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder2.setRegion("cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: cinese (Cina) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(nameProvider5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("Giappone", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        int int5 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.halfdays();
        org.joda.time.DateTimeZone dateTimeZone9 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = ethiopicChronology1.getDateTimeMillis(4286849165L, 99, 511, 243, 21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.weeks();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        int int25 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property26 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.minusYears(999);
        long long31 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime29, 0L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology33 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology33.clockhourOfDay();
        org.joda.time.DurationField durationField35 = ethiopicChronology33.weekyears();
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology33.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = ethiopicChronology33.getZone();
        org.joda.time.DurationField durationField38 = ethiopicChronology33.centuries();
        org.joda.time.DateTimeField dateTimeField39 = ethiopicChronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology33.dayOfYear();
        org.joda.time.Chronology chronology42 = ethiopicChronology33.withUTC();
        org.joda.time.DateTimeZone dateTimeZone43 = ethiopicChronology33.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.Chronology chronology45 = ethiopicChronology1.withZone(dateTimeZone43);
        org.joda.time.DurationField durationField46 = chronology45.centuries();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-29637911275554L) + "'", long31 == (-29637911275554L));
        org.junit.Assert.assertNotNull(ethiopicChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withYear(483);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology23 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = ethiopicChronology23.dayOfMonth();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusWeeks((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.PRC;
        java.lang.String str34 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime32, locale33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plus(readablePeriod35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withCenturyOfEra(619);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology40 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = ethiopicChronology40.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = ethiopicChronology40.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology40.millisOfSecond();
        org.joda.time.DurationField durationField46 = ethiopicChronology40.hours();
        org.joda.time.DateTimeField dateTimeField47 = ethiopicChronology40.halfdayOfDay();
        org.joda.time.Chronology chronology48 = ethiopicChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) ethiopicChronology40);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.plusWeeks((int) (byte) 10);
        int int59 = localDateTime58.getMillisOfSecond();
        int int60 = localDateTime58.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withYearOfEra(928);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = localDateTime62.getFieldType(0);
        int int65 = localDateTime50.indexOf(dateTimeFieldType64);
        boolean boolean66 = localDateTime38.isSupported(dateTimeFieldType64);
        boolean boolean67 = localDateTime17.isSupported(dateTimeFieldType64);
        boolean boolean68 = localDateTime11.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property69 = localDateTime11.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(ethiopicChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2" + "'", str34, "2");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(ethiopicChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 497 + "'", int59 == 497);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 497 + "'", int60 == 497);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(619);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths((int) 'a');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekOfWeekyear();
        int int23 = localDateTime21.getYear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusDays(446);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology32 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = ethiopicChronology32.clockhourOfDay();
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = dateTimeField33.getAsText((long) 'a', locale35);
        int int37 = dateTimeField30.getMaximumTextLength(locale35);
        int int39 = dateTimeField30.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.centuryOfEra();
        java.lang.String str46 = localDateTime43.toString();
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.lang.String str49 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime43, (-292275054), locale48);
        java.lang.String str50 = localDateTime43.toString();
        java.lang.String str51 = localDateTime43.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.minusDays(100);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime57.withYearOfCentury((int) (short) 1);
        int int66 = localDateTime57.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = localDateTime57.getFieldType(0);
        int int69 = localDateTime43.get(dateTimeFieldType68);
        boolean boolean70 = localDateTime21.isSupported(dateTimeFieldType68);
        boolean boolean71 = localDateTime16.isSupported(dateTimeFieldType68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = localDateTime16.withMinuteOfHour(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(ethiopicChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "24" + "'", str36, "24");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-14T14:52:04.603" + "'", str46, "2022-02-14T14:52:04.603");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-292275054" + "'", str49, "-292275054");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-14T14:52:04.603" + "'", str50, "2022-02-14T14:52:04.603");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-14T14:52:04.603" + "'", str51, "2022-02-14T14:52:04.603");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone4 = ethiopicChronology1.getZone();
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone4);
        java.lang.String str7 = localDateTime6.toString();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T14:52:04.633" + "'", str7, "2022-02-21T14:52:04.633");
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(541);
        java.util.Date date7 = localDateTime4.toDate();
        int int8 = localDateTime4.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-14T14:49:05.312", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = ethiopicChronology1.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset(0L);
        java.lang.String str10 = dateTimeZone6.getName(1888152675001L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField11 = ethiopicChronology1.eras();
        boolean boolean12 = durationField11.isSupported();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-14T14:48:58.729");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-14t14:48:58.729");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology6 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology6.clockhourOfDay();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = dateTimeField7.getAsText((long) 'a', locale9);
        int int11 = dateTimeField4.getMaximumTextLength(locale9);
        int int13 = dateTimeField4.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.centuryOfEra();
        java.lang.String str20 = localDateTime17.toString();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, (-292275054), locale22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.withDurationAdded(readableDuration24, 22);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withDurationAdded(readableDuration27, 0);
        int int30 = localDateTime26.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology32 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = ethiopicChronology32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology32.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = dateTimeField35.getType();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime26.withField(dateTimeFieldType36, 866);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(ethiopicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "24" + "'", str10, "24");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-14T14:52:04.719" + "'", str20, "2022-02-14T14:52:04.719");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-292275054" + "'", str23, "-292275054");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(ethiopicChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        int int5 = localDateTime3.getYear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.withCenturyOfEra(595);
        org.joda.time.LocalDateTime.Property property17 = localDateTime7.centuryOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        int int21 = dateTimeField19.getMinimumValue((long) 53481083);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2000-02-21T14:47:20.100Z");
        java.lang.String str2 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean5 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.hours();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.minutes();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = ethiopicChronology1.getDateTimeMillis(244, 928, 483, 53305372, 5, 416, 216);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53305372 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.Chronology chronology6 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology8 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField10 = ethiopicChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology8.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = ethiopicChronology8.getZone();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology8);
        org.joda.time.DurationField durationField14 = ethiopicChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField16 = ethiopicChronology8.hours();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone18);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone23);
        boolean boolean27 = localDateTime21.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        int[] intArray29 = ethiopicChronology8.get((org.joda.time.ReadablePartial) localDateTime26, (long) 30);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology31 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = ethiopicChronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = ethiopicChronology31.centuryOfEra();
        org.joda.time.DurationField durationField34 = ethiopicChronology31.millis();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology31.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withMillisOfSecond((int) (byte) 1);
        int int50 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime.Property property51 = localDateTime45.weekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime45.minusMillis(2022);
        int[] intArray55 = ethiopicChronology31.get((org.joda.time.ReadablePartial) localDateTime45, (long) '#');
        ethiopicChronology1.validate((org.joda.time.ReadablePartial) localDateTime26, intArray55);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology1.weekyear();
        org.joda.time.DurationField durationField59 = ethiopicChronology1.days();
        long long60 = durationField59.getUnitMillis();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(ethiopicChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(ethiopicChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1962, 4, 23, 45]");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 86400000L + "'", long60 == 86400000L);
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.parse("52");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((int) (short) -1);
        int[] intArray10 = localDateTime9.getValues();
        ethiopicChronology1.validate((org.joda.time.ReadablePartial) localDateTime5, intArray10);
        org.joda.time.Chronology chronology12 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DurationField durationField14 = ethiopicChronology1.years();
        java.lang.String str15 = durationField14.getName();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 2, 21, 53525879]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "years" + "'", str15, "years");
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = property8.getAsText(locale12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology15 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology15.clockhourOfDay();
        org.joda.time.DurationField durationField17 = ethiopicChronology15.weekyears();
        org.joda.time.DurationField durationField18 = ethiopicChronology15.centuries();
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology15.weekyear();
        int int20 = dateTimeField19.getMinimumValue();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        int int35 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property36 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime30.millisOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        boolean boolean49 = locale48.hasExtensions();
        boolean boolean50 = dateTime47.equals((java.lang.Object) locale48);
        java.lang.String str51 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, locale48);
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.lang.String str53 = locale52.getDisplayCountry();
        java.lang.String str54 = locale48.getDisplayVariant(locale52);
        java.lang.String str55 = locale52.toLanguageTag();
        java.lang.String str56 = locale12.getDisplayVariant(locale52);
        java.util.Set<java.lang.String> strSet57 = locale52.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287125006L + "'", long11 == 4287125006L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2000" + "'", str13, "2000");
        org.junit.Assert.assertNotNull(ethiopicChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-292269338) + "'", int20 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Germany" + "'", str53, "Germany");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "de-DE" + "'", str55, "de-DE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getScript();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology3 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology3.clockhourOfDay();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = dateTimeField4.getAsText((long) 'a', locale6);
        java.lang.String str8 = locale0.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayCountry();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor11 = strSet10.iterator();
        java.util.Set<java.lang.String> strSet12 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet12.clear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone[] dateTimeZoneArray24 = new org.joda.time.DateTimeZone[] { dateTimeZone15, dateTimeZone17, dateTimeZone19, dateTimeZone21, dateTimeZone23 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray25 = strSet12.toArray(dateTimeZoneArray24);
        boolean boolean27 = strSet12.remove((java.lang.Object) false);
        boolean boolean28 = strSet10.retainAll((java.util.Collection<java.lang.String>) strSet12);
        boolean boolean29 = strSet12.isEmpty();
        org.joda.time.tz.NameProvider nameProvider30 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider30);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider30);
        java.util.Locale locale34 = new java.util.Locale("53196316");
        java.lang.String str35 = locale34.getDisplayVariant();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.lang.String str38 = locale34.getDisplayName(locale36);
        java.lang.String str41 = nameProvider30.getName(locale36, "2000-01-03T00:10:19.000Z", "");
        java.util.Set<java.lang.String> strSet42 = locale36.getUnicodeLocaleAttributes();
        strSet42.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = strSet12.contains((java.lang.Object) strSet42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(ethiopicChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "24" + "'", str7, "24");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tedesco (Germania)" + "'", str8, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZoneArray24);
        org.junit.Assert.assertNotNull(dateTimeZoneArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nameProvider30);
        org.junit.Assert.assertEquals(locale34.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "53196316" + "'", str38, "53196316");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strSet42);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.days();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.minuteOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        int int25 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property26 = localDateTime12.yearOfEra();
        int int27 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localDateTime12.getValue(53446001);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53446001");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet0.clear();
        int int2 = strSet0.size();
        java.util.Locale.FilteringMode filteringMode3 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.Locale.FilteringMode filteringMode4 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.Locale.FilteringMode[] filteringModeArray5 = new java.util.Locale.FilteringMode[] { filteringMode3, filteringMode4 };
        java.util.Locale.FilteringMode[] filteringModeArray6 = strSet0.toArray(filteringModeArray5);
        strSet0.clear();
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet8.clear();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone[] dateTimeZoneArray20 = new org.joda.time.DateTimeZone[] { dateTimeZone11, dateTimeZone13, dateTimeZone15, dateTimeZone17, dateTimeZone19 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray21 = strSet8.toArray(dateTimeZoneArray20);
        int int22 = strSet8.size();
        boolean boolean23 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.stream.Stream<java.lang.String> strStream24 = strSet8.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream25 = strSet8.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet8.spliterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + filteringMode3 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode3.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + filteringMode4 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode4.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(filteringModeArray5);
        org.junit.Assert.assertNotNull(filteringModeArray6);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZoneArray20);
        org.junit.Assert.assertNotNull(dateTimeZoneArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertNotNull(strSpliterator26);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths(999);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekyear(614);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(51040001);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDateTime19.getValue(53277846);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53277846");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusDays(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withYearOfCentury((int) (short) 1);
        boolean boolean18 = dateTimeZone3.isLocalDateTimeGap(localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.Chronology chronology20 = ethiopicChronology1.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField21 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DurationField durationField22 = ethiopicChronology1.halfdays();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2000-02-21T14:47:22.888Z");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.centuries();
        long long9 = durationField7.getValueAsLong((long) 30);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        java.util.Locale locale2 = new java.util.Locale("2022-02-14T14:48:42.851", "2021-11-13T20:24:11.001");
        java.lang.String str3 = locale2.getScript();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-14t14:48:42.851_2021-11-13T20:24:11.001");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology9 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = ethiopicChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = ethiopicChronology9.getZone();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology9);
        org.joda.time.DurationField durationField15 = ethiopicChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology9.hourOfHalfday();
        org.joda.time.DurationField durationField17 = ethiopicChronology9.hours();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone19);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str26 = dateTimeZone24.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone24);
        boolean boolean28 = localDateTime22.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        int[] intArray30 = ethiopicChronology9.get((org.joda.time.ReadablePartial) localDateTime27, (long) 30);
        long long32 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime27, (long) (byte) -1);
        org.joda.time.DurationField durationField33 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField34 = ethiopicChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology1.monthOfYear();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(ethiopicChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1962, 4, 23, 40]");
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1888152725321L + "'", long32 == 1888152725321L);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale4 = new java.util.Locale("53196316");
        java.lang.String str5 = locale4.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str11 = nameProvider0.getName(locale6, "2000-01-03T00:10:19.000Z", "");
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale12.getScript();
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = locale12.getDisplayCountry();
        java.lang.String str16 = locale12.getDisplayVariant();
        java.lang.String str19 = nameProvider0.getShortName(locale12, "", "2022-02-14T14:48:29.990");
        java.util.Locale locale22 = new java.util.Locale("2022-02-14T14:48:02.095", "");
        java.lang.String str25 = nameProvider0.getShortName(locale22, "gio", "");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale4.toString(), "53196316");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "53196316" + "'", str8, "53196316");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Germany" + "'", str15, "Germany");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals(locale22.toString(), "2022-02-14t14:48:02.095");
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMillisOfSecond((int) (byte) 1);
        int int46 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property47 = localDateTime41.weekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime41.minusYears(999);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.minusMinutes(51040001);
        int int55 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = property8.addToCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.dayOfYear();
        int int59 = property58.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287125504L + "'", long11 == 4287125504L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology7 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology7.clockhourOfDay();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = dateTimeField8.getAsText((long) 'a', locale10);
        java.lang.String str12 = dateTimeField4.getAsText((int) 'a', locale10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology14 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField16 = ethiopicChronology14.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology19 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology19.clockhourOfDay();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = dateTimeField20.getAsText((long) 'a', locale22);
        int int24 = dateTimeField17.getMaximumTextLength(locale22);
        java.lang.String str25 = locale10.getDisplayCountry(locale22);
        java.util.Locale.Builder builder26 = builder0.setLocale(locale22);
        java.util.Locale.Builder builder28 = builder26.setLanguage("Germany");
        java.util.Locale.Builder builder29 = builder28.clearExtensions();
        java.util.Locale locale30 = builder28.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder28.setUnicodeLocaleKeyword("2022-02-14T14:47:58.977", "2022-02-14T14:49:14.517");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-14T14:47:58.977 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(ethiopicChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "24" + "'", str11, "24");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "97" + "'", str12, "97");
        org.junit.Assert.assertNotNull(ethiopicChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(ethiopicChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "24" + "'", str23, "24");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "germany");
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getStandardOffset((long) 1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.days();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.weekOfWeekyear();
        boolean boolean12 = dateTimeField11.isSupported();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        int int18 = localDateTime17.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusYears((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis(491);
        int int34 = localDateTime31.getCenturyOfEra();
        int int35 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology37 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology37.clockhourOfDay();
        org.joda.time.DurationField durationField39 = ethiopicChronology37.weekyears();
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology37.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = ethiopicChronology37.getZone();
        long long43 = dateTimeZone41.previousTransition((long) 53198677);
        org.joda.time.DateTime dateTime44 = localDateTime20.toDateTime(dateTimeZone41);
        long long45 = dateTime44.getMillis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(ethiopicChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 53198677L + "'", long43 == 53198677L);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1641167999990L + "'", long45 == 1641167999990L);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withEra(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = property19.getLocalDateTime();
        int int21 = property19.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology17 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology17.secondOfDay();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology17);
        int int22 = localDateTime21.getDayOfYear();
        boolean boolean23 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime21);
        long long25 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime14, 4286877673L);
        org.joda.time.DurationField durationField26 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField27 = ethiopicChronology1.hourOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(ethiopicChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 113 + "'", int22 == 113);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1894233599990L + "'", long25 == 1894233599990L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths((int) (byte) 0);
        int int16 = localDateTime13.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withDayOfMonth(724);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 724 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField14 = ethiopicChronology1.hours();
        java.lang.String str15 = durationField14.toString();
        int int17 = durationField14.getValue(4287092672L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DurationField[hours]" + "'", str15, "DurationField[hours]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1190 + "'", int17 == 1190);
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("JP");
        java.util.Locale locale4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setExtension('a', "2022-02-14T14:46:34.813");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 14T14:46:34.813 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "jp");
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.weekyear();
        org.joda.time.DurationField durationField13 = ethiopicChronology1.days();
        int int15 = durationField13.getValue((long) 53496995);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        java.lang.String str26 = property8.getAsText();
        int int27 = property8.getMaximumValue();
        java.lang.String str28 = property8.getAsText();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287126080L + "'", long11 == 4287126080L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2000" + "'", str26, "2000");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2000" + "'", str28, "2000");
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekyear();
        int int6 = dateTimeField5.getMinimumValue();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        int int21 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        boolean boolean35 = locale34.hasExtensions();
        boolean boolean36 = dateTime33.equals((java.lang.Object) locale34);
        java.lang.String str37 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime16.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime16.withPeriodAdded(readablePeriod39, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = localDateTime16.toString("2022-02-14T14:48:33.002");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292269338) + "'", int6 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("JP");
        java.lang.String[] strArray7 = new java.lang.String[] { "10", "UTC", "10", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        java.util.Iterator<java.lang.String> strItor10 = strSet8.iterator();
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap12);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.parse("JP");
        java.lang.String[] strArray21 = new java.lang.String[] { "10", "UTC", "10", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        java.util.Iterator<java.lang.String> strItor24 = strSet22.iterator();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Collection<java.lang.String> strCollection29 = null;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection29);
        java.util.Collection<java.lang.String> strCollection31 = null;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Collection<java.lang.String> strCollection36 = null;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection36);
        java.util.Collection<java.lang.String> strCollection38 = null;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection38);
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection38, filteringMode40);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        boolean boolean43 = locale42.hasExtensions();
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfDay();
        org.joda.time.DurationField durationField51 = ethiopicChronology49.weekyears();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology54 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology54.clockhourOfDay();
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.lang.String str58 = dateTimeField55.getAsText((long) 'a', locale57);
        int int59 = dateTimeField52.getMaximumTextLength(locale57);
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale42, locale44, locale45, locale46, locale47, locale57 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter(languageRangeList15, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale locale65 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap70);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode40.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(ethiopicChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "24" + "'", str58, "24");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNull(locale65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertNotNull(languageRangeList71);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.yearOfEra();
        org.joda.time.DurationField durationField5 = ethiopicChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology2.yearOfEra();
        java.util.Set<java.lang.String> strSet7 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet7.clear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone[] dateTimeZoneArray19 = new org.joda.time.DateTimeZone[] { dateTimeZone10, dateTimeZone12, dateTimeZone14, dateTimeZone16, dateTimeZone18 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray20 = strSet7.toArray(dateTimeZoneArray19);
        boolean boolean22 = strSet7.remove((java.lang.Object) false);
        int int23 = strSet7.size();
        boolean boolean24 = ethiopicChronology2.equals((java.lang.Object) strSet7);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(4286920822L, (org.joda.time.Chronology) ethiopicChronology2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date26 = localDateTime25.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -168 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZoneArray19);
        org.junit.Assert.assertNotNull(dateTimeZoneArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.centuries();
        int int9 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMonths(999);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear(614);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plus(readableDuration28);
        long long31 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime25, 4286860932L);
        org.joda.time.DurationField durationField32 = ethiopicChronology1.minutes();
        org.joda.time.DurationField durationField33 = ethiopicChronology1.months();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology35 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology35.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = ethiopicChronology35.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology35.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone42 = ethiopicChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField43 = ethiopicChronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = ethiopicChronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = ethiopicChronology35.minuteOfDay();
        org.joda.time.DurationField durationField48 = ethiopicChronology35.seconds();
        org.joda.time.DurationField durationField49 = ethiopicChronology35.millis();
        int int50 = durationField33.compareTo(durationField49);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3820920726266L + "'", long31 == 3820920726266L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(ethiopicChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getScript();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology13 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology13.clockhourOfDay();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = dateTimeField14.getAsText((long) 'a', locale16);
        java.lang.String str18 = locale10.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime8, (int) ' ', locale16);
        int int20 = localDateTime8.getMillisOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(ethiopicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "24" + "'", str17, "24");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tedesco (Germania)" + "'", str18, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53526348 + "'", int20 == 53526348);
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.year();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology11.clockhourOfDay();
        org.joda.time.DurationField durationField13 = ethiopicChronology11.weekyears();
        org.joda.time.DurationField durationField14 = ethiopicChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology11.weekyear();
        int int16 = dateTimeField15.getMinimumValue();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMillisOfSecond((int) (byte) 1);
        int int31 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.weekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime26.millisOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        boolean boolean45 = locale44.hasExtensions();
        boolean boolean46 = dateTime43.equals((java.lang.Object) locale44);
        java.lang.String str47 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime26, locale44);
        java.lang.String str48 = locale44.getDisplayCountry();
        java.lang.String str49 = dateTimeField8.getAsShortText((long) (byte) 0, locale44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        boolean boolean61 = locale60.hasExtensions();
        boolean boolean62 = dateTime59.equals((java.lang.Object) locale60);
        java.lang.String str63 = locale44.getDisplayName(locale60);
        java.lang.String str64 = locale44.getDisplayVariant();
        java.lang.String str65 = locale44.getVariant();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(ethiopicChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-292269338) + "'", int16 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Germany" + "'", str48, "Germany");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1962" + "'", str49, "1962");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Deutsch (Deutschland)" + "'", str63, "Deutsch (Deutschland)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.weekyearOfCentury();
        boolean boolean12 = dateTimeField11.isLenient();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusWeeks((int) (byte) 10);
        int int32 = localDateTime31.getMillisOfSecond();
        int int33 = localDateTime31.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        boolean boolean37 = localDateTime31.isSupported(durationFieldType36);
        org.joda.time.DateTime dateTime38 = localDateTime31.toDateTime();
        boolean boolean39 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime38.getZone();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology43 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology43.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = ethiopicChronology43.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = ethiopicChronology43.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = ethiopicChronology43.millisOfSecond();
        org.joda.time.DurationField durationField49 = ethiopicChronology43.hours();
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology43.dayOfMonth();
        org.joda.time.DurationField durationField51 = ethiopicChronology43.weeks();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology43.monthOfYear();
        java.util.Locale locale54 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str55 = dateTimeField52.getAsShortText(402, locale54);
        java.lang.String str56 = dateTimeZone40.getName(3430L, locale54);
        boolean boolean57 = locale54.hasExtensions();
        java.lang.String str58 = locale54.getDisplayCountry();
        java.lang.String str59 = dateTimeField11.getAsShortText(4286970915L, locale54);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 578 + "'", int32 == 578);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 578 + "'", int33 == 578);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(ethiopicChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "402" + "'", str55, "402");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "63" + "'", str59, "63");
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getID();
        int int7 = dateTimeZone1.getStandardOffset((long) 51055001);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int10 = dateTimeZone1.getOffset((long) 870);
        long long14 = dateTimeZone1.convertLocalToUTC(4286885427L, false, 4286833150L);
        java.lang.String str16 = dateTimeZone1.getName((long) 892);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.010" + "'", str5, "+00:00:00.010");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4286885417L + "'", long14 == 4286885417L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str2 = locale0.getUnicodeLocaleType("63");
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.lang.Object obj4 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "zh_CN");
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Italian");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("UTC");
        java.util.Locale.Builder builder7 = builder0.setScript("");
        java.util.Locale.Builder builder10 = builder0.setExtension('a', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder0.addUnicodeLocaleAttribute("2022-02-14T14:48:00.409");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-14T14:48:00.409 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        long long6 = ethiopicChronology1.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.years();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.dayOfYear();
        org.joda.time.DurationField durationField11 = ethiopicChronology1.years();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3430L + "'", long6 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.secondOfMinute();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        java.lang.String[] strArray5 = new java.lang.String[] { "10", "UTC", "10", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet6.parallelStream();
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator11 = strSet6.spliterator();
        java.util.Iterator<java.lang.String> strItor12 = strSet6.iterator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strItor12);
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.hours();
        int int5 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.year();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology12 = org.joda.time.chrono.EthiopicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology12.hourOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMillisOfSecond((int) (byte) 1);
        int int28 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property29 = localDateTime23.weekyear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withMinuteOfHour(10);
        boolean boolean40 = localDateTime23.isEqual((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMonthOfYear((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.yearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.withYear(325);
        int int46 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.weekyear();
        org.joda.time.LocalDateTime localDateTime57 = property55.setCopy((int) (byte) 1);
        long long58 = property55.remainder();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime66.toDateTime(readableInstant67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.millisOfDay();
        int int70 = property55.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        boolean boolean72 = property55.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology74 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = ethiopicChronology74.clockhourOfDay();
        org.joda.time.DurationField durationField76 = ethiopicChronology74.weekyears();
        org.joda.time.DurationField durationField77 = ethiopicChronology74.hours();
        boolean boolean78 = property55.equals((java.lang.Object) ethiopicChronology74);
        org.joda.time.LocalDateTime localDateTime79 = property55.roundHalfCeilingCopy();
        boolean boolean80 = localDateTime45.equals((java.lang.Object) property55);
        int int81 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime45);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(ethiopicChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 4287126961L + "'", long58 == 4287126961L);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 12 + "'", int81 == 12);
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology6 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = ethiopicChronology6.getZone();
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone9);
        long long14 = dateTimeZone9.adjustOffset(619L, true);
        long long16 = dateTimeZone1.getMillisKeepLocal(dateTimeZone9, 776L);
        java.lang.String str18 = dateTimeZone9.getNameKey((long) 51021001);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(ethiopicChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 619L + "'", long14 == 619L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 776L + "'", long16 == 776L);
// flaky:         org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.parse("52");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((int) (short) -1);
        int[] intArray10 = localDateTime9.getValues();
        ethiopicChronology1.validate((org.joda.time.ReadablePartial) localDateTime5, intArray10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology1.millisOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.Interval interval23 = property22.toInterval();
        boolean boolean24 = property22.isLeap();
        org.joda.time.Interval interval25 = property22.toInterval();
        org.joda.time.LocalDateTime localDateTime27 = property22.addToCopy(51057001);
        int int28 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDateTime27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 2, 21, 53528094]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 86399999 + "'", int28 == 86399999);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(852);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = localDateTime7.isSupported(durationFieldType12);
        org.joda.time.DateTime dateTime14 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        boolean boolean26 = locale25.hasExtensions();
        boolean boolean27 = dateTime24.equals((java.lang.Object) locale25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Collection<java.lang.String> strCollection31 = null;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection31);
        java.util.Collection<java.lang.String> strCollection33 = null;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Collection<java.lang.String> strCollection38 = null;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strCollection38);
        java.util.Collection<java.lang.String> strCollection40 = null;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strCollection40);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection40, filteringMode42);
        boolean boolean44 = dateTime24.equals((java.lang.Object) languageRangeList29);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.centuryOfEra();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        boolean boolean62 = locale61.hasExtensions();
        boolean boolean63 = dateTime60.equals((java.lang.Object) locale61);
        int int64 = property50.getDifference((org.joda.time.ReadableInstant) dateTime60);
        int int65 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = dateTime60.isSupported(dateTimeFieldType66);
        boolean boolean68 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime60);
        long long69 = dateTime14.getMillis();
        long long70 = dateTime14.getMillis();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(chronology71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime72.plusWeeks((int) (byte) 10);
        int int79 = localDateTime78.getMillisOfSecond();
        int int80 = localDateTime78.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType83 = null;
        boolean boolean84 = localDateTime78.isSupported(durationFieldType83);
        org.joda.time.DateTime dateTime85 = localDateTime78.toDateTime();
        boolean boolean86 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime85);
        java.lang.String str87 = dateTime14.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 138 + "'", int8 == 138);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 138 + "'", int9 == 138);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode42.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1651503127128L + "'", long69 == 1651503127128L);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1651503127128L + "'", long70 == 1651503127128L);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 138 + "'", int79 == 138);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 138 + "'", int80 == 138);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022-05-02T14:52:07.138+00:00:00.010" + "'", str87, "2022-05-02T14:52:07.138+00:00:00.010");
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.Interval interval9 = property8.toInterval();
        boolean boolean10 = property8.isLeap();
        org.joda.time.Interval interval11 = property8.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property8.addToCopy(51057001);
        org.joda.time.LocalDateTime localDateTime14 = property8.roundFloorCopy();
        int int15 = property8.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292275054) + "'", int15 == (-292275054));
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        int int5 = localDateTime4.getYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        int int22 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property23 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfCeilingCopy();
        int int26 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusDays((-103));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology30 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology30.clockhourOfDay();
        org.joda.time.DurationField durationField32 = ethiopicChronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = ethiopicChronology30.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = ethiopicChronology30.getZone();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology30);
        org.joda.time.DurationField durationField36 = ethiopicChronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology30.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = dateTimeField38.getType();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime25.withField(dateTimeFieldType39, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime25.secondOfMinute();
        org.joda.time.DurationField durationField43 = property42.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(ethiopicChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNull(durationField43);
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.parse("52");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((int) (short) -1);
        int[] intArray10 = localDateTime9.getValues();
        ethiopicChronology1.validate((org.joda.time.ReadablePartial) localDateTime5, intArray10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withYearOfEra(2);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.withPeriodAdded(readablePeriod14, 112);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.minusSeconds((int) 'a');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime5.minusHours((int) '#');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = property29.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField32 = property29.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime33 = property29.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks(619);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusSeconds(491);
        boolean boolean40 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = localDateTime5.withCenturyOfEra(51028001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51028001 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 2, 21, 53528369]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = ethiopicChronology1.getDateTimeMillis(86399999, 121, 690, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 121 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.minutes();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.yearOfCentury();
        long long6 = dateTimeField4.roundHalfCeiling((long) 22);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        int int21 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.minusYears(999);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.plus(readableDuration26);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDurationAdded(readableDuration29, 99);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.year();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology36 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology36.clockhourOfDay();
        long long41 = ethiopicChronology36.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField42 = ethiopicChronology36.clockhourOfHalfday();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.minusDays(0);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.weekyear();
        org.joda.time.LocalDateTime localDateTime65 = property63.setCopy((int) (byte) 1);
        long long66 = property63.remainder();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime68.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.millisOfDay();
        int int78 = property63.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        boolean boolean80 = property63.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property63.getFieldType();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime54.withField(dateTimeFieldType81, 175);
        int int84 = localDateTime54.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime54.plusHours(83);
        long long88 = ethiopicChronology36.set((org.joda.time.ReadablePartial) localDateTime86, (long) 2022);
        int[] intArray89 = localDateTime86.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = dateTimeField4.add((org.joda.time.ReadablePartial) localDateTime31, 446, intArray89, 18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 446");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-9676800010L) + "'", long6 == (-9676800010L));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(ethiopicChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3430L + "'", long41 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 4287127437L + "'", long66 == 4287127437L);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(localDateTime86);
// flaky:         org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1888451526991L + "'", long88 == 1888451526991L);
        org.junit.Assert.assertNotNull(intArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2022, 2, 25, 6727001]");
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.year();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.seconds();
        int int12 = durationField10.getValue(0L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.secondOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology9 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = ethiopicChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = ethiopicChronology9.getZone();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology9);
        org.joda.time.DurationField durationField15 = ethiopicChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology9.hourOfHalfday();
        org.joda.time.DurationField durationField17 = ethiopicChronology9.hours();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone19);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str26 = dateTimeZone24.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone24);
        boolean boolean28 = localDateTime22.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        int[] intArray30 = ethiopicChronology9.get((org.joda.time.ReadablePartial) localDateTime27, (long) 30);
        long long32 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime27, (long) (byte) -1);
        org.joda.time.DurationField durationField33 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField34 = ethiopicChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology1.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology1.secondOfDay();
        java.lang.String str38 = ethiopicChronology1.toString();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology40 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = ethiopicChronology40.clockhourOfDay();
        org.joda.time.DurationField durationField42 = ethiopicChronology40.weekyears();
        org.joda.time.DurationField durationField43 = ethiopicChronology40.hours();
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology40.dayOfMonth();
        org.joda.time.DurationField durationField45 = ethiopicChronology40.centuries();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology47 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = ethiopicChronology47.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology47.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology47.getZone();
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology53 = ethiopicChronology40.withZone(dateTimeZone50);
        java.lang.String str54 = dateTimeZone50.toString();
        org.joda.time.Chronology chronology55 = ethiopicChronology1.withZone(dateTimeZone50);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(ethiopicChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1962, 4, 23, 40]");
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1888152727476L + "'", long32 == 1888152727476L);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "EthiopicChronology[+00:00:00.010]" + "'", str38, "EthiopicChronology[+00:00:00.010]");
        org.junit.Assert.assertNotNull(ethiopicChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(ethiopicChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("22", (double) 1888152642001L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.888152642001E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        java.lang.String str6 = dateTimeZone5.getID();
        java.lang.String str7 = dateTimeZone5.getID();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology8 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology8.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = dateTimeField10.getDifference(243144000046L, 1816450152558248L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -30270116809");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(ethiopicChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        java.util.Locale locale11 = new java.util.Locale("2022-05-02T00:00:00.000");
        java.lang.String str12 = dateTimeField8.getAsShortText(537, locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals(locale11.toString(), "2022-05-02t00:00:00.000");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "537" + "'", str12, "537");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.secondOfDay();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.weeks();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology15 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = ethiopicChronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = ethiopicChronology15.secondOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology15);
        int int20 = localDateTime19.getDayOfYear();
        boolean boolean21 = localDateTime12.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        int[] intArray23 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime12, 4286797376L);
        org.joda.time.Chronology chronology24 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology1.year();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(ethiopicChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 113 + "'", int20 == 113);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1962, 6, 12, 53197386]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(619);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMinutes(760);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime18.getFields();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale1.getScript();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology4 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology4.clockhourOfDay();
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = dateTimeField5.getAsText((long) 'a', locale7);
        java.lang.String str9 = locale1.getDisplayName(locale7);
        java.lang.String str10 = locale7.getISO3Language();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale locale12 = locale7.stripExtensions();
        java.util.Locale.setDefault(category0, locale12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        boolean boolean25 = locale24.hasExtensions();
        boolean boolean26 = dateTime23.equals((java.lang.Object) locale24);
        java.util.Locale.setDefault(category0, locale24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology29 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology29.dayOfMonth();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.plusWeeks((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.lang.String str40 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localDateTime38, locale39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.lang.String str49 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localDateTime42, 2022, locale48);
        java.util.Locale.setDefault(category0, locale48);
        java.util.Locale.setDefault(locale48);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(ethiopicChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "24" + "'", str8, "24");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tedesco (Germania)" + "'", str9, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ita" + "'", str10, "ita");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2" + "'", str40, "2");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        java.util.Locale locale2 = new java.util.Locale("Deutsch (Deutschland)", "Chinese");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology4 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology4.clockhourOfDay();
        org.joda.time.DurationField durationField6 = ethiopicChronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology4.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = ethiopicChronology4.getZone();
        org.joda.time.DurationField durationField9 = ethiopicChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology12 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField14 = ethiopicChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = ethiopicChronology12.getZone();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology12);
        org.joda.time.DurationField durationField18 = ethiopicChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField20 = ethiopicChronology12.hours();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str24 = dateTimeZone22.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone22);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str29 = dateTimeZone27.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone27);
        boolean boolean31 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime30);
        int[] intArray33 = ethiopicChronology12.get((org.joda.time.ReadablePartial) localDateTime30, (long) 30);
        long long35 = ethiopicChronology4.set((org.joda.time.ReadablePartial) localDateTime30, (long) (byte) -1);
        org.joda.time.DurationField durationField36 = ethiopicChronology4.seconds();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.plusWeeks((int) (byte) 10);
        int int45 = localDateTime44.getMillisOfSecond();
        int int46 = localDateTime44.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withYearOfEra(928);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.withYear(870);
        int[] intArray52 = ethiopicChronology4.get((org.joda.time.ReadablePartial) localDateTime44, 4286814946L);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime44.minusDays(83);
        org.joda.time.DateTimeField[] dateTimeFieldArray55 = localDateTime54.getFields();
        boolean boolean56 = locale2.equals((java.lang.Object) localDateTime54);
        org.junit.Assert.assertEquals(locale2.toString(), "deutsch (deutschland)_CHINESE");
        org.junit.Assert.assertNotNull(ethiopicChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(ethiopicChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1962, 4, 23, 40]");
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1888152727674L + "'", long35 == 1888152727674L);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 684 + "'", int45 == 684);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 684 + "'", int46 == 684);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1962, 6, 12, 53214956]");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        java.util.Locale locale1 = new java.util.Locale("2022-02-14T14:47:08.612");
        boolean boolean2 = locale1.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-14t14:47:08.612");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology13 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology13.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone16 = ethiopicChronology13.getZone();
        org.joda.time.DateTime dateTime17 = localDateTime5.toDateTime(dateTimeZone16);
        int int18 = localDateTime5.getCenturyOfEra();
        org.joda.time.DateTime dateTime19 = localDateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology21.clockhourOfDay();
        org.joda.time.DurationField durationField23 = ethiopicChronology21.weekyears();
        org.joda.time.DurationField durationField24 = ethiopicChronology21.hours();
        int int25 = ethiopicChronology21.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology21.monthOfYear();
        org.joda.time.DurationField durationField27 = ethiopicChronology21.seconds();
        org.joda.time.DurationField durationField28 = ethiopicChronology21.hours();
        long long31 = durationField28.getMillis((long) 568, (long) 613);
        org.joda.time.DurationFieldType durationFieldType32 = durationField28.getType();
        boolean boolean33 = localDateTime5.isSupported(durationFieldType32);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(ethiopicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(ethiopicChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2044800000L + "'", long31 == 2044800000L);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("306", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(4286800429L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long9 = dateTimeZone7.convertUTCToLocal((long) (short) 1);
        long long11 = dateTimeZone2.getMillisKeepLocal(dateTimeZone7, 3490L);
        long long13 = dateTimeZone2.convertUTCToLocal((-1934668800000L));
        java.lang.String str15 = dateTimeZone2.getNameKey(2805806L);
        java.util.TimeZone timeZone16 = dateTimeZone2.toTimeZone();
        timeZone16.setRawOffset(595);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3490L + "'", long11 == 3490L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1934668799990L) + "'", long13 == (-1934668799990L));
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.dayOfMonth();
        int int3 = dateTimeField2.getMinimumValue();
        int int5 = dateTimeField2.getLeapAmount(4286797376L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withMillisOfDay((int) (byte) 0);
        int int11 = localDateTime10.getYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundFloorCopy();
        int int14 = property12.get();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra(65);
        int int18 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusMinutes((-459606));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMinutes(640);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 30 + "'", int18 == 30);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        org.joda.time.LocalDateTime localDateTime32 = property8.roundHalfFloorCopy();
        java.lang.String str33 = property8.getAsString();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider34);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology38 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = ethiopicChronology38.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology38.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology43 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = ethiopicChronology43.clockhourOfDay();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.lang.String str47 = dateTimeField44.getAsText((long) 'a', locale46);
        java.lang.String str48 = dateTimeField40.getAsText((int) 'a', locale46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.clockhourOfDay();
        org.joda.time.DurationField durationField52 = ethiopicChronology50.weekyears();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology50.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology55 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology55.clockhourOfDay();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str59 = dateTimeField56.getAsText((long) 'a', locale58);
        int int60 = dateTimeField53.getMaximumTextLength(locale58);
        java.lang.String str61 = locale46.getDisplayCountry(locale58);
        java.lang.String str64 = nameProvider34.getName(locale46, "Etc/UTC", "2022-02-14T14:46:37.720");
        int int65 = property8.getMaximumTextLength(locale46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime67 = property8.setCopy("\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??????\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287127921L + "'", long11 == 4287127921L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2000" + "'", str33, "2000");
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(ethiopicChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(ethiopicChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "24" + "'", str47, "24");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "97" + "'", str48, "97");
        org.junit.Assert.assertNotNull(ethiopicChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(ethiopicChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "24" + "'", str59, "24");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 46, dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset(4286795973L);
        java.lang.String str7 = dateTimeZone2.getNameKey(4286809804L);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra(47);
        int int11 = localDateTime10.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 67927952 + "'", int11 == 67927952);
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusYears((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis(491);
        int int20 = localDateTime17.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 46, dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readablePeriod25);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.parse("52");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMinuteOfHour(10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readablePeriod39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = property49.setCopy((int) (byte) 1);
        long long52 = property49.remainder();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.millisOfDay();
        int int64 = property49.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        boolean boolean66 = property49.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property49.getFieldType();
        int int68 = localDateTime38.get(dateTimeFieldType67);
        boolean boolean69 = localDateTime28.isSupported(dateTimeFieldType67);
        int int70 = localDateTime24.get(dateTimeFieldType67);
        org.joda.time.LocalDateTime.Property property71 = localDateTime17.property(dateTimeFieldType67);
        int int72 = localDateTime4.indexOf(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 4287127973L + "'", long52 == 4287127973L);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusDays(4);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.minusMillis(9);
        int int18 = localDateTime17.getHourOfDay();
        int int19 = localDateTime17.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = ethiopicChronology21.getZone();
        boolean boolean25 = dateTimeZone24.isFixed();
        java.lang.String str26 = dateTimeZone24.getID();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = dateTimeZone24.getShortName((long) 1962, locale28);
        java.util.TimeZone timeZone31 = dateTimeZone24.toTimeZone();
        long long33 = dateTimeZone24.nextTransition(4286938917L);
        org.joda.time.DateTime dateTime34 = localDateTime17.toDateTime(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 34 + "'", int19 == 34);
        org.junit.Assert.assertNotNull(ethiopicChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ja" + "'", str29, "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4286938917L + "'", long33 == 4286938917L);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusSeconds(4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(99);
        int int14 = localDateTime13.getYearOfCentury();
        int int16 = localDateTime13.getValue(0);
        int int17 = localDateTime13.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2000 + "'", int16 == 2000);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53531995 + "'", int17 == 53531995);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.yearOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeZone dateTimeZone9 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.weeks();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationFieldType11);
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusYears((int) (short) 1);
        int int21 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = localDateTime9.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.minusMinutes(13);
        int int25 = localDateTime24.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51008001 + "'", int22 == 51008001);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology11.clockhourOfDay();
        org.joda.time.DurationField durationField13 = ethiopicChronology11.weekyears();
        org.joda.time.DurationField durationField14 = ethiopicChronology11.hours();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology11.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = ethiopicChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology11.monthOfYear();
        java.util.Locale locale22 = new java.util.Locale("2022-02-14T14:47:17.342", "\u5fb7\u6587", "2000-02-21T14:48:10.338Z");
        java.lang.String str23 = dateTimeField17.getAsText(4286862855L, locale22);
        int int24 = dateTimeField9.getMaximumTextLength(locale22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withMillisOfSecond((int) (byte) 1);
        int int40 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property41 = localDateTime35.weekyear();
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime.Property property43 = localDateTime35.yearOfCentury();
        java.lang.String str44 = property43.getAsShortText();
        org.joda.time.LocalDateTime localDateTime45 = property43.roundHalfFloorCopy();
        java.util.Locale locale47 = new java.util.Locale("2022-02-14T14:47:08.612");
        int int48 = property43.getMaximumShortTextLength(locale47);
        boolean boolean49 = property43.isLeap();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology51 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology51.weekyearOfCentury();
        org.joda.time.DurationField durationField53 = ethiopicChronology51.seconds();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology51.era();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology51.minuteOfDay();
        long long57 = dateTimeField55.roundHalfFloor(4286825634L);
        java.lang.String str58 = dateTimeField55.getName();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 46, dateTimeZone61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plus(readablePeriod63);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale locale67 = builder66.build();
        java.util.Locale.Builder builder68 = builder66.clear();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology70 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = ethiopicChronology70.dayOfMonth();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime73.plusWeeks((int) (byte) 10);
        java.util.Locale locale80 = java.util.Locale.PRC;
        java.lang.String str81 = dateTimeField71.getAsText((org.joda.time.ReadablePartial) localDateTime79, locale80);
        java.lang.String str82 = locale80.getDisplayScript();
        java.util.Locale.Builder builder83 = builder68.setLocale(locale80);
        java.lang.String str84 = locale80.getScript();
        java.lang.String str85 = dateTimeField55.getAsShortText((org.joda.time.ReadablePartial) localDateTime64, 670, locale80);
        java.lang.String str86 = property43.getAsText(locale80);
        java.lang.String str87 = dateTimeField9.getAsShortText(761, locale80);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(ethiopicChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "\u5fb7\u6587_2000-02-21T14:48:10.338Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "6" + "'", str23, "6");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "22" + "'", str44, "22");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertEquals(locale47.toString(), "2022-02-14t14:47:08.612");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 4286819990L + "'", long57 == 4286819990L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "minuteOfDay" + "'", str58, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(ethiopicChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2" + "'", str81, "2");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "670" + "'", str85, "670");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "22" + "'", str86, "22");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "761" + "'", str87, "761");
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.yearOfEra();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.seconds();
        int int11 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 46, dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset(4286795973L);
        java.lang.String str7 = dateTimeZone2.getNameKey(4286809804L);
        long long11 = dateTimeZone2.convertLocalToUTC(4286878865L, false, 4286973983L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3926878865L + "'", long11 == 3926878865L);
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        int[] intArray16 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime13, 0L);
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField18 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField19 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology1.hourOfHalfday();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1962, 4, 23, 10]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.hours();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.halfdayOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(21857);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.minusMillis(2022);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.plusMonths(113);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.minusYears(383);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = localDateTime21.getValue(843);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 843");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, 402);
        int int11 = localDateTime7.getHourOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        int int26 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.weekyear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMinuteOfHour(10);
        boolean boolean38 = localDateTime21.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusMillis(595);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plus(readablePeriod41);
        boolean boolean43 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.millisOfDay();
        int int55 = property54.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property54.getFieldType();
        int int57 = property54.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property54.getFieldType();
        int int59 = localDateTime37.indexOf(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14 + "'", int11 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 53528417 + "'", int57 == 53528417);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusYears((int) (short) 1);
        int int21 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = localDateTime9.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.minusMinutes(100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfCentury(30);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51008001 + "'", int22 == 51008001);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.seconds();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.dayOfYear();
        int int11 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = ethiopicChronology1.get(readablePeriod12, 4286809165L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(619);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusSeconds(491);
        int int19 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology21.centuryOfEra();
        org.joda.time.DurationField durationField24 = ethiopicChronology21.millis();
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology21.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withMillisOfSecond((int) (byte) 1);
        int int40 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property41 = localDateTime35.weekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusMillis(2022);
        int[] intArray45 = ethiopicChronology21.get((org.joda.time.ReadablePartial) localDateTime35, (long) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime35.millisOfDay();
        int int47 = property46.get();
        org.joda.time.LocalDateTime localDateTime48 = property46.getLocalDateTime();
        org.joda.time.DateTimeField[] dateTimeFieldArray49 = localDateTime48.getFields();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = localDateTime51.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology59 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology59.hourOfDay();
        org.joda.time.DateTimeField dateTimeField61 = ethiopicChronology59.secondOfDay();
        org.joda.time.DateTimeField dateTimeField62 = ethiopicChronology59.secondOfDay();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology59);
        int int64 = localDateTime63.getDayOfYear();
        boolean boolean65 = localDateTime56.isEqual((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withMillisOfSecond((int) (byte) 1);
        boolean boolean72 = localDateTime56.isAfter((org.joda.time.ReadablePartial) localDateTime67);
        int int73 = localDateTime56.getMonthOfYear();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(chronology74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime75.plusWeeks((int) (byte) 10);
        int int82 = localDateTime81.getMillisOfSecond();
        int int83 = localDateTime81.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime81.withYearOfEra(928);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = localDateTime85.getFieldType(0);
        int int88 = localDateTime56.get(dateTimeFieldType87);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime48.withField(dateTimeFieldType87, 35);
        boolean boolean91 = localDateTime16.isSupported(dateTimeFieldType87);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime93 = localDateTime16.withYearOfCentury(515);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 515 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(ethiopicChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1962, 4, 23, 45]");
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 53528543 + "'", int47 == 53528543);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(ethiopicChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 113 + "'", int64 == 113);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 543 + "'", int82 == 543);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 543 + "'", int83 == 543);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2022 + "'", int88 == 2022);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.centuries();
        int int9 = ethiopicChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMonths(999);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear(614);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plus(readableDuration28);
        long long31 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime25, 4286860932L);
        org.joda.time.DurationField durationField32 = ethiopicChronology1.minutes();
        org.joda.time.DurationField durationField33 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology1.secondOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3820920728559L + "'", long31 == 3820920728559L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        int int20 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.minusMillis(2022);
        int[] intArray25 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime15, (long) '#');
        org.joda.time.LocalDateTime.Property property26 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.minusHours(51040001);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology30 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology30.clockhourOfDay();
        long long35 = ethiopicChronology30.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField36 = ethiopicChronology30.clockhourOfHalfday();
        org.joda.time.DurationField durationField37 = ethiopicChronology30.weekyears();
        java.lang.String str38 = durationField37.toString();
        org.joda.time.DurationFieldType durationFieldType39 = durationField37.getType();
        boolean boolean40 = localDateTime15.isSupported(durationFieldType39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime15.secondOfMinute();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1962, 4, 23, 45]");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(ethiopicChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3430L + "'", long35 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DurationField[weekyears]" + "'", str38, "DurationField[weekyears]");
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.millisOfDay();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.months();
        org.joda.time.DurationField durationField7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = durationField6.compareTo(durationField7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DurationField durationField7 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DurationField durationField9 = ethiopicChronology1.hours();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone11);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone16);
        boolean boolean20 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        int[] intArray22 = ethiopicChronology1.get((org.joda.time.ReadablePartial) localDateTime19, (long) 30);
        org.joda.time.DateTimeZone dateTimeZone23 = ethiopicChronology1.getZone();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = ethiopicChronology1.add(readablePeriod24, (long) 613, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology1.hourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology1.weeks();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str33 = dateTimeZone31.getNameKey((long) (byte) 0);
        boolean boolean34 = dateTimeZone31.isFixed();
        boolean boolean35 = dateTimeZone31.isFixed();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.minusDays(100);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.minuteOfHour();
        boolean boolean49 = dateTimeZone31.equals((java.lang.Object) localDateTime47);
        org.joda.time.Chronology chronology50 = ethiopicChronology1.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField52 = ethiopicChronology1.weekyears();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        long long56 = ethiopicChronology1.add(readablePeriod53, 0L, 875);
        org.joda.time.DurationField durationField57 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology1.millisOfSecond();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1962, 4, 23, 40]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 613L + "'", long27 == 613L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        java.lang.Object obj5 = locale4.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "");
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.millis();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology12 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = ethiopicChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField14 = ethiopicChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = ethiopicChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        java.lang.String str18 = dateTimeZone16.getID();
        java.lang.String str20 = dateTimeZone16.getNameKey(52L);
        org.joda.time.Chronology chronology21 = ethiopicChronology1.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(ethiopicChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        int int15 = localDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.minusDays(100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology29 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = ethiopicChronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = ethiopicChronology29.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone32 = ethiopicChronology29.getZone();
        org.joda.time.DateTime dateTime33 = localDateTime21.toDateTime(dateTimeZone32);
        int int34 = localDateTime21.getCenturyOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.minusDays(100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime40.withYearOfCentury((int) (short) 1);
        int int49 = localDateTime40.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime40.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime21.withField(dateTimeFieldType51, 225);
        int int54 = localDateTime1.get(dateTimeFieldType51);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime1.withHourOfDay(9);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(ethiopicChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        int int5 = localDateTime3.getYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusDays(446);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays(2000);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.setCopy((int) (byte) 1);
        long long21 = property18.remainder();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.millisOfDay();
        int int33 = property18.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        boolean boolean35 = property18.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology37 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology37.clockhourOfDay();
        org.joda.time.DurationField durationField39 = ethiopicChronology37.weekyears();
        org.joda.time.DurationField durationField40 = ethiopicChronology37.hours();
        boolean boolean41 = property18.equals((java.lang.Object) ethiopicChronology37);
        org.joda.time.LocalDateTime localDateTime42 = property18.roundHalfFloorCopy();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = property18.getAsShortText(locale43);
        org.joda.time.LocalDateTime localDateTime46 = property18.setCopy(10);
        org.joda.time.DurationField durationField47 = property18.getDurationField();
        int int48 = property18.getMinimumValue();
        boolean boolean49 = localDateTime9.equals((java.lang.Object) property18);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4287128851L + "'", long21 == 4287128851L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2000" + "'", str44, "2000");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-292275054) + "'", int48 == (-292275054));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = ethiopicChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = ethiopicChronology1.getDateTimeMillis(13228, 802, 0, 51005001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 802 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 1055L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = ethiopicChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = ethiopicChronology27.weekyears();
        org.joda.time.DurationField durationField30 = ethiopicChronology27.hours();
        boolean boolean31 = property8.equals((java.lang.Object) ethiopicChronology27);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("2022-02-14T14:46:42.333");
        java.lang.String str34 = locale33.toLanguageTag();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology36 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = ethiopicChronology36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology36.halfdayOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime40.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.dayOfWeek();
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.lang.String str48 = locale47.getScript();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.clockhourOfDay();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = dateTimeField51.getAsText((long) 'a', locale53);
        java.lang.String str55 = locale47.getDisplayName(locale53);
        java.lang.String str56 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDateTime43, locale53);
        java.lang.String str57 = locale33.getDisplayLanguage(locale53);
        java.lang.String str58 = property8.getAsText(locale53);
        org.joda.time.LocalDateTime localDateTime59 = property8.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField60 = property8.getField();
        org.joda.time.LocalDateTime localDateTime61 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusMinutes(315);
        int int64 = localDateTime61.getHourOfDay();
        org.joda.time.LocalDateTime.Property property65 = localDateTime61.monthOfYear();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime61.minus(readableDuration66);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4287128902L + "'", long11 == 4287128902L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
        org.junit.Assert.assertNotNull(ethiopicChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(ethiopicChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "24" + "'", str54, "24");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tedesco (Germania)" + "'", str55, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2000" + "'", str58, "2000");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfHour();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        long long18 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime14, (long) 626);
        org.joda.time.DurationField durationField19 = ethiopicChronology1.centuries();
        org.joda.time.Chronology chronology20 = ethiopicChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = ethiopicChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = ethiopicChronology1.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeField22.set(4286972354L, "2022-02-14T14:50:05.728");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-14T14:50:05.728\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1888152727991L + "'", long18 == 1888152727991L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = ethiopicChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.yearOfEra();
        org.joda.time.DurationField durationField12 = ethiopicChronology1.hours();
        org.joda.time.DurationField durationField13 = ethiopicChronology1.hours();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        long long11 = ethiopicChronology1.add((long) 595, (long) 690, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField12 = ethiopicChronology1.halfdayOfDay();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 69595L + "'", long11 == 69595L);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        java.lang.String str6 = dateTimeZone5.getID();
        java.lang.String str7 = dateTimeZone5.getID();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology8 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5);
        boolean boolean10 = dateTimeZone5.isStandardOffset((long) 614);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone12 = dateTimeZone5.toTimeZone();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(ethiopicChronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 8);
        int int12 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        int int27 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.weekyear();
        org.joda.time.LocalDateTime.Property property29 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime22.minusYears(999);
        int int32 = localDateTime22.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime22.plusMillis(955);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime22.withWeekyear(22);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology39 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology39.clockhourOfDay();
        org.joda.time.DurationField durationField41 = ethiopicChronology39.weekyears();
        org.joda.time.DurationField durationField42 = ethiopicChronology39.hours();
        org.joda.time.DateTimeField dateTimeField43 = ethiopicChronology39.dayOfMonth();
        org.joda.time.DurationField durationField44 = ethiopicChronology39.centuries();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDateTime46.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plus(readablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology51 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology51.clockhourOfDay();
        org.joda.time.DurationField durationField53 = ethiopicChronology51.weekyears();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology51.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = ethiopicChronology51.getZone();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology51);
        org.joda.time.DurationField durationField57 = ethiopicChronology51.weekyears();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology51.hourOfHalfday();
        org.joda.time.DurationField durationField59 = ethiopicChronology51.hours();
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        java.lang.String str63 = dateTimeZone61.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(dateTimeZone61);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.lang.String str68 = dateTimeZone66.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(dateTimeZone66);
        boolean boolean70 = localDateTime64.isEqual((org.joda.time.ReadablePartial) localDateTime69);
        int[] intArray72 = ethiopicChronology51.get((org.joda.time.ReadablePartial) localDateTime69, (long) 30);
        ethiopicChronology39.validate((org.joda.time.ReadablePartial) localDateTime49, intArray72);
        int[] intArray75 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) localDateTime22, 0, intArray72, 175);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime22.minusDays(712);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(ethiopicChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(ethiopicChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(intArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[37, 4, 23, 40]");
        org.junit.Assert.assertNotNull(intArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[37, 4, 23, 40]");
        org.junit.Assert.assertNotNull(localDateTime77);
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.year();
        org.joda.time.DateTimeZone dateTimeZone9 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = ethiopicChronology1.getDateTimeMillis(785, 53384209, 53295242, 599);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53384209 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology1);
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.monthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays(10);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology24 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = ethiopicChronology24.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = ethiopicChronology24.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = ethiopicChronology24.dayOfWeek();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = localDateTime29.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology37 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = ethiopicChronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = ethiopicChronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology37.secondOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) ethiopicChronology37);
        int int42 = localDateTime41.getDayOfYear();
        boolean boolean43 = localDateTime34.isEqual((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology45 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = ethiopicChronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = ethiopicChronology45.centuryOfEra();
        org.joda.time.DurationField durationField48 = ethiopicChronology45.millis();
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology45.weekOfWeekyear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withMillisOfSecond((int) (byte) 1);
        int int64 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime.Property property65 = localDateTime59.weekyear();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime59.minusMillis(2022);
        int[] intArray69 = ethiopicChronology45.get((org.joda.time.ReadablePartial) localDateTime59, (long) '#');
        int int70 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime41, intArray69);
        int int71 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime20.minus(readableDuration72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.yearOfEra();
        org.joda.time.LocalDateTime localDateTime76 = property74.addWrapFieldToCopy(444);
        java.util.Locale locale78 = java.util.Locale.TAIWAN;
        java.util.Locale locale79 = locale78.stripExtensions();
        java.lang.String str80 = locale78.getDisplayLanguage();
        java.lang.String str81 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime76, 183, locale78);
        java.lang.Class<?> wildcardClass82 = dateTimeField9.getClass();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(ethiopicChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(ethiopicChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 113 + "'", int42 == 113);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(ethiopicChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1962, 4, 23, 45]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str80, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "183" + "'", str81, "183");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        int int5 = localDateTime4.getYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime9.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minus(readablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology14 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField16 = ethiopicChronology14.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = ethiopicChronology14.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology19 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = ethiopicChronology19.clockhourOfDay();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = dateTimeField20.getAsText((long) 'a', locale22);
        int int24 = dateTimeField17.getMaximumTextLength(locale22);
        int int26 = dateTimeField17.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.centuryOfEra();
        java.lang.String str33 = localDateTime30.toString();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, (-292275054), locale35);
        java.lang.String str37 = localDateTime30.toString();
        java.lang.String str38 = localDateTime30.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.minusDays(100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime44.withYearOfCentury((int) (short) 1);
        int int53 = localDateTime44.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = localDateTime44.getFieldType(0);
        int int56 = localDateTime30.get(dateTimeFieldType55);
        int int57 = localDateTime12.get(dateTimeFieldType55);
        org.joda.time.LocalDateTime.Property property58 = localDateTime7.property(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(ethiopicChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(ethiopicChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "24" + "'", str23, "24");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-14T14:52:09.251" + "'", str33, "2022-02-14T14:52:09.251");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-292275054" + "'", str36, "-292275054");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-14T14:52:09.251" + "'", str37, "2022-02-14T14:52:09.251");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-14T14:52:09.251" + "'", str38, "2022-02-14T14:52:09.251");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long3 = dateTimeZone1.previousTransition(1888152489001L);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfDay((int) (byte) 0);
        int int15 = localDateTime14.getYear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundFloorCopy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        int int32 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfCeilingCopy();
        int int36 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime35);
        int int38 = localDateTime37.getDayOfYear();
        int int39 = localDateTime37.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusMillis(0);
        boolean boolean42 = dateTimeZone1.isLocalDateTimeGap(localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusSeconds(951);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = localDateTime41.withSecondOfMinute(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1888152489001L + "'", long3 == 1888152489001L);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = ethiopicChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = ethiopicChronology1.getZone();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.dayOfYear();
        long long11 = dateTimeField9.roundCeiling(8320L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minusDays(0);
        int int24 = localDateTime23.getMinuteOfHour();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime26.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfDay((int) (byte) 0);
        int int30 = localDateTime29.getYear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.yearOfEra();
        boolean boolean32 = localDateTime23.equals((java.lang.Object) property31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        int[] intArray35 = localDateTime34.getValues();
        int int36 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology37 = localDateTime34.getChronology();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86399990L + "'", long11 == 86399990L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[2022, 2, 21, 53520000]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 366 + "'", int36 == 366);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.weekyearOfCentury();
        int int6 = dateTimeField3.getDifference(491L, 53198677L);
        org.joda.time.DurationField durationField7 = dateTimeField3.getDurationField();
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        boolean boolean11 = locale10.hasExtensions();
        boolean boolean12 = dateTime9.equals((java.lang.Object) locale10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Collection<java.lang.String> strCollection16 = null;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection16);
        java.util.Collection<java.lang.String> strCollection18 = null;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection23);
        java.util.Collection<java.lang.String> strCollection25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection25);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection25, filteringMode27);
        boolean boolean29 = dateTime9.equals((java.lang.Object) languageRangeList14);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.centuryOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        boolean boolean47 = locale46.hasExtensions();
        boolean boolean48 = dateTime45.equals((java.lang.Object) locale46);
        int int49 = property35.getDifference((org.joda.time.ReadableInstant) dateTime45);
        int int50 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        boolean boolean62 = locale61.hasExtensions();
        boolean boolean63 = dateTime60.equals((java.lang.Object) locale61);
        boolean boolean64 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime60.getZone();
        java.lang.String str67 = dateTimeZone65.getShortName(1L);
        java.lang.String str69 = dateTimeZone65.getNameKey(175L);
        int int71 = dateTimeZone65.getStandardOffset(4286879371L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode27.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.010" + "'", str67, "+00:00:00.010");
// flaky:         org.junit.Assert.assertNull(str69);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.year();
        org.joda.time.DateTimeField dateTimeField9 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField10 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField11 = ethiopicChronology1.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = ethiopicChronology1.getDateTimeMillis(887, 294, 621, 243);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 294 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.yearOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = ethiopicChronology1.minuteOfDay();
        org.joda.time.DurationField durationField6 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField7 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField8 = ethiopicChronology1.seconds();
        org.joda.time.DateTimeZone dateTimeZone9 = ethiopicChronology1.getZone();
        long long11 = dateTimeZone9.previousTransition(4286954646L);
        java.lang.String str13 = dateTimeZone9.getNameKey(4286994537L);
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4286954646L + "'", long11 == 4286954646L);
// flaky:         org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = ethiopicChronology1.millis();
        org.joda.time.DurationField durationField5 = ethiopicChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = ethiopicChronology1.hours();
        org.joda.time.DateTimeField dateTimeField8 = ethiopicChronology1.minuteOfHour();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        long long18 = ethiopicChronology1.set((org.joda.time.ReadablePartial) localDateTime14, (long) 626);
        org.joda.time.DurationField durationField19 = ethiopicChronology1.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = ethiopicChronology1.getDateTimeMillis(4286942416L, 0, (-49), 891, 53260860);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -49 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1888152728991L + "'", long18 == 1888152728991L);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = ethiopicChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = ethiopicChronology1.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = property15.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField18 = property15.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekOfWeekyear();
        int int21 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime19);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone23);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str30 = dateTimeZone28.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone28);
        boolean boolean32 = localDateTime26.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        int int33 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.weekyear();
        org.joda.time.LocalDateTime localDateTime44 = property42.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField45 = property42.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime46 = property42.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks(619);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        int int50 = localDateTime46.getWeekyear();
        boolean boolean51 = localDateTime31.equals((java.lang.Object) localDateTime46);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime31.minusYears((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusHours(89);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withYear(773);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = localDateTime53.toString("2022-02-14T14:47:01.786");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 999 + "'", int33 == 999);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2000 + "'", int50 == 2000);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
    }
}

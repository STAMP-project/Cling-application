import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfEra();
        int int5 = mutableDateTime1.getYearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        java.lang.String str8 = localTime7.toString();
        org.joda.time.LocalTime localTime10 = localTime7.minusHours((int) 'a');
        int int11 = localTime7.getHourOfDay();
        org.joda.time.LocalTime.Property property12 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        boolean boolean17 = localDateTime15.isSupported(durationFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = localTime13.withFieldAdded(durationFieldType16, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.682" + "'", str8, "00:00:00.682");
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        java.util.Date date6 = new java.util.Date(11, 18, 48, 17, 1970, 5);
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date6);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = property8.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay12 = property8.setCopy("java.util.GregorianCalendar[time=1645455654699,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=29,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=52,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=0,SECOND=54,MILLISECOND=728,ZONE_OFFSET=29,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=1645455654699,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=29,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=52,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=0,SECOND=54,MILLISECOND=728,ZONE_OFFSET=29,DST_OFFSET=0]\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Aug 19 01:50:05 GMT 1912");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean5 = localTime2.isEqual((org.joda.time.ReadablePartial) localTime4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = localTime4.isSupported(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property8 = localTime0.property(dateTimeFieldType6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = property8.addNoWrapToCopy(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withDayOfWeek(2);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMinutes((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        java.lang.String str30 = dateTimeFieldType27.toString();
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.property(dateTimeFieldType27);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime35.getZone();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        mutableDateTime33.setZoneRetainFields(dateTimeZone38);
        long long43 = dateTimeZone38.adjustOffset((long) 49, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime45 = localDateTime26.toDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMillis(780);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean66 = dateTime62.isAfterNow();
        org.joda.time.DateTime dateTime68 = dateTime62.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime69 = dateTime68.toLocalDateTime();
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime();
        org.joda.time.DateTime.Property property71 = dateTime70.millisOfSecond();
        int int72 = dateTime70.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        mutableDateTime76.setZoneRetainFields(dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone79 = mutableDateTime76.getZone();
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(dateTimeZone79);
        mutableDateTime74.setZoneRetainFields(dateTimeZone79);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime83 = dateTime70.withZone(dateTimeZone79);
        org.joda.time.DateTime dateTime84 = localDateTime47.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime86 = dateTime84.withMillisOfDay(0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "year" + "'", str30, "year");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 49L + "'", long43 == 49L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateMidnight.Property property33 = dateMidnight0.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight34 = property33.roundHalfFloorCopy();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime();
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period(readableInstant45, readableInstant46, periodType47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = period48.normalizedStandard(periodType49);
        java.lang.String str51 = period48.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withZone(dateTimeZone59);
        org.joda.time.Duration duration61 = period48.toDurationFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.yearOfEra();
        org.joda.time.DateTime dateTime67 = property65.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str69 = periodType68.getName();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration61, (org.joda.time.ReadableInstant) dateTime67, periodType68);
        org.joda.time.DateTime dateTime71 = dateTime42.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.format.PeriodFormatter periodFormatter73 = null;
        java.lang.String str74 = period72.toString(periodFormatter73);
        org.joda.time.Period period76 = period72.withSeconds(85736235);
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT0S" + "'", str51, "PT0S");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "YearWeekDay" + "'", str69, "YearWeekDay");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT0S" + "'", str74, "PT0S");
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration21.plus((long) 'u');
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration23, (-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime34, periodType36);
        mutableDateTime14.setMillis((long) 1969);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean54 = dateTime52.isSupported(dateTimeFieldType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period56 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime52, periodType55);
        org.joda.time.Period period57 = duration10.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime14, periodType55);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime14.centuryOfEra();
        mutableDateTime14.addMinutes(0);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime14.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType62.getDurationType();
        mutableDateTime14.add(durationFieldType63, 57);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period(readableInstant66, readableInstant67, periodType68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = period69.normalizedStandard(periodType70);
        java.lang.String str72 = period69.toString();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Duration duration79 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = dateTime78.withZone(dateTimeZone80);
        org.joda.time.Duration duration82 = period69.toDurationFrom((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime83 = dateTime81.withTimeAtStartOfDay();
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) dateTime81);
        java.lang.Object obj85 = mutableDateTime14.clone();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT0S" + "'", str72, "PT0S");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(obj85);
// flaky:         org.junit.Assert.assertEquals(obj85.toString(), "1970-01-01T00:00:00.682+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "1970-01-01T00:00:00.682+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "1970-01-01T00:00:00.682+00:00:00.683");
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setDayOfYear(1);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = property33.set("32");
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.centuryOfEra();
        int int37 = mutableDateTime35.getMinuteOfDay();
        java.lang.String str38 = mutableDateTime35.toString();
        mutableDateTime27.setTime((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfYear();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.minusDays(0);
        org.joda.time.Interval interval45 = dateMidnight44.toInterval();
        org.joda.time.Interval interval47 = interval45.withStartMillis((long) 0);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.centuries();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.centuryOfEra();
        org.joda.time.DurationField durationField51 = chronology48.halfdays();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(chronology48);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.year();
        org.joda.time.DateTime dateTime55 = mutableDateTime27.toDateTime(chronology48);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime27.yearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-01-01T00:00:00.032+00:00:00.683" + "'", str38, "2022-01-01T00:00:00.032+00:00:00.683");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate5 = localDate0.minusMonths(31);
        int int6 = localDate5.getYearOfCentury();
        org.joda.time.LocalDate.Property property7 = localDate5.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        boolean boolean10 = localDate5.isSupported(durationFieldType9);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.plusYears(10);
        boolean boolean15 = localDate11.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.minusDays(10);
        org.joda.time.Period period28 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay27.year();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minusYears(53);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusMonths(9);
        org.joda.time.LocalDate localDate34 = localDate5.withFields((org.joda.time.ReadablePartial) yearMonthDay31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = localDate5.withWeekOfWeekyear(25253);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25253 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property3.addToCopy((int) ' ');
        java.util.Locale locale6 = java.util.Locale.ITALY;
        int int7 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime13 = property11.addToCopy((int) ' ');
        java.util.Locale locale14 = java.util.Locale.ITALY;
        int int15 = property11.getMaximumShortTextLength(locale14);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("PT0S");
        int int18 = property11.getMaximumShortTextLength(locale17);
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate23 = localDate20.plusWeeks(100);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property25.addWrapFieldToCopy(0);
        int int28 = localDate23.compareTo((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateMidnight dateMidnight29 = localDate27.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.minusDays(0);
        org.joda.time.Interval interval35 = dateMidnight34.toInterval();
        org.joda.time.Interval interval37 = interval35.withStartMillis((long) 0);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight29.withChronology(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(chronology38);
        org.joda.time.DateTimeField dateTimeField42 = chronology38.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime49 = property47.addToCopy((int) ' ');
        java.util.Locale locale50 = java.util.Locale.ITALY;
        int int51 = property47.getMaximumShortTextLength(locale50);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("PT0S");
        int int54 = property47.getMaximumShortTextLength(locale53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime60 = property58.addToCopy((int) ' ');
        java.util.Locale locale61 = java.util.Locale.ITALY;
        int int62 = property58.getMaximumShortTextLength(locale61);
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("PT0S");
        int int65 = property58.getMaximumShortTextLength(locale64);
        int int66 = property47.getMaximumTextLength(locale64);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.lang.String str68 = locale67.getISO3Language();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.DateTime.Property property72 = dateTime71.yearOfEra();
        org.joda.time.DateTime dateTime74 = property72.addToCopy((int) ' ');
        java.util.Locale locale75 = java.util.Locale.ITALY;
        int int76 = property72.getMaximumShortTextLength(locale75);
        java.util.Locale locale78 = java.util.Locale.forLanguageTag("PT0S");
        int int79 = property72.getMaximumShortTextLength(locale78);
        java.lang.String str80 = locale67.getDisplayVariant(locale78);
        java.util.Locale locale81 = java.util.Locale.ITALY;
        java.lang.String str82 = locale78.getDisplayName(locale81);
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        java.lang.String str84 = locale83.getISO3Language();
        java.lang.String str85 = locale78.getDisplayScript(locale83);
        java.lang.String str86 = property47.getAsText(locale83);
        java.lang.String str87 = dateTimeField42.getAsShortText(292278993, locale83);
        java.lang.String str88 = locale17.getDisplayVariant(locale83);
        java.lang.String str89 = locale6.getDisplayCountry(locale83);
        java.util.Locale locale90 = locale83.stripExtensions();
        boolean boolean91 = locale83.hasExtensions();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "deu" + "'", str68, "deu");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "deu" + "'", str84, "deu");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1970" + "'", str86, "1970");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "292278993" + "'", str87, "292278993");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Italien" + "'", str89, "Italien");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration11.plus((long) 'u');
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration13, (-1));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, periodType26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateTime24, periodType26);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfYear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusDays(0);
        org.joda.time.Interval interval34 = dateMidnight33.toInterval();
        org.joda.time.Interval interval36 = interval34.withStartMillis((long) 0);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 50, periodType26, chronology37);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 2022, (long) 45, chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((java.lang.Object) dateTimeField41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        org.joda.time.DateMidnight dateMidnight2 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime.Property property26 = dateTime9.year();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight2, dateTimeZone28);
        mutableDateTime29.setWeekyear(0);
        java.lang.Object obj32 = mutableDateTime29.clone();
        mutableDateTime29.setHourOfDay(7);
        boolean boolean35 = instant1.isBefore((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime29.hourOfDay();
        org.joda.time.DateTime dateTime37 = mutableDateTime29.toDateTime();
        org.junit.Assert.assertNotNull(dateMidnight2);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str7, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(obj32);
// flaky:         org.junit.Assert.assertEquals(obj32.toString(), "0000-02-21T00:00:00.000+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "0000-02-21T00:00:00.000+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "0000-02-21T00:00:00.000+00:00:00.683");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withCenturyOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property57 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime.Property property58 = localDateTime52.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 58 + "'", int26 == 58);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        long long11 = durationField9.getMillis(100431);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate15 = localDate12.plusWeeks(100);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy(0);
        int int20 = localDate15.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateMidnight dateMidnight21 = localDate19.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.minusDays(0);
        org.joda.time.Interval interval27 = dateMidnight26.toInterval();
        org.joda.time.Interval interval29 = interval27.withStartMillis((long) 0);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight21.withChronology(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.seconds();
        int int36 = durationField33.getValue(50116069L, 1335967560000L);
        int int37 = durationField9.compareTo(durationField33);
        boolean boolean38 = durationField33.isSupported();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 8677238400000L + "'", long11 == 8677238400000L);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50116 + "'", int36 == 50116);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1439);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter7.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.parse("-31407", dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1439);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear(56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) (-54));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 32769);
        boolean boolean14 = dateTimeFormatter11.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter11.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withZoneUTC();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate20 = localDate18.plusYears(10);
        boolean boolean22 = localDate18.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime25.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime31.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusDays(10);
        org.joda.time.Period period35 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay34);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay34.year();
        org.joda.time.YearMonthDay yearMonthDay38 = property36.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay40 = property36.addToCopy((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay41 = property36.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.plusMonths(1971);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfYear();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(0);
        org.joda.time.Interval interval49 = dateMidnight48.toInterval();
        org.joda.time.Interval interval51 = interval49.withStartMillis((long) 0);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.days();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight55 = org.joda.time.DateMidnight.now(chronology52);
        org.joda.time.DateTimeField dateTimeField56 = chronology52.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay41.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeFormatter17, chronology52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.time.Instant instant1 = calendar0.toInstant();
        java.lang.Object obj2 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455777532,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=57,MILLISECOND=532,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "java.util.GregorianCalendar[time=1645455777532,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=57,MILLISECOND=532,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "java.util.GregorianCalendar[time=1645455777532,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=57,MILLISECOND=532,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "java.util.GregorianCalendar[time=1645455777532,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=57,MILLISECOND=532,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.plusHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(0);
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.Interval interval16 = interval14.withStartMillis((long) 0);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay8.withChronologyRetainFields(chronology17);
        org.joda.time.DateTime dateTime20 = timeOfDay19.toDateTimeToday();
        int int21 = dateTime20.getHourOfDay();
        org.joda.time.DateTime.Property property22 = dateTime20.secondOfDay();
        org.joda.time.DateTime dateTime23 = property22.getDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 58 + "'", int2 == 58);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        java.util.Date date1 = new java.util.Date((long) (byte) -1);
        date1.setMinutes(20);
        int int4 = date1.getYear();
        java.lang.String str5 = date1.toString();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Wed Dec 31 23:20:59 GMT 1969");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Wed Dec 31 23:20:59 GMT 1969" + "'", str5, "Wed Dec 31 23:20:59 GMT 1969");
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        org.joda.time.LocalDate localDate5 = localDate2.plusWeeks(100);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy(0);
        int int10 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateMidnight dateMidnight11 = localDate9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays(0);
        org.joda.time.Interval interval17 = dateMidnight16.toInterval();
        org.joda.time.Interval interval19 = interval17.withStartMillis((long) 0);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withChronology(chronology20);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology20);
        boolean boolean24 = periodType0.equals((java.lang.Object) dateMidnight23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.minusMonths(360000000);
        int int27 = dateMidnight23.getMillisOfDay();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.set(23);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int6 = property2.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime8 = property2.add((long) 6);
        mutableDateTime8.setMinuteOfDay(99);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusDays(0);
        org.joda.time.Interval interval16 = dateMidnight15.toInterval();
        org.joda.time.Interval interval18 = interval16.withStartMillis((long) 0);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.yearOfEra();
        int int24 = mutableDateTime8.get(dateTimeField23);
        boolean boolean26 = mutableDateTime8.isEqual(50214866L);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime8.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean4 = localTime1.isEqual((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime localTime6 = localTime1.minusMillis(5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int13 = dateTime9.get(dateTimeFieldType12);
        org.joda.time.LocalTime.Property property14 = localTime1.property(dateTimeFieldType12);
        org.joda.time.LocalTime localTime15 = property14.getLocalTime();
        org.joda.time.LocalTime localTime16 = property14.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(53829);
        org.joda.time.Hours hours2 = period1.toStandardHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays(0);
        org.joda.time.Interval interval13 = dateMidnight12.toInterval();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(0L, (long) 12);
        long long17 = interval16.getStartMillis();
        boolean boolean18 = interval13.isAfter((org.joda.time.ReadableInterval) interval16);
        long long19 = interval16.getEndMillis();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        org.joda.time.Interval interval25 = dateMidnight24.toInterval();
        org.joda.time.Interval interval27 = interval25.withStartMillis((long) 0);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.centuries();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.centuryOfEra();
        org.joda.time.Interval interval31 = interval16.withChronology(chronology28);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant34, readableInstant35, periodType36);
        org.joda.time.Period period39 = period37.plusDays(2022);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period41 = period39.withPeriodType(periodType40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.minusDays(0);
        org.joda.time.Interval interval47 = dateMidnight46.toInterval();
        org.joda.time.Interval interval49 = interval47.withStartMillis((long) 0);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now(chronology50);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(chronology50);
        org.joda.time.Period period55 = new org.joda.time.Period((long) 21, (long) 9, periodType40, chronology50);
        int int56 = periodType40.size();
        org.joda.time.Period period57 = interval31.toPeriod(periodType40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period58 = new org.joda.time.Period(100907, 100684, 117, 53958200, 54091, 3879, 7, 0, periodType40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 12L + "'", long19 == 12L);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(32769, 59, 56);
        java.util.Calendar.Builder builder11 = builder0.setTimeOfDay(9, 54, 40, (int) (byte) -1);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("English");
        java.util.Calendar.Builder builder14 = builder0.setTimeZone(timeZone13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("English");
        timeZone16.setRawOffset(29);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.lang.String str20 = timeZone19.getID();
        int int22 = timeZone19.getOffset((long) 999);
        timeZone19.setID("secondOfMinute");
        java.util.TimeZone.setDefault(timeZone19);
        boolean boolean26 = timeZone16.hasSameRules(timeZone19);
        boolean boolean27 = timeZone13.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GMT" + "'", str20, "GMT");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-01-01T00:00:00.032Z");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        int int21 = dateTime18.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.set(23);
        org.joda.time.DateTimeField dateTimeField27 = property24.getField();
        int int28 = property24.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime30 = property24.add((long) 6);
        mutableDateTime30.setMinuteOfDay(99);
        org.joda.time.DateTime dateTime33 = mutableDateTime30.toDateTime();
        mutableDateTime30.setWeekyear(38);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime30.toMutableDateTimeISO();
        int int37 = dateTime18.compareTo((org.joda.time.ReadableInstant) mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 1, periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime21, periodType23);
        mutableDateTime1.setMillis((long) 1969);
        mutableDateTime1.addHours(2022);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration36.plus((long) 'u');
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean43 = dateTime41.isSupported(dateTimeFieldType42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period45 = duration36.toPeriodTo((org.joda.time.ReadableInstant) dateTime41, periodType44);
        boolean boolean46 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime41);
        mutableDateTime1.setWeekyear(4);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfCentury();
        org.joda.time.LocalDate localDate52 = localDate49.plusWeeks(100);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate56 = property54.addWrapFieldToCopy(0);
        int int57 = localDate52.compareTo((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateMidnight dateMidnight58 = localDate56.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.dayOfYear();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.minusDays(0);
        org.joda.time.Interval interval64 = dateMidnight63.toInterval();
        org.joda.time.Interval interval66 = interval64.withStartMillis((long) 0);
        org.joda.time.Chronology chronology67 = interval66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.days();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight58.withChronology(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = org.joda.time.DateMidnight.now(chronology67);
        mutableDateTime1.setChronology(chronology67);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = null;
        java.lang.String str76 = dateTime74.toString(dateTimeFormatter75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = dateTime74.toDateTime(dateTimeZone77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period(readableInstant79, readableInstant80, periodType81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = period82.normalizedStandard(periodType83);
        org.joda.time.DateTime dateTime86 = dateTime74.withPeriodAdded((org.joda.time.ReadablePeriod) period82, 2022);
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.DateTime dateTime88 = dateTime74.toDateTime(dateTimeZone87);
        org.joda.time.LocalDate localDate89 = dateTime88.toLocalDate();
        org.joda.time.LocalDate localDate91 = localDate89.withYear(1969);
        org.joda.time.LocalDate localDate93 = localDate89.plusWeeks(31);
        int int94 = localDate89.getYear();
        int[] intArray96 = chronology67.get((org.joda.time.ReadablePartial) localDate89, 0L);
        org.joda.time.YearMonthDay yearMonthDay97 = new org.joda.time.YearMonthDay(chronology67);
        org.joda.time.DateTimeField dateTimeField98 = chronology67.hourOfHalfday();
        java.lang.String str99 = dateTimeField98.getName();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight70);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str76, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(localDate93);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1970 + "'", int94 == 1970);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "hourOfHalfday" + "'", str99, "hourOfHalfday");
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-1591875054L));
        java.lang.Object obj2 = null;
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime.Property property27 = dateTime10.year();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight3, dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        mutableDateTime32.setYear(1969);
        boolean boolean35 = dateMidnight3.isEqual((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.DateMidnight.Property property36 = dateMidnight3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight3.getZone();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(obj2, dateTimeZone37);
        org.joda.time.Interval interval39 = localDate1.toInterval(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone37);
        int int41 = dateTime40.getWeekyear();
        boolean boolean43 = dateTime40.isAfter(0L);
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str8, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusWeeks(15);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime15.toString(dateTimeFormatter16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration33);
        long long36 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateMidnight dateMidnight37 = property12.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight39 = property12.addToCopy((int) 'a');
        org.joda.time.DateMidnight dateMidnight40 = property12.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight41 = property12.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight43 = property12.addToCopy((long) 53966321);
        boolean boolean44 = dateMidnight7.isAfter((org.joda.time.ReadableInstant) dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str17, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType2);
        mutablePeriod3.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = mutablePeriod3.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod7 = mutablePeriod3.toMutablePeriod();
        java.lang.String str8 = mutablePeriod3.toString();
        mutablePeriod3.addMinutes(40);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod3.copy();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = duration25.plus((long) 'u');
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration27, (-1));
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime32.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 1, periodType40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, (org.joda.time.ReadableInstant) dateTime38, periodType40);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.minusDays(0);
        org.joda.time.Interval interval48 = dateMidnight47.toInterval();
        org.joda.time.Interval interval50 = interval48.withStartMillis((long) 0);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 50, periodType40, chronology51);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) 17, chronology51);
        org.joda.time.DurationField durationField54 = chronology51.days();
        org.joda.time.DurationField durationField55 = chronology51.days();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.halfdayOfDay();
        org.joda.time.DurationField durationField57 = chronology51.seconds();
        org.joda.time.Period period58 = new org.joda.time.Period(0L, (long) 39, chronology51);
        mutablePeriod3.setPeriod((long) ' ', chronology51);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(0L, chronology51);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 53904, chronology51);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "P35D" + "'", str8, "P35D");
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property3.addToCopy((int) ' ');
        java.util.Locale locale6 = java.util.Locale.ITALY;
        int int7 = property3.getMaximumShortTextLength(locale6);
        java.util.Locale.setDefault(locale6);
        java.util.Locale locale9 = locale6.stripExtensions();
        boolean boolean10 = locale9.hasExtensions();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration12 = duration10.plus((long) 'u');
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration12, (-1));
        org.joda.time.Chronology chronology15 = mutableDateTime3.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration24 = duration22.plus((long) 'u');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = dateTime27.toString(dateTimeFormatter28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration45);
        boolean boolean48 = duration24.isEqual((org.joda.time.ReadableDuration) duration45);
        long long49 = duration45.getStandardDays();
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration45);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.years();
        boolean boolean54 = periodType52.isSupported(durationFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 32, periodType52, chronology55);
        org.joda.time.Period period57 = duration45.toPeriod(periodType52);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1654527667136L, 1832L, periodType52);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str29, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime5.getZone();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        mutableDateTime3.setZoneRetainFields(dateTimeZone8);
        boolean boolean11 = strSet1.contains((java.lang.Object) mutableDateTime3);
        java.util.stream.Stream<java.lang.String> strStream12 = strSet1.parallelStream();
        strSet1.clear();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet1.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(strStream14);
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime4.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        mutableDateTime2.setZoneRetainFields(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now(dateTimeZone7);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(obj0, dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withZone(dateTimeZone9);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 1, periodType12);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone9, periodType12);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) 12, periodType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        int int18 = mutablePeriod15.indexOf(durationFieldType17);
        int int19 = mutablePeriod15.size();
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod15.copy();
        mutablePeriod20.addDays(29);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod20.addWeeks(53947);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(mutablePeriod20);
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMinutes((int) ' ');
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getISO3Language();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) ' ');
        java.util.Locale locale17 = java.util.Locale.ITALY;
        int int18 = property14.getMaximumShortTextLength(locale17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("PT0S");
        int int21 = property14.getMaximumShortTextLength(locale20);
        java.lang.String str22 = locale9.getDisplayVariant(locale20);
        java.lang.String str23 = dateTimeField7.getAsText((int) '4', locale20);
        java.lang.String str24 = property4.getAsShortText(locale20);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property4.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = property30.set("32");
        org.joda.time.MutableDateTime mutableDateTime33 = property30.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime35 = property30.add(32);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.era();
        int int37 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime35);
        int int38 = property4.getMinimumValueOverall();
        int int39 = property4.get();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "deu" + "'", str10, "deu");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "52" + "'", str23, "52");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2" + "'", str24, "2");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.weekyear();
        org.joda.time.LocalDate.Property property3 = localDate0.weekOfWeekyear();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate7 = localDate0.withCenturyOfEra(48);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfYear();
        boolean boolean9 = property8.isLeap();
        org.joda.time.LocalDate localDate10 = property8.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDate10.getValue(200);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 200");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(511L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        long long60 = duration59.getStandardMinutes();
        org.joda.time.Duration duration61 = duration59.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.yearOfEra();
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        boolean boolean69 = period67.isSupported(durationFieldType68);
        java.lang.String str70 = durationFieldType68.toString();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType68);
        org.joda.time.LocalDateTime.Property property72 = localDateTime52.weekyear();
        int int73 = property72.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime75 = property72.addWrapFieldToCopy(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField77 = localDateTime75.getField(20);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 20");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 58 + "'", int26 == 58);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "years" + "'", str70, "years");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-292275054) + "'", int73 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        int int2 = localDate0.getDayOfWeek();
        int int3 = localDate0.getYear();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.withMinimumValue();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getISO3Language();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((int) ' ');
        java.util.Locale locale15 = java.util.Locale.ITALY;
        int int16 = property12.getMaximumShortTextLength(locale15);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("PT0S");
        int int19 = property12.getMaximumShortTextLength(locale18);
        java.lang.String str20 = locale7.getDisplayVariant(locale18);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = property4.setCopy("T15:01:30.744", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T15:01:30.744\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645455778076,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=58,MILLISECOND=76,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1935, 100907, (int) ' ', 2);
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(6000L);
        java.lang.String str3 = mutableDateTime1.toString("292278993");
        int int4 = mutableDateTime1.getSecondOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        boolean boolean10 = dateTimeFormatter9.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 1439);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        int int14 = dateTimeFormatter13.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withPivotYear(56);
        boolean boolean17 = dateTimeFormatter13.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter13.withDefaultYear((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration37 = duration35.plus((long) 'u');
        mutableDateTime28.add((org.joda.time.ReadableDuration) duration37, (-1));
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime48 = dateTime42.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 1, periodType50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime28, (org.joda.time.ReadableInstant) dateTime48, periodType50);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.minusDays(0);
        org.joda.time.Interval interval58 = dateMidnight57.toInterval();
        org.joda.time.Interval interval60 = interval58.withStartMillis((long) 0);
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 50, periodType50, chronology61);
        org.joda.time.Period period63 = new org.joda.time.Period((long) 2022, (long) 45, chronology61);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) (byte) 100, (long) 5, chronology61);
        org.joda.time.DateTimeField dateTimeField65 = chronology61.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(49L, 0L, chronology61);
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate69 = localDate67.plusYears(10);
        boolean boolean71 = localDate67.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime80 = dateTime74.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay81 = dateTime80.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay81.minusDays(10);
        org.joda.time.Period period84 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate67, (org.joda.time.ReadablePartial) yearMonthDay83);
        int[] intArray86 = chronology61.get((org.joda.time.ReadablePartial) yearMonthDay83, (long) 292278993);
        org.joda.time.DateTimeField dateTimeField87 = chronology61.yearOfEra();
        org.joda.time.DateTimeField dateTimeField88 = chronology61.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter13.withChronology(chronology61);
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((-259200000L), 777600000L, chronology61);
        org.joda.time.DateTimeField dateTimeField91 = chronology61.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField91, 359);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 359");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "292278993" + "'", str3, "292278993");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 6 + "'", int4 == 6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1970, 1, 4]");
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(dateTimeField91);
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean4 = localTime1.isEqual((org.joda.time.ReadablePartial) localTime3);
        java.lang.String str5 = localTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime.Property property19 = localTime13.property(dateTimeFieldType17);
        java.lang.String str20 = localTime13.toString();
        boolean boolean21 = localTime3.isBefore((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime.Property property22 = localTime13.secondOfMinute();
        org.joda.time.LocalTime localTime23 = property22.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        long long50 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateMidnight dateMidnight51 = property26.withMaximumValue();
        org.joda.time.DateTime dateTime52 = dateMidnight51.toDateTime();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = dateTime55.toString(dateTimeFormatter56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime(dateTimeZone58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period(readableInstant60, readableInstant61, periodType62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = period63.normalizedStandard(periodType64);
        org.joda.time.DateTime dateTime67 = dateTime55.withPeriodAdded((org.joda.time.ReadablePeriod) period63, 2022);
        int int68 = dateMidnight51.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.LocalDate localDate69 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property70 = localDate69.yearOfCentury();
        org.joda.time.LocalDate localDate72 = property70.addWrapFieldToCopy(0);
        int[] intArray73 = localDate72.getValues();
        org.joda.time.LocalDate localDate75 = localDate72.plusMonths(59);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period(readableInstant76, readableInstant77, periodType78);
        org.joda.time.LocalDate localDate80 = localDate75.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.LocalDate localDate82 = localDate75.minusDays(32769);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (-1), chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean87 = dateTime85.isSupported(dateTimeFieldType86);
        java.lang.String str88 = dateTimeFieldType86.getName();
        boolean boolean89 = localDate82.isSupported(dateTimeFieldType86);
        org.joda.time.DateTime.Property property90 = dateTime67.property(dateTimeFieldType86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime92 = localTime23.withField(dateTimeFieldType86, 5570);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5570 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.715" + "'", str5, "00:00:00.715");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str10, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00:00:00.682" + "'", str20, "00:00:00.682");
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str57, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[2022, 2, 21]");
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "minuteOfHour" + "'", str88, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime3.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        mutableDateTime1.setZoneRetainFields(dateTimeZone6);
        long long11 = dateTimeZone6.convertLocalToUTC((long) 17, true);
        int int13 = dateTimeZone6.getOffsetFromLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusYears(85674708);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-666L) + "'", long11 == (-666L));
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 683 + "'", int13 == 683);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(periodType14);
        boolean boolean16 = calendar12.after((java.lang.Object) mutablePeriod15);
        int int18 = calendar12.getGreatestMinimum(0);
        calendar12.set(32, 0, 54);
        java.util.TimeZone timeZone23 = calendar12.getTimeZone();
        java.time.Instant instant24 = calendar12.toInstant();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-61152969600001,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=32,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(instant24);
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        mutableDateTime1.setRounding(dateTimeField15);
        java.lang.Object obj17 = mutableDateTime1.clone();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "2022-01-01T00:00:00.000+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "2022-01-01T00:00:00.000+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "2022-01-01T00:00:00.000+00:00:00.683");
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight1, dateTimeZone27);
        mutableDateTime28.setWeekyear(0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant31, readableInstant32, periodType33);
        int int35 = period34.getWeeks();
        org.joda.time.Period period37 = period34.minusHours((int) 'a');
        mutableDateTime28.add((org.joda.time.ReadablePeriod) period37);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime28);
        int int40 = mutableDateTime28.getRoundingMode();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime28.hourOfDay();
        org.joda.time.DurationField durationField42 = property41.getDurationField();
        int int45 = durationField42.getValue((long) 359, (-307238400000L));
        long long48 = durationField42.add(36L, 25252);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 90907200036L + "'", long48 == 90907200036L);
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withDayOfWeek(2);
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.withYear((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(200, 969, 461);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 969 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1439);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        java.util.Locale locale8 = dateTimeFormatter7.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter7.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.parse("53829", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 24);
        java.util.Date date8 = new java.util.Date(1978, 6, 358);
        date8.setMonth(11);
        java.util.Calendar.Builder builder11 = builder4.setInstant(date8);
        java.util.Calendar calendar12 = builder4.build();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate.Property property15 = localDate13.weekyear();
        java.lang.String str16 = property15.getName();
        boolean boolean17 = calendar12.after((java.lang.Object) property15);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        long long21 = dateTimeField18.addWrapField((-35305378L), 71);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(date8.toString(), "Tue Dec 23 00:00:00 GMT 3879");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=60272985600000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=3879,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=357,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyear" + "'", str16, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2240748694622L + "'", long21 == 2240748694622L);
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withCenturyOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime52.plus((org.joda.time.ReadableDuration) duration63);
        int int65 = localDateTime64.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 58 + "'", int26 == 58);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        mutableDateTime1.setRounding(dateTimeField15);
        int int18 = dateTimeField15.getMaximumValue(100L);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = dateTimeField15.getAsText(41, locale20);
        long long23 = dateTimeField15.roundFloor((long) 35);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(0);
        org.joda.time.Interval interval30 = dateMidnight29.toInterval();
        org.joda.time.Interval interval32 = interval30.withStartMillis((long) 0);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.centuries();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.centuryOfEra();
        long long38 = dateTimeField35.set((long) ' ', "55");
        long long41 = dateTimeField35.addWrapField(15120000029L, 52);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra(56);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.hourOfDay();
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale47.getISO3Language();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfEra();
        org.joda.time.DateTime dateTime54 = property52.addToCopy((int) ' ');
        java.util.Locale locale55 = java.util.Locale.ITALY;
        int int56 = property52.getMaximumShortTextLength(locale55);
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("PT0S");
        int int59 = property52.getMaximumShortTextLength(locale58);
        java.lang.String str60 = locale47.getDisplayVariant(locale58);
        java.lang.String str61 = locale47.toLanguageTag();
        java.lang.String str62 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDateTime45, locale47);
        java.util.Locale locale63 = locale47.stripExtensions();
        java.lang.String str64 = locale47.getCountry();
        java.lang.String str65 = dateTimeField15.getAsShortText(4, locale47);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "41" + "'", str21, "41");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-683L) + "'", long23 == (-683L));
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 113605027200032L + "'", long38 == 113605027200032L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 164111270400029L + "'", long41 == 164111270400029L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "deu" + "'", str48, "deu");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "de" + "'", str61, "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "56" + "'", str62, "56");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "4" + "'", str65, "4");
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        long long8 = duration7.getStandardMinutes();
        org.joda.time.Instant instant10 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration7, 2);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant21, readableInstant22, periodType23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = period24.normalizedStandard(periodType25);
        java.lang.String str27 = period24.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.Duration duration37 = period24.toDurationFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str45 = periodType44.getName();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime43, periodType44);
        org.joda.time.DateTime dateTime47 = dateTime18.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = duration56.plus((long) 'u');
        mutableDateTime49.add((org.joda.time.ReadableDuration) duration58, (-1));
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = dateTime63.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 1, periodType71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime49, (org.joda.time.ReadableInstant) dateTime69, periodType71);
        mutableDateTime49.setMillis((long) 1969);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.Seconds seconds77 = duration37.toStandardSeconds();
        org.joda.time.Instant instant78 = instant10.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant80 = instant78.plus(86400013L);
        org.joda.time.Instant instant82 = instant78.plus((long) 3);
        org.joda.time.Instant instant84 = instant82.plus((long) 3);
        org.joda.time.Instant instant86 = instant84.minus(32769L);
        org.joda.time.MutableDateTime mutableDateTime87 = instant86.toMutableDateTime();
        int int88 = mutableDateTime87.getYearOfCentury();
        mutableDateTime87.addSeconds(2156);
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime87.centuryOfEra();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0S" + "'", str27, "PT0S");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "YearWeekDay" + "'", str45, "YearWeekDay");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(seconds77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 22 + "'", int88 == 22);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        int int3 = property2.get();
        org.joda.time.TimeOfDay timeOfDay5 = property2.addToCopy(53810);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean10 = localTime7.isEqual((org.joda.time.ReadablePartial) localTime9);
        java.lang.String str11 = localTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime14.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime(dateTimeZone17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.LocalTime.Property property25 = localTime19.property(dateTimeFieldType23);
        java.lang.String str26 = localTime19.toString();
        boolean boolean27 = localTime9.isBefore((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime.Property property28 = localTime19.secondOfMinute();
        org.joda.time.LocalTime.Property property29 = localTime19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalTime localTime31 = property29.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property29.getFieldType();
        java.lang.String str33 = dateTimeFieldType32.getName();
        org.joda.time.TimeOfDay.Property property34 = timeOfDay5.property(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "00:00:00.715" + "'", str11, "00:00:00.715");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str16, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "00:00:00.682" + "'", str26, "00:00:00.682");
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "secondOfMinute" + "'", str33, "secondOfMinute");
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusDays(10);
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay16.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property18.addWrapFieldToCopy(59);
        org.joda.time.YearMonthDay yearMonthDay22 = property18.addToCopy(21602);
        int int23 = yearMonthDay22.getYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23580 + "'", int23 == 23580);
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime3.toDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) (byte) 1);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime18 = dateTime5.withWeekyear(51);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate22 = localDate19.plusWeeks(100);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property24.addWrapFieldToCopy(0);
        int int27 = localDate22.compareTo((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateMidnight dateMidnight28 = localDate26.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfYear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusDays(0);
        org.joda.time.Interval interval34 = dateMidnight33.toInterval();
        org.joda.time.Interval interval36 = interval34.withStartMillis((long) 0);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight28.withChronology(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now(chronology37);
        org.joda.time.DateTime dateTime41 = dateTime5.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.Chronology chronology43 = chronology37.withUTC();
        org.joda.time.DurationField durationField44 = chronology37.minutes();
        org.joda.time.DateTimeField dateTimeField45 = chronology37.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 100308, chronology37);
        mutableDateTime46.setMillisOfDay(54452714);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.plusHours((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMillis(100431);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusHours(5);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMinutes((int) (byte) 100);
        int int15 = timeOfDay14.getSecondOfMinute();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 43 + "'", int15 == 43);
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        calendar12.setFirstDayOfWeek(10);
        long long15 = calendar12.getTimeInMillis();
        int int16 = calendar12.getWeekYear();
        org.joda.time.Period period18 = org.joda.time.Period.years(197822);
        org.joda.time.Period period20 = period18.plusDays(36);
        org.joda.time.Period period22 = period20.minusYears(5);
        org.joda.time.Period period23 = period22.negated();
        boolean boolean24 = calendar12.before((java.lang.Object) period23);
        boolean boolean25 = calendar12.isLenient();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=10,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime5.minusWeeks((int) (byte) -1);
        int int11 = dateTime10.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.DateTime.Property property55 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime54.withCenturyOfEra(10);
        org.joda.time.DateTime.Property property58 = dateTime54.minuteOfDay();
        org.joda.time.DateTime dateTime60 = property58.addWrapFieldToCopy(16);
        org.joda.time.DateTime dateTime62 = dateTime60.withMillisOfDay(1970);
        int int63 = dateTime60.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 960682 + "'", int63 == 960682);
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime dateTime9 = dateTime6.withDayOfMonth(16);
        org.joda.time.DateTime dateTime11 = dateTime6.minus((long) 17);
        org.joda.time.DateTime.Property property12 = dateTime6.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime6.withCenturyOfEra(33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(54130817);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54130817 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 23);
        int int2 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        mutableDateTime4.setZoneRetainFields(dateTimeZone5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(periodType7);
        mutablePeriod8.setYears((int) (short) 1);
        org.joda.time.ReadableInterval readableInterval11 = null;
        mutablePeriod8.setPeriod(readableInterval11);
        mutablePeriod8.addMonths(46);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        int int17 = mutablePeriod8.getDays();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 706 + "'", int2 == 706);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration8 = duration6.plus((long) 'u');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime11.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration29);
        boolean boolean32 = duration8.isEqual((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration33 = duration8.toDuration();
        org.joda.time.Days days34 = duration33.toStandardDays();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = duration41.plus((long) 'u');
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = dateTime46.toString(dateTimeFormatter47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.toDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration64);
        boolean boolean67 = duration43.isEqual((org.joda.time.ReadableDuration) duration64);
        long long68 = duration64.getStandardDays();
        org.joda.time.Duration duration70 = duration64.withMillis((-2070756009000L));
        int int71 = duration33.compareTo((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (-1), chronology73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = dateTime77.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.withZone(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = dateTime81.plusDays((int) (byte) 0);
        org.joda.time.DateTime dateTime85 = dateTime81.withMillisOfDay(86399);
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime((java.lang.Object) dateTime81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval87 = duration70.toIntervalTo((org.joda.time.ReadableInstant) dateTime81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str13, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration43);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str48, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("0101-01-01T00:01:24.999");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0101-01-01T00:01:24.999\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.weekOfWeekyear();
        org.joda.time.Period period7 = org.joda.time.Period.hours((int) (short) 100);
        org.joda.time.LocalDate localDate9 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period7, (int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate0.minusMonths(0);
        org.joda.time.DateTime dateTime12 = localDate0.toDateTimeAtStartOfDay();
        int int13 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate0.withYear((int) (byte) 100);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusDays(10);
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay16.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property18.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = property24.addToCopy((int) ' ');
        java.util.Locale locale27 = java.util.Locale.ITALY;
        int int28 = property24.getMaximumShortTextLength(locale27);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("PT0S");
        int int31 = property24.getMaximumShortTextLength(locale30);
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = property18.getAsShortText(locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property18.getFieldType();
        int int35 = property18.getMinimumValue();
        java.lang.String str36 = property18.getAsText();
        org.joda.time.DateTimeField dateTimeField37 = property18.getField();
        org.joda.time.DurationField durationField38 = dateTimeField37.getDurationField();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1978" + "'", str33, "1978");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-292275054) + "'", int35 == (-292275054));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1978" + "'", str36, "1978");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(0);
        int int8 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate10 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        mutableDateTime14.setDayOfYear(1);
        int int17 = mutableDateTime14.getSecondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime20.toString(dateTimeFormatter21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration38);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration38);
        int int42 = mutableDateTime14.getDayOfWeek();
        java.lang.Object obj43 = mutableDateTime14.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(periodType44);
        mutablePeriod45.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray48 = mutablePeriod45.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod49 = mutablePeriod45.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.dayOfYear();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusDays(0);
        org.joda.time.Interval interval55 = dateMidnight54.toInterval();
        org.joda.time.Interval interval57 = interval55.withStartMillis((long) 0);
        org.joda.time.Interval interval58 = interval57.toInterval();
        boolean boolean59 = interval57.isAfterNow();
        mutablePeriod45.setPeriod((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Period period61 = interval57.toPeriod();
        org.joda.time.Period period63 = period61.plusDays(28);
        mutableDateTime14.add((org.joda.time.ReadablePeriod) period63);
        org.joda.time.LocalDate localDate65 = localDate12.plus((org.joda.time.ReadablePeriod) period63);
        int int66 = localDate65.getCenturyOfEra();
        org.joda.time.LocalDate localDate68 = localDate65.plusWeeks((int) 'x');
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str22, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "2022-01-01T15:02:59.357+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "2022-01-01T15:02:59.357+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "2022-01-01T15:02:59.357+00:00:00.683");
        org.junit.Assert.assertNotNull(durationFieldTypeArray48);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDate68);
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(1);
        org.joda.time.Period period3 = period1.withMonths(28);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime8.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        mutableDateTime6.setZoneRetainFields(dateTimeZone11);
        long long16 = dateTimeZone11.convertLocalToUTC((long) 17, true);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 41, dateTimeZone11);
        org.joda.time.DateTime dateTime18 = localDate0.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.LocalDate.Property property19 = localDate0.dayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-666L) + "'", long16 == (-666L));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration23);
        long long26 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight27 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime28 = dateMidnight27.toDateTime();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.minusDays(43);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.minusDays(0);
        org.joda.time.Interval interval36 = dateMidnight35.toInterval();
        org.joda.time.Interval interval38 = interval36.withStartMillis((long) 0);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.centuries();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.centuryOfEra();
        org.joda.time.DurationField durationField42 = chronology39.halfdays();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(chronology39);
        org.joda.time.DateTime dateTime44 = dateMidnight27.toDateTime(chronology39);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra(21);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str7, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        boolean boolean2 = strSet1.isEmpty();
        java.util.Iterator<java.lang.String> strItor3 = strSet1.iterator();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withZone(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        boolean boolean15 = strSet1.equals((java.lang.Object) property13);
        org.joda.time.DateTime dateTime16 = property13.withMaximumValue();
        org.joda.time.DateTime.Property property17 = dateTime16.weekyear();
        org.joda.time.LocalDate localDate18 = dateTime16.toLocalDate();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.String str20 = mutableDateTime19.toString();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.minusDays(0);
        org.joda.time.Interval interval26 = dateMidnight25.toInterval();
        org.joda.time.Interval interval28 = interval26.withStartMillis((long) 0);
        org.joda.time.Interval interval29 = interval28.toInterval();
        boolean boolean30 = interval28.isAfterNow();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.minusDays(0);
        org.joda.time.Interval interval36 = dateMidnight35.toInterval();
        org.joda.time.Interval interval38 = interval36.withStartMillis((long) 0);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.Interval interval40 = interval28.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Interval interval42 = interval40.withEndMillis(86400013L);
        boolean boolean43 = interval42.containsNow();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        mutableDateTime19.setMillis((org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-04T00:00:00.682+00:00:00.683" + "'", str20, "1970-01-04T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate5 = localDate0.minusMonths(31);
        org.joda.time.LocalDate.Property property6 = localDate0.weekOfWeekyear();
        java.lang.String str7 = property6.toString();
        org.joda.time.LocalDate localDate8 = property6.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = property6.setCopy("German");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"German\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[weekOfWeekyear]" + "'", str7, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        java.util.Date date14 = calendar12.getTime();
        int int15 = calendar12.getWeeksInWeekYear();
        calendar12.set(31, (int) (short) 0, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar12.getActualMinimum(54007);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54007");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=35,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 23);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType2);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod3, 25253);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(31);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period7);
        int int9 = period7.getMinutes();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property3.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(periodType6);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.toMutablePeriod();
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod7, 2922789);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime32 = dateTime12.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime36.getZone();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        mutableDateTime34.setZoneRetainFields(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(dateTimeZone39);
        java.lang.String str43 = dateTimeZone39.getID();
        org.joda.time.DateTime dateTime44 = dateTime32.toDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 23);
        int int49 = mutableDateTime48.getMillisOfSecond();
        mutableDateTime48.addDays(42);
        int int52 = mutableDateTime48.getSecondOfMinute();
        int int53 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.683" + "'", str43, "+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 706 + "'", int49 == 706);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 683 + "'", int53 == 683);
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 90);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration26);
        long long29 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration36.plus((long) 'u');
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.DateTime dateTime40 = dateTime12.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod41.addWeeks(827);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str10, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType4);
        org.joda.time.Period period7 = period5.plusDays(2022);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period9 = period7.withPeriodType(periodType8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        org.joda.time.Interval interval15 = dateMidnight14.toInterval();
        org.joda.time.Interval interval17 = interval15.withStartMillis((long) 0);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(chronology18);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 21, (long) 9, periodType8, chronology18);
        org.joda.time.PeriodType periodType24 = periodType8.withSecondsRemoved();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration8 = duration6.plus((long) 'u');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = duration6.toPeriodTo((org.joda.time.ReadableInstant) dateTime11, periodType14);
        org.joda.time.DateTime dateTime17 = dateTime11.minusYears(117);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks(20);
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtStartOfDay();
        java.util.GregorianCalendar gregorianCalendar7 = dateTime6.toGregorianCalendar();
        boolean boolean8 = gregorianCalendar7.isWeekDateSupported();
        java.lang.String str9 = gregorianCalendar7.toString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.util.GregorianCalendar[time=1705881599317,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2024,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=22,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=683,DST_OFFSET=0]" + "'", str9, "java.util.GregorianCalendar[time=1705881599317,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2024,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=22,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=683,DST_OFFSET=0]");
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusDays(10);
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay16.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property18.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = property24.addToCopy((int) ' ');
        java.util.Locale locale27 = java.util.Locale.ITALY;
        int int28 = property24.getMaximumShortTextLength(locale27);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("PT0S");
        int int31 = property24.getMaximumShortTextLength(locale30);
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = property18.getAsShortText(locale30);
        int int34 = property18.getMaximumValueOverall();
        int int35 = property18.getMaximumValueOverall();
        int int36 = property18.getMaximumValue();
        org.joda.time.DurationField durationField37 = property18.getRangeDurationField();
        int int38 = property18.getMaximumValue();
        org.joda.time.DurationField durationField39 = property18.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay40 = property18.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1978" + "'", str33, "1978");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertNull(durationField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertNull(durationField39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration39, periodType42);
        mutablePeriod43.addSeconds(42);
        mutablePeriod43.addWeeks((-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withZone(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((long) 100);
        org.joda.time.Duration duration62 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.tz.Provider provider63 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet64 = provider63.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider63);
        boolean boolean66 = mutablePeriod43.equals((java.lang.Object) provider63);
        org.joda.time.DateTimeZone.setProvider(provider63);
        org.joda.time.DateTimeZone.setProvider(provider63);
        java.util.Set<java.lang.String> strSet69 = provider63.getAvailableIDs();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet69);
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfEra();
        mutableDateTime1.add((long) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime1.add(readablePeriod8);
        mutableDateTime1.setSecondOfMinute(6);
        mutableDateTime1.setDayOfYear(100);
        java.lang.String str14 = mutableDateTime1.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-04-10T15:02:06.805+00:00:00.683" + "'", str14, "2022-04-10T15:02:06.805+00:00:00.683");
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime17 = dateTime12.minusHours(8);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.Period period20 = org.joda.time.Period.millis(8);
        int int21 = period20.getMinutes();
        org.joda.time.Period period23 = period20.withMonths(57);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(19, 7, 23);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay27.year();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration41, (-1));
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime46.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 1, periodType54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateTime52, periodType54);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.dayOfYear();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minusDays(0);
        org.joda.time.Interval interval62 = dateMidnight61.toInterval();
        org.joda.time.Interval interval64 = interval62.withStartMillis((long) 0);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 50, periodType54, chronology65);
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) 17, chronology65);
        org.joda.time.DurationField durationField68 = chronology65.days();
        long long71 = durationField68.add(10L, (int) (short) 0);
        int int73 = durationField68.getValue((long) 19);
        org.joda.time.DurationFieldType durationFieldType74 = durationField68.getType();
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay27.withFieldAdded(durationFieldType74, 22);
        org.joda.time.Period period78 = period20.withField(durationFieldType74, 53829);
        org.joda.time.DateTime dateTime79 = dateTime17.plus((org.joda.time.ReadablePeriod) period78);
        int int80 = period78.getMillis();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withWeekOfWeekyear((int) (short) 1);
        int int8 = dateMidnight5.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withWeekyear(200);
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays(0);
        org.joda.time.Interval interval17 = dateMidnight16.toInterval();
        org.joda.time.Interval interval19 = interval17.withStartMillis((long) 0);
        org.joda.time.Interval interval20 = interval19.toInterval();
        boolean boolean21 = interval19.isAfterNow();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.minusDays(0);
        org.joda.time.Interval interval27 = dateMidnight26.toInterval();
        org.joda.time.Interval interval29 = interval27.withStartMillis((long) 0);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.Interval interval31 = interval19.overlap((org.joda.time.ReadableInterval) interval30);
        boolean boolean33 = interval31.contains((long) 'a');
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant38, readableInstant39, periodType40);
        org.joda.time.Period period43 = period41.plusDays(2022);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.dayOfYear();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.minusDays(0);
        org.joda.time.Interval interval50 = dateMidnight49.toInterval();
        org.joda.time.Interval interval52 = interval50.withStartMillis((long) 0);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        boolean boolean54 = interval44.contains((org.joda.time.ReadableInterval) interval52);
        boolean boolean55 = interval31.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.DateTime dateTime56 = interval31.getEnd();
        org.joda.time.DateTime dateTime58 = dateTime56.minusYears(53780);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight1, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setYear(1969);
        boolean boolean33 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableDuration) duration40, periodType43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfYear();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(0);
        org.joda.time.Interval interval51 = dateMidnight50.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int53 = dateMidnight50.get(dateTimeFieldType52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight0.withField(dateTimeFieldType52, 3);
        int int56 = dateMidnight0.getDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay57 = dateMidnight0.toYearMonthDay();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(periodType58);
        mutablePeriod59.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray62 = mutablePeriod59.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod63 = mutablePeriod59.toMutablePeriod();
        java.lang.String str64 = mutablePeriod59.toString();
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay57.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.Interval interval66 = yearMonthDay65.toInterval();
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay65.plusDays(0);
        org.joda.time.Chronology chronology69 = yearMonthDay68.getChronology();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "P35D" + "'", str64, "P35D");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(19, 7, 23);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.year();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration15.plus((long) 'u');
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration17, (-1));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime22.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 1, periodType30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateTime28, periodType30);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.minusDays(0);
        org.joda.time.Interval interval38 = dateMidnight37.toInterval();
        org.joda.time.Interval interval40 = interval38.withStartMillis((long) 0);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 50, periodType30, chronology41);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) 17, chronology41);
        org.joda.time.DurationField durationField44 = chronology41.days();
        long long47 = durationField44.add(10L, (int) (short) 0);
        int int49 = durationField44.getValue((long) 19);
        org.joda.time.DurationFieldType durationFieldType50 = durationField44.getType();
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay3.withFieldAdded(durationFieldType50, 22);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay52.year();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay52.minusMonths(27);
        org.joda.time.Interval interval56 = yearMonthDay52.toInterval();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(interval56);
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.plusMonths(999);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = yearMonthDay9.getFieldType(0);
        org.joda.time.LocalDate localDate17 = yearMonthDay9.toLocalDate();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = property9.addToCopy((long) 20);
        int int12 = property9.getMaximumValueOverall();
        int int13 = property9.getMaximumValue();
        org.joda.time.DateTime dateTime14 = property9.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.monthOfYear();
        java.lang.String str54 = property53.getName();
        boolean boolean55 = property53.isLeap();
        org.joda.time.LocalDateTime localDateTime56 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime57 = property53.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "monthOfYear" + "'", str54, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        java.util.Date date14 = calendar12.getTime();
        int int15 = calendar12.getWeeksInWeekYear();
        calendar12.set(31, (int) (short) 0, (int) '#');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant30, readableInstant31, periodType32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = period33.normalizedStandard(periodType34);
        java.lang.String str36 = period33.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withZone(dateTimeZone44);
        org.joda.time.Duration duration46 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str54 = periodType53.getName();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime52, periodType53);
        org.joda.time.DateTime dateTime56 = dateTime27.minus((org.joda.time.ReadableDuration) duration46);
        boolean boolean57 = calendar12.before((java.lang.Object) duration46);
        int int58 = calendar12.getFirstDayOfWeek();
        int int59 = calendar12.getWeekYear();
        java.time.Instant instant60 = calendar12.toInstant();
        calendar12.setFirstDayOfWeek((int) (byte) 0);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getTimeZone("31 Dec 1969 23:59:59 GMT");
        boolean boolean66 = timeZone63.hasSameRules(timeZone65);
        calendar12.setTimeZone(timeZone65);
        calendar12.set(41, 4, 2, (-85), 1969, (int) (byte) -1);
        int int75 = calendar12.getWeekYear();
        int int76 = calendar12.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int78 = calendar12.getLeastMaximum(392);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 392");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-60863199060318,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=41,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=119,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=48,SECOND=59,MILLISECOND=682,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0S" + "'", str36, "PT0S");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "YearWeekDay" + "'", str54, "YearWeekDay");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 31 + "'", int59 == 31);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 41 + "'", int75 == 41);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 24);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime14);
        boolean boolean18 = dateTime14.isAfterNow();
        org.joda.time.DateTime dateTime20 = dateTime14.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime21 = dateTime20.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean23 = localDateTime21.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfCentury();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = dateTime52.isAfterNow();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Duration duration70 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime dateTime72 = dateTime52.minus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period75 = new org.joda.time.Period((long) 1, periodType74);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration70, periodType74);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration70, 48);
        org.joda.time.Period period79 = duration70.toPeriod();
        boolean boolean80 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration23);
        long long26 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight27 = property2.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight29 = property2.addToCopy(20);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.withDurationAdded((long) 34, (int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.plusDays(43);
        org.joda.time.DateMidnight.Property property35 = dateMidnight29.yearOfCentury();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight29);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str7, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setYear(1969);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfMinute();
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withYear(10);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.year();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minusWeeks((-292275054));
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant11, readableInstant12, periodType13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = period14.normalizedStandard(periodType15);
        org.joda.time.Period period18 = period16.plusYears(56);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight7.withPeriodAdded((org.joda.time.ReadablePeriod) period18, (int) (short) 100);
        int int21 = dateMidnight7.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100239, 9, 519, 519, 231);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 519 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(0);
        int int8 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateMidnight dateMidnight9 = localDate7.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        org.joda.time.Interval interval15 = dateMidnight14.toInterval();
        org.joda.time.Interval interval17 = interval15.withStartMillis((long) 0);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight9.withChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.halfdayOfDay();
        long long25 = chronology18.add((long) 51, 10L, 46);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology18);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 511L + "'", long25 == 511L);
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(periodType14);
        boolean boolean16 = calendar12.after((java.lang.Object) mutablePeriod15);
        int int18 = calendar12.getGreatestMinimum(0);
        calendar12.set(32, 0, 54);
        calendar12.setFirstDayOfWeek(53);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.lang.String str26 = timeZone25.getID();
        int int28 = timeZone25.getOffset((long) 999);
        timeZone25.setID("secondOfMinute");
        int int32 = timeZone25.getOffset((long) 57);
        calendar12.setTimeZone(timeZone25);
        java.util.TimeZone timeZone34 = calendar12.getTimeZone();
        java.lang.String str35 = calendar12.getCalendarType();
        int int36 = calendar12.getFirstDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 59);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime48 = dateTime42.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = yearMonthDay49.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay49.plusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay49.toDateMidnight(dateTimeZone54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeZone54, chronology56);
        mutableDateTime57.addMinutes(1969);
        mutableDateTime57.setDate((long) 5);
        mutablePeriod38.setPeriod(readableInstant39, (org.joda.time.ReadableInstant) mutableDateTime57);
        java.lang.String str63 = mutableDateTime57.toString();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime57.weekyear();
        boolean boolean65 = calendar12.before((java.lang.Object) mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53,minimalDaysInFirstWeek=1,ERA=1,YEAR=32,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=54,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT" + "'", str26, "GMT");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "gregory" + "'", str35, "gregory");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53 + "'", int36 == 53);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateMidnight55);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01T23:52:00.085+00:00:00.683" + "'", str63, "1970-01-01T23:52:00.085+00:00:00.683");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        int int53 = localDateTime52.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        java.lang.String str57 = dateTimeFieldType54.toString();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime52.withField(dateTimeFieldType54, (int) '#');
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.plusWeeks(1979);
        org.joda.time.LocalDateTime.Property property63 = localDateTime59.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = localDateTime59.withDayOfMonth(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "year" + "'", str57, "year");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths(4);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) dateTime12);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfWeek();
        org.joda.time.LocalDate localDate15 = property14.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = localDate15.toString("0100-12-31T23:59:59.999");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(6000L);
        mutableDateTime1.setMinuteOfDay(20);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration12 = duration10.plus((long) 'u');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime15.toString(dateTimeFormatter16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration33);
        boolean boolean36 = duration12.isEqual((org.joda.time.ReadableDuration) duration33);
        java.lang.String str37 = duration12.toString();
        long long38 = duration12.getMillis();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration12, 78);
        mutableDateTime1.addYears(97);
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime1.getZone();
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str17, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0.117S" + "'", str37, "PT0.117S");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 117L + "'", long38 == 117L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        java.util.Date date6 = new java.util.Date(0, 0, 27, 45, 10070, 197800);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Feb 07 03:46:40 GMT 1900");
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration8 = duration6.plus((long) 'u');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = duration6.toPeriodTo((org.joda.time.ReadableInstant) dateTime11, periodType14);
        int int16 = dateTime11.getHourOfDay();
        boolean boolean18 = dateTime11.isEqual((long) 52);
        int int19 = dateTime11.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime11);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = duration27.plus((long) 'u');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime32.toString(dateTimeFormatter33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration50);
        boolean boolean53 = duration29.isEqual((org.joda.time.ReadableDuration) duration50);
        java.lang.String str54 = duration29.toString();
        long long55 = duration29.getMillis();
        org.joda.time.Duration duration58 = duration29.withDurationAdded((long) 392, (-1));
        org.joda.time.Period period59 = duration29.toPeriod();
        org.joda.time.DateTime dateTime61 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration29, 55);
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = dateTime62.toString("3 Nov 1929 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: N");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(duration29);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str34, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0.117S" + "'", str54, "PT0.117S");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 117L + "'", long55 == 117L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight1, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setYear(1969);
        boolean boolean33 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableDuration) duration40, periodType43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfYear();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(0);
        org.joda.time.Interval interval51 = dateMidnight50.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int53 = dateMidnight50.get(dateTimeFieldType52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight0.withField(dateTimeFieldType52, 3);
        int int56 = dateMidnight0.getDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay57 = dateMidnight0.toYearMonthDay();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(periodType58);
        mutablePeriod59.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray62 = mutablePeriod59.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod63 = mutablePeriod59.toMutablePeriod();
        java.lang.String str64 = mutablePeriod59.toString();
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay57.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.Interval interval66 = yearMonthDay65.toInterval();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(41, 358, 53759872, 39, 53840, 53780, (int) (short) 1, 29);
        org.joda.time.Interval interval76 = interval66.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod75);
        mutablePeriod75.addSeconds(4);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "P35D" + "'", str64, "P35D");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval76);
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusSeconds((int) (byte) 10);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType5);
        mutablePeriod6.addYears((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod6, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay4.withSecondOfMinute(14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withZone(dateTimeZone22);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone22, periodType25);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) 12, periodType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        int int31 = mutablePeriod28.indexOf(durationFieldType30);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay12.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay12.minusHours(1971);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay12.minusHours(0);
        org.joda.time.DateTime dateTime37 = timeOfDay12.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay12.withMinuteOfHour(21);
        org.joda.time.LocalTime localTime40 = timeOfDay39.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay42 = timeOfDay39.withMinuteOfHour(1869);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1869 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears(25253);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean30 = dateTime26.isAfterNow();
        org.joda.time.DateTime dateTime32 = dateTime26.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime33 = dateTime32.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean35 = localDateTime33.isSupported(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        mutableDateTime37.setDayOfYear(1);
        int int40 = mutableDateTime37.getSecondOfMinute();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = dateTime43.toString(dateTimeFormatter44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration61);
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration61);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration61, 23);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.Duration duration73 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime72);
        long long74 = duration73.getStandardMinutes();
        org.joda.time.Duration duration75 = duration73.toDuration();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.DateTime.Property property79 = dateTime78.yearOfEra();
        org.joda.time.DateTime dateTime80 = dateTime78.toDateTime();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration73, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.years();
        boolean boolean83 = period81.isSupported(durationFieldType82);
        java.lang.String str84 = durationFieldType82.toString();
        boolean boolean85 = localDateTime66.isSupported(durationFieldType82);
        org.joda.time.LocalDateTime.Property property86 = localDateTime66.weekyear();
        int int87 = property86.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime88 = property86.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime90 = property86.addWrapFieldToCopy(16);
        org.joda.time.MutableDateTime mutableDateTime92 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone93 = null;
        mutableDateTime92.setZoneRetainFields(dateTimeZone93);
        org.joda.time.DateTimeZone dateTimeZone95 = mutableDateTime92.getZone();
        org.joda.time.DateTime dateTime96 = localDateTime90.toDateTime(dateTimeZone95);
        org.joda.time.LocalDateTime.Property property97 = localDateTime90.monthOfYear();
        org.joda.time.LocalDateTime localDateTime98 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime90);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str45, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "years" + "'", str84, "years");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-292275054) + "'", int87 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(localDateTime98);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate5 = property3.addToCopy((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDate localDate7 = property3.getLocalDate();
        org.joda.time.LocalDate localDate9 = property3.setCopy("41");
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime13.getZone();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        mutableDateTime11.setZoneRetainFields(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = localDate9.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(81);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime29.setZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime29.getZone();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        mutableDateTime27.setZoneRetainFields(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(0L, dateTimeZone32);
        org.joda.time.LocalDate localDate37 = dateTime36.toLocalDate();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime36);
        int int39 = dateTime24.getDayOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfEra();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant44, readableInstant45, periodType46);
        org.joda.time.Period period49 = period47.plusDays(2022);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period52 = period49.minusMillis((int) (byte) 100);
        org.joda.time.MutablePeriod mutablePeriod53 = period49.toMutablePeriod();
        org.joda.time.DateTime dateTime54 = dateTime24.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfEra(1935);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 337 + "'", int39 == 337);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfCentury();
        boolean boolean11 = dateTimeField10.isLenient();
        int int13 = dateTimeField10.get((-2082844800000L));
        org.joda.time.DurationField durationField14 = dateTimeField10.getDurationField();
        int int15 = dateTimeField10.getMaximumValue();
        boolean boolean16 = dateTimeField10.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField10.set((long) 1935, "T15:01:37.861");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T15:01:37.861\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight1, dateTimeZone27);
        mutableDateTime28.setWeekyear(0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant31, readableInstant32, periodType33);
        int int35 = period34.getWeeks();
        org.joda.time.Period period37 = period34.minusHours((int) 'a');
        mutableDateTime28.add((org.joda.time.ReadablePeriod) period37);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime28);
        mutablePeriod39.setMillis(99);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        java.util.Date date1 = new java.util.Date((long) 37);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = period7.normalizedStandard(periodType8);
        org.joda.time.Period period11 = period9.minusDays(0);
        java.lang.String str12 = period11.toString();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str14 = periodType13.getName();
        org.joda.time.Period period15 = period11.withPeriodType(periodType13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 70, (long) 8, periodType13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((java.lang.Object) 37, periodType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0S" + "'", str12, "PT0S");
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "YearWeekDay" + "'", str14, "YearWeekDay");
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 44);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = period5.normalizedStandard(periodType6);
        java.lang.String str8 = period5.toString();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = period12.normalizedStandard(periodType13);
        org.joda.time.Period period15 = period5.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Seconds seconds16 = period15.toStandardSeconds();
        org.joda.time.Period period17 = period15.toPeriod();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period19 = period15.normalizedStandard(periodType18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.toDateTime(dateTimeZone28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration43);
        long long46 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology48 = null;
        boolean boolean49 = durationFieldType47.isSupported(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime29.withFieldAdded(durationFieldType47, 69);
        int int52 = periodType18.indexOf(durationFieldType47);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(periodType18);
        org.joda.time.PeriodType periodType54 = periodType18.withMinutesRemoved();
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) 292278993);
        org.joda.time.Duration duration58 = org.joda.time.Duration.millis((long) 8);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight56, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfYear();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight61.minusDays(0);
        org.joda.time.Interval interval65 = dateMidnight64.toInterval();
        org.joda.time.Interval interval67 = interval65.withStartMillis((long) 0);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.hours();
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(chronology68);
        org.joda.time.Interval interval71 = interval59.withChronology(chronology68);
        org.joda.time.Period period72 = duration1.toPeriod(periodType54, chronology68);
        org.joda.time.Chronology chronology73 = chronology68.withUTC();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str27, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(chronology73);
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        int int2 = dateMidnight1.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean4 = dateMidnight1.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.plusYears((int) 'x');
        java.lang.String str7 = dateMidnight6.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 21 + "'", int2 == 21);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2142-02-21T00:00:00.000+00:00:00.683" + "'", str7, "2142-02-21T00:00:00.000+00:00:00.683");
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("Thu Jan 01 23:58:59 GMT+00:00 1970");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Thu Jan 01 23:58:59 GMT+00:00 1970\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withYear(10);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.year();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) ' ');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration19 = duration17.plus((long) 'u');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period26 = duration17.toPeriodTo((org.joda.time.ReadableInstant) dateTime22, periodType25);
        org.joda.time.PeriodType periodType27 = periodType25.withWeeksRemoved();
        org.joda.time.Period period28 = duration10.toPeriod(periodType27);
        org.joda.time.Period period29 = new org.joda.time.Period((java.lang.Object) duration10);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = strSet31.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = dateTime45.toDateTime();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean49 = dateTime45.isAfterNow();
        org.joda.time.DateTime dateTime51 = dateTime45.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime52 = dateTime51.toLocalDateTime();
        boolean boolean53 = strSet31.equals((java.lang.Object) dateTime51);
        org.joda.time.DateTime dateTime55 = dateTime51.plus((long) 45);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableDuration) duration10);
        long long58 = duration10.getMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 115200000L + "'", long58 == 115200000L);
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfCentury();
        int int23 = localDateTime19.getEra();
        int int24 = localDateTime19.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 682 + "'", int24 == 682);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(100);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(0);
        int int9 = localDate4.compareTo((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusDays(0);
        org.joda.time.Interval interval16 = dateMidnight15.toInterval();
        org.joda.time.Interval interval18 = interval16.withStartMillis((long) 0);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight10.withChronology(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.withCenturyOfEra(2022);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant27, readableInstant28, periodType29);
        int int31 = period30.getWeeks();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight24.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period34 = period30.withPeriodType(periodType33);
        long long37 = chronology19.add((org.joda.time.ReadablePeriod) period30, (-1555099569L), 999);
        org.joda.time.DateTimeField dateTimeField38 = chronology19.era();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType0.getField(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1555099569L) + "'", long37 == (-1555099569L));
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property3.addToCopy((int) ' ');
        java.util.Locale locale6 = java.util.Locale.ITALY;
        int int7 = property3.getMaximumShortTextLength(locale6);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("PT0S");
        int int10 = property3.getMaximumShortTextLength(locale9);
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays(0);
        org.joda.time.Interval interval17 = dateMidnight16.toInterval();
        org.joda.time.Interval interval19 = interval17.withStartMillis((long) 0);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.centuryOfEra();
        long long25 = dateTimeField22.set((long) ' ', "55");
        long long28 = dateTimeField22.addWrapField(15120000029L, 52);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra(56);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.hourOfDay();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getISO3Language();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime41 = property39.addToCopy((int) ' ');
        java.util.Locale locale42 = java.util.Locale.ITALY;
        int int43 = property39.getMaximumShortTextLength(locale42);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("PT0S");
        int int46 = property39.getMaximumShortTextLength(locale45);
        java.lang.String str47 = locale34.getDisplayVariant(locale45);
        java.lang.String str48 = locale34.toLanguageTag();
        java.lang.String str49 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime32, locale34);
        int int52 = dateTimeField22.getDifference(63776592000064L, (long) (byte) -1);
        boolean boolean53 = strSet11.remove((java.lang.Object) dateTimeField22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 113605027200032L + "'", long25 == 113605027200032L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 164111270400029L + "'", long28 == 164111270400029L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "deu" + "'", str35, "deu");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "de" + "'", str48, "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "56" + "'", str49, "56");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration14 = duration12.plus((long) 'u');
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration14, (-1));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime19.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, periodType27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableInstant) dateTime25, periodType27);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.minusDays(0);
        org.joda.time.Interval interval35 = dateMidnight34.toInterval();
        org.joda.time.Interval interval37 = interval35.withStartMillis((long) 0);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 50, periodType27, chronology38);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) 17, chronology38);
        org.joda.time.DurationField durationField41 = chronology38.days();
        org.joda.time.DurationField durationField42 = chronology38.days();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 99, (long) 7, chronology38);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) 31);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.Instant instant47 = instant45.toInstant();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) 90);
        org.joda.time.Duration duration50 = duration49.toDuration();
        org.joda.time.Duration duration51 = duration49.toDuration();
        org.joda.time.Days days52 = duration51.toStandardDays();
        org.joda.time.Instant instant53 = instant45.plus((org.joda.time.ReadableDuration) duration51);
        mutablePeriod43.setPeriod((org.joda.time.ReadableDuration) duration51);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(instant53);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration21.plus((long) 'u');
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration23, (-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime34, periodType36);
        mutableDateTime14.setMillis((long) 1969);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean54 = dateTime52.isSupported(dateTimeFieldType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period56 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime52, periodType55);
        org.joda.time.Period period57 = duration10.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime14, periodType55);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property59 = localDate58.yearOfCentury();
        org.joda.time.LocalDate localDate61 = localDate58.plusWeeks(100);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = dateTime64.toString(dateTimeFormatter65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime(dateTimeZone67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period(readableInstant69, readableInstant70, periodType71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = period72.normalizedStandard(periodType73);
        org.joda.time.DateTime dateTime76 = dateTime64.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 2022);
        org.joda.time.LocalDate localDate78 = localDate58.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 0);
        mutableDateTime14.add((org.joda.time.ReadablePeriod) period72, 40);
        mutableDateTime14.addDays(86399);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime14.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime84 = property83.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime(dateTimeZone85);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime86.weekOfWeekyear();
        mutableDateTime86.addDays(22);
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime86.year();
        int int91 = mutableDateTime84.compareTo((org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.MutableDateTime.Property property92 = mutableDateTime86.dayOfWeek();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate61);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str66, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        java.util.Locale locale3 = new java.util.Locale("Wed May 01 00:19:59 GMT+00:00 1974", "YearWeekDay", "1971-12-01");
        org.junit.Assert.assertEquals(locale3.toString(), "wed may 01 00:19:59 gmt+00:00 1974_YEARWEEKDAY_1971-12-01");
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = period5.normalizedStandard(periodType6);
        java.lang.String str8 = period5.toString();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = period12.normalizedStandard(periodType13);
        org.joda.time.Period period15 = period5.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Seconds seconds16 = period15.toStandardSeconds();
        org.joda.time.Period period17 = period15.toPeriod();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period19 = period15.normalizedStandard(periodType18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime25.toString(dateTimeFormatter26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.toDateTime(dateTimeZone28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration43);
        long long46 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology48 = null;
        boolean boolean49 = durationFieldType47.isSupported(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime29.withFieldAdded(durationFieldType47, 69);
        int int52 = periodType18.indexOf(durationFieldType47);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(periodType18);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.eras();
        int int55 = periodType18.indexOf(durationFieldType54);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property57 = localDate56.yearOfCentury();
        org.joda.time.LocalDate localDate59 = localDate56.plusWeeks(100);
        org.joda.time.LocalDate localDate60 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property61 = localDate60.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property61.addWrapFieldToCopy(0);
        int int64 = localDate59.compareTo((org.joda.time.ReadablePartial) localDate63);
        org.joda.time.DateMidnight dateMidnight65 = localDate63.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.dayOfYear();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight67.minusDays(0);
        org.joda.time.Interval interval71 = dateMidnight70.toInterval();
        org.joda.time.Interval interval73 = interval71.withStartMillis((long) 0);
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.days();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight65.withChronology(chronology74);
        org.joda.time.DateMidnight dateMidnight77 = org.joda.time.DateMidnight.now(chronology74);
        org.joda.time.DateTimeField dateTimeField78 = chronology74.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(3110400000L, periodType18, chronology74);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(691200048L, chronology74);
        org.joda.time.DateTimeField dateTimeField81 = chronology74.weekyearOfCentury();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str27, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.roundCeiling();
        org.joda.time.Chronology chronology8 = mutableDateTime7.getChronology();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        mutablePeriod10.addYears((int) (short) 0);
        mutablePeriod10.addYears(86399);
        mutablePeriod10.setPeriod((long) 99);
        int[] intArray18 = chronology8.get((org.joda.time.ReadablePeriod) mutablePeriod10, (long) 898);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology8.getDateTimeMillis((long) 34, 604, (-14513), 1979, 396);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 604 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 898]");
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(197932, 47, 519, 2031, (int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2031 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(40L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration12 = duration10.plus((long) 'u');
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration12, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        mutableDateTime3.setRounding(dateTimeField17);
        org.joda.time.Interval interval19 = duration1.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setYear((-85));
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime3.centuryOfEra();
        mutableDateTime3.addMonths(65);
        java.lang.Object obj25 = mutableDateTime3.clone();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "-0080-01-01T00:00:00.000+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "-0080-01-01T00:00:00.000+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "-0080-01-01T00:00:00.000+00:00:00.683");
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusMonths((int) (byte) -1);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.year();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.addToCopy((int) (short) 1);
        org.joda.time.DateTime dateTime17 = yearMonthDay16.toDateTimeAtMidnight();
        int int18 = yearMonthDay16.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withCenturyOfEra(2022);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant22, readableInstant23, periodType24);
        int int26 = period25.getWeeks();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight19.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime31.toString(dateTimeFormatter32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateTime.Property property52 = dateTime35.year();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateMidnight.Property property54 = dateMidnight28.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight28.minusYears(42);
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTimeISO();
        org.joda.time.Duration duration58 = period25.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Period period60 = period25.plusDays(14962035);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay16.plus((org.joda.time.ReadablePeriod) period60);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21 + "'", int18 == 21);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight28);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str33, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        java.util.GregorianCalendar gregorianCalendar5 = dateMidnight1.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight1.minusWeeks(2078);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar10 = dateMidnight7.toCalendar(locale9);
        java.time.Instant instant11 = calendar10.toInstant();
        java.util.Date date12 = java.util.Date.from(instant11);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-1256774400683,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1930,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=65,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Wed Mar 05 23:59:59 GMT 1930");
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight1.toYearMonthDay();
        int int6 = dateMidnight1.getSecondOfMinute();
        org.joda.time.DateMidnight.Property property7 = dateMidnight1.yearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean4 = localTime1.isEqual((org.joda.time.ReadablePartial) localTime3);
        java.lang.String str5 = localTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime.Property property19 = localTime13.property(dateTimeFieldType17);
        java.lang.String str20 = localTime13.toString();
        boolean boolean21 = localTime3.isBefore((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime.Property property22 = localTime13.secondOfMinute();
        org.joda.time.LocalTime.Property property23 = localTime13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.LocalTime localTime25 = property23.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime27 = localTime25.plusHours(11);
        org.joda.time.LocalTime.Property property28 = localTime27.minuteOfHour();
        org.joda.time.LocalTime localTime30 = property28.addNoWrapToCopy(46);
        org.joda.time.LocalTime localTime31 = property28.getLocalTime();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.715" + "'", str5, "00:00:00.715");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str10, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00:00:00.682" + "'", str20, "00:00:00.682");
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths((int) (short) 100);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.minus(32769L);
        org.joda.time.DateTime.Property property13 = dateTime10.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        org.joda.time.DurationField durationField11 = chronology8.halfdays();
        org.joda.time.DurationField durationField12 = chronology8.halfdays();
        long long15 = durationField12.getMillis(0L, (long) (short) 1);
        boolean boolean16 = durationField12.isSupported();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period15 = duration6.toPeriod();
        org.joda.time.DateMidnight dateMidnight16 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime19.toString(dateTimeFormatter20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime.Property property40 = dateTime23.year();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight16, dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone44);
        mutableDateTime45.setYear(1969);
        boolean boolean48 = dateMidnight16.isEqual((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = duration55.plus((long) 'u');
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableDuration) duration55, periodType58);
        mutablePeriod59.addSeconds(42);
        mutablePeriod59.addWeeks((-1));
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Duration duration70 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime69.withZone(dateTimeZone71);
        org.joda.time.DateTime.Property property73 = dateTime69.dayOfWeek();
        org.joda.time.DateTime dateTime74 = property73.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property75 = dateTime74.millisOfDay();
        org.joda.time.DateTime dateTime77 = property75.addToCopy((long) 100);
        org.joda.time.Duration duration78 = mutablePeriod59.toDurationFrom((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime80 = dateTime77.plusSeconds(33);
        int int81 = dateTime77.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime77);
        mutablePeriod82.clear();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight16);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str21, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        int int11 = durationField9.getValue((long) (byte) 1);
        long long14 = durationField9.add((long) 20, (int) 'a');
        boolean boolean15 = durationField9.isPrecise();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 8380800020L + "'", long14 == 8380800020L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.addWrapField(8);
        org.joda.time.DateTimeField dateTimeField6 = property2.getField();
        java.lang.String str8 = dateTimeField6.getAsShortText((long) 39);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration21 = duration19.plus((long) 'u');
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration21, (-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime26.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 1, periodType34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime32, periodType34);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfYear();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.minusDays(0);
        org.joda.time.Interval interval42 = dateMidnight41.toInterval();
        org.joda.time.Interval interval44 = interval42.withStartMillis((long) 0);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 50, periodType34, chronology45);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) 17, chronology45);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfCentury();
        int int50 = localDate48.getDayOfWeek();
        int int51 = localDate48.getYear();
        int int52 = localDate48.getCenturyOfEra();
        boolean boolean53 = yearMonthDay47.isAfter((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTime dateTime54 = localDate48.toDateTimeAtMidnight();
        int int55 = localDate48.getDayOfWeek();
        org.joda.time.LocalDate.Property property56 = localDate48.yearOfEra();
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.lang.String str59 = locale58.getISO3Language();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.DateTime dateTime65 = property63.addToCopy((int) ' ');
        java.util.Locale locale66 = java.util.Locale.ITALY;
        int int67 = property63.getMaximumShortTextLength(locale66);
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("PT0S");
        int int70 = property63.getMaximumShortTextLength(locale69);
        java.lang.String str71 = locale58.getDisplayVariant(locale69);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(locale69);
        java.lang.String str73 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDate48, 4, locale69);
        org.joda.time.Chronology chronology74 = localDate48.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.weekyearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "deu" + "'", str59, "deu");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645455780541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=0,MILLISECOND=541,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "4" + "'", str73, "4");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (-1850));
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(4, 9, 22, (int) '#');
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.LocalTime localTime9 = localTime7.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 59, chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.halfdayOfDay();
        boolean boolean14 = duration1.equals((java.lang.Object) dateTimeField13);
        org.joda.time.Minutes minutes15 = duration1.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(minutes15);
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        java.util.Date date1 = new java.util.Date((long) 58);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromDateFields(date1);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0, 0, 32772, 70);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod7, 34);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusMillis(1971);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfCeilingCopy();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.DateTime.Property property55 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime54.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime59 = dateTime54.withMinuteOfHour(26);
        org.joda.time.DateTime dateTime61 = dateTime54.minusDays(292278993);
        int int62 = dateTime54.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration21.plus((long) 'u');
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration23, (-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime34, periodType36);
        mutableDateTime14.setMillis((long) 1969);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean54 = dateTime52.isSupported(dateTimeFieldType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period56 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime52, periodType55);
        org.joda.time.Period period57 = duration10.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime14, periodType55);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property59 = localDate58.yearOfCentury();
        org.joda.time.LocalDate localDate61 = localDate58.plusWeeks(100);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = dateTime64.toString(dateTimeFormatter65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime(dateTimeZone67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period(readableInstant69, readableInstant70, periodType71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = period72.normalizedStandard(periodType73);
        org.joda.time.DateTime dateTime76 = dateTime64.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 2022);
        org.joda.time.LocalDate localDate78 = localDate58.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 0);
        mutableDateTime14.add((org.joda.time.ReadablePeriod) period72, 40);
        mutableDateTime14.addDays(86399);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime14.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime84 = property83.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime(dateTimeZone85);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime86.weekOfWeekyear();
        mutableDateTime86.addDays(22);
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime86.year();
        int int91 = mutableDateTime84.compareTo((org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.Instant instant92 = mutableDateTime84.toInstant();
        mutableDateTime84.addMinutes(53947);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate61);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str66, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(instant92);
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays(0);
        org.joda.time.Interval interval13 = dateMidnight12.toInterval();
        org.joda.time.Interval interval15 = interval13.withStartMillis((long) 0);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1970, (int) (byte) 100, (int) (byte) 0, (int) (byte) 10);
        mutablePeriod25.setSeconds(59);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod25.toMutablePeriod();
        long long31 = chronology16.add((org.joda.time.ReadablePeriod) mutablePeriod28, (long) (short) 100, 30);
        org.joda.time.Interval interval32 = interval7.withChronology(chronology16);
        boolean boolean34 = interval7.contains(1L);
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.Interval interval36 = interval7.overlap(readableInterval35);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        int int39 = strSet38.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = dateTime52.isAfterNow();
        org.joda.time.DateTime dateTime58 = dateTime52.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime59 = dateTime58.toLocalDateTime();
        boolean boolean60 = strSet38.equals((java.lang.Object) dateTime58);
        boolean boolean61 = interval7.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone62);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime63.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime66 = property64.add((long) 52);
        org.joda.time.MutableDateTime mutableDateTime67 = property64.getMutableDateTime();
        boolean boolean68 = interval7.isBefore((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime67.dayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 212941770400L + "'", long31 == 212941770400L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(interval36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusMonths((int) (byte) -1);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.year();
        org.joda.time.YearMonthDay yearMonthDay15 = property14.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay17 = property14.setCopy(100431);
        org.joda.time.YearMonthDay yearMonthDay18 = property14.getYearMonthDay();
        int int19 = yearMonthDay18.getYear();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1978 + "'", int19 == 1978);
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight1, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setYear(1969);
        boolean boolean33 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableDuration) duration40, periodType43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight0.withDayOfWeek((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        mutableDateTime52.setZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime52.getZone();
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        mutableDateTime50.setZoneRetainFields(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(dateTimeZone55);
        mutableDateTime48.setZoneRetainFields(dateTimeZone55);
        java.lang.String str61 = dateTimeZone55.getName((long) 51);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight47, dateTimeZone55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.withEra(54082);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54082 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.683" + "'", str61, "+00:00:00.683");
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight0.withWeekyear((int) '4');
        org.joda.time.YearMonthDay yearMonthDay30 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight0.withCenturyOfEra(69);
        org.joda.time.Chronology chronology33 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight.Property property34 = dateMidnight0.monthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusDays(10);
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay16.year();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getISO3Language();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = property24.addToCopy((int) ' ');
        java.util.Locale locale27 = java.util.Locale.ITALY;
        int int28 = property24.getMaximumShortTextLength(locale27);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("PT0S");
        int int31 = property24.getMaximumShortTextLength(locale30);
        java.lang.String str32 = locale19.getDisplayVariant(locale30);
        java.lang.String str33 = property18.getAsText(locale19);
        org.joda.time.YearMonthDay yearMonthDay34 = property18.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay36 = property18.addWrapFieldToCopy(53999);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "deu" + "'", str20, "deu");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1978" + "'", str33, "1978");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Duration duration13 = duration10.toDuration();
        long long14 = duration10.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        long long11 = durationField9.getMillis(100431);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate15 = localDate12.plusWeeks(100);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy(0);
        int int20 = localDate15.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateMidnight dateMidnight21 = localDate19.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.minusDays(0);
        org.joda.time.Interval interval27 = dateMidnight26.toInterval();
        org.joda.time.Interval interval29 = interval27.withStartMillis((long) 0);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight21.withChronology(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.seconds();
        int int36 = durationField33.getValue(50116069L, 1335967560000L);
        int int37 = durationField9.compareTo(durationField33);
        long long39 = durationField9.getValueAsLong((-2070756009000L));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 8677238400000L + "'", long11 == 8677238400000L);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50116 + "'", int36 == 50116);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-23967L) + "'", long39 == (-23967L));
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate8 = localDate5.plusWeeks(100);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property10.addWrapFieldToCopy(0);
        int int13 = localDate8.compareTo((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime17.getZone();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        mutableDateTime15.setZoneRetainFields(dateTimeZone20);
        long long25 = dateTimeZone20.adjustOffset((long) 49, false);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight27 = localDate12.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime28 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra(58);
        int int31 = dateTime28.getMinuteOfHour();
        org.joda.time.DateTime.Property property32 = dateTime28.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration33 = new org.joda.time.Duration((java.lang.Object) dateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 49L + "'", long25 == 49L);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.DateTime dateTime15 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 2022);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime3.toDateTime(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = dateTime17.toLocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.withYear(1969);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.LocalDate localDate22 = property21.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        mutableDateTime0.setRounding(dateTimeField23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime0.minuteOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        long long60 = duration59.getStandardMinutes();
        org.joda.time.Duration duration61 = duration59.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.yearOfEra();
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        boolean boolean69 = period67.isSupported(durationFieldType68);
        java.lang.String str70 = durationFieldType68.toString();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType68);
        org.joda.time.LocalDateTime.Property property72 = localDateTime52.weekyear();
        org.joda.time.LocalDateTime.Property property73 = localDateTime52.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime52.plusMonths(41);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plusMonths(39);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.withMillisOfDay(50);
        org.joda.time.LocalDateTime.Property property80 = localDateTime75.weekyear();
        int int81 = property80.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "years" + "'", str70, "years");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-292275054) + "'", int81 == (-292275054));
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 90);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Duration duration3 = duration1.toDuration();
        java.lang.String str4 = duration3.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT324000S" + "'", str4, "PT324000S");
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        int int5 = localDate3.getDayOfWeek();
        int int6 = localDate3.getYear();
        int int7 = localDate3.getCenturyOfEra();
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfEra();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDate3, 32, locale10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType12);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.toMutablePeriod();
        int int15 = mutablePeriod14.getMillis();
        org.joda.time.LocalDate localDate17 = localDate3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) '4');
        org.joda.time.LocalDate localDate19 = localDate3.withYearOfCentury(57);
        org.joda.time.LocalDate localDate21 = localDate19.withWeekyear(1969);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) 'a');
        org.joda.time.DateMidnight dateMidnight24 = localDate23.toDateMidnight();
        org.joda.time.LocalDate localDate26 = localDate23.plusMonths(53780);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(periodType27);
        mutablePeriod28.addDays((int) '#');
        org.joda.time.Period period31 = mutablePeriod28.toPeriod();
        org.joda.time.format.PeriodFormatter periodFormatter32 = null;
        java.lang.String str33 = period31.toString(periodFormatter32);
        org.joda.time.LocalDate localDate34 = localDate23.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateMidnight dateMidnight35 = localDate34.toDateMidnight();
        org.joda.time.LocalDate.Property property36 = localDate34.weekOfWeekyear();
        org.joda.time.DateTime dateTime37 = localDate34.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = localDate34.get(dateTimeFieldType38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "P35D" + "'", str33, "P35D");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration39, periodType42);
        mutablePeriod43.addSeconds(42);
        mutablePeriod43.addWeeks((-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withZone(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((long) 100);
        org.joda.time.Duration duration62 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.tz.Provider provider63 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet64 = provider63.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider63);
        boolean boolean66 = mutablePeriod43.equals((java.lang.Object) provider63);
        java.util.Set<java.lang.String> strSet67 = provider63.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone69 = provider63.getZone("Thu Jan 08 02:03:59 GMT 1903");
        org.joda.time.DateTimeZone.setProvider(provider63);
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNull(dateTimeZone69);
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 24);
        java.util.Date date8 = new java.util.Date(1978, 6, 358);
        date8.setMonth(11);
        java.util.Calendar.Builder builder11 = builder4.setInstant(date8);
        java.util.Calendar calendar12 = builder4.build();
        java.util.TimeZone timeZone13 = calendar12.getTimeZone();
        java.util.TimeZone timeZone14 = calendar12.getTimeZone();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((int) ' ');
        java.util.Locale locale22 = java.util.Locale.ITALY;
        int int23 = property19.getMaximumShortTextLength(locale22);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("PT0S");
        int int26 = property19.getMaximumShortTextLength(locale25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = property30.addToCopy((int) ' ');
        java.util.Locale locale33 = java.util.Locale.ITALY;
        int int34 = property30.getMaximumShortTextLength(locale33);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("PT0S");
        int int37 = property30.getMaximumShortTextLength(locale36);
        int int38 = property19.getMaximumTextLength(locale36);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getISO3Language();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.DateTime dateTime46 = property44.addToCopy((int) ' ');
        java.util.Locale locale47 = java.util.Locale.ITALY;
        int int48 = property44.getMaximumShortTextLength(locale47);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("PT0S");
        int int51 = property44.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale39.getDisplayVariant(locale50);
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale50.getDisplayName(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getISO3Language();
        java.lang.String str57 = locale50.getDisplayScript(locale55);
        java.lang.String str58 = property19.getAsText(locale55);
        java.util.Locale.setDefault(category15, locale55);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone14, locale55);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = calendar60.get(100828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100828");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(date8.toString(), "Tue Dec 23 00:00:00 GMT 3879");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=60272985600000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=3879,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=357,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "deu" + "'", str40, "deu");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "deu" + "'", str56, "deu");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970" + "'", str58, "1970");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645455780980,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=0,MILLISECOND=980,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1439);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear(56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) (-54));
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("minuteOfHour");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withLocale(locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withDefaultYear(86393999);
        java.io.Writer writer17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.set(23);
        org.joda.time.DateTimeField dateTimeField23 = property20.getField();
        int int24 = property20.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime26 = property20.add((long) 6);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.weekOfWeekyear();
        mutableDateTime28.addDays(22);
        mutableDateTime28.setDayOfMonth(19);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        mutableDateTime37.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime37.getZone();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        mutableDateTime35.setZoneRetainFields(dateTimeZone40);
        long long45 = dateTimeZone40.convertLocalToUTC((long) 17, true);
        mutableDateTime28.setZoneRetainFields(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight47 = org.joda.time.DateMidnight.now(dateTimeZone40);
        mutableDateTime26.setZoneRetainFields(dateTimeZone40);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime26.year();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(writer17, (org.joda.time.ReadableInstant) mutableDateTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-666L) + "'", long45 == (-666L));
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withDayOfWeek(2);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMinutes((int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = duration33.plus((long) 'u');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        boolean boolean59 = duration35.isEqual((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime19.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusMonths(200);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.weekyear();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundCeilingCopy();
        int int65 = property63.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str40, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 292278993 + "'", int65 == 292278993);
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight0.withWeekyear((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        int int35 = localDate33.getDayOfWeek();
        int int36 = localDate33.getYear();
        int int37 = localDate33.getCenturyOfEra();
        org.joda.time.LocalDate.Property property38 = localDate33.yearOfEra();
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDate33, 32, locale40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(periodType42);
        org.joda.time.MutablePeriod mutablePeriod44 = mutablePeriod43.toMutablePeriod();
        int int45 = mutablePeriod44.getMillis();
        org.joda.time.LocalDate localDate47 = localDate33.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod44, (int) '4');
        org.joda.time.LocalDate localDate49 = localDate33.withYearOfCentury(57);
        org.joda.time.LocalDate localDate51 = localDate49.withWeekyear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.era();
        int int53 = localDate51.get(dateTimeFieldType52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight29.property(dateTimeFieldType52);
        int int55 = property54.getLeapAmount();
        org.joda.time.DateMidnight dateMidnight56 = property54.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.withEra(0);
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20 + "'", int37 == 20);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32" + "'", str41, "32");
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType4);
        org.joda.time.Period period7 = period5.plusDays(2022);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period9 = period7.withPeriodType(periodType8);
        java.lang.String str10 = periodType8.getName();
        org.joda.time.PeriodType periodType11 = periodType8.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = duration25.plus((long) 'u');
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration27, (-1));
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime32.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 1, periodType40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, (org.joda.time.ReadableInstant) dateTime38, periodType40);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.minusDays(0);
        org.joda.time.Interval interval48 = dateMidnight47.toInterval();
        org.joda.time.Interval interval50 = interval48.withStartMillis((long) 0);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 50, periodType40, chronology51);
        org.joda.time.Period period53 = new org.joda.time.Period((long) 2022, (long) 45, chronology51);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) (byte) 100, (long) 5, chronology51);
        org.joda.time.DateTimeField dateTimeField55 = chronology51.hourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 37, (-1L), periodType11, chronology51);
        int int58 = mutablePeriod57.getHours();
        mutablePeriod57.setMonths(2000);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod57.setSeconds(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "YearMonthDay" + "'", str10, "YearMonthDay");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.addWrapField(8);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone6);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        java.lang.String str9 = property8.toString();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(13);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime5.toDateTime(dateTimeZone13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean20 = localTime17.isEqual((org.joda.time.ReadablePartial) localTime19);
        java.lang.String str21 = localTime19.toString();
        org.joda.time.LocalTime localTime23 = localTime19.minusMillis(3);
        org.joda.time.LocalTime.Property property24 = localTime19.minuteOfHour();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = dateTime27.toString(dateTimeFormatter28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime(dateTimeZone30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.LocalTime.Property property38 = localTime32.property(dateTimeFieldType36);
        int int39 = localTime19.get(dateTimeFieldType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime15.withField(dateTimeFieldType36, 990);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 990 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[secondOfMinute]" + "'", str9, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "00:00:00.715" + "'", str21, "00:00:00.715");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str29, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getISO3Language();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) ' ');
        java.util.Locale locale17 = java.util.Locale.ITALY;
        int int18 = property14.getMaximumShortTextLength(locale17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("PT0S");
        int int21 = property14.getMaximumShortTextLength(locale20);
        java.lang.String str22 = locale9.getDisplayVariant(locale20);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = locale9.getDisplayName(locale23);
        java.util.Locale.setDefault(category4, locale9);
        java.lang.String str26 = dateTimeField2.getAsShortText(113605027200032L, locale9);
        java.util.Set<java.lang.String> strSet27 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale9.getScript();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "deu" + "'", str10, "deu");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "allemand" + "'", str24, "allemand");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "5570" + "'", str26, "5570");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight4 = property3.withMinimumValue();
        java.util.Locale locale7 = new java.util.Locale("52");
        java.util.Locale locale8 = locale7.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = property3.setCopy("CN", locale7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"CN\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertEquals(locale7.toString(), "52");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "52");
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        org.joda.time.Period period1 = org.joda.time.Period.years(54);
        org.joda.time.Period period3 = period1.minusMonths(101);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 1, periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime21, periodType23);
        mutableDateTime1.setMillis((long) 1969);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.millisOfDay();
        int int29 = mutableDateTime1.getDayOfWeek();
        java.lang.String str30 = mutableDateTime1.toString();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:02.652+00:00:00.683" + "'", str30, "1970-01-01T00:00:02.652+00:00:00.683");
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.MutablePeriod mutablePeriod2 = mutablePeriod1.toMutablePeriod();
        mutablePeriod1.setPeriod(518400000L, (long) 6);
        mutablePeriod1.setPeriod((long) 51);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setValue(1986, 53863);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1986");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod2);
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(dateTimeZone1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay5.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = timeOfDay5.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay5.plusMillis((int) (short) -1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime15.toString(dateTimeFormatter16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime(dateTimeZone18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean25 = dateTime23.isSupported(dateTimeFieldType24);
        org.joda.time.LocalTime.Property property26 = localTime20.property(dateTimeFieldType24);
        java.lang.String str27 = dateTimeFieldType24.toString();
        org.joda.time.TimeOfDay.Property property28 = timeOfDay5.property(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = timeOfDay30.toDateTimeToday();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period42 = new org.joda.time.Period(100L, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((int) '4', (-292275054), (int) (short) 1, 1970, 45, 5, (int) (short) 0, (int) (byte) 0, periodType41);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay5, (org.joda.time.ReadablePartial) timeOfDay30, periodType41);
        org.joda.time.PeriodType periodType45 = periodType41.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableInstant48, readableInstant49, periodType50);
        org.joda.time.Period period53 = period51.plusDays(2022);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period55 = period53.withPeriodType(periodType54);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.dayOfYear();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.minusDays(0);
        org.joda.time.Interval interval61 = dateMidnight60.toInterval();
        org.joda.time.Interval interval63 = interval61.withStartMillis((long) 0);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight67 = org.joda.time.DateMidnight.now(chronology64);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(chronology64);
        org.joda.time.Period period69 = new org.joda.time.Period((long) 21, (long) 9, periodType54, chronology64);
        org.joda.time.DateTimeField dateTimeField70 = chronology64.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = chronology64.weekOfWeekyear();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 17542035, periodType45, chronology64);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        mutableDateTime74.setZoneRetainFields(dateTimeZone75);
        mutableDateTime74.addHours((-1));
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.centuries();
        mutableDateTime74.add(durationFieldType79, 45);
        int int82 = periodType45.indexOf(durationFieldType79);
        java.lang.String str83 = durationFieldType79.getName();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay12);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str17, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "minuteOfHour" + "'", str27, "minuteOfHour");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "centuries" + "'", str83, "centuries");
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        java.util.Date date6 = new java.util.Date(11, 18, 48, 17, 1970, 5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) ' ');
        org.joda.time.Duration duration11 = duration9.withMillis(212941770400L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = duration18.plus((long) 'u');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration20, 21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration20, 0);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime7.minus(readableDuration26);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Aug 19 01:50:05 GMT 1912");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime3.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        mutableDateTime1.setZoneRetainFields(dateTimeZone6);
        long long11 = dateTimeZone6.adjustOffset((long) 49, false);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int13 = localDateTime12.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withSecondOfMinute(358);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 358 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 49L + "'", long11 == 49L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Duration duration15 = duration13.plus((long) 'u');
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration15, (-1));
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime20.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 1, periodType28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateTime26, periodType28);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.minusDays(0);
        org.joda.time.Interval interval36 = dateMidnight35.toInterval();
        org.joda.time.Interval interval38 = interval36.withStartMillis((long) 0);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 50, periodType28, chronology39);
        org.joda.time.Period period41 = new org.joda.time.Period((long) 2022, (long) 45, chronology39);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) 100, (long) 5, chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.secondOfDay();
        int int46 = dateTimeField45.getMaximumValue();
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 86399 + "'", int46 == 86399);
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime9 = property7.addToCopy((int) ' ');
        java.util.Locale locale10 = java.util.Locale.ITALY;
        int int11 = property7.getMaximumShortTextLength(locale10);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("PT0S");
        int int14 = property7.getMaximumShortTextLength(locale13);
        int int15 = property2.getMaximumShortTextLength(locale13);
        org.joda.time.MutableDateTime mutableDateTime16 = property2.roundHalfCeiling();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfYear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays(0);
        org.joda.time.Interval interval22 = dateMidnight21.toInterval();
        org.joda.time.Interval interval24 = interval22.withStartMillis((long) 0);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.centuries();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.centuryOfEra();
        org.joda.time.DurationField durationField28 = chronology25.halfdays();
        org.joda.time.DurationField durationField29 = chronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.hourOfDay();
        int int31 = mutableDateTime16.get(dateTimeField30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant39, readableInstant40, periodType41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = period42.normalizedStandard(periodType43);
        java.lang.String str45 = period42.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = dateTime51.withZone(dateTimeZone53);
        org.joda.time.Duration duration55 = period42.toDurationFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration56 = duration38.plus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) (short) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.withZone(dateTimeZone67);
        org.joda.time.DateTime.Property property69 = dateTime68.yearOfCentury();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = duration56.isLongerThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration73 = duration58.withMillis(50L);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.DateTime.Property property77 = dateTime76.yearOfEra();
        int int78 = dateTime76.getDayOfMonth();
        org.joda.time.Interval interval79 = duration58.toIntervalFrom((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.LocalTime localTime80 = dateTime76.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay81 = dateTime76.toTimeOfDay();
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateTime76);
        java.lang.String str83 = mutableDateTime16.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(property77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(timeOfDay81);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.683" + "'", str83, "1970-01-01T00:00:00.000+00:00:00.683");
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration11.plus((long) 'u');
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration15 = duration11.toDuration();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.set(23);
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime22 = property18.getMutableDateTime();
        org.joda.time.Interval interval23 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration32 = duration30.plus((long) 'u');
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period39 = duration30.toPeriodTo((org.joda.time.ReadableInstant) dateTime35, periodType38);
        org.joda.time.DateTime dateTime41 = dateTime35.plusWeeks(292278993);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime44 = dateTime35.minusDays(100878);
        org.joda.time.Instant instant45 = dateTime44.toInstant();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant45);
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate5 = localDate0.minusMonths(31);
        int int6 = localDate5.getYearOfCentury();
        org.joda.time.LocalDate.Property property7 = localDate5.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        boolean boolean10 = localDate5.isSupported(durationFieldType9);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.plusYears(10);
        boolean boolean15 = localDate11.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.minusDays(10);
        org.joda.time.Period period28 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay27.year();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.minusYears(53);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusMonths(9);
        org.joda.time.LocalDate localDate34 = localDate5.withFields((org.joda.time.ReadablePartial) yearMonthDay31);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay31.year();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(periodType36);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod37.toMutablePeriod();
        mutablePeriod37.setMinutes(0);
        mutablePeriod37.addMillis((-923));
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay31.minus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = duration52.plus((long) 'u');
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration54, (-1));
        org.joda.time.Duration duration57 = duration54.toDuration();
        org.joda.time.Duration duration59 = duration57.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property64 = dateMidnight63.dayOfYear();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.minusDays(0);
        org.joda.time.Interval interval67 = dateMidnight66.toInterval();
        org.joda.time.Interval interval70 = new org.joda.time.Interval(0L, (long) 12);
        long long71 = interval70.getStartMillis();
        boolean boolean72 = interval67.isAfter((org.joda.time.ReadableInterval) interval70);
        long long73 = interval70.getEndMillis();
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property76 = dateMidnight75.dayOfYear();
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight75.minusDays(0);
        org.joda.time.Interval interval79 = dateMidnight78.toInterval();
        org.joda.time.Interval interval81 = interval79.withStartMillis((long) 0);
        org.joda.time.Chronology chronology82 = interval81.getChronology();
        org.joda.time.DurationField durationField83 = chronology82.centuries();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.centuryOfEra();
        org.joda.time.Interval interval85 = interval70.withChronology(chronology82);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 59, chronology82);
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate(55L, chronology82);
        org.joda.time.Period period88 = duration57.toPeriod(chronology82);
        long long89 = duration57.getStandardMinutes();
        mutablePeriod37.setPeriod((org.joda.time.ReadableDuration) duration57);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 12L + "'", long73 == 12L);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime20.getZone();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        mutableDateTime18.setZoneRetainFields(dateTimeZone23);
        long long28 = dateTimeZone23.adjustOffset((long) 49, false);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone23);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) 9, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone23);
        java.util.TimeZone timeZone32 = dateTimeZone23.toTimeZone();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 49L + "'", long28 == 49L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder1.setLenient(false);
        java.util.Calendar.Builder builder7 = builder1.setWeekDate(32769, 59, 56);
        java.util.Calendar.Builder builder12 = builder1.setTimeOfDay(9, 54, 40, (int) (byte) -1);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("English");
        java.util.Calendar.Builder builder15 = builder1.setTimeZone(timeZone14);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("English");
        timeZone17.setRawOffset(29);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.lang.String str21 = timeZone20.getID();
        int int23 = timeZone20.getOffset((long) 999);
        timeZone20.setID("secondOfMinute");
        java.util.TimeZone.setDefault(timeZone20);
        boolean boolean27 = timeZone17.hasSameRules(timeZone20);
        boolean boolean28 = timeZone14.hasSameRules(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 199, dateTimeZone29);
        java.util.TimeZone timeZone31 = dateTimeZone29.toTimeZone();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone29);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GMT" + "'", str21, "GMT");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Tempo universale coordinato");
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add((long) 100441);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.setYears((int) (short) 1);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.setPeriod(readableInterval4);
        mutablePeriod1.addMonths(46);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = period13.normalizedStandard(periodType14);
        java.lang.String str16 = period13.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withZone(dateTimeZone24);
        org.joda.time.Duration duration26 = period13.toDurationFrom((org.joda.time.ReadableInstant) dateTime25);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration26, 12);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime30.yearOfEra();
        org.joda.time.Interval interval33 = duration26.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration49, (-1));
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = dateTime54.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 1, periodType62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime40, (org.joda.time.ReadableInstant) dateTime60, periodType62);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.dayOfYear();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight66.minusDays(0);
        org.joda.time.Interval interval70 = dateMidnight69.toInterval();
        org.joda.time.Interval interval72 = interval70.withStartMillis((long) 0);
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 50, periodType62, chronology73);
        org.joda.time.Period period75 = new org.joda.time.Period((long) 2022, (long) 45, chronology73);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) (byte) 100, (long) 5, chronology73);
        org.joda.time.DateTimeField dateTimeField77 = chronology73.millisOfSecond();
        org.joda.time.Period period78 = duration26.toPeriod(chronology73);
        java.lang.String str79 = duration26.toString();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration26);
        mutablePeriod1.addMillis(31);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT0S" + "'", str79, "PT0S");
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        java.util.Date date14 = calendar12.getTime();
        int int15 = calendar12.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = calendar12.isSet((-14));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -14");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(0);
        int int8 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime12.getZone();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        mutableDateTime10.setZoneRetainFields(dateTimeZone15);
        long long20 = dateTimeZone15.adjustOffset((long) 49, false);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight22 = localDate7.toDateMidnight(dateTimeZone15);
        long long24 = dateTimeZone15.previousTransition((long) 43);
        java.util.TimeZone timeZone25 = dateTimeZone15.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId26 = timeZone25.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: +00:00:00.683");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 49L + "'", long20 == 49L);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 43L + "'", long24 == 43L);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withDayOfWeek(2);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMinutes((int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = duration33.plus((long) 'u');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        boolean boolean59 = duration35.isEqual((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime19.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusMonths(200);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.weekyear();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundCeilingCopy();
        int int65 = localDateTime64.getWeekOfWeekyear();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime64.toDateTime(readableInstant66);
        boolean boolean68 = dateTime67.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str40, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate5 = localDate0.minusMonths(31);
        org.joda.time.LocalDate.Property property6 = localDate0.weekOfWeekyear();
        java.lang.String str7 = property6.toString();
        org.joda.time.LocalDate localDate8 = property6.withMinimumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[weekOfWeekyear]" + "'", str7, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(56);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        int int6 = localDateTime5.getHourOfDay();
        int int7 = localDateTime5.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        java.lang.Object obj0 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(0);
        org.joda.time.Interval interval6 = dateMidnight5.toInterval();
        org.joda.time.Interval interval8 = interval6.withStartMillis((long) 0);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.centuryOfEra();
        org.joda.time.DurationField durationField12 = chronology9.halfdays();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(obj0, chronology9);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.minusDays(0);
        org.joda.time.Interval interval19 = dateMidnight18.toInterval();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(0L, (long) 12);
        long long23 = interval22.getStartMillis();
        boolean boolean24 = interval19.isAfter((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant25, readableInstant26, periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        boolean boolean30 = period28.isSupported(durationFieldType29);
        org.joda.time.Interval interval31 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        long long34 = chronology9.add((org.joda.time.ReadablePeriod) period28, 0L, 1799999);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.addWrapField(8);
        org.joda.time.DateTimeField dateTimeField6 = property2.getField();
        int int7 = property2.get();
        org.joda.time.MutableDateTime mutableDateTime9 = property2.add(43);
        org.joda.time.MutableDateTime mutableDateTime10 = property2.roundHalfFloor();
        org.joda.time.DateTimeField dateTimeField11 = property2.getField();
        org.joda.time.MutableDateTime mutableDateTime12 = property2.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        mutableDateTime14.setZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime14.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        long long20 = dateTimeZone17.previousTransition((long) (byte) 1);
        java.lang.String str22 = dateTimeZone17.getShortName((long) 197800);
        mutableDateTime12.setZoneRetainFields(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setMillisOfSecond(85746557);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85746557 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.683" + "'", str22, "+00:00:00.683");
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(53936, 641, 41, 361, 85, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 361 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(2022);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        long long60 = duration59.getStandardMinutes();
        org.joda.time.Duration duration61 = duration59.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.yearOfEra();
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        boolean boolean69 = period67.isSupported(durationFieldType68);
        java.lang.String str70 = durationFieldType68.toString();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType68);
        org.joda.time.LocalDateTime.Property property72 = localDateTime52.weekyear();
        int int73 = property72.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime75 = property72.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Duration duration84 = duration82.plus((long) 'u');
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (-1), chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean89 = dateTime87.isSupported(dateTimeFieldType88);
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period91 = duration82.toPeriodTo((org.joda.time.ReadableInstant) dateTime87, periodType90);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime75.minus((org.joda.time.ReadableDuration) duration82);
        org.joda.time.LocalDateTime.Property property93 = localDateTime75.millisOfDay();
        org.joda.time.LocalDateTime localDateTime94 = property93.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "years" + "'", str70, "years");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-292275054) + "'", int73 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate5 = localDate2.minusDays((int) 'a');
        int int6 = localDate2.getEra();
        org.joda.time.LocalDate localDate8 = localDate2.withEra(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(dateTimeZone9);
        int int11 = timeOfDay10.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.minusSeconds(45);
        org.joda.time.DateMidnight dateMidnight16 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime20.toString(dateTimeFormatter21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime.Property property41 = dateTime24.year();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight17, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        mutableDateTime46.setYear(1969);
        boolean boolean49 = dateMidnight17.isEqual((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = duration56.plus((long) 'u');
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableDuration) duration56, periodType59);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property64 = dateMidnight63.dayOfYear();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.minusDays(0);
        org.joda.time.Interval interval67 = dateMidnight66.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int69 = dateMidnight66.get(dateTimeFieldType68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight16.withField(dateTimeFieldType68, 3);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType68.getField(chronology72);
        boolean boolean74 = timeOfDay13.isSupported(dateTimeFieldType68);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = null;
        java.lang.String str79 = dateTime77.toString(dateTimeFormatter78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = dateTime77.toDateTime(dateTimeZone80);
        org.joda.time.LocalTime localTime82 = dateTime81.toLocalTime();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (-1), chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean87 = dateTime85.isSupported(dateTimeFieldType86);
        org.joda.time.LocalTime.Property property88 = localTime82.property(dateTimeFieldType86);
        org.joda.time.TimeOfDay.Property property89 = timeOfDay13.property(dateTimeFieldType86);
        org.joda.time.TimeOfDay timeOfDay90 = property89.getTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property89.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            int int92 = localDate2.get(dateTimeFieldType91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str22, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str79, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(timeOfDay90);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean4 = localTime1.isEqual((org.joda.time.ReadablePartial) localTime3);
        java.lang.String str5 = localTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime.Property property19 = localTime13.property(dateTimeFieldType17);
        java.lang.String str20 = localTime13.toString();
        boolean boolean21 = localTime3.isBefore((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime.Property property22 = localTime13.secondOfMinute();
        org.joda.time.LocalTime.Property property23 = localTime13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.LocalTime localTime25 = property23.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime27 = localTime25.plusHours(11);
        org.joda.time.LocalTime.Property property28 = localTime27.minuteOfHour();
        org.joda.time.LocalTime localTime29 = property28.withMinimumValue();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.DateTime dateTime35 = property33.addToCopy((int) ' ');
        java.util.Locale locale36 = java.util.Locale.ITALY;
        int int37 = property33.getMaximumShortTextLength(locale36);
        java.lang.String str38 = property28.getAsText(locale36);
        org.joda.time.LocalTime localTime39 = property28.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField40 = property28.getField();
        int int42 = dateTimeField40.get(432864000000L);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getISO3Language();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        org.joda.time.DateTime dateTime51 = property49.addToCopy((int) ' ');
        java.util.Locale locale52 = java.util.Locale.ITALY;
        int int53 = property49.getMaximumShortTextLength(locale52);
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("PT0S");
        int int56 = property49.getMaximumShortTextLength(locale55);
        java.lang.String str57 = locale44.getDisplayVariant(locale55);
        java.lang.String str58 = locale43.getDisplayVariant(locale55);
        int int59 = dateTimeField40.getMaximumShortTextLength(locale43);
        java.util.Set<java.lang.Character> charSet60 = locale43.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.715" + "'", str5, "00:00:00.715");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str10, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00:00:00.682" + "'", str20, "00:00:00.682");
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "deu" + "'", str45, "deu");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(charSet60);
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withWeekyear(41);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYearOfEra((int) '4');
        java.lang.String str59 = localDateTime56.toString();
        java.lang.String str60 = localDateTime56.toString();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime56.withTime(0, 51, 0, 35);
        org.joda.time.Chronology chronology66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period67 = new org.joda.time.Period((java.lang.Object) localDateTime65, chronology66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0041-12-27T00:00:00.682" + "'", str59, "0041-12-27T00:00:00.682");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0041-12-27T00:00:00.682" + "'", str60, "0041-12-27T00:00:00.682");
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) ' ');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean15 = dateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period17 = duration8.toPeriodTo((org.joda.time.ReadableInstant) dateTime13, periodType16);
        org.joda.time.PeriodType periodType18 = periodType16.withWeeksRemoved();
        org.joda.time.Period period19 = duration1.toPeriod(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period((java.lang.Object) duration1);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        int int23 = strSet22.size();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean40 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime42 = dateTime36.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime43 = dateTime42.toLocalDateTime();
        boolean boolean44 = strSet22.equals((java.lang.Object) dateTime42);
        org.joda.time.DateTime dateTime46 = dateTime42.plus((long) 45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime42);
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale50.getLanguage();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.DateTime dateTime58 = property56.addToCopy((int) ' ');
        java.util.Locale locale59 = java.util.Locale.ITALY;
        int int60 = property56.getMaximumShortTextLength(locale59);
        java.util.Locale.setDefault(locale59);
        java.lang.String str62 = locale50.getDisplayCountry(locale59);
        java.lang.String str63 = locale48.getDisplayName(locale59);
        java.util.Calendar calendar64 = dateTime42.toCalendar(locale59);
        calendar64.setFirstDayOfWeek(100141);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = calendar64.isSet(56);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 56");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en" + "'", str52, "en");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "inglese (Canada)" + "'", str63, "inglese (Canada)");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-59011459200001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=100141,minimalDaysInFirstWeek=4,ERA=1,YEAR=100,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        java.lang.String str8 = localTime7.toString();
        org.joda.time.LocalTime localTime10 = localTime7.minusHours((int) 'a');
        int int11 = localTime7.getHourOfDay();
        org.joda.time.LocalTime.Property property12 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property12.roundHalfEvenCopy();
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.682" + "'", str8, "00:00:00.682");
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays(0);
        org.joda.time.Interval interval13 = dateMidnight12.toInterval();
        org.joda.time.Interval interval15 = interval13.withStartMillis((long) 0);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1970, (int) (byte) 100, (int) (byte) 0, (int) (byte) 10);
        mutablePeriod25.setSeconds(59);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod25.toMutablePeriod();
        long long31 = chronology16.add((org.joda.time.ReadablePeriod) mutablePeriod28, (long) (short) 100, 30);
        org.joda.time.Interval interval32 = interval7.withChronology(chronology16);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DateTimeField dateTimeField35 = chronology16.millisOfDay();
        java.lang.String str37 = dateTimeField35.getAsText(0L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime50);
        boolean boolean54 = dateTime50.isAfterNow();
        org.joda.time.DateTime dateTime56 = dateTime50.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime57 = dateTime56.toLocalDateTime();
        int int58 = localDateTime57.getSecondOfMinute();
        int int59 = localDateTime57.getEra();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.plusSeconds(46);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusMinutes(39);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(dateTimeZone64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration74 = duration72.plus((long) 'u');
        mutableDateTime65.add((org.joda.time.ReadableDuration) duration74, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType77.getField(chronology78);
        mutableDateTime65.setRounding(dateTimeField79);
        int int82 = dateTimeField79.getMaximumValue(100L);
        java.util.Locale locale84 = java.util.Locale.GERMANY;
        java.lang.String str85 = dateTimeField79.getAsText(41, locale84);
        java.lang.String str86 = locale84.getDisplayVariant();
        java.lang.String str87 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, locale84);
        org.joda.time.LocalDateTime.Property property88 = localDateTime61.era();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 212941770400L + "'", long31 == 212941770400L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "683" + "'", str37, "683");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 292278993 + "'", int82 == 292278993);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "41" + "'", str85, "41");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "46682" + "'", str87, "46682");
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant14, readableInstant15, periodType16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = period17.normalizedStandard(periodType18);
        org.joda.time.DateTime dateTime21 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 2022);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(16);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        boolean boolean25 = dateTime2.equals((java.lang.Object) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime2.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        int int28 = dateTime26.getEra();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str11, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths((int) (short) 100);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfEvenCopy();
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getISO3Language();
        java.lang.String str15 = locale13.getDisplayLanguage();
        java.lang.String str16 = locale12.getDisplayVariant(locale13);
        org.joda.time.DateTime dateTime17 = property9.setCopy("19", locale12);
        org.joda.time.DateTime dateTime19 = property9.addWrapFieldToCopy((-54));
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "deu" + "'", str14, "deu");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tedesco" + "'", str15, "tedesco");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = mutableDateTime1.getZone();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone4);
        java.util.TimeZone timeZone6 = dateTimeZone4.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        int int1 = strSet0.size();
        java.util.Iterator<java.lang.String> strItor2 = strSet0.iterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 575 + "'", int1 == 575);
        org.junit.Assert.assertNotNull(strItor2);
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) '#');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, periodType22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone19, periodType22);
        org.joda.time.PeriodType periodType25 = periodType22.withDaysRemoved();
        org.joda.time.Period period26 = period11.normalizedStandard(periodType25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 2022, (-60857481599997L), periodType25);
        org.joda.time.PeriodType periodType28 = periodType25.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period29 = new org.joda.time.Period(3, 361, 32772, 461, 9, (-443), 361, 1935, periodType28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1439);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withDefaultYear(101);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("Property[yearOfEra]");
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime17.setZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime17.getZone();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        mutableDateTime15.setZoneRetainFields(dateTimeZone20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean27 = dateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.DateMidnight dateMidnight28 = dateTime25.toDateMidnight();
        boolean boolean29 = mutableDateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime33.getZone();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        mutableDateTime31.setZoneRetainFields(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime25.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = dateTime45.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay52 = dateTime51.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property58 = localDate57.yearOfCentury();
        org.joda.time.LocalDate localDate60 = localDate57.plusWeeks(100);
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property62 = localDate61.yearOfCentury();
        org.joda.time.LocalDate localDate64 = property62.addWrapFieldToCopy(0);
        int int65 = localDate60.compareTo((org.joda.time.ReadablePartial) localDate64);
        org.joda.time.DateMidnight dateMidnight66 = localDate64.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property69 = dateMidnight68.dayOfYear();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.minusDays(0);
        org.joda.time.Interval interval72 = dateMidnight71.toInterval();
        org.joda.time.Interval interval74 = interval72.withStartMillis((long) 0);
        org.joda.time.Chronology chronology75 = interval74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.days();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight66.withChronology(chronology75);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay54.withChronologyRetainFields(chronology75);
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(0L, chronology75);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((java.lang.Object) dateTime25, chronology75);
        org.joda.time.DateTimeField dateTimeField82 = chronology75.dayOfMonth();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) (-1), chronology85);
        org.joda.time.DateTime.Property property87 = dateTime86.yearOfEra();
        org.joda.time.DateTime dateTime89 = property87.addToCopy((int) ' ');
        java.util.Locale locale90 = java.util.Locale.ITALY;
        int int91 = property87.getMaximumShortTextLength(locale90);
        java.util.Locale locale93 = java.util.Locale.forLanguageTag("PT0S");
        int int94 = property87.getMaximumShortTextLength(locale93);
        java.util.Set<java.lang.String> strSet95 = locale93.getUnicodeLocaleKeys();
        java.lang.String str96 = dateTimeField82.getAsShortText((long) 1972, locale93);
        java.lang.String str97 = dateTimeZone12.getName((-1555099569L), locale93);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter98 = dateTimeFormatter6.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology99 = dateTimeFormatter6.getChronolgy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 9 + "'", int91 == 9);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 9 + "'", int94 == 9);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "1" + "'", str96, "1");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "+00:00" + "'", str97, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter98);
        org.junit.Assert.assertNull(chronology99);
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight1, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setYear(1969);
        boolean boolean33 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableDuration) duration40, periodType43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfYear();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(0);
        org.joda.time.Interval interval51 = dateMidnight50.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int53 = dateMidnight50.get(dateTimeFieldType52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight0.withField(dateTimeFieldType52, 3);
        int int56 = dateMidnight0.getDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay57 = dateMidnight0.toYearMonthDay();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(periodType58);
        mutablePeriod59.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray62 = mutablePeriod59.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod63 = mutablePeriod59.toMutablePeriod();
        java.lang.String str64 = mutablePeriod59.toString();
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay57.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay65.withYear(2022);
        int int68 = yearMonthDay67.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay67.plusYears(13);
        int int71 = yearMonthDay70.getYear();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "P35D" + "'", str64, "P35D");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2035 + "'", int71 == 2035);
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        java.lang.String str6 = period3.toString();
        org.joda.time.Period period8 = period3.plusWeeks((int) 'a');
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        mutablePeriod10.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod10.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod10.toMutablePeriod();
        org.joda.time.Period period15 = period3.withFields((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = durationFieldType17.getName();
        boolean boolean19 = mutablePeriod10.isSupported(durationFieldType17);
        mutablePeriod10.setPeriod(0L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = period25.normalizedStandard(periodType26);
        org.joda.time.Period period29 = period27.plusYears(56);
        org.joda.time.Period period30 = period27.negated();
        boolean boolean31 = mutablePeriod10.equals((java.lang.Object) period30);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "minutes" + "'", str18, "minutes");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        boolean boolean2 = strSet1.isEmpty();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(4, 9, 22, (int) '#');
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.LocalTime localTime9 = localTime7.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        boolean boolean11 = strSet1.remove((java.lang.Object) localTime9);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withZone(dateTimeZone21);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 1, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone21, periodType24);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) 12, periodType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        int int30 = mutablePeriod27.indexOf(durationFieldType29);
        org.joda.time.LocalTime localTime32 = localTime9.withFieldAdded(durationFieldType29, 43);
        org.joda.time.DateTime dateTime33 = localTime9.toDateTimeToday();
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(32769, 59, 56);
        java.util.Calendar.Builder builder11 = builder0.setTimeOfDay(9, 54, 40, (int) (byte) -1);
        java.util.Calendar.Builder builder15 = builder11.setDate(46, 84959999, 1973);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder18 = builder11.setWeekDefinition((-18), 5386);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMinutes((int) ' ');
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.minuteOfHour();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay6 = property4.getTimeOfDay();
        java.lang.String str7 = property4.toString();
        int int8 = property4.getMinimumValueOverall();
        java.lang.String str9 = property4.getAsText();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[minuteOfHour]" + "'", str7, "Property[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        int int2 = localDate0.getDayOfWeek();
        int int3 = localDate0.getYear();
        int int4 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property5 = localDate0.yearOfEra();
        int int6 = localDate0.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight0.withWeekyear((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        int int35 = localDate33.getDayOfWeek();
        int int36 = localDate33.getYear();
        int int37 = localDate33.getCenturyOfEra();
        org.joda.time.LocalDate.Property property38 = localDate33.yearOfEra();
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDate33, 32, locale40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(periodType42);
        org.joda.time.MutablePeriod mutablePeriod44 = mutablePeriod43.toMutablePeriod();
        int int45 = mutablePeriod44.getMillis();
        org.joda.time.LocalDate localDate47 = localDate33.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod44, (int) '4');
        org.joda.time.LocalDate localDate49 = localDate33.withYearOfCentury(57);
        org.joda.time.LocalDate localDate51 = localDate49.withWeekyear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.era();
        int int53 = localDate51.get(dateTimeFieldType52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight29.property(dateTimeFieldType52);
        java.lang.String str55 = dateTimeFieldType52.toString();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType52.getDurationType();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20 + "'", int37 == 20);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32" + "'", str41, "32");
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "era" + "'", str55, "era");
        org.junit.Assert.assertNotNull(durationFieldType56);
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 292278993);
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(32, (int) '4', 955, 88, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        long long60 = duration59.getStandardMinutes();
        org.joda.time.Duration duration61 = duration59.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.yearOfEra();
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        boolean boolean69 = period67.isSupported(durationFieldType68);
        java.lang.String str70 = durationFieldType68.toString();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType68);
        org.joda.time.LocalDateTime.Property property72 = localDateTime52.weekyear();
        int int73 = property72.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime75 = property72.addWrapFieldToCopy(3);
        org.joda.time.LocalDateTime localDateTime76 = property72.roundCeilingCopy();
        int int77 = localDateTime76.getDayOfMonth();
        int int78 = localDateTime76.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "years" + "'", str70, "years");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-292275054) + "'", int73 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(dateTimeZone1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        org.joda.time.Interval interval15 = dateMidnight14.toInterval();
        org.joda.time.Interval interval17 = interval15.withStartMillis((long) 0);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay9.withChronologyRetainFields(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.seconds();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) 9, chronology18);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean27 = localTime24.isEqual((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean29 = localTime26.isSupported(dateTimeFieldType28);
        int int30 = dateMidnight22.get(dateTimeFieldType28);
        java.lang.String str31 = dateTimeFieldType28.getName();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "minuteOfHour" + "'", str31, "minuteOfHour");
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        java.lang.String str8 = period7.toString();
        java.lang.String str9 = period7.toString();
        int int10 = period7.getSeconds();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0S" + "'", str9, "PT0S");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusWeeks(15);
        org.joda.time.DateMidnight.Property property10 = dateMidnight7.weekOfWeekyear();
        int int11 = dateMidnight7.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.weekyear();
        java.lang.String str3 = property2.getName();
        org.joda.time.LocalDate localDate5 = property2.addWrapFieldToCopy(12);
        org.joda.time.LocalDate localDate7 = property2.addWrapFieldToCopy(100431);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weekyear" + "'", str3, "weekyear");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        java.lang.String str6 = period3.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.Duration duration16 = period3.toDurationFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant17, readableInstant18, periodType19);
        int int21 = period20.getWeeks();
        org.joda.time.Period period23 = period20.minusHours((int) 'a');
        org.joda.time.Period period25 = period20.plusHours(59);
        org.joda.time.Period period26 = period3.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        java.lang.String str35 = localTime34.toString();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfYear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.minusDays(0);
        org.joda.time.Interval interval41 = dateMidnight40.toInterval();
        org.joda.time.Interval interval43 = interval41.withStartMillis((long) 0);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.days();
        java.lang.String str46 = durationField45.toString();
        org.joda.time.DurationFieldType durationFieldType47 = durationField45.getType();
        boolean boolean48 = localTime34.isSupported(durationFieldType47);
        boolean boolean49 = period26.isSupported(durationFieldType47);
        java.lang.String str50 = durationFieldType47.toString();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "00:00:00.682" + "'", str35, "00:00:00.682");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DurationField[days]" + "'", str46, "DurationField[days]");
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "days" + "'", str50, "days");
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        java.util.Date date1 = new java.util.Date((long) (byte) -1);
        date1.setMinutes(20);
        int int4 = date1.getYear();
        int int5 = date1.getSeconds();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date1);
        int int7 = date1.getMinutes();
        date1.setSeconds(0);
        java.lang.String str10 = date1.toGMTString();
        int int11 = date1.getSeconds();
        date1.setTime(0L);
        date1.setTime(86339999L);
        java.lang.String str16 = date1.toString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 23:58:59 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "31 Dec 1969 23:20:00 GMT" + "'", str10, "31 Dec 1969 23:20:00 GMT");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Thu Jan 01 23:58:59 GMT+00:00 1970" + "'", str16, "Thu Jan 01 23:58:59 GMT+00:00 1970");
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(dateTimeZone13);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay16 = property15.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay18 = property15.addNoWrapToCopy(43);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.hourOfDay();
        int int20 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay18);
        boolean boolean21 = dateTimeField12.isLenient();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 999 + "'", int20 == 999);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.DateTime dateTime14 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 2022);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(periodType15);
        mutablePeriod16.addDays((int) '#');
        org.joda.time.Period period19 = mutablePeriod16.toPeriod();
        org.joda.time.format.PeriodFormatter periodFormatter20 = null;
        java.lang.String str21 = period19.toString(periodFormatter20);
        org.joda.time.DateTime dateTime22 = dateTime2.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.PeriodType periodType23 = period19.getPeriodType();
        int int24 = periodType23.size();
        org.joda.time.PeriodType periodType25 = periodType23.withMinutesRemoved();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "P35D" + "'", str21, "P35D");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(periodType25);
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        java.io.IOException iOException1 = new java.io.IOException("YearWeekDay");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray4 = iOException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        int int11 = dateTime9.getYearOfEra();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime9.toGregorianCalendar();
        long long13 = gregorianCalendar12.getTimeInMillis();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.lang.String str15 = timeZone14.getID();
        int int17 = timeZone14.getOffset((long) 999);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.lang.String str19 = timeZone18.getID();
        boolean boolean20 = timeZone14.hasSameRules(timeZone18);
        boolean boolean21 = timeZone18.observesDaylightTime();
        gregorianCalendar12.setTimeZone(timeZone18);
        timeZone18.setID("Koordinierte Universalzeit");
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        java.util.Locale locale27 = builder26.build();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone18, locale27);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondOfMinute" + "'", str15, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "secondOfMinute" + "'", str19, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455782553,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Koordinierte Universalzeit\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=2,MILLISECOND=553,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor2 = strSet1.iterator();
        java.util.Iterator<java.lang.String> strItor3 = strSet1.iterator();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean20 = dateTime16.isAfterNow();
        org.joda.time.DateTime dateTime22 = dateTime16.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime23 = dateTime22.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean25 = localDateTime23.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setDayOfYear(1);
        int int30 = mutableDateTime27.getSecondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime33.toString(dateTimeFormatter34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration51);
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration51, 23);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        long long64 = duration63.getStandardMinutes();
        org.joda.time.Duration duration65 = duration63.toDuration();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.DateTime.Property property69 = dateTime68.yearOfEra();
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration63, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.years();
        boolean boolean73 = period71.isSupported(durationFieldType72);
        java.lang.String str74 = durationFieldType72.toString();
        boolean boolean75 = localDateTime56.isSupported(durationFieldType72);
        org.joda.time.LocalDateTime.Property property76 = localDateTime56.weekyear();
        int int77 = property76.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime78 = property76.roundCeilingCopy();
        boolean boolean79 = strSet1.equals((java.lang.Object) property76);
        org.joda.time.LocalDateTime localDateTime80 = property76.roundFloorCopy();
        int int81 = localDateTime80.getMonthOfYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str35, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "years" + "'", str74, "years");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-292275054) + "'", int77 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 12 + "'", int81 == 12);
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusDays(10);
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay16.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property18.addWrapFieldToCopy((int) (byte) 1);
        int int21 = property18.getMinimumValue();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime26.toString(dateTimeFormatter27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime(dateTimeZone29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime.Property property47 = dateTime30.year();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight23, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight23, dateTimeZone49);
        mutableDateTime50.setWeekyear(0);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant53, readableInstant54, periodType55);
        int int57 = period56.getWeeks();
        org.joda.time.Period period59 = period56.minusHours((int) 'a');
        mutableDateTime50.add((org.joda.time.ReadablePeriod) period59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant22, (org.joda.time.ReadableInstant) mutableDateTime50);
        int int62 = mutableDateTime50.getRoundingMode();
        int int63 = property18.compareTo((org.joda.time.ReadableInstant) mutableDateTime50);
        mutableDateTime50.setMillis((long) 54152181);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-292275054) + "'", int21 == (-292275054));
        org.junit.Assert.assertNotNull(dateMidnight23);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str28, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period3 = new org.joda.time.Period((long) 1970, (long) 71, periodType2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getDurationType();
        int int6 = periodType2.indexOf(durationFieldType5);
        org.joda.time.PeriodType periodType7 = periodType2.withSecondsRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.dayOfYear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.minusDays(0);
        org.joda.time.Interval interval8 = dateMidnight7.toInterval();
        org.joda.time.Interval interval10 = interval8.withStartMillis((long) 0);
        org.joda.time.Interval interval11 = interval10.toInterval();
        boolean boolean12 = interval10.isAfterNow();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(0);
        org.joda.time.Interval interval18 = dateMidnight17.toInterval();
        org.joda.time.Interval interval20 = interval18.withStartMillis((long) 0);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Interval interval22 = interval10.overlap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Chronology chronology23 = interval10.getChronology();
        org.joda.time.Chronology chronology24 = chronology23.withUTC();
        boolean boolean25 = dateTimeFieldType2.isSupported(chronology24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((-85674L), (long) 14962035, chronology24);
        org.joda.time.Chronology chronology27 = chronology24.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = period13.normalizedStandard(periodType14);
        java.lang.String str16 = period13.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withZone(dateTimeZone24);
        org.joda.time.Duration duration26 = period13.toDurationFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = property30.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str34 = periodType33.getName();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime32, periodType33);
        org.joda.time.DateTime dateTime36 = dateTime7.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = duration45.plus((long) 'u');
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration47, (-1));
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime52.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 1, periodType60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime38, (org.joda.time.ReadableInstant) dateTime58, periodType60);
        mutableDateTime38.setMillis((long) 1969);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) mutableDateTime38);
        long long66 = duration26.getStandardDays();
        org.joda.time.Period period67 = duration26.toPeriod();
        org.joda.time.ReadableDuration readableDuration68 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int69 = duration26.compareTo(readableDuration68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "YearWeekDay" + "'", str34, "YearWeekDay");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.set(23);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int6 = property2.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime8 = property2.add((long) 6);
        mutableDateTime8.setMinuteOfDay(99);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTime();
        mutableDateTime8.setWeekyear(38);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime8.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime20.toString(dateTimeFormatter21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration38);
        long long41 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight42 = property17.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight44 = property17.addToCopy((int) (short) 0);
        org.joda.time.Period period49 = new org.joda.time.Period(22, 0, 24, (int) (short) 1);
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate52 = localDate50.plusYears(10);
        org.joda.time.LocalDate.Property property53 = localDate52.year();
        org.joda.time.LocalDate localDate55 = property53.addToCopy((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField56 = property53.getField();
        org.joda.time.DurationField durationField57 = property53.getLeapDurationField();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = dateTime60.plusMonths((int) (short) 100);
        int int67 = property53.compareTo((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime66.getDayOfWeek();
        org.joda.time.Duration duration69 = period49.toDurationTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(518400000L, chronology71);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration69, (org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.Duration duration76 = duration69.withDurationAdded((long) 0, 54);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight44.plus((org.joda.time.ReadableDuration) duration76);
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period(readableInstant79, readableInstant80, periodType81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = period82.normalizedStandard(periodType83);
        org.joda.time.Period period86 = period84.plusYears(56);
        org.joda.time.Period period87 = period84.negated();
        int int88 = period84.getYears();
        org.joda.time.Period period90 = period84.withMillis(613);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period84);
        org.joda.time.Period period93 = period84.minusMinutes(337);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str22, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime12.toString(dateTimeFormatter13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime.Property property33 = dateTime16.year();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight9, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        mutableDateTime38.setYear(1969);
        boolean boolean41 = dateMidnight9.isEqual((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight.Property property42 = dateMidnight9.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight43 = property42.roundHalfFloorCopy();
        org.joda.time.Interval interval44 = duration8.toIntervalFrom((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Interval interval47 = new org.joda.time.Interval(0L, (long) 12);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfYear();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight49.minusDays(0);
        org.joda.time.Interval interval53 = dateMidnight52.toInterval();
        boolean boolean54 = interval47.isAfter((org.joda.time.ReadableInterval) interval53);
        boolean boolean55 = interval44.overlaps((org.joda.time.ReadableInterval) interval47);
        org.joda.time.DateTime dateTime56 = interval47.getEnd();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (-1), chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration65 = duration63.plus((long) 'u');
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = dateTime68.toString(dateTimeFormatter69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime68.toDateTime(dateTimeZone71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Duration duration79 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (-1), chronology81);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (-1), chronology84);
        org.joda.time.Duration duration86 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableDuration) duration86);
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableDuration) duration86);
        boolean boolean89 = duration65.isEqual((org.joda.time.ReadableDuration) duration86);
        org.joda.time.DateMidnight dateMidnight91 = new org.joda.time.DateMidnight(14962036L);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateMidnight91);
        org.joda.time.DateTime dateTime93 = dateTime56.minus((org.joda.time.ReadablePeriod) mutablePeriod92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime95 = dateTime93.withEra(53947);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53947 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateMidnight9);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str14, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(duration65);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str70, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMinutes((int) ' ');
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.minuteOfHour();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay7 = property4.addToCopy((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusMinutes((int) ' ');
        org.joda.time.TimeOfDay.Property property12 = timeOfDay9.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getISO3Language();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((int) ' ');
        java.util.Locale locale25 = java.util.Locale.ITALY;
        int int26 = property22.getMaximumShortTextLength(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("PT0S");
        int int29 = property22.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale17.getDisplayVariant(locale28);
        java.lang.String str31 = dateTimeField15.getAsText((int) '4', locale28);
        java.lang.String str32 = property12.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getISO3Language();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime44 = property42.addToCopy((int) ' ');
        java.util.Locale locale45 = java.util.Locale.ITALY;
        int int46 = property42.getMaximumShortTextLength(locale45);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("PT0S");
        int int49 = property42.getMaximumShortTextLength(locale48);
        java.lang.String str50 = locale37.getDisplayVariant(locale48);
        java.lang.String str51 = dateTimeField35.getAsText((int) '4', locale48);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getISO3Language();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime60 = property58.addToCopy((int) ' ');
        java.util.Locale locale61 = java.util.Locale.ITALY;
        int int62 = property58.getMaximumShortTextLength(locale61);
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("PT0S");
        int int65 = property58.getMaximumShortTextLength(locale64);
        java.lang.String str66 = locale53.getDisplayVariant(locale64);
        java.lang.String str67 = dateTimeField35.getAsText(1, locale53);
        java.lang.String str68 = locale53.getISO3Language();
        java.lang.String str69 = locale28.getDisplayScript(locale53);
        int int70 = property4.getMaximumTextLength(locale28);
        org.joda.time.TimeOfDay timeOfDay71 = property4.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay72 = property4.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((java.lang.Object) timeOfDay72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "deu" + "'", str18, "deu");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "52" + "'", str31, "52");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "3" + "'", str32, "3");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "deu" + "'", str38, "deu");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "52" + "'", str51, "52");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "deu" + "'", str54, "deu");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "deu" + "'", str68, "deu");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(timeOfDay72);
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.MutablePeriod mutablePeriod2 = mutablePeriod1.toMutablePeriod();
        int int3 = mutablePeriod2.getMillis();
        org.joda.time.PeriodType periodType4 = mutablePeriod2.getPeriodType();
        mutablePeriod2.addMinutes(32769);
        mutablePeriod2.setHours(53810);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Duration duration8 = duration6.toDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((java.lang.Object) duration6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime12.toString(dateTimeFormatter13);
        int int15 = dateTime12.getMillisOfSecond();
        org.joda.time.Period period16 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period18 = period16.minusMinutes(99);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str14, "1970-01-01T00:00:00.682+00:00:00.683");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 682 + "'", int15 == 682);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 12);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime20.getZone();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        mutableDateTime18.setZoneRetainFields(dateTimeZone23);
        long long28 = dateTimeZone23.adjustOffset((long) 49, false);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone23);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period31 = duration1.toPeriod();
        org.joda.time.Period period32 = duration1.toPeriod();
        org.joda.time.Period period34 = period32.withMonths(59);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean51 = dateTime47.isAfterNow();
        org.joda.time.DateTime dateTime53 = dateTime47.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime54 = dateTime53.toLocalDateTime();
        org.joda.time.DateTime dateTime55 = dateTime53.toDateTime();
        int int56 = dateTime55.getSecondOfDay();
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime();
        org.joda.time.DateTime dateTime58 = dateTime55.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration59 = period34.toDurationFrom((org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime58.getYear();
        boolean boolean62 = dateTime58.isAfter(62135596854031L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 49L + "'", long28 == 49L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.DateTime.Property property55 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime54.withCenturyOfEra(10);
        org.joda.time.DateTime.Property property58 = dateTime54.minuteOfDay();
        org.joda.time.DateTime dateTime60 = property58.addWrapFieldToCopy(16);
        org.joda.time.DateTime dateTime61 = property58.roundFloorCopy();
        org.joda.time.DateTime dateTime62 = property58.withMaximumValue();
        int int63 = dateTime62.getEra();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property3.addToCopy((long) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(53);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int) (byte) 1);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime12.withWeekyear(51);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate29 = localDate26.plusWeeks(100);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property31.addWrapFieldToCopy(0);
        int int34 = localDate29.compareTo((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateMidnight dateMidnight35 = localDate33.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfYear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.minusDays(0);
        org.joda.time.Interval interval41 = dateMidnight40.toInterval();
        org.joda.time.Interval interval43 = interval41.withStartMillis((long) 0);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.days();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight35.withChronology(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = org.joda.time.DateMidnight.now(chronology44);
        org.joda.time.DateTime dateTime48 = dateTime12.toDateTime(chronology44);
        java.lang.String str49 = dateTime12.toString();
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZoneRetainFields(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime54.getZone();
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        mutableDateTime52.setZoneRetainFields(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(dateTimeZone57);
        mutableDateTime50.setZoneRetainFields(dateTimeZone57);
        org.joda.time.DateTime dateTime62 = dateTime12.toDateTime(dateTimeZone57);
        int int64 = dateTimeZone57.getOffset((long) 48);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime7.toMutableDateTime(dateTimeZone57);
        int int67 = dateTime7.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str49, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 683 + "'", int64 == 683);
        org.junit.Assert.assertNotNull(mutableDateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        boolean boolean23 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withMinuteOfHour((int) '#');
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withTime(1967, 1869, (int) 'x', 2019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1967 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate localDate4 = localDate0.withYearOfEra(54);
        org.joda.time.DateMidnight dateMidnight5 = localDate0.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.era();
        org.joda.time.DateMidnight.Property property7 = dateMidnight5.year();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("de", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime10.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        mutableDateTime8.setZoneRetainFields(dateTimeZone13);
        boolean boolean16 = strSet6.contains((java.lang.Object) mutableDateTime8);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        boolean boolean19 = strSet18.isEmpty();
        boolean boolean21 = strSet18.equals((java.lang.Object) "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        boolean boolean22 = strSet6.containsAll((java.util.Collection<java.lang.String>) strSet18);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Collection<java.util.Locale> localeCollection26 = null;
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection26);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime33.getZone();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        mutableDateTime31.setZoneRetainFields(dateTimeZone36);
        boolean boolean39 = strSet29.contains((java.lang.Object) mutableDateTime31);
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        boolean boolean42 = strSet41.isEmpty();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        boolean boolean45 = strSet44.isEmpty();
        boolean boolean46 = strSet41.retainAll((java.util.Collection<java.lang.String>) strSet44);
        boolean boolean47 = strSet29.containsAll((java.util.Collection<java.lang.String>) strSet44);
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet29);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfEra();
        org.joda.time.DateTime dateTime54 = property52.addToCopy((int) ' ');
        java.util.Locale locale55 = java.util.Locale.ITALY;
        int int56 = property52.getMaximumShortTextLength(locale55);
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("PT0S");
        int int59 = property52.getMaximumShortTextLength(locale58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.DateTime dateTime65 = property63.addToCopy((int) ' ');
        java.util.Locale locale66 = java.util.Locale.ITALY;
        int int67 = property63.getMaximumShortTextLength(locale66);
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("PT0S");
        int int70 = property63.getMaximumShortTextLength(locale69);
        int int71 = property52.getMaximumTextLength(locale69);
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.lang.String str73 = locale72.getISO3Language();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.DateTime.Property property77 = dateTime76.yearOfEra();
        org.joda.time.DateTime dateTime79 = property77.addToCopy((int) ' ');
        java.util.Locale locale80 = java.util.Locale.ITALY;
        int int81 = property77.getMaximumShortTextLength(locale80);
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("PT0S");
        int int84 = property77.getMaximumShortTextLength(locale83);
        java.lang.String str85 = locale72.getDisplayVariant(locale83);
        java.util.Locale locale86 = java.util.Locale.ITALY;
        java.lang.String str87 = locale83.getDisplayName(locale86);
        java.util.Locale locale88 = java.util.Locale.GERMAN;
        java.lang.String str89 = locale88.getISO3Language();
        java.lang.String str90 = locale83.getDisplayScript(locale88);
        java.lang.String str91 = property52.getAsText(locale88);
        java.util.Set<java.lang.String> strSet92 = locale88.getUnicodeLocaleAttributes();
        java.lang.String str93 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet92);
        boolean boolean94 = strSet6.addAll((java.util.Collection<java.lang.String>) strSet92);
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale locale96 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet97 = locale96.getUnicodeLocaleAttributes();
        int int98 = strSet97.size();
        java.lang.String str99 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet97);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "deu" + "'", str73, "deu");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "deu" + "'", str89, "deu");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1970" + "'", str91, "1970");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "en");
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay3 = property2.withMinimumValue();
        java.lang.String str4 = property2.getAsText();
        int int5 = property2.get();
        org.joda.time.TimeOfDay timeOfDay6 = property2.withMinimumValue();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = localDate9.plusYears(10);
        boolean boolean13 = localDate9.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = dateTime16.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.minusDays(10);
        org.joda.time.Period period26 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) yearMonthDay25);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay25.year();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getISO3Language();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.DateTime dateTime35 = property33.addToCopy((int) ' ');
        java.util.Locale locale36 = java.util.Locale.ITALY;
        int int37 = property33.getMaximumShortTextLength(locale36);
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("PT0S");
        int int40 = property33.getMaximumShortTextLength(locale39);
        java.lang.String str41 = locale28.getDisplayVariant(locale39);
        java.lang.String str42 = property27.getAsText(locale28);
        java.util.Locale.setDefault(locale28);
        java.util.Locale.Builder builder44 = builder8.setLocale(locale28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay45 = property2.setCopy("2022-02-21T00:01:40.411Z", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T00:01:40.411Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3" + "'", str4, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "deu" + "'", str29, "deu");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1978" + "'", str42, "1978");
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean4 = localTime1.isEqual((org.joda.time.ReadablePartial) localTime3);
        java.lang.String str5 = localTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime.Property property19 = localTime13.property(dateTimeFieldType17);
        java.lang.String str20 = localTime13.toString();
        boolean boolean21 = localTime3.isBefore((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime.Property property22 = localTime13.secondOfMinute();
        org.joda.time.LocalTime localTime23 = property22.roundCeilingCopy();
        org.joda.time.LocalTime localTime24 = property22.roundFloorCopy();
        org.joda.time.LocalTime localTime26 = localTime24.plusSeconds(21602);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.715" + "'", str5, "00:00:00.715");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str10, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00:00:00.682" + "'", str20, "00:00:00.682");
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1970, (int) (byte) 100, (int) (byte) 0, (int) (byte) 10);
        mutablePeriod17.setSeconds(59);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod17.toMutablePeriod();
        long long23 = chronology8.add((org.joda.time.ReadablePeriod) mutablePeriod20, (long) (short) 100, 30);
        org.joda.time.DateTimeField dateTimeField24 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology8.millis();
        long long28 = durationField25.getDifferenceAsLong(50395638L, 113604768000000L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 212941770400L + "'", long23 == 212941770400L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-113604717604362L) + "'", long28 == (-113604717604362L));
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtStartOfDay(dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime5 = property4.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime8 = property4.setCopy(26);
        int int9 = property4.get();
        boolean boolean10 = property4.isLeap();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        int int11 = dateTime9.getYearOfEra();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime9.toGregorianCalendar();
        gregorianCalendar12.setTimeInMillis((long) 32772);
        int int15 = gregorianCalendar12.getWeekYear();
        gregorianCalendar12.setMinimalDaysInFirstWeek(16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar30 = dateTime25.toCalendar(locale29);
        int int31 = calendar30.getFirstDayOfWeek();
        java.util.Date date32 = calendar30.getTime();
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.fromCalendarFields(calendar30);
        long long34 = calendar30.getTimeInMillis();
        boolean boolean36 = calendar30.after((java.lang.Object) 0.0f);
        int int37 = gregorianCalendar12.compareTo(calendar30);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property13 = localTime7.property(dateTimeFieldType11);
        org.joda.time.LocalTime localTime14 = property13.getLocalTime();
        org.joda.time.LocalTime localTime16 = localTime14.plusHours(1978);
        org.joda.time.LocalTime.Property property17 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime19 = localTime14.plusSeconds(78);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration39, periodType42);
        mutablePeriod43.addSeconds(42);
        mutablePeriod43.addWeeks((-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withZone(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((long) 100);
        org.joda.time.Duration duration62 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.tz.Provider provider63 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet64 = provider63.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider63);
        boolean boolean66 = mutablePeriod43.equals((java.lang.Object) provider63);
        org.joda.time.DateTimeZone.setProvider(provider63);
        org.joda.time.DateTimeZone.setProvider(provider63);
        org.joda.time.DateTimeZone.setProvider(provider63);
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        long long60 = duration59.getStandardMinutes();
        org.joda.time.Duration duration61 = duration59.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.yearOfEra();
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        boolean boolean69 = period67.isSupported(durationFieldType68);
        java.lang.String str70 = durationFieldType68.toString();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType68);
        org.joda.time.LocalDateTime.Property property72 = localDateTime52.weekyear();
        org.joda.time.LocalDateTime localDateTime73 = property72.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withMillisOfDay(752);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period(readableInstant76, readableInstant77, periodType78);
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.years();
        boolean boolean81 = period79.isSupported(durationFieldType80);
        java.lang.String str82 = period79.toString();
        int int83 = period79.size();
        int int84 = period79.getYears();
        org.joda.time.Period period86 = period79.minusWeeks((int) (byte) 10);
        org.joda.time.PeriodType periodType87 = period79.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period88 = new org.joda.time.Period((java.lang.Object) 752, periodType87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "years" + "'", str70, "years");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PT0S" + "'", str82, "PT0S");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(periodType87);
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = localDate1.withCenturyOfEra(206);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 32772, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = localDate1.toDateMidnight(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withZone(dateTimeZone17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar21 = dateTime16.toCalendar(locale20);
        int int22 = calendar21.getFirstDayOfWeek();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(periodType23);
        boolean boolean25 = calendar21.after((java.lang.Object) mutablePeriod24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weeks();
        boolean boolean27 = mutablePeriod24.isSupported(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight8.withFieldAdded(durationFieldType26, 900);
        java.util.Date date30 = dateMidnight8.toDate();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 20 23:59:59 GMT+00:00 2022");
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("55");
        java.lang.Object obj2 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "");
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 3879);
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withYear(10);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.year();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minusWeeks((-292275054));
        org.joda.time.Period period12 = org.joda.time.Period.weeks(24);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) period12, (-54));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateMidnight10.toString(dateTimeFormatter15);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfYear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays(0);
        org.joda.time.Interval interval22 = dateMidnight21.toInterval();
        org.joda.time.Interval interval24 = interval22.withStartMillis((long) 0);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime31.toString(dateTimeFormatter32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableInstant36, readableInstant37, periodType38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = period39.normalizedStandard(periodType40);
        org.joda.time.DateTime dateTime43 = dateTime31.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 2022);
        org.joda.time.DateTime dateTime45 = dateTime31.plusSeconds(24);
        org.joda.time.DateTime.Property property46 = dateTime45.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property46.getFieldType();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime28.withField(dateTimeFieldType47, (int) '#');
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight10.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateMidnight14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "5601563-06-07T00:00:00.000+00:00:00.683" + "'", str16, "5601563-06-07T00:00:00.000+00:00:00.683");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str33, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateMidnight50);
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addDays((int) '#');
        org.joda.time.Period period4 = mutablePeriod1.toPeriod();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        long long12 = duration11.getStandardMinutes();
        org.joda.time.Duration duration13 = duration11.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        boolean boolean21 = period19.isSupported(durationFieldType20);
        java.lang.String str22 = durationFieldType20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        mutableDateTime24.setDayOfYear(1);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime30 = property27.roundCeiling();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.millisOfSecond();
        org.joda.time.Chronology chronology32 = mutableDateTime30.getChronology();
        boolean boolean33 = durationFieldType20.isSupported(chronology32);
        java.lang.String str34 = durationFieldType20.toString();
        boolean boolean35 = period4.isSupported(durationFieldType20);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "years" + "'", str22, "years");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "years" + "'", str34, "years");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.DateMidnight.Property property5 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight6 = property5.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight7 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = dateTime20.isAfterNow();
        org.joda.time.DateTime dateTime26 = dateTime20.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime27 = dateTime26.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean29 = localDateTime27.isSupported(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setDayOfYear(1);
        int int34 = mutableDateTime31.getSecondOfMinute();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime37.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration55);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime27.withDurationAdded((org.joda.time.ReadableDuration) duration55, 23);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period(readableInstant61, readableInstant62, periodType63);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = period64.normalizedStandard(periodType65);
        org.joda.time.Period period68 = period66.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray69 = period68.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime27.plus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight7.withPeriodAdded((org.joda.time.ReadablePeriod) period68, 44);
        int int73 = dateMidnight72.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight72.minusMonths(338);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str39, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(durationFieldTypeArray69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateMidnight75);
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusHours(19);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(0);
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.Interval interval16 = interval14.withStartMillis((long) 0);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay8.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(dateTimeZone19);
        int int21 = timeOfDay20.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.plusHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        org.joda.time.Interval interval33 = dateMidnight32.toInterval();
        org.joda.time.Interval interval35 = interval33.withStartMillis((long) 0);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.days();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay27.withChronologyRetainFields(chronology36);
        long long40 = chronology17.set((org.joda.time.ReadablePartial) timeOfDay27, (long) 358);
        long long44 = chronology17.add((-259200000L), (long) 23, 29);
        org.joda.time.DateTimeField dateTimeField45 = chronology17.millisOfSecond();
        int int46 = dateTimeField45.getMaximumValue();
        long long48 = dateTimeField45.roundHalfFloor(62009410680000L);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay18);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(timeOfDay38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 50548382L + "'", long40 == 50548382L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-259199333L) + "'", long44 == (-259199333L));
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999 + "'", int46 == 999);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 62009410680000L + "'", long48 == 62009410680000L);
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setDayOfYear(1);
        int int4 = mutableDateTime1.getSecondOfMinute();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration25);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime33.toString(dateTimeFormatter34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTime.Property property54 = dateTime37.year();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight30, dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        mutableDateTime59.setYear(1969);
        boolean boolean62 = dateMidnight30.isEqual((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration71 = duration69.plus((long) 'u');
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableDuration) duration69, periodType72);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property77 = dateMidnight76.dayOfYear();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight76.minusDays(0);
        org.joda.time.Interval interval80 = dateMidnight79.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int82 = dateMidnight79.get(dateTimeFieldType81);
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight29.withField(dateTimeFieldType81, 3);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime1.property(dateTimeFieldType81);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime87 = property86.roundHalfFloor();
        java.lang.String str88 = property86.getAsString();
        org.joda.time.MutableDateTime mutableDateTime90 = property86.add(0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str9, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight30);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str35, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "3" + "'", str88, "3");
        org.junit.Assert.assertNotNull(mutableDateTime90);
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(15);
        org.joda.time.DateTime.Property property13 = dateTime10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate5 = property3.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate6 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.DurationField durationField8 = property3.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField9 = property3.getField();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMinutes((int) ' ');
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.minuteOfHour();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay7 = property4.addToCopy((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withHourOfDay(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(timeOfDay7);
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean15 = dateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period17 = duration8.toPeriodTo((org.joda.time.ReadableInstant) dateTime13, periodType16);
        org.joda.time.PeriodType periodType18 = periodType16.withSecondsRemoved();
        org.joda.time.PeriodType periodType19 = periodType16.withYearsRemoved();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        org.joda.time.Interval interval25 = dateMidnight24.toInterval();
        org.joda.time.Interval interval27 = interval25.withStartMillis((long) 0);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology28);
        long long34 = chronology28.add(18L, (long) 3, 200);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 45, (long) 10, periodType16, chronology28);
        org.joda.time.PeriodType periodType36 = periodType16.withMinutesRemoved();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 618L + "'", long34 == 618L);
        org.junit.Assert.assertNotNull(periodType36);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(64155283300375L);
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        long long7 = duration6.getStandardMinutes();
        org.joda.time.Seconds seconds8 = duration6.toStandardSeconds();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime12.toString(dateTimeFormatter13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime.Property property33 = dateTime16.year();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight.Property property35 = dateMidnight9.yearOfCentury();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = duration42.plus((long) 'u');
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight9.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime51);
        long long53 = duration52.getStandardMinutes();
        org.joda.time.Duration duration54 = duration52.toDuration();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTime();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (-1), chronology65);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableDuration) duration74);
        int int76 = duration52.compareTo((org.joda.time.ReadableDuration) duration74);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight45.withDurationAdded((org.joda.time.ReadableDuration) duration52, 53);
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property81 = dateMidnight80.dayOfYear();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight80.withChronology(chronology82);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight80.withYear(32);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight80.plusWeeks(0);
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.Duration duration90 = org.joda.time.Duration.standardSeconds((long) 48);
        boolean boolean91 = duration52.isEqual((org.joda.time.ReadableDuration) duration90);
        int int92 = duration6.compareTo((org.joda.time.ReadableDuration) duration52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(dateMidnight9);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str14, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = duration33.plus((long) 'u');
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        long long44 = duration43.getStandardMinutes();
        org.joda.time.Duration duration45 = duration43.toDuration();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration65);
        int int67 = duration43.compareTo((org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight36.withDurationAdded((org.joda.time.ReadableDuration) duration43, 53);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property72 = dateMidnight71.dayOfYear();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight71.withChronology(chronology73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight71.withYear(32);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight71.plusWeeks(0);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.MutableDateTime mutableDateTime80 = dateMidnight71.toMutableDateTime();
        org.joda.time.Interval interval81 = dateMidnight71.toInterval();
        org.joda.time.DateTime dateTime82 = interval81.getStart();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 44);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) 12);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime22.getZone();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        mutableDateTime20.setZoneRetainFields(dateTimeZone25);
        long long30 = dateTimeZone25.adjustOffset((long) 49, false);
        org.joda.time.DateTime dateTime31 = dateTime6.toDateTime(dateTimeZone25);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.minusDays(0);
        org.joda.time.Interval interval38 = dateMidnight37.toInterval();
        int int39 = dateMidnight37.getCenturyOfEra();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period41 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight37, periodType40);
        org.joda.time.PeriodType periodType42 = periodType40.withMonthsRemoved();
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.minusDays(0);
        org.joda.time.Interval interval48 = dateMidnight47.toInterval();
        org.joda.time.Interval interval50 = interval48.withStartMillis((long) 0);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.centuries();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.centuryOfEra();
        org.joda.time.DurationField durationField54 = chronology51.halfdays();
        org.joda.time.DurationField durationField55 = chronology51.hours();
        org.joda.time.Period period56 = duration1.toPeriod(periodType42, chronology51);
        org.joda.time.DateTimeField dateTimeField57 = chronology51.yearOfCentury();
        int int58 = dateTimeField57.getMaximumValue();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 49L + "'", long30 == 49L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZone(dateTimeZone21);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar25 = dateTime20.toCalendar(locale24);
        int int26 = calendar25.getFirstDayOfWeek();
        java.util.Date date27 = calendar25.getTime();
        int int28 = calendar25.getWeeksInWeekYear();
        calendar25.set(31, (int) (short) 0, (int) '#');
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone33.observesDaylightTime();
        calendar25.setTimeZone(timeZone33);
        calendar12.setTimeZone(timeZone33);
        java.util.TimeZone.setDefault(timeZone33);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=35,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(2);
        int int2 = period1.getWeeks();
        org.joda.time.Period period4 = period1.withHours(39);
        org.joda.time.Period period6 = period1.plusMillis(86399999);
        org.joda.time.Period period8 = period1.withMinutes(8);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusDays(10);
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay16.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property18.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.Period period22 = org.joda.time.Period.months((int) ' ');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.plus((org.joda.time.ReadablePeriod) period22);
        int int24 = yearMonthDay20.getDayOfMonth();
        org.joda.time.Interval interval25 = yearMonthDay20.toInterval();
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant29, readableInstant30, periodType31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = period32.normalizedStandard(periodType33);
        java.lang.String str35 = period32.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.withZone(dateTimeZone43);
        org.joda.time.Duration duration45 = period32.toDurationFrom((org.joda.time.ReadableInstant) dateTime44);
        mutableDateTime28.add((org.joda.time.ReadableDuration) duration45, 12);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime49.yearOfEra();
        org.joda.time.Interval interval52 = duration45.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime49.weekyear();
        org.joda.time.Instant instant54 = mutableDateTime49.toInstant();
        boolean boolean55 = yearMonthDay20.equals((java.lang.Object) instant54);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 21 + "'", int24 == 21);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0S" + "'", str35, "PT0S");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        java.util.Date date6 = new java.util.Date(53958200, 5386, (int) (byte) 10, 43, 54130817, 54130817);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Jul 02 03:37:17 GMT+00:00 53960653");
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField13 = chronology8.weekyears();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology8);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property13 = localTime7.property(dateTimeFieldType11);
        org.joda.time.LocalTime localTime14 = property13.getLocalTime();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(periodType15);
        mutablePeriod16.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray19 = mutablePeriod16.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod16.toMutablePeriod();
        mutablePeriod16.setPeriod((long) 1969);
        boolean boolean23 = property13.equals((java.lang.Object) 1969);
        org.joda.time.LocalTime localTime24 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime26 = property13.addCopy((long) (short) 100);
        org.joda.time.LocalTime localTime27 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime28 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime29 = property13.roundFloorCopy();
        int int30 = property13.getMaximumValue();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.minusDays(0);
        org.joda.time.Interval interval9 = dateMidnight8.toInterval();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(0L, (long) 12);
        long long13 = interval12.getStartMillis();
        boolean boolean14 = interval9.isAfter((org.joda.time.ReadableInterval) interval12);
        long long15 = interval12.getEndMillis();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusDays(0);
        org.joda.time.Interval interval21 = dateMidnight20.toInterval();
        org.joda.time.Interval interval23 = interval21.withStartMillis((long) 0);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.centuryOfEra();
        org.joda.time.Interval interval27 = interval12.withChronology(chronology24);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 59, chronology24);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(55L, chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 53979, 31536000000L, chronology24);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 12L + "'", long15 == 12L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.DateTime dateTime14 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 2022);
        org.joda.time.LocalDate localDate15 = dateTime2.toLocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        java.lang.String str17 = property16.getAsText();
        org.joda.time.LocalDate localDate18 = property16.roundHalfCeilingCopy();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getISO3Language();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime27 = property25.addToCopy((int) ' ');
        java.util.Locale locale28 = java.util.Locale.ITALY;
        int int29 = property25.getMaximumShortTextLength(locale28);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("PT0S");
        int int32 = property25.getMaximumShortTextLength(locale31);
        java.lang.String str33 = locale20.getDisplayVariant(locale31);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category39, locale41);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getISO3Language();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        org.joda.time.DateTime dateTime51 = property49.addToCopy((int) ' ');
        java.util.Locale locale52 = java.util.Locale.ITALY;
        int int53 = property49.getMaximumShortTextLength(locale52);
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("PT0S");
        int int56 = property49.getMaximumShortTextLength(locale55);
        java.lang.String str57 = locale44.getDisplayVariant(locale55);
        java.util.Locale locale58 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str59 = locale44.getDisplayName(locale58);
        java.util.Locale.setDefault(category39, locale44);
        java.lang.String str61 = dateTimeField37.getAsShortText(113605027200032L, locale44);
        org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property63 = localDate62.yearOfCentury();
        org.joda.time.LocalDate localDate65 = property63.addWrapFieldToCopy(0);
        int[] intArray66 = localDate65.getValues();
        org.joda.time.LocalDate.Property property67 = localDate65.era();
        org.joda.time.LocalDate localDate68 = property67.withMinimumValue();
        org.joda.time.LocalDate localDate70 = localDate68.withWeekOfWeekyear((int) (short) 1);
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.lang.String str74 = locale72.getExtension('u');
        java.lang.String str75 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDate68, 37, locale72);
        java.lang.String str76 = locale72.getDisplayScript();
        java.lang.String str77 = locale31.getDisplayVariant(locale72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate78 = property16.setCopy("0104-05-10T10:00:00.050", locale31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0104-05-10T10:00:00.050\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Januar" + "'", str17, "Januar");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "deu" + "'", str21, "deu");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645455783838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=3,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "deu" + "'", str45, "deu");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "allemand" + "'", str59, "allemand");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "5570" + "'", str61, "5570");
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2022, 2, 21]");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "37" + "'", str75, "37");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = dateTime5.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime12 = dateTime9.withDayOfYear(335);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        org.joda.time.Period period8 = new org.joda.time.Period(41, (int) ' ', 9, 100, 0, 15, (int) 'u', (int) '#');
        int int9 = period8.getMonths();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.addWrapField(8);
        boolean boolean16 = period8.equals((java.lang.Object) 8);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant17, readableInstant18, periodType19);
        int int21 = period20.getMonths();
        java.lang.String str22 = period20.toString();
        org.joda.time.Period period23 = period20.normalizedStandard();
        org.joda.time.Period period25 = period23.plusDays(59);
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime.Property property50 = dateTime33.year();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight26, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight26, dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        mutableDateTime55.setYear(1969);
        boolean boolean58 = dateMidnight26.isEqual((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Duration duration67 = duration65.plus((long) 'u');
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight26, (org.joda.time.ReadableDuration) duration65, periodType68);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology71 = null;
        boolean boolean72 = durationFieldType70.isSupported(chronology71);
        boolean boolean73 = periodType68.isSupported(durationFieldType70);
        org.joda.time.Period period75 = period25.withFieldAdded(durationFieldType70, 9);
        org.joda.time.Period period77 = period8.withField(durationFieldType70, 85746557);
        int int78 = period8.getWeeks();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateMidnight26);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withChronology(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withYear(32);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withYearOfCentury(55);
        org.joda.time.Period period10 = org.joda.time.Period.millis(100);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant11, readableInstant12, periodType13);
        int int15 = period14.getMonths();
        java.lang.String str16 = period14.toString();
        org.joda.time.Period period17 = period14.normalizedStandard();
        org.joda.time.Period period18 = period10.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DurationFieldType[] durationFieldTypeArray19 = period14.getFieldTypes();
        org.joda.time.Period period21 = period14.plusMonths(56);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period21);
        int int23 = dateMidnight1.getDayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldTypeArray19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        java.lang.Object obj3 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.minusDays(0);
        org.joda.time.Interval interval9 = dateMidnight8.toInterval();
        org.joda.time.Interval interval11 = interval9.withStartMillis((long) 0);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.centuryOfEra();
        org.joda.time.DurationField durationField15 = chronology12.halfdays();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(obj3, chronology12);
        org.joda.time.Period period17 = new org.joda.time.Period(20L, (long) (short) 100, chronology12);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.dayOfWeek();
        org.joda.time.DurationField durationField19 = chronology12.millis();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(100431L, chronology12);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        java.lang.String[] strArray30 = new java.lang.String[] { "999", "32", "999", "hi!", "54", "allemand", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=35,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", "de", "en", "P35D", "1970", "1978", "1", "tedesco", "999", "2022-02-21", "32", "de", "Property[dayOfYear]", "2022-02-21T00:01:40.436Z", "DateTimeField[year]", "T14:55:02.317", "deu", "Koordinierte Universalzeit", "55", "en", "1978", "gregory", "Etc/UTC", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = duration41.plus((long) 'u');
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration43, (-1));
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration56, (-1));
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime67 = dateTime61.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 1, periodType69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, (org.joda.time.ReadableInstant) dateTime67, periodType69);
        mutableDateTime47.setMillis((long) 1969);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.Duration duration80 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Duration duration82 = duration80.plus((long) 'u');
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (-1), chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean87 = dateTime85.isSupported(dateTimeFieldType86);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period89 = duration80.toPeriodTo((org.joda.time.ReadableInstant) dateTime85, periodType88);
        org.joda.time.Period period90 = duration43.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime47, periodType88);
        boolean boolean91 = strSet31.remove((java.lang.Object) periodType88);
        java.util.stream.Stream<java.lang.String> strStream92 = strSet31.stream();
        java.util.stream.Stream<java.lang.String> strStream93 = strSet31.stream();
        java.util.Locale locale94 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet95 = locale94.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream96 = strSet95.parallelStream();
        java.util.Iterator<java.lang.String> strItor97 = strSet95.iterator();
        boolean boolean98 = strSet31.removeAll((java.util.Collection<java.lang.String>) strSet95);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strStream92);
        org.junit.Assert.assertNotNull(strStream93);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "de");
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(strStream96);
        org.junit.Assert.assertNotNull(strItor97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        long long13 = dateTimeField10.set((long) ' ', "55");
        long long16 = dateTimeField10.addWrapField(15120000029L, 52);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra(56);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getISO3Language();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((int) ' ');
        java.util.Locale locale30 = java.util.Locale.ITALY;
        int int31 = property27.getMaximumShortTextLength(locale30);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("PT0S");
        int int34 = property27.getMaximumShortTextLength(locale33);
        java.lang.String str35 = locale22.getDisplayVariant(locale33);
        java.lang.String str36 = locale22.toLanguageTag();
        java.lang.String str37 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime20, locale22);
        int int40 = dateTimeField10.getDifference(63776592000064L, (long) (byte) -1);
        long long43 = dateTimeField10.getDifferenceAsLong((long) 89, (long) 54452714);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 113605027200032L + "'", long13 == 113605027200032L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 164111270400029L + "'", long16 == 164111270400029L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "deu" + "'", str23, "deu");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "de" + "'", str36, "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "56" + "'", str37, "56");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20 + "'", int40 == 20);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration15.plus((long) 'u');
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration17, (-1));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime22.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 1, periodType30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateTime28, periodType30);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.minusDays(0);
        org.joda.time.Interval interval38 = dateMidnight37.toInterval();
        org.joda.time.Interval interval40 = interval38.withStartMillis((long) 0);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 50, periodType30, chronology41);
        org.joda.time.Period period43 = new org.joda.time.Period((long) 2022, (long) 45, chronology41);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (byte) 100, (long) 5, chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(49L, 0L, chronology41);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate49 = localDate47.plusYears(10);
        boolean boolean51 = localDate47.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = dateTime54.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay61 = dateTime60.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.minusDays(10);
        org.joda.time.Period period64 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) yearMonthDay63);
        int[] intArray66 = chronology41.get((org.joda.time.ReadablePartial) yearMonthDay63, (long) 292278993);
        org.joda.time.DurationField durationField67 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField68 = chronology41.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField69 = chronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField70 = chronology41.weekyear();
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1970, 1, 4]");
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.DateTime dateTime14 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 2022);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime2.toMutableDateTime(chronology17);
        int int19 = mutableDateTime18.getSecondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = mutableDateTime18.getRoundingField();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZone(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar33 = dateTime28.toCalendar(locale32);
        int int34 = calendar33.getFirstDayOfWeek();
        java.util.Date date35 = calendar33.getTime();
        int int36 = calendar33.getWeeksInWeekYear();
        calendar33.set(31, (int) (short) 0, (int) '#');
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime();
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant51, readableInstant52, periodType53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = period54.normalizedStandard(periodType55);
        java.lang.String str57 = period54.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = dateTime63.withZone(dateTimeZone65);
        org.joda.time.Duration duration67 = period54.toDurationFrom((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.DateTime.Property property71 = dateTime70.yearOfEra();
        org.joda.time.DateTime dateTime73 = property71.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str75 = periodType74.getName();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime73, periodType74);
        org.joda.time.DateTime dateTime77 = dateTime48.minus((org.joda.time.ReadableDuration) duration67);
        boolean boolean78 = calendar33.before((java.lang.Object) duration67);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardMinutes((long) 20);
        boolean boolean81 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration80);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration80, 100);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime(dateTimeZone84);
        mutableDateTime85.setDayOfYear(1);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        mutableDateTime85.setZone(dateTimeZone88);
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime85.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime92 = property90.addWrapField(53847);
        org.joda.time.Period period93 = duration80.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime92);
        java.lang.String str94 = duration80.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=35,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT0S" + "'", str57, "PT0S");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "YearWeekDay" + "'", str75, "YearWeekDay");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(mutableDateTime92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "PT1200S" + "'", str94, "PT1200S");
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period5.minusDays(0);
        org.joda.time.Period period9 = period5.withMonths((int) 'a');
        org.joda.time.Period period10 = period5.toPeriod();
        org.joda.time.Period period12 = period10.minusDays(42);
        org.joda.time.Period period14 = period10.minusSeconds(100912);
        org.joda.time.Period period16 = period14.plusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType18 = period16.getFieldType(347);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.DateTime dateTime14 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 2022);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime2.toMutableDateTime(chronology17);
        int int19 = mutableDateTime18.getSecondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = mutableDateTime18.getRoundingField();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZone(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar33 = dateTime28.toCalendar(locale32);
        int int34 = calendar33.getFirstDayOfWeek();
        java.util.Date date35 = calendar33.getTime();
        int int36 = calendar33.getWeeksInWeekYear();
        calendar33.set(31, (int) (short) 0, (int) '#');
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime();
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant51, readableInstant52, periodType53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = period54.normalizedStandard(periodType55);
        java.lang.String str57 = period54.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = dateTime63.withZone(dateTimeZone65);
        org.joda.time.Duration duration67 = period54.toDurationFrom((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.DateTime.Property property71 = dateTime70.yearOfEra();
        org.joda.time.DateTime dateTime73 = property71.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str75 = periodType74.getName();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime73, periodType74);
        org.joda.time.DateTime dateTime77 = dateTime48.minus((org.joda.time.ReadableDuration) duration67);
        boolean boolean78 = calendar33.before((java.lang.Object) duration67);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardMinutes((long) 20);
        boolean boolean81 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration80);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration80, 100);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime18.yearOfCentury();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=35,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT0S" + "'", str57, "PT0S");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "YearWeekDay" + "'", str75, "YearWeekDay");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusDays(10);
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.LocalDate localDate19 = localDate0.plusWeeks(23);
        org.joda.time.LocalDate localDate21 = localDate19.plusMonths(3);
        org.joda.time.LocalDate.Property property22 = localDate19.weekOfWeekyear();
        org.joda.time.LocalDate localDate23 = property22.withMinimumValue();
        java.util.Date date24 = localDate23.toDate();
        java.time.Instant instant25 = date24.toInstant();
        java.util.Date date26 = java.util.Date.from(instant25);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Jan 03 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Jan 03 00:00:00 GMT+00:00 2022");
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        java.lang.String str1 = periodType0.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PeriodType[DayTime]" + "'", str1, "PeriodType[DayTime]");
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        boolean boolean3 = strSet2.isEmpty();
        java.util.Iterator<java.lang.String> strItor4 = strSet2.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strItor4);
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getISO3Language();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime13 = property11.addToCopy((int) ' ');
        java.util.Locale locale14 = java.util.Locale.ITALY;
        int int15 = property11.getMaximumShortTextLength(locale14);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("PT0S");
        int int18 = property11.getMaximumShortTextLength(locale17);
        java.lang.String str19 = locale6.getDisplayVariant(locale17);
        java.lang.String str20 = dateTimeField4.getAsText((int) '4', locale17);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getISO3Language();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((int) ' ');
        java.util.Locale locale30 = java.util.Locale.ITALY;
        int int31 = property27.getMaximumShortTextLength(locale30);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("PT0S");
        int int34 = property27.getMaximumShortTextLength(locale33);
        java.lang.String str35 = locale22.getDisplayVariant(locale33);
        java.lang.String str36 = dateTimeField4.getAsText(1, locale22);
        java.lang.String str37 = locale22.getISO3Language();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone1, locale22);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("DurationField[days]");
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone1, locale40);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.fromCalendarFields(calendar41);
        int int44 = calendar41.get(11);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "deu" + "'", str7, "deu");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "52" + "'", str20, "52");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "deu" + "'", str23, "deu");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645455784221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=4,MILLISECOND=221,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645455784221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=4,MILLISECOND=221,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 15 + "'", int44 == 15);
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addYears((int) (short) 0);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = period7.normalizedStandard(periodType8);
        org.joda.time.Period period11 = period9.minusDays(0);
        mutablePeriod1.mergePeriod((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period14 = period9.withMillis(827);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1000L);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateTime22.toString(dateTimeFormatter23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration40);
        long long43 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology45 = null;
        boolean boolean46 = durationFieldType44.isSupported(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime26.withFieldAdded(durationFieldType44, 69);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Duration duration62 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = duration62.plus((long) 'u');
        mutableDateTime55.add((org.joda.time.ReadableDuration) duration64, (-1));
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.Duration duration73 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = dateTime69.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 1, periodType77);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime55, (org.joda.time.ReadableInstant) dateTime75, periodType77);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property82 = dateMidnight81.dayOfYear();
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight81.minusDays(0);
        org.joda.time.Interval interval85 = dateMidnight84.toInterval();
        org.joda.time.Interval interval87 = interval85.withStartMillis((long) 0);
        org.joda.time.Chronology chronology88 = interval87.getChronology();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 50, periodType77, chronology88);
        org.joda.time.Period period90 = new org.joda.time.Period((long) 2022, (long) 45, chronology88);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((long) (byte) 100, (long) 5, chronology88);
        org.joda.time.DateTimeField dateTimeField92 = chronology88.hourOfDay();
        org.joda.time.DurationField durationField93 = durationFieldType44.getField(chronology88);
        org.joda.time.LocalDate localDate94 = org.joda.time.LocalDate.now(chronology88);
        org.joda.time.DateTime dateTime95 = dateTime16.toDateTime(chronology88);
        org.joda.time.DateTime dateTime97 = dateTime16.plusMinutes(13);
        org.joda.time.Interval interval98 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period14, (org.joda.time.ReadableInstant) dateTime16);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str24, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(localDate94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(0L, (long) 12);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays(0);
        org.joda.time.Interval interval17 = dateMidnight16.toInterval();
        boolean boolean18 = interval11.isAfter((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTime dateTime19 = interval11.getStart();
        boolean boolean20 = interval7.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(dateTimeZone21);
        int int23 = timeOfDay22.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay22.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay25.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime30 = timeOfDay25.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay25.plusMillis((int) (short) -1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = dateTime35.toString(dateTimeFormatter36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.toDateTime(dateTimeZone38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean45 = dateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.LocalTime.Property property46 = localTime40.property(dateTimeFieldType44);
        java.lang.String str47 = dateTimeFieldType44.toString();
        org.joda.time.TimeOfDay.Property property48 = timeOfDay25.property(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = timeOfDay50.toDateTimeToday();
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period62 = new org.joda.time.Period(100L, periodType61);
        org.joda.time.Period period63 = new org.joda.time.Period((int) '4', (-292275054), (int) (short) 1, 1970, 45, 5, (int) (short) 0, (int) (byte) 0, periodType61);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay25, (org.joda.time.ReadablePartial) timeOfDay50, periodType61);
        org.joda.time.PeriodType periodType65 = periodType61.withHoursRemoved();
        org.joda.time.PeriodType periodType66 = periodType61.withMillisRemoved();
        org.joda.time.PeriodType periodType67 = periodType61.withMinutesRemoved();
        org.joda.time.Period period68 = interval7.toPeriod(periodType67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType70 = periodType67.getFieldType(955);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 955");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay32);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str37, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "minuteOfHour" + "'", str47, "minuteOfHour");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        long long60 = duration59.getStandardMinutes();
        org.joda.time.Duration duration61 = duration59.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.yearOfEra();
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        boolean boolean69 = period67.isSupported(durationFieldType68);
        java.lang.String str70 = durationFieldType68.toString();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType68);
        org.joda.time.LocalDateTime.Property property72 = localDateTime52.weekyear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime52.minusHours(24);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.millisOfSecond();
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.lang.String str78 = locale77.getISO3Language();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.DateTime.Property property82 = dateTime81.yearOfEra();
        org.joda.time.DateTime dateTime84 = property82.addToCopy((int) ' ');
        java.util.Locale locale85 = java.util.Locale.ITALY;
        int int86 = property82.getMaximumShortTextLength(locale85);
        java.util.Locale locale88 = java.util.Locale.forLanguageTag("PT0S");
        int int89 = property82.getMaximumShortTextLength(locale88);
        java.lang.String str90 = locale77.getDisplayVariant(locale88);
        java.util.Locale locale91 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str92 = locale77.getDisplayName(locale91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime93 = property75.setCopy("2022-01-01T15:01:07.243Z", locale91);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-01-01T15:01:07.243Z\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "years" + "'", str70, "years");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "deu" + "'", str78, "deu");
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "allemand" + "'", str92, "allemand");
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight.Property property27 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight29 = property27.addWrapFieldToCopy((int) 'u');
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight31 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean36 = localTime33.isEqual((org.joda.time.ReadablePartial) localTime35);
        java.lang.String str37 = localTime35.toString();
        org.joda.time.LocalTime localTime39 = localTime35.minusMillis(3);
        org.joda.time.LocalTime.Property property40 = localTime35.minuteOfHour();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = dateTime43.toString(dateTimeFormatter44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime(dateTimeZone46);
        org.joda.time.LocalTime localTime48 = dateTime47.toLocalTime();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean53 = dateTime51.isSupported(dateTimeFieldType52);
        org.joda.time.LocalTime.Property property54 = localTime48.property(dateTimeFieldType52);
        int int55 = localTime35.get(dateTimeFieldType52);
        org.joda.time.DateMidnight.Property property56 = dateMidnight31.property(dateTimeFieldType52);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight31, periodType57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight31.withMillis(1654527611369L);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "00:00:00.715" + "'", str37, "00:00:00.715");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str45, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight60);
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withDayOfWeek(2);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMinutes((int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean31 = dateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime19.property(dateTimeFieldType30);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getISO3Language();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime41 = property39.addToCopy((int) ' ');
        java.util.Locale locale42 = java.util.Locale.ITALY;
        int int43 = property39.getMaximumShortTextLength(locale42);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("PT0S");
        int int46 = property39.getMaximumShortTextLength(locale45);
        java.lang.String str47 = locale34.getDisplayVariant(locale45);
        java.lang.String str48 = localDateTime19.toString("70", locale34);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime19.plusSeconds(54111051);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "deu" + "'", str35, "deu");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "70" + "'", str48, "70");
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.plusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay9.year();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.addWrapFieldToCopy(100375);
        java.lang.String str20 = property17.getAsText();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        int int32 = dateTime30.getYearOfEra();
        java.util.GregorianCalendar gregorianCalendar33 = dateTime30.toGregorianCalendar();
        long long34 = gregorianCalendar33.getTimeInMillis();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.lang.String str36 = timeZone35.getID();
        int int38 = timeZone35.getOffset((long) 999);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.lang.String str40 = timeZone39.getID();
        boolean boolean41 = timeZone35.hasSameRules(timeZone39);
        boolean boolean42 = timeZone39.observesDaylightTime();
        gregorianCalendar33.setTimeZone(timeZone39);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        mutableDateTime45.setZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime45.getZone();
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.lang.String str52 = dateTimeZone48.getShortName((long) 35, locale51);
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleAttributes();
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone39, locale51);
        java.lang.String str55 = property17.getAsShortText(locale51);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1978" + "'", str20, "1978");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "secondOfMinute" + "'", str36, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "secondOfMinute" + "'", str40, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.683" + "'", str52, "+00:00:00.683");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645455784418,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=4,MILLISECOND=418,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1978" + "'", str55, "1978");
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        java.lang.String str6 = period3.toString();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.Period period13 = period3.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Seconds seconds14 = period13.toStandardSeconds();
        org.joda.time.Period period15 = period13.toPeriod();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period17 = period13.normalizedStandard(periodType16);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = dateTime23.toString(dateTimeFormatter24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration41);
        long long44 = property20.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = durationFieldType45.isSupported(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime27.withFieldAdded(durationFieldType45, 69);
        int int50 = periodType16.indexOf(durationFieldType45);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(periodType16);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.eras();
        int int53 = periodType16.indexOf(durationFieldType52);
        java.lang.String str54 = durationFieldType52.getName();
        java.lang.String str55 = durationFieldType52.getName();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str25, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "eras" + "'", str54, "eras");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "eras" + "'", str55, "eras");
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration39, periodType42);
        mutablePeriod43.addSeconds(42);
        mutablePeriod43.addWeeks((-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withZone(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((long) 100);
        org.joda.time.Duration duration62 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = dateTime61.plusSeconds(33);
        int int65 = dateTime61.getHourOfDay();
        org.joda.time.DateTime.Property property66 = dateTime61.weekyear();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.dayOfYear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.minusDays(0);
        org.joda.time.Interval interval8 = dateMidnight7.toInterval();
        org.joda.time.Interval interval10 = interval8.withStartMillis((long) 0);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1970, (int) (byte) 100, (int) (byte) 0, (int) (byte) 10);
        mutablePeriod20.setSeconds(59);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod20.toMutablePeriod();
        long long26 = chronology11.add((org.joda.time.ReadablePeriod) mutablePeriod23, (long) (short) 100, 30);
        org.joda.time.DateTimeField dateTimeField27 = chronology11.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology11.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(32556613, 85, 346, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 212941770400L + "'", long26 == 212941770400L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(0);
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        boolean boolean16 = interval7.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        long long17 = interval7.toDurationMillis();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.minusDays(0);
        org.joda.time.Interval interval23 = dateMidnight22.toInterval();
        org.joda.time.Interval interval25 = interval23.withStartMillis((long) 0);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfYear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.minusDays(0);
        org.joda.time.Interval interval32 = dateMidnight31.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = interval32.toMutableInterval();
        boolean boolean34 = interval25.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        boolean boolean35 = interval7.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval36 = interval7.toMutableInterval();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86399317L + "'", long17 == 86399317L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(mutableInterval36);
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property3.addToCopy((int) ' ');
        java.util.Locale locale6 = java.util.Locale.ITALY;
        int int7 = property3.getMaximumShortTextLength(locale6);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("PT0S");
        int int10 = property3.getMaximumShortTextLength(locale9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) ' ');
        java.util.Locale locale17 = java.util.Locale.ITALY;
        int int18 = property14.getMaximumShortTextLength(locale17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("PT0S");
        int int21 = property14.getMaximumShortTextLength(locale20);
        int int22 = property3.getMaximumTextLength(locale20);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getISO3Language();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.DateTime dateTime30 = property28.addToCopy((int) ' ');
        java.util.Locale locale31 = java.util.Locale.ITALY;
        int int32 = property28.getMaximumShortTextLength(locale31);
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("PT0S");
        int int35 = property28.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale23.getDisplayVariant(locale34);
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale34.getDisplayName(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale34.getDisplayScript(locale39);
        java.lang.String str42 = property3.getAsText(locale39);
        java.util.Set<java.lang.String> strSet43 = locale39.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime49 = property47.addToCopy((int) ' ');
        java.util.Locale locale50 = java.util.Locale.ITALY;
        int int51 = property47.getMaximumShortTextLength(locale50);
        java.util.Locale.setDefault(locale50);
        java.util.Locale locale53 = locale50.stripExtensions();
        boolean boolean54 = locale53.hasExtensions();
        java.lang.String str55 = locale39.getDisplayName(locale53);
        java.lang.String str56 = locale39.getLanguage();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "deu" + "'", str24, "deu");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "deu" + "'", str40, "deu");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970" + "'", str42, "1970");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tedesco" + "'", str55, "tedesco");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "de" + "'", str56, "de");
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.plusYears(10);
        boolean boolean5 = localDate1.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusDays(10);
        org.joda.time.Period period18 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate1, (org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay17.year();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getISO3Language();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime27 = property25.addToCopy((int) ' ');
        java.util.Locale locale28 = java.util.Locale.ITALY;
        int int29 = property25.getMaximumShortTextLength(locale28);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("PT0S");
        int int32 = property25.getMaximumShortTextLength(locale31);
        java.lang.String str33 = locale20.getDisplayVariant(locale31);
        java.lang.String str34 = property19.getAsText(locale20);
        java.util.Locale.setDefault(locale20);
        java.util.Locale.Builder builder36 = builder0.setLocale(locale20);
        java.util.Locale locale37 = builder36.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder39 = builder36.setVariant("1964-06-18T23:59:59.999Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1964-06-18T23:59:59.999Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "deu" + "'", str21, "deu");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1978" + "'", str34, "1978");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withDayOfWeek(2);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMinutes((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        java.lang.String str30 = dateTimeFieldType27.toString();
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.property(dateTimeFieldType27);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        mutableDateTime35.setZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime35.getZone();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        mutableDateTime33.setZoneRetainFields(dateTimeZone38);
        long long43 = dateTimeZone38.adjustOffset((long) 49, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime45 = localDateTime26.toDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime26.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "year" + "'", str30, "year");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 49L + "'", long43 == 49L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withWeekOfWeekyear((int) (short) 1);
        int int8 = dateMidnight5.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withWeekyear(200);
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime.Property property21 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = property21.addWrapFieldToCopy(2013);
        int int24 = property21.getMaximumValueOverall();
        org.joda.time.DateTime dateTime25 = property21.withMaximumValue();
        boolean boolean26 = dateMidnight10.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.set(23);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int6 = property2.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime8 = property2.add((long) 6);
        mutableDateTime8.setMinuteOfDay(99);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusDays(0);
        org.joda.time.Interval interval16 = dateMidnight15.toInterval();
        org.joda.time.Interval interval18 = interval16.withStartMillis((long) 0);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.yearOfEra();
        int int24 = mutableDateTime8.get(dateTimeField23);
        boolean boolean26 = mutableDateTime8.isEqual(50214866L);
        mutableDateTime8.addWeeks(11);
        mutableDateTime8.addMillis(2002);
        mutableDateTime8.setTime(113604768000000L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.plusYears(10);
        boolean boolean5 = localDate1.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusDays(10);
        org.joda.time.Period period18 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate1, (org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay17.year();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getISO3Language();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime27 = property25.addToCopy((int) ' ');
        java.util.Locale locale28 = java.util.Locale.ITALY;
        int int29 = property25.getMaximumShortTextLength(locale28);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("PT0S");
        int int32 = property25.getMaximumShortTextLength(locale31);
        java.lang.String str33 = locale20.getDisplayVariant(locale31);
        java.lang.String str34 = property19.getAsText(locale20);
        java.util.Locale.setDefault(locale20);
        java.util.Locale.Builder builder36 = builder0.setLocale(locale20);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getISO3Language();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime44 = property42.addToCopy((int) ' ');
        java.util.Locale locale45 = java.util.Locale.ITALY;
        int int46 = property42.getMaximumShortTextLength(locale45);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("PT0S");
        int int49 = property42.getMaximumShortTextLength(locale48);
        java.lang.String str50 = locale37.getDisplayVariant(locale48);
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.lang.String str52 = locale48.getDisplayName(locale51);
        java.util.Locale.Builder builder53 = builder0.setLocale(locale48);
        java.util.Locale.Builder builder55 = builder0.addUnicodeLocaleAttribute("tedesco");
        java.util.Locale.Builder builder57 = builder0.removeUnicodeLocaleAttribute("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder59 = builder0.setLanguage("Sat Oct 08 00:00:00 GMT 3340");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Sat Oct 08 00:00:00 GMT 3340 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "deu" + "'", str21, "deu");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1978" + "'", str34, "1978");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "deu" + "'", str38, "deu");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration21.plus((long) 'u');
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration23, (-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime34, periodType36);
        mutableDateTime14.setMillis((long) 1969);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean54 = dateTime52.isSupported(dateTimeFieldType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period56 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime52, periodType55);
        org.joda.time.Period period57 = duration10.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime14, periodType55);
        org.joda.time.DateMidnight dateMidnight58 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = dateTime61.toString(dateTimeFormatter62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = dateTime61.toDateTime(dateTimeZone64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Duration duration79 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableDuration) duration79);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateTime.Property property82 = dateTime65.year();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight58, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateMidnight.Property property84 = dateMidnight58.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight86 = property84.addWrapFieldToCopy((int) 'u');
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateMidnight86);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateMidnight58);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str63, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateMidnight86);
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType4);
        org.joda.time.Period period7 = period5.plusDays(2022);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period9 = period7.withPeriodType(periodType8);
        java.lang.String str10 = periodType8.getName();
        boolean boolean12 = periodType8.equals((java.lang.Object) "centuries");
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(periodType13);
        mutablePeriod14.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray17 = mutablePeriod14.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod14.toMutablePeriod();
        mutablePeriod18.setYears(292278993);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay34 = dateTime33.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate42 = localDate39.plusWeeks(100);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property44 = localDate43.yearOfCentury();
        org.joda.time.LocalDate localDate46 = property44.addWrapFieldToCopy(0);
        int int47 = localDate42.compareTo((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateMidnight dateMidnight48 = localDate46.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfYear();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.minusDays(0);
        org.joda.time.Interval interval54 = dateMidnight53.toInterval();
        org.joda.time.Interval interval56 = interval54.withStartMillis((long) 0);
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.days();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight48.withChronology(chronology57);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay36.withChronologyRetainFields(chronology57);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(0L, chronology57);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 0, (long) 1969, chronology57);
        mutablePeriod18.add(50080131L, chronology57);
        org.joda.time.Period period65 = new org.joda.time.Period((long) 56, 1645455443261L, periodType8, chronology57);
        org.joda.time.PeriodType periodType66 = periodType8.withWeeksRemoved();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "YearMonthDay" + "'", str10, "YearMonthDay");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(periodType66);
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant33, readableInstant34, periodType35);
        int int37 = period36.getWeeks();
        org.joda.time.PeriodType periodType38 = period36.getPeriodType();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight0.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 21);
        org.joda.time.Period period42 = period36.withMinutes(28);
        org.joda.time.Period period44 = period36.minusHours((-54));
        org.joda.time.Period period45 = period44.normalizedStandard();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.DateTime dateTime15 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 2022);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime3.toDateTime(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = dateTime17.toLocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.withYear(1969);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.LocalDate localDate22 = property21.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        mutableDateTime0.setRounding(dateTimeField23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundFloor();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime29 = property25.set("14.06.1956 00:00:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"14.06.1956 00:00:00\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = property26.addWrapFieldToCopy((int) 'u');
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight30 = property29.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean35 = localTime32.isEqual((org.joda.time.ReadablePartial) localTime34);
        java.lang.String str36 = localTime34.toString();
        org.joda.time.LocalTime localTime38 = localTime34.minusMillis(3);
        org.joda.time.LocalTime.Property property39 = localTime34.minuteOfHour();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime42.toDateTime(dateTimeZone45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean52 = dateTime50.isSupported(dateTimeFieldType51);
        org.joda.time.LocalTime.Property property53 = localTime47.property(dateTimeFieldType51);
        int int54 = localTime34.get(dateTimeFieldType51);
        org.joda.time.DateMidnight.Property property55 = dateMidnight30.property(dateTimeFieldType51);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight30.withWeekyear(30);
        int int58 = dateMidnight30.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "00:00:00.715" + "'", str36, "00:00:00.715");
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str44, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20 + "'", int58 == 20);
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withWeekyear(41);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.weekOfWeekyear();
        int int58 = localDateTime56.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.plusSeconds(40);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withDate(358, 6, 14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = localDateTime60.withEra(1978);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1978 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getISO3Language();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.DateTime dateTime11 = property9.addToCopy((int) ' ');
        java.util.Locale locale12 = java.util.Locale.ITALY;
        int int13 = property9.getMaximumShortTextLength(locale12);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("PT0S");
        int int16 = property9.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale4.getDisplayVariant(locale15);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale4.getDisplayName(locale18);
        int int20 = property3.getMaximumShortTextLength(locale18);
        org.joda.time.DateTime dateTime21 = property3.withMinimumValue();
        int int22 = dateTime21.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "deu" + "'", str5, "deu");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "allemand" + "'", str19, "allemand");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.set(23);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int6 = property2.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime8 = property2.add((long) 6);
        org.joda.time.MutableDateTime mutableDateTime9 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfCeiling();
        int int12 = mutableDateTime11.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(0, 345, 54070091, 1990, 24, 53780, 100158);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1990 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property3.addToCopy((int) ' ');
        java.util.Locale locale6 = java.util.Locale.ITALY;
        int int7 = property3.getMaximumShortTextLength(locale6);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("PT0S");
        int int10 = property3.getMaximumShortTextLength(locale9);
        org.joda.time.DateTime dateTime11 = property3.roundHalfFloorCopy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableInstant19, readableInstant20, periodType21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = period22.normalizedStandard(periodType23);
        java.lang.String str25 = period22.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.withZone(dateTimeZone33);
        org.joda.time.Duration duration35 = period22.toDurationFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration36 = duration18.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(dateTimeZone37);
        int int39 = timeOfDay38.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay38.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.plusHours((int) (byte) -1);
        boolean boolean46 = duration35.equals((java.lang.Object) timeOfDay45);
        org.joda.time.DateTime dateTime48 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration35, 53);
        int int49 = dateTime11.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 19 + "'", int49 == 19);
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant14, readableInstant15, periodType16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = period17.normalizedStandard(periodType18);
        java.lang.String str20 = period17.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.withZone(dateTimeZone28);
        org.joda.time.Duration duration30 = period17.toDurationFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration31 = duration13.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(dateTimeZone32);
        int int34 = timeOfDay33.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay33.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.plusHours((int) (byte) -1);
        boolean boolean41 = duration30.equals((java.lang.Object) timeOfDay40);
        boolean boolean42 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period43 = duration30.toPeriod();
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        int int4 = period3.getWeeks();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant5, readableInstant6, periodType7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = period8.normalizedStandard(periodType9);
        org.joda.time.Period period12 = period10.minusDays(0);
        org.joda.time.Period period13 = period3.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period15 = period13.minusYears(0);
        org.joda.time.Period period17 = period13.plusDays(752);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(periodType18);
        mutablePeriod19.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray22 = mutablePeriod19.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod19.toMutablePeriod();
        java.lang.String str24 = mutablePeriod19.toString();
        mutablePeriod19.addMinutes(40);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(0L, (long) 12);
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 1, periodType43);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone40, periodType43);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) 12, periodType43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        int int49 = mutablePeriod46.indexOf(durationFieldType48);
        mutablePeriod19.add(durationFieldType48, 100);
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property53 = localDate52.yearOfCentury();
        org.joda.time.LocalDate localDate55 = localDate52.plusWeeks(100);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property57 = localDate56.yearOfCentury();
        org.joda.time.LocalDate localDate59 = property57.addWrapFieldToCopy(0);
        int int60 = localDate55.compareTo((org.joda.time.ReadablePartial) localDate59);
        org.joda.time.DateMidnight dateMidnight61 = localDate59.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property64 = dateMidnight63.dayOfYear();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.minusDays(0);
        org.joda.time.Interval interval67 = dateMidnight66.toInterval();
        org.joda.time.Interval interval69 = interval67.withStartMillis((long) 0);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.days();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight61.withChronology(chronology70);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(chronology70);
        org.joda.time.DurationField durationField74 = durationFieldType48.getField(chronology70);
        org.joda.time.Period period76 = period17.withField(durationFieldType48, 683);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldTypeArray22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P35D" + "'", str24, "P35D");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay3 = property2.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay5 = property2.addToCopy(56);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableInstant6, readableInstant7, periodType8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        java.lang.String str12 = period9.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withZone(dateTimeZone20);
        org.joda.time.Duration duration22 = period9.toDurationFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant23, readableInstant24, periodType25);
        int int27 = period26.getWeeks();
        org.joda.time.Period period29 = period26.minusHours((int) 'a');
        org.joda.time.Period period31 = period26.plusHours(59);
        org.joda.time.Period period32 = period9.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay5.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay5.secondOfMinute();
        int int35 = property34.get();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0S" + "'", str12, "PT0S");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1022-02-21");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property13 = localTime7.property(dateTimeFieldType11);
        java.lang.String str14 = localTime7.toString();
        org.joda.time.LocalTime localTime16 = localTime7.withMillisOfDay(2922789);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "00:00:00.682" + "'", str14, "00:00:00.682");
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property13 = localTime7.property(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property14 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime15 = property14.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime16 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean21 = localTime18.isEqual((org.joda.time.ReadablePartial) localTime20);
        java.lang.String str22 = localTime20.toString();
        org.joda.time.LocalTime localTime24 = localTime20.minusMillis(3);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.hours();
        boolean boolean26 = localTime24.isSupported(durationFieldType25);
        java.lang.String str27 = durationFieldType25.toString();
        org.joda.time.LocalTime localTime29 = localTime16.withFieldAdded(durationFieldType25, 2023);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "00:00:00.715" + "'", str22, "00:00:00.715");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hours" + "'", str27, "hours");
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        java.util.Date date1 = new java.util.Date((long) (byte) -1);
        date1.setMinutes(20);
        int int4 = date1.getYear();
        int int5 = date1.getYear();
        java.util.Date date7 = new java.util.Date((long) (byte) -1);
        date7.setMinutes(20);
        int int10 = date7.getYear();
        int int11 = date7.getSeconds();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromDateFields(date7);
        int int13 = date7.getDate();
        int int14 = date7.getTimezoneOffset();
        java.lang.String str15 = date7.toLocaleString();
        java.lang.String str16 = date7.toGMTString();
        boolean boolean17 = date1.before(date7);
        int int18 = date7.getMinutes();
        org.junit.Assert.assertEquals(date1.toString(), "Wed Dec 31 23:20:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 69 + "'", int5 == 69);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:20:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 69 + "'", int10 == 69);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31.12.1969 23:20:59" + "'", str15, "31.12.1969 23:20:59");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "31 Dec 1969 23:20:59 GMT" + "'", str16, "31 Dec 1969 23:20:59 GMT");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration15.plus((long) 'u');
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration17, (-1));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime22.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 1, periodType30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateTime28, periodType30);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.minusDays(0);
        org.joda.time.Interval interval38 = dateMidnight37.toInterval();
        org.joda.time.Interval interval40 = interval38.withStartMillis((long) 0);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 50, periodType30, chronology41);
        org.joda.time.Period period43 = new org.joda.time.Period((long) 2022, (long) 45, chronology41);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (byte) 100, (long) 5, chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(49L, 0L, chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.hourOfDay();
        long long50 = dateTimeField47.getDifferenceAsLong(100L, 26L);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.dayOfYear();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.minusDays(0);
        org.joda.time.Interval interval56 = dateMidnight55.toInterval();
        org.joda.time.Interval interval58 = interval56.withStartMillis((long) 0);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.centuries();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.centuryOfEra();
        long long64 = dateTimeField61.set((long) ' ', "55");
        long long67 = dateTimeField61.addWrapField(15120000029L, 52);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withCenturyOfEra(56);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.hourOfDay();
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str74 = locale73.getISO3Language();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.DateTime.Property property78 = dateTime77.yearOfEra();
        org.joda.time.DateTime dateTime80 = property78.addToCopy((int) ' ');
        java.util.Locale locale81 = java.util.Locale.ITALY;
        int int82 = property78.getMaximumShortTextLength(locale81);
        java.util.Locale locale84 = java.util.Locale.forLanguageTag("PT0S");
        int int85 = property78.getMaximumShortTextLength(locale84);
        java.lang.String str86 = locale73.getDisplayVariant(locale84);
        java.lang.String str87 = locale73.toLanguageTag();
        java.lang.String str88 = dateTimeField61.getAsText((org.joda.time.ReadablePartial) localDateTime71, locale73);
        java.util.Locale locale89 = locale73.stripExtensions();
        java.util.Locale locale90 = locale73.stripExtensions();
        int int91 = dateTimeField47.getMaximumShortTextLength(locale73);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 113605027200032L + "'", long64 == 113605027200032L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 164111270400029L + "'", long67 == 164111270400029L);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "deu" + "'", str74, "deu");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "de" + "'", str87, "de");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "56" + "'", str88, "56");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "de");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusDays(10);
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay16.minusMonths((-54));
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay16.minusDays(22);
        org.joda.time.DateTime dateTime22 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay16.minusDays(1965);
        org.joda.time.Chronology chronology25 = yearMonthDay16.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.centuries();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfCentury();
        long long12 = dateTimeField10.roundCeiling((long) (short) 1);
        int int13 = dateTimeField10.getMinimumValue();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate18 = localDate16.plusYears(10);
        boolean boolean20 = localDate16.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime23.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime29.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.minusDays(10);
        org.joda.time.Period period33 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) yearMonthDay32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay32.year();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getISO3Language();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime42 = property40.addToCopy((int) ' ');
        java.util.Locale locale43 = java.util.Locale.ITALY;
        int int44 = property40.getMaximumShortTextLength(locale43);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("PT0S");
        int int47 = property40.getMaximumShortTextLength(locale46);
        java.lang.String str48 = locale35.getDisplayVariant(locale46);
        java.lang.String str49 = property34.getAsText(locale35);
        java.util.Locale.setDefault(locale35);
        java.util.Locale.Builder builder51 = builder15.setLocale(locale35);
        java.util.Locale.Builder builder52 = builder15.clearExtensions();
        java.util.Locale.Builder builder54 = builder52.addUnicodeLocaleAttribute("Januar");
        java.util.Locale.Builder builder55 = builder52.clear();
        java.util.Locale locale56 = builder52.build();
        java.lang.String str57 = dateTimeField10.getAsShortText(86399975, locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField10.getType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 31535999317L + "'", long12 == 31535999317L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1978" + "'", str49, "1978");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "86399975" + "'", str57, "86399975");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 32);
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime4 = property2.addWrapFieldToCopy(8);
        org.joda.time.LocalTime localTime6 = property2.addWrapFieldToCopy(2);
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(54480953);
        org.joda.time.LocalTime localTime10 = localTime6.minusHours((int) '4');
        org.joda.time.LocalTime localTime12 = localTime6.withMillisOfDay(2031);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration21.plus((long) 'u');
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration23, (-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime34, periodType36);
        mutableDateTime14.setMillis((long) 1969);
        mutableDateTime14.addHours(2022);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration51 = duration49.plus((long) 'u');
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean56 = dateTime54.isSupported(dateTimeFieldType55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period58 = duration49.toPeriodTo((org.joda.time.ReadableInstant) dateTime54, periodType57);
        boolean boolean59 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime54);
        mutableDateTime14.setWeekyear(4);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime14.centuryOfEra();
        mutableDateTime14.addWeeks(45);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime14.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime66 = property65.roundHalfFloor();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property69 = dateMidnight68.dayOfYear();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.minusDays(0);
        org.joda.time.Interval interval72 = dateMidnight71.toInterval();
        org.joda.time.Interval interval74 = interval72.withStartMillis((long) 0);
        org.joda.time.Chronology chronology75 = interval74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.days();
        java.lang.String str77 = durationField76.toString();
        org.joda.time.DurationFieldType durationFieldType78 = durationField76.getType();
        org.joda.time.Chronology chronology79 = null;
        boolean boolean80 = durationFieldType78.isSupported(chronology79);
        mutableDateTime66.add(durationFieldType78, 100);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.TimeOfDay timeOfDay84 = new org.joda.time.TimeOfDay(dateTimeZone83);
        org.joda.time.TimeOfDay timeOfDay86 = timeOfDay84.minusMinutes((int) ' ');
        org.joda.time.TimeOfDay.Property property87 = timeOfDay84.minuteOfHour();
        int int88 = property87.get();
        org.joda.time.DurationField durationField89 = property87.getRangeDurationField();
        java.lang.String str90 = property87.getName();
        org.joda.time.DurationField durationField91 = property87.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property87.getFieldType();
        int int93 = mutableDateTime66.get(dateTimeFieldType92);
        int int94 = localTime12.indexOf(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "DurationField[days]" + "'", str77, "DurationField[days]");
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(timeOfDay86);
        org.junit.Assert.assertNotNull(property87);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "minuteOfHour" + "'", str90, "minuteOfHour");
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property1.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(8);
        int int6 = localDate5.getWeekyear();
        org.joda.time.DateMidnight dateMidnight7 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime11.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime.Property property32 = dateTime15.year();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight8, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        mutableDateTime37.setYear(1969);
        boolean boolean40 = dateMidnight8.isEqual((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableDuration) duration47, periodType50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.minusDays(0);
        org.joda.time.Interval interval58 = dateMidnight57.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int60 = dateMidnight57.get(dateTimeFieldType59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight7.withField(dateTimeFieldType59, 3);
        int int63 = dateMidnight7.getDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay64 = dateMidnight7.toYearMonthDay();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(periodType65);
        mutablePeriod66.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray69 = mutablePeriod66.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod70 = mutablePeriod66.toMutablePeriod();
        java.lang.String str71 = mutablePeriod66.toString();
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay64.minus((org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.Interval interval73 = yearMonthDay72.toInterval();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        mutableDateTime77.setZoneRetainFields(dateTimeZone78);
        org.joda.time.DateTimeZone dateTimeZone80 = mutableDateTime77.getZone();
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.now(dateTimeZone80);
        mutableDateTime75.setZoneRetainFields(dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(dateTimeZone80);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone80);
        org.joda.time.DateTime dateTime85 = yearMonthDay72.toDateTimeAtMidnight(dateTimeZone80);
        boolean boolean86 = localDate5.equals((java.lang.Object) yearMonthDay72);
        org.joda.time.LocalDate localDate88 = localDate5.plusWeeks(54158);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str13, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(durationFieldTypeArray69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "P35D" + "'", str71, "P35D");
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(localDate88);
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("5601564-06-06T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime15.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 1, periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime21, periodType23);
        mutableDateTime1.setMillis((long) 1969);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        mutableDateTime31.setZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime31.getZone();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        mutableDateTime29.setZoneRetainFields(dateTimeZone34);
        long long39 = dateTimeZone34.convertLocalToUTC((long) 17, true);
        int int41 = dateTimeZone34.getOffsetFromLocal((long) (short) 100);
        mutableDateTime1.setZone(dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-666L) + "'", long39 == (-666L));
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 683 + "'", int41 == 683);
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withWeekyear(41);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYearOfEra((int) '4');
        int int59 = localDateTime58.getWeekyear();
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.plusWeeks(37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = localDateTime58.withSecondOfMinute(683);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 683 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration11.plus((long) 'u');
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration13, (-1));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, periodType26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateTime24, periodType26);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfYear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusDays(0);
        org.joda.time.Interval interval34 = dateMidnight33.toInterval();
        org.joda.time.Interval interval36 = interval34.withStartMillis((long) 0);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 50, periodType26, chronology37);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 2022, (long) 45, chronology37);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.halfdayOfDay();
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(chronology37);
        org.joda.time.LocalDate localDate44 = localDate42.withYear(1971);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType46 = localDate42.getFieldType((-7194));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -7194");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime20.getZone();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        mutableDateTime18.setZoneRetainFields(dateTimeZone23);
        long long28 = dateTimeZone23.adjustOffset((long) 49, false);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone23);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) 9, dateTimeZone23);
        java.lang.String str31 = interval30.toString();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate36 = localDate34.plusYears(10);
        boolean boolean38 = localDate34.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = dateTime41.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay48 = dateTime47.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.minusDays(10);
        org.joda.time.Period period51 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) yearMonthDay50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean56 = dateTime54.isSupported(dateTimeFieldType55);
        org.joda.time.DateMidnight dateMidnight57 = dateTime54.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.Duration duration60 = period51.toDurationTo((org.joda.time.ReadableInstant) dateMidnight59);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration60, 86399);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = dateTime68.withZone(dateTimeZone70);
        org.joda.time.DateTime.Property property72 = dateTime68.dayOfWeek();
        org.joda.time.DateTime dateTime74 = property72.addToCopy((long) 20);
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) dateTime74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval76 = interval30.withStart((org.joda.time.ReadableInstant) mutableDateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 49L + "'", long28 == 49L);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.684+00:00:00.683/1970-01-01T00:00:00.692+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.684+00:00:00.683/1970-01-01T00:00:00.692+00:00:00.683");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = period5.normalizedStandard(periodType6);
        java.lang.String str8 = period5.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withZone(dateTimeZone16);
        org.joda.time.Duration duration18 = period5.toDurationFrom((org.joda.time.ReadableInstant) dateTime17);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration18, 12);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.yearOfEra();
        org.joda.time.Interval interval25 = duration18.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration41, (-1));
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime46.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 1, periodType54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateTime52, periodType54);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.dayOfYear();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minusDays(0);
        org.joda.time.Interval interval62 = dateMidnight61.toInterval();
        org.joda.time.Interval interval64 = interval62.withStartMillis((long) 0);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 50, periodType54, chronology65);
        org.joda.time.Period period67 = new org.joda.time.Period((long) 2022, (long) 45, chronology65);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) (byte) 100, (long) 5, chronology65);
        org.joda.time.DateTimeField dateTimeField69 = chronology65.millisOfSecond();
        org.joda.time.Period period70 = duration18.toPeriod(chronology65);
        org.joda.time.Minutes minutes71 = duration18.toStandardMinutes();
        org.joda.time.Duration duration72 = duration18.toDuration();
        long long73 = duration72.getStandardMinutes();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(dateTimeZone5);
        int int7 = timeOfDay6.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.minusDays(0);
        org.joda.time.Interval interval19 = dateMidnight18.toInterval();
        org.joda.time.Interval interval21 = interval19.withStartMillis((long) 0);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay13.withChronologyRetainFields(chronology22);
        org.joda.time.DurationField durationField25 = chronology22.seconds();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) 9, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(231, 54114, 0, 54080, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 231 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration21.plus((long) 'u');
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration23, (-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime34, periodType36);
        mutableDateTime14.setMillis((long) 1969);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean54 = dateTime52.isSupported(dateTimeFieldType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period56 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime52, periodType55);
        org.joda.time.Period period57 = duration10.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime14, periodType55);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property59 = localDate58.yearOfCentury();
        org.joda.time.LocalDate localDate61 = localDate58.plusWeeks(100);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = dateTime64.toString(dateTimeFormatter65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime(dateTimeZone67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period(readableInstant69, readableInstant70, periodType71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = period72.normalizedStandard(periodType73);
        org.joda.time.DateTime dateTime76 = dateTime64.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 2022);
        org.joda.time.LocalDate localDate78 = localDate58.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 0);
        mutableDateTime14.add((org.joda.time.ReadablePeriod) period72, 40);
        org.joda.time.Period period82 = period72.withYears(23);
        org.joda.time.Period period84 = period72.plusMonths(32);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate61);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str66, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(0);
        int int8 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate10 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(337);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = dateTime5.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        int int11 = dateTime9.getYearOfEra();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime9.toGregorianCalendar();
        org.joda.time.DateTime dateTime14 = dateTime9.withDayOfYear(43);
        org.joda.time.DateTime dateTime16 = dateTime9.withYear((-631));
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        int int5 = localDate3.getDayOfWeek();
        int int6 = localDate3.getYear();
        int int7 = localDate3.getCenturyOfEra();
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfEra();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDate3, 32, locale10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType12);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.toMutablePeriod();
        int int15 = mutablePeriod14.getMillis();
        org.joda.time.LocalDate localDate17 = localDate3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) '4');
        org.joda.time.LocalDate localDate19 = localDate3.withYearOfCentury(57);
        org.joda.time.LocalDate localDate21 = localDate19.minusYears(86399999);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str24 = dateTimeZone22.getName((long) 42);
        org.joda.time.Interval interval25 = localDate19.toInterval(dateTimeZone22);
        java.lang.String str26 = dateTimeZone22.getID();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.683" + "'", str24, "+00:00:00.683");
        org.junit.Assert.assertNotNull(interval25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.683" + "'", str26, "+00:00:00.683");
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.Chronology chronology6 = mutableDateTime5.getChronology();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime10.toString(dateTimeFormatter11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant15, readableInstant16, periodType17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = period18.normalizedStandard(periodType19);
        org.joda.time.DateTime dateTime22 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 2022);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime10.toDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = dateTime24.toLocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.withYear(1969);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfMonth();
        java.util.Date date30 = new java.util.Date((long) (byte) -1);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.fromDateFields(date30);
        org.joda.time.LocalDate localDate33 = localDate31.plusWeeks((int) (short) 100);
        org.joda.time.LocalDate localDate34 = localDate27.withFields((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate.Property property35 = localDate27.era();
        org.joda.time.LocalDate localDate37 = localDate27.minusYears(40);
        org.joda.time.LocalDate localDate39 = localDate27.withYearOfEra((int) '#');
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 59);
        mutablePeriod41.addSeconds(11);
        mutablePeriod41.addDays((-1));
        org.joda.time.Period period46 = mutablePeriod41.toPeriod();
        org.joda.time.LocalDate localDate48 = localDate27.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod41, 100);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight7.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight7.plusYears(100441);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight7.plusDays((-1));
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str12, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        long long60 = duration59.getStandardMinutes();
        org.joda.time.Duration duration61 = duration59.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.yearOfEra();
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        boolean boolean69 = period67.isSupported(durationFieldType68);
        java.lang.String str70 = durationFieldType68.toString();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType68);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime52.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime75 = localDateTime52.minusMillis(19);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.hourOfDay();
        org.joda.time.LocalDateTime localDateTime77 = property76.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "years" + "'", str70, "years");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.DateTime dateTime15 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 2022);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType17 = periodType16.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) dateTime3, periodType17);
        org.joda.time.DateTime dateTime20 = dateTime3.minusWeeks(2023);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        java.lang.Object obj5 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minusDays(0);
        org.joda.time.Interval interval11 = dateMidnight10.toInterval();
        org.joda.time.Interval interval13 = interval11.withStartMillis((long) 0);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.DurationField durationField17 = chronology14.halfdays();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(obj5, chronology14);
        org.joda.time.Period period19 = new org.joda.time.Period(20L, (long) (short) 100, chronology14);
        org.joda.time.Period period20 = new org.joda.time.Period(20L, 0L, chronology14);
        org.joda.time.Period period21 = new org.joda.time.Period((long) 1965, chronology14);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology14.getDateTimeMillis(88, 1935, (-758), 29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1935 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        org.joda.time.LocalDate localDate5 = property3.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate6 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        long long9 = dateTimeField7.roundHalfFloor((long) 100431);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        java.util.Date date15 = new java.util.Date((long) (byte) -1);
        date15.setMinutes(20);
        int int18 = date15.getYear();
        int int19 = date15.getSeconds();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromDateFields(date15);
        int int21 = date15.getDate();
        calendar12.setTime(date15);
        calendar12.set(46, 6, 999);
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromCalendarFields(calendar12);
        calendar12.setMinimalDaysInFirstWeek(0);
        java.lang.Object obj30 = calendar12.clone();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-60613749540001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=49,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=5,DAY_OF_MONTH=25,DAY_OF_YEAR=84,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=21,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:20:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 69 + "'", int18 == 69);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "java.util.GregorianCalendar[time=-60613749540001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=49,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=5,DAY_OF_MONTH=25,DAY_OF_YEAR=84,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=21,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "java.util.GregorianCalendar[time=-60613749540001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=49,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=5,DAY_OF_MONTH=25,DAY_OF_YEAR=84,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=21,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "java.util.GregorianCalendar[time=-60613749540001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=49,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=5,DAY_OF_MONTH=25,DAY_OF_YEAR=84,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=21,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.set(23);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int8 = dateTimeField5.getDifference((long) 99, (long) 20);
        java.lang.String str10 = dateTimeField5.getAsShortText((long) 47);
        boolean boolean11 = dateTimeField5.isSupported();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime15.toString(dateTimeFormatter16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime(dateTimeZone18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean25 = dateTime23.isSupported(dateTimeFieldType24);
        org.joda.time.LocalTime.Property property26 = localTime20.property(dateTimeFieldType24);
        org.joda.time.LocalTime localTime27 = property26.withMinimumValue();
        int int28 = property26.getLeapAmount();
        org.joda.time.LocalTime localTime30 = property26.setCopy(56);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(dateTimeZone32);
        int int34 = timeOfDay33.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay33.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.plusHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.minusDays(0);
        org.joda.time.Interval interval46 = dateMidnight45.toInterval();
        org.joda.time.Interval interval48 = interval46.withStartMillis((long) 0);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.days();
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay40.withChronologyRetainFields(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.seconds();
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) 9, chronology49);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean58 = localTime55.isEqual((org.joda.time.ReadablePartial) localTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean60 = localTime57.isSupported(dateTimeFieldType59);
        int int61 = dateMidnight53.get(dateTimeFieldType59);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight53.withYearOfEra(54);
        java.util.Locale locale67 = new java.util.Locale("", "inglese", "52");
        java.util.Calendar calendar68 = dateMidnight63.toCalendar(locale67);
        int int69 = property26.getMaximumTextLength(locale67);
        java.lang.String str70 = dateTimeField5.getAsShortText(22, locale67);
        java.lang.String str71 = locale67.getDisplayCountry();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str17, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertEquals(locale67.toString(), "_INGLESE_52");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-60463065600683,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=54,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "22" + "'", str70, "22");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "INGLESE" + "'", str71, "INGLESE");
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime30.getZone();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        mutableDateTime28.setZoneRetainFields(dateTimeZone33);
        long long38 = dateTimeZone33.adjustOffset((long) 49, false);
        org.joda.time.DateTime dateTime39 = dateTime14.toDateTime(dateTimeZone33);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) 9, dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone33);
        int int42 = localDateTime41.getEra();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(stringBuffer9, (org.joda.time.ReadablePartial) localDateTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 49L + "'", long38 == 49L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("PT118380S", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime20.getZone();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        mutableDateTime18.setZoneRetainFields(dateTimeZone23);
        long long28 = dateTimeZone23.adjustOffset((long) 49, false);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone23);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) 9, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int32 = localDateTime31.getEra();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.yearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = property33.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(360000000);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.monthOfYear();
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = localDateTime36.toString("14:55:13.255", locale39);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 49L + "'", long28 == 49L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "14:55:13.255" + "'", str40, "14:55:13.255");
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        boolean boolean10 = interval8.isAfterNow();
        org.joda.time.Chronology chronology11 = interval8.getChronology();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays(0);
        org.joda.time.Interval interval17 = dateMidnight16.toInterval();
        org.joda.time.Interval interval19 = interval17.withStartMillis((long) 0);
        org.joda.time.Interval interval20 = interval19.toInterval();
        boolean boolean21 = interval19.isAfterNow();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.minusDays(0);
        org.joda.time.Interval interval27 = dateMidnight26.toInterval();
        org.joda.time.Interval interval29 = interval27.withStartMillis((long) 0);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.Interval interval31 = interval19.overlap((org.joda.time.ReadableInterval) interval30);
        boolean boolean33 = interval31.contains((long) 'a');
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant38, readableInstant39, periodType40);
        org.joda.time.Period period43 = period41.plusDays(2022);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.dayOfYear();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.minusDays(0);
        org.joda.time.Interval interval50 = dateMidnight49.toInterval();
        org.joda.time.Interval interval52 = interval50.withStartMillis((long) 0);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        boolean boolean54 = interval44.contains((org.joda.time.ReadableInterval) interval52);
        boolean boolean55 = interval31.abuts((org.joda.time.ReadableInterval) interval52);
        boolean boolean56 = interval8.overlaps((org.joda.time.ReadableInterval) interval52);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(0L, (long) 12);
        long long9 = interval8.getStartMillis();
        boolean boolean10 = interval5.isAfter((org.joda.time.ReadableInterval) interval8);
        long long11 = interval8.getEndMillis();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays(0);
        org.joda.time.Interval interval17 = dateMidnight16.toInterval();
        org.joda.time.Interval interval19 = interval17.withStartMillis((long) 0);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.centuryOfEra();
        org.joda.time.Interval interval23 = interval8.withChronology(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.days();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology20);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology20);
        int int28 = dateMidnight27.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 12L + "'", long11 == 12L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(2L);
        int int2 = mutablePeriod1.getWeeks();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 28);
        int int2 = localDateTime1.getMillisOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 711 + "'", int2 == 711);
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration9 = duration7.plus((long) 'u');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = dateTime12.isSupported(dateTimeFieldType13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period16 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime12, periodType15);
        org.joda.time.PeriodType periodType17 = periodType15.withWeeksRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withSecondsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withMillisRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period(1654527667136L, periodType18);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period3.withMinutes((-85));
        org.joda.time.Period period8 = period3.normalizedStandard();
        org.joda.time.Period period9 = period8.negated();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 100126, chronology1);
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("centuryOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"centuryOfEra\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(periodType14);
        boolean boolean16 = calendar12.after((java.lang.Object) mutablePeriod15);
        int int18 = calendar12.getGreatestMinimum(0);
        calendar12.set(32, 0, 54);
        calendar12.setFirstDayOfWeek(53);
        calendar12.set(46, (int) (short) -1, (int) (byte) 0, 32769, 38, 100);
        calendar12.set(45, 1832, (int) (byte) -1, 50, 32, 0);
        boolean boolean39 = calendar12.isWeekDateSupported();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=53,minimalDaysInFirstWeek=1,ERA=1,YEAR=45,MONTH=1832,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=-1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=50,MINUTE=32,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMinutes((int) ' ');
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getISO3Language();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) ' ');
        java.util.Locale locale17 = java.util.Locale.ITALY;
        int int18 = property14.getMaximumShortTextLength(locale17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("PT0S");
        int int21 = property14.getMaximumShortTextLength(locale20);
        java.lang.String str22 = locale9.getDisplayVariant(locale20);
        java.lang.String str23 = dateTimeField7.getAsText((int) '4', locale20);
        java.lang.String str24 = property4.getAsShortText(locale20);
        org.joda.time.TimeOfDay timeOfDay26 = property4.addNoWrapToCopy(24);
        org.joda.time.TimeOfDay timeOfDay28 = property4.addToCopy(3);
        java.lang.String str29 = property4.getAsString();
        org.joda.time.TimeOfDay timeOfDay31 = property4.addWrapFieldToCopy(17);
        int int32 = timeOfDay31.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "deu" + "'", str10, "deu");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "52" + "'", str23, "52");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "3" + "'", str24, "3");
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3" + "'", str29, "3");
        org.junit.Assert.assertNotNull(timeOfDay31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean4 = localTime1.isEqual((org.joda.time.ReadablePartial) localTime3);
        java.lang.String str5 = localTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime.Property property19 = localTime13.property(dateTimeFieldType17);
        java.lang.String str20 = localTime13.toString();
        boolean boolean21 = localTime3.isBefore((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime.Property property22 = localTime13.secondOfMinute();
        org.joda.time.LocalTime localTime23 = property22.roundCeilingCopy();
        org.joda.time.LocalTime localTime25 = property22.addCopy(2177452799999L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.715" + "'", str5, "00:00:00.715");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str10, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00:00:00.682" + "'", str20, "00:00:00.682");
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        java.lang.Object obj9 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        org.joda.time.Interval interval15 = dateMidnight14.toInterval();
        org.joda.time.Interval interval17 = interval15.withStartMillis((long) 0);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.centuryOfEra();
        org.joda.time.DurationField durationField21 = chronology18.halfdays();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(obj9, chronology18);
        org.joda.time.Period period23 = new org.joda.time.Period(20L, (long) (short) 100, chronology18);
        org.joda.time.Period period24 = new org.joda.time.Period(20L, 0L, chronology18);
        org.joda.time.Period period25 = new org.joda.time.Period((long) 1965, chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(35, (-52), 0, 14962035, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((int) ' ');
        java.util.Locale locale13 = java.util.Locale.ITALY;
        int int14 = property10.getMaximumShortTextLength(locale13);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("PT0S");
        int int17 = property10.getMaximumShortTextLength(locale16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withLocale(locale16);
        java.lang.String str19 = locale16.getDisplayLanguage();
        java.lang.String str21 = locale16.getExtension('u');
        java.lang.String str22 = locale16.getISO3Country();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime8.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        mutableDateTime6.setZoneRetainFields(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(dateTimeZone11);
        java.lang.String str15 = dateTimeZone11.toString();
        boolean boolean16 = dateTimeZone11.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withZone(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.parse("2022-02-21T00:01:40.516Z", dateTimeFormatter17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.683" + "'", str15, "+00:00:00.683");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.plusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime18.toString(dateTimeFormatter19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant23, readableInstant24, periodType25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = period26.normalizedStandard(periodType27);
        org.joda.time.DateTime dateTime30 = dateTime18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 2022);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime18.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate33 = dateTime32.toLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYear(1969);
        org.joda.time.LocalDate.Property property36 = localDate35.dayOfMonth();
        java.util.Date date38 = new java.util.Date((long) (byte) -1);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromDateFields(date38);
        org.joda.time.LocalDate localDate41 = localDate39.plusWeeks((int) (short) 100);
        org.joda.time.LocalDate localDate42 = localDate35.withFields((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant44, readableInstant45, periodType46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = period47.normalizedStandard(periodType48);
        java.lang.String str50 = period47.toString();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant51, readableInstant52, periodType53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = period54.normalizedStandard(periodType55);
        org.joda.time.Period period57 = period47.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Seconds seconds58 = period57.toStandardSeconds();
        org.joda.time.Period period59 = period57.toPeriod();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period61 = period57.normalizedStandard(periodType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) 43, periodType60, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay9, (org.joda.time.ReadablePartial) localDate35, periodType60);
        org.joda.time.PeriodType periodType65 = periodType60.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType67 = periodType60.getFieldType(328);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 328");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight15);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str20, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0S" + "'", str50, "PT0S");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType65);
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(0);
        int int8 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateMidnight dateMidnight9 = localDate7.toDateMidnight();
        org.joda.time.LocalDate localDate11 = localDate7.minusDays(54);
        org.joda.time.LocalDate.Property property12 = localDate7.weekyear();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate15 = localDate7.withFieldAdded(durationFieldType13, 56);
        int int16 = localDate7.getEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(0);
        int int8 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate10 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.withYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.set(23);
        org.joda.time.DateTime dateTime18 = localDate12.toDateTime((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = duration27.plus((long) 'u');
        mutableDateTime20.add((org.joda.time.ReadableDuration) duration29, (-1));
        org.joda.time.Chronology chronology32 = mutableDateTime20.getChronology();
        mutableDateTime20.addWeekyears(15);
        int int35 = mutableDateTime20.getRoundingMode();
        mutableDateTime17.setMillis((org.joda.time.ReadableInstant) mutableDateTime20);
        int int37 = mutableDateTime20.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 37 + "'", int37 == 37);
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        mutableDateTime1.setWeekyear(10);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.copy();
        mutableDateTime8.setSecondOfDay(48);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean4 = localTime1.isEqual((org.joda.time.ReadablePartial) localTime3);
        java.lang.String str5 = localTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime.Property property19 = localTime13.property(dateTimeFieldType17);
        java.lang.String str20 = localTime13.toString();
        boolean boolean21 = localTime3.isBefore((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime.Property property22 = localTime13.secondOfMinute();
        org.joda.time.LocalTime localTime24 = localTime13.minusMinutes((int) '4');
        int int25 = localTime24.getMinuteOfHour();
        org.joda.time.LocalTime.Property property26 = localTime24.minuteOfHour();
        org.joda.time.LocalTime localTime28 = localTime24.plusMinutes(518);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.715" + "'", str5, "00:00:00.715");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str10, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00:00:00.682" + "'", str20, "00:00:00.682");
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.DateTime dateTime14 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 2022);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.toDateTime(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = dateTime16.toLocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.withYear(1969);
        org.joda.time.LocalDate localDate21 = localDate17.minusYears(58);
        org.joda.time.Interval interval22 = localDate21.toInterval();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(0L, (long) 12);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.minusDays(0);
        org.joda.time.Interval interval31 = dateMidnight30.toInterval();
        boolean boolean32 = interval25.isAfter((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTime dateTime33 = interval25.getStart();
        boolean boolean34 = interval22.isBefore((org.joda.time.ReadableInterval) interval25);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateMidnight.Property property26 = dateMidnight0.yearOfCentury();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight0.withChronology(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.withDayOfYear(58);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        long long38 = duration37.getStandardMinutes();
        org.joda.time.Duration duration39 = duration37.toDuration();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight30.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = dateTime43.toString(dateTimeFormatter44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime(dateTimeZone46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableInstant48, readableInstant49, periodType50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = period51.normalizedStandard(periodType52);
        org.joda.time.DateTime dateTime55 = dateTime43.withPeriodAdded((org.joda.time.ReadablePeriod) period51, 2022);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime43.toDateTime(dateTimeZone56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime43.toMutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period(readableInstant60, readableInstant61, periodType62);
        org.joda.time.Period period65 = period63.plusDays(2022);
        mutableDateTime59.add((org.joda.time.ReadablePeriod) period63);
        mutableDateTime59.setYear(86399);
        org.joda.time.Period period69 = duration37.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.format.PeriodFormatter periodFormatter70 = null;
        java.lang.String str71 = period69.toString(periodFormatter70);
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str45, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT0S" + "'", str71, "PT0S");
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration14 = duration12.plus((long) 'u');
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration14, (-1));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime19.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, periodType27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableInstant) dateTime25, periodType27);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.minusDays(0);
        org.joda.time.Interval interval35 = dateMidnight34.toInterval();
        org.joda.time.Interval interval37 = interval35.withStartMillis((long) 0);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 50, periodType27, chronology38);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) 17, chronology38);
        org.joda.time.DurationField durationField41 = chronology38.days();
        org.joda.time.DurationField durationField42 = chronology38.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.halfdayOfDay();
        org.joda.time.DurationField durationField44 = chronology38.seconds();
        org.joda.time.Period period45 = new org.joda.time.Period(0L, (long) 39, chronology38);
        org.joda.time.PeriodType periodType46 = period45.getPeriodType();
        org.joda.time.PeriodType periodType47 = periodType46.withMonthsRemoved();
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        int int2 = dateMidnight1.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration26);
        long long29 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration36.plus((long) 'u');
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.DateTime dateTime40 = dateTime12.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period42 = period39.minusSeconds((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = dateTime46.toString(dateTimeFormatter47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.toDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.DateTime.Property property67 = dateTime50.year();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight43, dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(dateTimeZone71);
        mutableDateTime72.setYear(1969);
        boolean boolean75 = dateMidnight43.isEqual((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Duration duration84 = duration82.plus((long) 'u');
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadableDuration) duration82, periodType85);
        mutablePeriod86.addSeconds(42);
        mutablePeriod86.addWeeks((-1));
        org.joda.time.Period period91 = period42.minus((org.joda.time.ReadablePeriod) mutablePeriod86);
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight1.plus((org.joda.time.ReadablePeriod) mutablePeriod86);
        int int93 = dateMidnight1.getMillisOfDay();
        org.joda.time.Period period95 = org.joda.time.Period.millis(1969);
        org.joda.time.Period period97 = period95.minusMillis((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight98 = dateMidnight1.minus((org.joda.time.ReadablePeriod) period97);
        long long99 = dateMidnight1.getMillis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 21 + "'", int2 == 21);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str10, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateMidnight43);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str48, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertNotNull(dateMidnight98);
// flaky:         org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1645401599317L + "'", long99 == 1645401599317L);
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        org.joda.time.Period period2 = new org.joda.time.Period(50409792L, (long) 2525);
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        boolean boolean2 = strSet1.isEmpty();
        java.util.Iterator<java.lang.String> strItor3 = strSet1.iterator();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor6 = strSet5.iterator();
        boolean boolean7 = strSet1.retainAll((java.util.Collection<java.lang.String>) strSet5);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime9.getZone();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = dateTimeZone12.getShortName((long) 35, locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        int int20 = strSet19.size();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet19.parallelStream();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime27 = property25.addToCopy((int) ' ');
        java.util.Locale locale28 = java.util.Locale.ITALY;
        int int29 = property25.getMaximumShortTextLength(locale28);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("PT0S");
        int int32 = property25.getMaximumShortTextLength(locale31);
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        boolean boolean34 = strSet19.retainAll((java.util.Collection<java.lang.String>) strSet33);
        boolean boolean35 = strSet17.retainAll((java.util.Collection<java.lang.String>) strSet19);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfYear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.minusDays(0);
        org.joda.time.Interval interval41 = dateMidnight40.toInterval();
        org.joda.time.Interval interval43 = interval41.withStartMillis((long) 0);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfYear();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(0);
        org.joda.time.Interval interval49 = dateMidnight48.toInterval();
        org.joda.time.Interval interval51 = interval49.withStartMillis((long) 0);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.days();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight55 = org.joda.time.DateMidnight.now(chronology52);
        org.joda.time.DateTimeField dateTimeField56 = chronology52.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(1970, (int) (byte) 100, (int) (byte) 0, (int) (byte) 10);
        mutablePeriod61.setSeconds(59);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod61.toMutablePeriod();
        long long67 = chronology52.add((org.joda.time.ReadablePeriod) mutablePeriod64, (long) (short) 100, 30);
        org.joda.time.Interval interval68 = interval43.withChronology(chronology52);
        boolean boolean70 = interval43.contains(1L);
        org.joda.time.ReadableInterval readableInterval71 = null;
        org.joda.time.Interval interval72 = interval43.overlap(readableInterval71);
        boolean boolean73 = strSet19.equals((java.lang.Object) readableInterval71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(dateTimeZone74);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime75.weekOfWeekyear();
        mutableDateTime75.addDays(22);
        mutableDateTime75.setDayOfMonth(19);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        mutableDateTime84.setZoneRetainFields(dateTimeZone85);
        org.joda.time.DateTimeZone dateTimeZone87 = mutableDateTime84.getZone();
        org.joda.time.MutableDateTime mutableDateTime88 = org.joda.time.MutableDateTime.now(dateTimeZone87);
        mutableDateTime82.setZoneRetainFields(dateTimeZone87);
        long long92 = dateTimeZone87.convertLocalToUTC((long) 17, true);
        mutableDateTime75.setZoneRetainFields(dateTimeZone87);
        int int95 = dateTimeZone87.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.LocalDate localDate96 = org.joda.time.LocalDate.now(dateTimeZone87);
        boolean boolean97 = strSet19.contains((java.lang.Object) dateTimeZone87);
        boolean boolean98 = strSet5.addAll((java.util.Collection<java.lang.String>) strSet19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.683" + "'", str16, "+00:00:00.683");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 212941770400L + "'", long67 == 212941770400L);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-666L) + "'", long92 == (-666L));
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 683 + "'", int95 == 683);
        org.junit.Assert.assertNotNull(localDate96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears(25253);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(0);
        int int8 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate10 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property11 = localDate3.weekyear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime32.getZone();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        mutableDateTime30.setZoneRetainFields(dateTimeZone35);
        long long40 = dateTimeZone35.adjustOffset((long) 49, false);
        org.joda.time.DateTime dateTime41 = dateTime16.toDateTime(dateTimeZone35);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) 9, dateTimeZone35);
        org.joda.time.DateTime dateTime43 = localDate3.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.LocalDate.Property property44 = localDate3.weekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 49L + "'", long40 == 49L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(62135942400017L);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        java.util.Date date14 = calendar12.getTime();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar12);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime20.getZone();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        mutableDateTime18.setZoneRetainFields(dateTimeZone23);
        long long28 = dateTimeZone23.convertLocalToUTC((long) 17, true);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 41, dateTimeZone23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        java.lang.String str32 = dateTimeZone23.getNameKey((long) 35);
        boolean boolean33 = calendar12.after((java.lang.Object) dateTimeZone23);
        int int35 = dateTimeZone23.getStandardOffset(1645455399879L);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime36);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = localDate37.getValue(122);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 122");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-666L) + "'", long28 == (-666L));
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 683 + "'", int35 == 683);
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = dateTime5.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((-7469231));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        int int4 = property3.get();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        int int17 = dateTime15.getYearOfEra();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime15.toGregorianCalendar();
        long long19 = gregorianCalendar18.getTimeInMillis();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.lang.String str21 = timeZone20.getID();
        int int23 = timeZone20.getOffset((long) 999);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.lang.String str25 = timeZone24.getID();
        boolean boolean26 = timeZone20.hasSameRules(timeZone24);
        boolean boolean27 = timeZone24.observesDaylightTime();
        gregorianCalendar18.setTimeZone(timeZone24);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime30.getZone();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = dateTimeZone33.getShortName((long) 35, locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleAttributes();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone24, locale36);
        timeZone24.setID("millisOfSecond");
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        long long48 = dateTimeField45.getDifferenceAsLong((long) 1970, (long) 90);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = duration58.plus((long) 'u');
        mutableDateTime51.add((org.joda.time.ReadableDuration) duration60, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType63.getField(chronology64);
        mutableDateTime51.setRounding(dateTimeField65);
        int int68 = dateTimeField65.getMaximumValue(100L);
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.lang.String str71 = dateTimeField65.getAsShortText(1645401600000L, locale70);
        java.lang.String str72 = dateTimeField45.getAsShortText(2032, locale70);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone24, locale70);
        java.util.Locale locale74 = locale70.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = property3.setCopy("+00:00:00.683", locale70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:00:00.683\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "secondOfMinute" + "'", str21, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "secondOfMinute" + "'", str25, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.683" + "'", str37, "+00:00:00.683");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645455786518,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"millisOfSecond\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=6,MILLISECOND=518,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 292278993 + "'", int68 == 292278993);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022" + "'", str71, "2022");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2032" + "'", str72, "2032");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1645455786518,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"millisOfSecond\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=6,MILLISECOND=518,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        java.util.Date date3 = new java.util.Date(54082, 2033, 1970);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Oct 21 00:00:00 GMT+00:00 56156");
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = dateTime5.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        int int10 = dateTime5.getMinuteOfDay();
        org.joda.time.DateTime dateTime12 = dateTime5.plus(0L);
        org.joda.time.DateTime.Property property13 = dateTime5.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime3.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        mutableDateTime1.setZoneRetainFields(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        boolean boolean15 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime19.getZone();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        mutableDateTime17.setZoneRetainFields(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime11.toDateTime(dateTimeZone22);
        int int28 = dateTime11.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime11.withMillisOfSecond(85760625);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85760625 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 682 + "'", int28 == 682);
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) ' ');
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration12 = duration10.plus((long) 'u');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean17 = dateTime15.isSupported(dateTimeFieldType16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period19 = duration10.toPeriodTo((org.joda.time.ReadableInstant) dateTime15, periodType18);
        org.joda.time.PeriodType periodType20 = periodType18.withWeeksRemoved();
        org.joda.time.Period period21 = duration3.toPeriod(periodType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.MutableDateTime mutableDateTime27 = property24.addWrapField(8);
        org.joda.time.DateTimeField dateTimeField28 = property24.getField();
        org.joda.time.MutableDateTime mutableDateTime30 = property24.add((long) 16);
        org.joda.time.MutableDateTime mutableDateTime32 = property24.add((long) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = period38.normalizedStandard(periodType39);
        java.lang.String str41 = period38.toString();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant42, readableInstant43, periodType44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = period45.normalizedStandard(periodType46);
        org.joda.time.Period period48 = period38.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Seconds seconds49 = period48.toStandardSeconds();
        org.joda.time.Period period50 = period48.toPeriod();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period52 = period48.normalizedStandard(periodType51);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.minusDays(0);
        org.joda.time.Interval interval58 = dateMidnight57.toInterval();
        org.joda.time.Interval interval60 = interval58.withStartMillis((long) 0);
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.centuries();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.centuryOfEra();
        org.joda.time.DurationField durationField64 = chronology61.halfdays();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(chronology61);
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay(chronology61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(86400013L, 1335967560000L, periodType51, chronology61);
        org.joda.time.Period period68 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime32, periodType51);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property71 = dateMidnight70.dayOfYear();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.minusDays(0);
        org.joda.time.Interval interval74 = dateMidnight73.toInterval();
        org.joda.time.Interval interval76 = interval74.withStartMillis((long) 0);
        org.joda.time.Chronology chronology77 = interval76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.centuries();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.centuryOfEra();
        org.joda.time.DurationField durationField80 = chronology77.halfdays();
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime(chronology77);
        org.joda.time.TimeOfDay timeOfDay82 = new org.joda.time.TimeOfDay(chronology77);
        org.joda.time.DateTimeField dateTimeField83 = chronology77.hourOfDay();
        org.joda.time.Chronology chronology84 = chronology77.withUTC();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 2154, (long) 292278993, periodType51, chronology77);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0S" + "'", str41, "PT0S");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        java.util.Date date6 = new java.util.Date(11, 18, 48, 17, 1970, 5);
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(periodType8);
        mutablePeriod9.addDays((int) '#');
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay7.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod9, 5);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusSeconds(37);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMillis(990);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Aug 19 01:50:05 GMT+00:00 1912");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime10.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        mutableDateTime8.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean20 = dateTime18.isSupported(dateTimeFieldType19);
        org.joda.time.DateMidnight dateMidnight21 = dateTime18.toDateMidnight();
        boolean boolean22 = mutableDateTime8.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property23 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getName((long) 42);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) 10, dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime18.withZoneRetainFields(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(50284892, 345, 346, 359, 2156, (int) '4', 54, dateTimeZone25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 359 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.683" + "'", str27, "+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 3);
        org.joda.time.Interval interval2 = yearMonthDay1.toInterval();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.year();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.plus(readablePeriod4);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusDays(85);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, periodType10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone7, periodType10);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime18.toString(dateTimeFormatter19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration36);
        long long39 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology41 = null;
        boolean boolean42 = durationFieldType40.isSupported(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime22.withFieldAdded(durationFieldType40, 69);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period(readableInstant45, readableInstant46, periodType47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = period48.normalizedStandard(periodType49);
        java.lang.String str51 = period48.toString();
        org.joda.time.Period period53 = period48.plusWeeks((int) 'a');
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(periodType54);
        mutablePeriod55.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = mutablePeriod55.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod59 = mutablePeriod55.toMutablePeriod();
        org.joda.time.Period period60 = period48.withFields((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.DateTime dateTime62 = dateTime44.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod55, 22);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        int int64 = mutablePeriod55.getWeeks();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = dateTime67.toString(dateTimeFormatter68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = dateTime67.toDateTime(dateTimeZone70);
        org.joda.time.LocalTime localTime72 = dateTime71.toLocalTime();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean77 = dateTime75.isSupported(dateTimeFieldType76);
        org.joda.time.LocalTime.Property property78 = localTime72.property(dateTimeFieldType76);
        org.joda.time.LocalTime localTime79 = property78.getLocalTime();
        org.joda.time.LocalTime localTime81 = property78.addCopy((long) (byte) 100);
        org.joda.time.LocalTime localTime82 = property78.roundHalfEvenCopy();
        boolean boolean83 = mutablePeriod55.equals((java.lang.Object) property78);
        org.joda.time.LocalTime localTime85 = property78.addCopy(1645455504776L);
        org.joda.time.LocalTime localTime87 = property78.addCopy(100141);
        org.joda.time.LocalTime localTime88 = property78.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str20, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT0S" + "'", str51, "PT0S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str69, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(localTime88);
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = mutablePeriod1.getFieldTypes();
        mutablePeriod1.setMonths((int) 'u');
        mutablePeriod1.addHours((int) ' ');
        int int9 = mutablePeriod1.getDays();
        mutablePeriod1.addSeconds(104);
        int int12 = mutablePeriod1.getMillis();
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("1935-12-31T23:59:59.999Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1935-12-31T23:59:59.999Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 9);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((int) ' ');
        java.util.Locale locale9 = java.util.Locale.ITALY;
        int int10 = property6.getMaximumShortTextLength(locale9);
        java.lang.String str11 = locale9.getDisplayName();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.Calendar calendar13 = builder12.build();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("English");
        timeZone15.setRawOffset(29);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.lang.String str19 = timeZone18.getID();
        int int21 = timeZone18.getOffset((long) 999);
        timeZone18.setID("secondOfMinute");
        java.util.TimeZone.setDefault(timeZone18);
        boolean boolean25 = timeZone15.hasSameRules(timeZone18);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("English");
        timeZone27.setRawOffset(29);
        java.time.ZoneId zoneId30 = timeZone27.toZoneId();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone(zoneId30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone(zoneId30);
        java.util.TimeZone.setDefault(timeZone32);
        boolean boolean34 = timeZone18.hasSameRules(timeZone32);
        calendar13.setTimeZone(timeZone18);
        // The following exception was thrown during execution in test generation
        try {
            calendar13.clear(53873);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53873");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Italienisch (Italien)" + "'", str11, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=9,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=9,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "secondOfMinute" + "'", str19, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        java.lang.String[] strArray30 = new java.lang.String[] { "999", "32", "999", "hi!", "54", "allemand", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=35,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", "de", "en", "P35D", "1970", "1978", "1", "tedesco", "999", "2022-02-21", "32", "de", "Property[dayOfYear]", "2022-02-21T00:01:40.436Z", "DateTimeField[year]", "T14:55:02.317", "deu", "Koordinierte Universalzeit", "55", "en", "1978", "gregory", "Etc/UTC", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = duration41.plus((long) 'u');
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration43, (-1));
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = duration54.plus((long) 'u');
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration56, (-1));
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime67 = dateTime61.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 1, periodType69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, (org.joda.time.ReadableInstant) dateTime67, periodType69);
        mutableDateTime47.setMillis((long) 1969);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.Duration duration80 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Duration duration82 = duration80.plus((long) 'u');
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (-1), chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean87 = dateTime85.isSupported(dateTimeFieldType86);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period89 = duration80.toPeriodTo((org.joda.time.ReadableInstant) dateTime85, periodType88);
        org.joda.time.Period period90 = duration43.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime47, periodType88);
        boolean boolean91 = strSet31.remove((java.lang.Object) periodType88);
        java.util.stream.Stream<java.lang.String> strStream92 = strSet31.stream();
        java.lang.Object[] objArray93 = strSet31.toArray();
        boolean boolean94 = strSet31.isEmpty();
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strStream92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[999, 32, hi!, 54, allemand, java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=35,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0], de, en, P35D, 1970, 1978, 1, tedesco, 2022-02-21, Property[dayOfYear], 2022-02-21T00:01:40.436Z, DateTimeField[year], T14:55:02.317, deu, Koordinierte Universalzeit, 55, gregory, Etc/UTC]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[999, 32, hi!, 54, allemand, java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=35,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0], de, en, P35D, 1970, 1978, 1, tedesco, 2022-02-21, Property[dayOfYear], 2022-02-21T00:01:40.436Z, DateTimeField[year], T14:55:02.317, deu, Koordinierte Universalzeit, 55, gregory, Etc/UTC]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("T14:56:16.569");
        org.joda.time.DateTime dateTime2 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime4 = dateTime2.minusSeconds(54025);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        java.lang.String str6 = period3.toString();
        org.joda.time.Period period8 = period3.plusWeeks((int) 'a');
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        mutablePeriod10.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod10.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod10.toMutablePeriod();
        org.joda.time.Period period15 = period3.withFields((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = durationFieldType17.getName();
        boolean boolean19 = mutablePeriod10.isSupported(durationFieldType17);
        java.lang.Object obj20 = mutablePeriod10.clone();
        mutablePeriod10.setYears(980);
        mutablePeriod10.addYears(2057);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "minutes" + "'", str18, "minutes");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "P3037Y35D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "P3037Y35D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "P3037Y35D");
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration21.plus((long) 'u');
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration23, (-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime34, periodType36);
        mutableDateTime14.setMillis((long) 1969);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean54 = dateTime52.isSupported(dateTimeFieldType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period56 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime52, periodType55);
        org.joda.time.Period period57 = duration10.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime14, periodType55);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property59 = localDate58.yearOfCentury();
        org.joda.time.LocalDate localDate61 = localDate58.plusWeeks(100);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = dateTime64.toString(dateTimeFormatter65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime(dateTimeZone67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period(readableInstant69, readableInstant70, periodType71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = period72.normalizedStandard(periodType73);
        org.joda.time.DateTime dateTime76 = dateTime64.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 2022);
        org.joda.time.LocalDate localDate78 = localDate58.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 0);
        mutableDateTime14.add((org.joda.time.ReadablePeriod) period72, 40);
        mutableDateTime14.addDays(86399);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime14.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime84 = property83.roundHalfFloor();
        boolean boolean85 = mutableDateTime84.isEqualNow();
        java.lang.String str86 = mutableDateTime84.toString();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate61);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str66, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2206-07-22T00:00:03.000+00:00:00.683" + "'", str86, "2206-07-22T00:00:03.000+00:00:00.683");
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime3.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        mutableDateTime1.setZoneRetainFields(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        boolean boolean15 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime19.getZone();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        mutableDateTime17.setZoneRetainFields(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime11.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime31.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property44 = localDate43.yearOfCentury();
        org.joda.time.LocalDate localDate46 = localDate43.plusWeeks(100);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate50 = property48.addWrapFieldToCopy(0);
        int int51 = localDate46.compareTo((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateMidnight dateMidnight52 = localDate50.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfYear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.minusDays(0);
        org.joda.time.Interval interval58 = dateMidnight57.toInterval();
        org.joda.time.Interval interval60 = interval58.withStartMillis((long) 0);
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight52.withChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField64 = chronology61.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay40.withChronologyRetainFields(chronology61);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(0L, chronology61);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology61);
        org.joda.time.DateTimeField dateTimeField68 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField69 = chronology61.millisOfSecond();
        org.joda.time.DurationField durationField70 = chronology61.hours();
        long long73 = durationField70.getValueAsLong((long) 53876, 1654527574008L);
        long long74 = durationField70.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3600000L + "'", long74 == 3600000L);
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.addWrapField(8);
        org.joda.time.DateTimeField dateTimeField6 = property2.getField();
        java.lang.String str8 = dateTimeField6.getAsShortText((long) 39);
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = property15.addToCopy((int) ' ');
        java.util.Locale locale18 = java.util.Locale.ITALY;
        int int19 = property15.getMaximumShortTextLength(locale18);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("PT0S");
        int int22 = property15.getMaximumShortTextLength(locale21);
        java.lang.String str25 = nameProvider11.getName(locale21, "14:55:13.255", "14:55:13.255");
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale21);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = dateTimeField6.set(32770L, "2030-06-21T15:52:03.868Z", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2030-06-21T15:52:03.868Z\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645455786961,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=6,MILLISECOND=961,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration39, periodType42);
        mutablePeriod43.addSeconds(42);
        mutablePeriod43.addWeeks((-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withZone(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((long) 100);
        org.joda.time.Duration duration62 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = dateTime65.toString(dateTimeFormatter66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = dateTime65.toDateTime(dateTimeZone68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.Duration duration76 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (-1), chronology81);
        org.joda.time.Duration duration83 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableDuration) duration83);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableDuration) duration83);
        org.joda.time.DateTime.Property property86 = dateTime69.year();
        org.joda.time.DateTime dateTime87 = property86.roundHalfFloorCopy();
        boolean boolean88 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateTime87);
        java.util.Date date89 = dateTime61.toDate();
        java.lang.String str90 = date89.toLocaleString();
        java.lang.String str91 = date89.toGMTString();
        org.joda.time.LocalDate localDate92 = org.joda.time.LocalDate.fromDateFields(date89);
        long long93 = date89.getTime();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration62);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str67, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date89);
// flaky:         org.junit.Assert.assertEquals(date89.toString(), "Wed Dec 31 23:59:59 GMT 1969");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "31.12.1969 23:59:59" + "'", str90, "31.12.1969 23:59:59");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "31 Dec 1969 23:59:59 GMT" + "'", str91, "31 Dec 1969 23:59:59 GMT");
        org.junit.Assert.assertNotNull(localDate92);
// flaky:         org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-583L) + "'", long93 == (-583L));
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.weekyear();
        org.joda.time.LocalDate.Property property3 = localDate0.weekOfWeekyear();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.minuteOfHour();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1439, 0L);
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1439);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        java.lang.Appendable appendable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(appendable9, 553511020752000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant7, readableInstant8, periodType9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period10.normalizedStandard(periodType11);
        org.joda.time.DateTime dateTime14 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 2022);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.toDateTime(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = dateTime16.toLocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.withYear(1969);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        java.util.Date date22 = new java.util.Date((long) (byte) -1);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.fromDateFields(date22);
        org.joda.time.LocalDate localDate25 = localDate23.plusWeeks((int) (short) 100);
        org.joda.time.LocalDate localDate26 = localDate19.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property27 = localDate19.era();
        org.joda.time.LocalDate localDate29 = localDate19.minusYears(40);
        org.joda.time.DateTime dateTime30 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime31 = dateTime30.withLaterOffsetAtOverlap();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime20.getZone();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        mutableDateTime18.setZoneRetainFields(dateTimeZone23);
        long long28 = dateTimeZone23.adjustOffset((long) 49, false);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone23);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) 9, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusHours(86399999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2030, 115200, 494);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 115200 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 49L + "'", long28 == 49L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime58);
        long long60 = duration59.getStandardMinutes();
        org.joda.time.Duration duration61 = duration59.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.yearOfEra();
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        boolean boolean69 = period67.isSupported(durationFieldType68);
        java.lang.String str70 = durationFieldType68.toString();
        boolean boolean71 = localDateTime52.isSupported(durationFieldType68);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime52.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime75 = localDateTime52.minusMillis(19);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusSeconds(4);
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime79 = property78.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime80 = property78.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime81 = property78.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField82 = property78.getField();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "years" + "'", str70, "years");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths(4);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (-1), chronology29);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = duration31.plus((long) 'u');
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration33, (-1));
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime38.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 1, periodType46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableInstant) dateTime44, periodType46);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfYear();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.minusDays(0);
        org.joda.time.Interval interval54 = dateMidnight53.toInterval();
        org.joda.time.Interval interval56 = interval54.withStartMillis((long) 0);
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 50, periodType46, chronology57);
        org.joda.time.Period period59 = new org.joda.time.Period((long) 2022, (long) 45, chronology57);
        org.joda.time.DateTime dateTime60 = dateTime17.withChronology(chronology57);
        org.joda.time.DateTimeField dateTimeField61 = chronology57.hourOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(800, 55, 52, 53863, (-14), (int) (short) 0, 1925, chronology57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53863 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        int int2 = dateMidnight1.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration26);
        long long29 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration36.plus((long) 'u');
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.DateTime dateTime40 = dateTime12.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period42 = period39.minusSeconds((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = dateTime46.toString(dateTimeFormatter47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.toDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology55);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (-1), chronology62);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.DateTime.Property property67 = dateTime50.year();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight43, dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(dateTimeZone71);
        mutableDateTime72.setYear(1969);
        boolean boolean75 = dateMidnight43.isEqual((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (-1), chronology80);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Duration duration84 = duration82.plus((long) 'u');
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadableDuration) duration82, periodType85);
        mutablePeriod86.addSeconds(42);
        mutablePeriod86.addWeeks((-1));
        org.joda.time.Period period91 = period42.minus((org.joda.time.ReadablePeriod) mutablePeriod86);
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight1.plus((org.joda.time.ReadablePeriod) mutablePeriod86);
        org.joda.time.DateMidnight.Property property93 = dateMidnight92.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 21 + "'", int2 == 21);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str10, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateMidnight43);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str48, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertNotNull(property93);
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        java.util.Locale locale2 = new java.util.Locale("14", "0100-12-31T23:58:59.999");
        org.junit.Assert.assertEquals(locale2.toString(), "14_0100-12-31T23:58:59.999");
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration39, periodType42);
        mutablePeriod43.addSeconds(42);
        mutablePeriod43.addWeeks((-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withZone(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((long) 100);
        org.joda.time.Duration duration62 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.tz.Provider provider63 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet64 = provider63.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider63);
        boolean boolean66 = mutablePeriod43.equals((java.lang.Object) provider63);
        java.util.Set<java.lang.String> strSet67 = provider63.getAvailableIDs();
        java.util.Set<java.lang.String> strSet68 = provider63.getAvailableIDs();
        java.util.Set<java.lang.String> strSet69 = provider63.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider63);
        java.util.Set<java.lang.String> strSet71 = provider63.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone73 = provider63.getZone("");
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNull(dateTimeZone73);
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        org.joda.time.Period period1 = org.joda.time.Period.months((int) 'x');
        org.joda.time.Period period3 = period1.withMonths((int) (short) 0);
        java.util.Date date5 = new java.util.Date((long) (byte) -1);
        date5.setMinutes(20);
        int int8 = date5.getYear();
        int int9 = date5.getSeconds();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date5);
        int int11 = date5.getDate();
        int int12 = date5.getTimezoneOffset();
        boolean boolean13 = period1.equals((java.lang.Object) date5);
        java.util.Date date14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = date5.before(date14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 23:20:59 GMT 1969");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        boolean boolean23 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withMinuteOfHour((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear(11);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusHours(53830);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks((-5));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withTime(227, 100309, 53936, 6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 227 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        java.io.IOException iOException1 = new java.io.IOException("52");
        java.io.IOException iOException4 = new java.io.IOException("YearWeekDay");
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("DurationField[days]", (java.lang.Throwable) iOException4);
        java.io.IOException iOException10 = new java.io.IOException("YearWeekDay");
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException("DurationField[days]", (java.lang.Throwable) iOException10);
        java.io.IOException iOException14 = new java.io.IOException("YearWeekDay");
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        iOException12.addSuppressed((java.lang.Throwable) iOException15);
        java.io.IOException iOException17 = new java.io.IOException("days", (java.lang.Throwable) iOException12);
        iOException4.addSuppressed((java.lang.Throwable) iOException17);
        java.io.IOException iOException21 = new java.io.IOException("English");
        java.io.IOException iOException22 = new java.io.IOException("T14:56:53.257", (java.lang.Throwable) iOException21);
        iOException4.addSuppressed((java.lang.Throwable) iOException22);
        iOException1.addSuppressed((java.lang.Throwable) iOException4);
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.plusHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(0);
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.Interval interval16 = interval14.withStartMillis((long) 0);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay8.withChronologyRetainFields(chronology17);
        org.joda.time.DateTime dateTime20 = timeOfDay19.toDateTimeToday();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay19.withField(dateTimeFieldType21, 48);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(periodType24);
        mutablePeriod25.setYears((int) (short) 1);
        mutablePeriod25.setDays(41);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay23.minus((org.joda.time.ReadablePeriod) mutablePeriod25);
        java.util.Date date31 = new java.util.Date();
        org.joda.time.YearMonthDay yearMonthDay32 = org.joda.time.YearMonthDay.fromDateFields(date31);
        int[] intArray33 = yearMonthDay32.getValues();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = timeOfDay30.isEqual((org.joda.time.ReadablePartial) yearMonthDay32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay30);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Mon Feb 21 15:03:07 GMT 2022");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2022, 2, 21]");
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(4, 9, 22, (int) '#');
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.LocalTime localTime7 = localTime5.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 59, chronology8);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setDayOfWeek(3879);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3879 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfCentury();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime50);
        boolean boolean54 = dateTime50.isAfterNow();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.Duration duration68 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateTime dateTime70 = dateTime50.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period73 = new org.joda.time.Period((long) 1, periodType72);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration68, periodType72);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration68, 48);
        org.joda.time.LocalDateTime.Property property77 = localDateTime19.yearOfCentury();
        int int78 = localDateTime19.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 682 + "'", int78 == 682);
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        java.util.Date date1 = new java.util.Date((long) (byte) -1);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromDateFields(date1);
        org.joda.time.LocalDate localDate4 = localDate2.plusWeeks((int) (short) 100);
        org.joda.time.LocalDate localDate6 = localDate2.plusMonths(39);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundCeilingCopy();
        org.junit.Assert.assertEquals(date1.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration12 = duration10.plus((long) 'u');
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration12, (-1));
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime17.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) dateTime23, periodType25);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(0);
        org.joda.time.Interval interval33 = dateMidnight32.toInterval();
        org.joda.time.Interval interval35 = interval33.withStartMillis((long) 0);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 50, periodType25, chronology36);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) 17, chronology36);
        org.joda.time.DurationField durationField39 = chronology36.days();
        org.joda.time.DurationField durationField40 = chronology36.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.year();
        org.joda.time.DurationField durationField42 = chronology36.days();
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        java.util.Date date5 = new java.util.Date(54, 0, 32769, 1967, (-292275054));
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime.Property property19 = localTime13.property(dateTimeFieldType17);
        org.joda.time.LocalTime localTime20 = property19.getLocalTime();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(periodType21);
        mutablePeriod22.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray25 = mutablePeriod22.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod22.toMutablePeriod();
        mutablePeriod22.setPeriod((long) 1969);
        boolean boolean29 = property19.equals((java.lang.Object) 1969);
        org.joda.time.LocalTime localTime30 = property19.roundFloorCopy();
        org.joda.time.LocalTime localTime32 = property19.setCopy(50);
        boolean boolean33 = date5.equals((java.lang.Object) localTime32);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 29 04:06:00 GMT 1488");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str10, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 9);
        java.util.Calendar.Builder builder4 = builder0.setLenient(true);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar17 = dateTime12.toCalendar(locale16);
        int int18 = calendar17.getFirstDayOfWeek();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(periodType19);
        boolean boolean21 = calendar17.after((java.lang.Object) mutablePeriod20);
        calendar17.setLenient(true);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.lang.String str25 = timeZone24.getID();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.lang.String str27 = timeZone26.getID();
        boolean boolean28 = timeZone24.hasSameRules(timeZone26);
        calendar17.setTimeZone(timeZone24);
        calendar17.setMinimalDaysInFirstWeek(23);
        boolean boolean32 = calendar17.isWeekDateSupported();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("31 Dec 1969 23:59:59 GMT");
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        java.lang.String str37 = timeZone35.getID();
        calendar17.setTimeZone(timeZone35);
        java.util.Calendar.Builder builder39 = builder0.setTimeZone(timeZone35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder41 = builder0.setCalendarType("zh-CN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: zh-CN");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=23,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GMT" + "'", str25, "GMT");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GMT" + "'", str27, "GMT");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GMT" + "'", str37, "GMT");
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.monthOfYear();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withYearOfCentury(35);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime3.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        mutableDateTime1.setZoneRetainFields(dateTimeZone6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(518400000L, chronology12);
        org.joda.time.Period period14 = duration10.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight13);
        int int15 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone6);
        java.lang.String str18 = dateTimeZone6.getName((long) 1979);
        java.lang.String str20 = dateTimeZone6.getName((long) 50);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone6);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 683 + "'", int15 == 683);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.683" + "'", str18, "+00:00:00.683");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.683" + "'", str20, "+00:00:00.683");
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        org.joda.time.Interval interval15 = dateMidnight14.toInterval();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(0L, (long) 12);
        long long19 = interval18.getStartMillis();
        boolean boolean20 = interval15.isAfter((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.years();
        boolean boolean26 = period24.isSupported(durationFieldType25);
        org.joda.time.Interval interval27 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime28 = interval18.getStart();
        long long29 = interval18.getEndMillis();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        boolean boolean32 = strSet31.isEmpty();
        java.util.Iterator<java.lang.String> strItor33 = strSet31.iterator();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withZone(dateTimeZone41);
        org.joda.time.DateTime.Property property43 = dateTime39.dayOfWeek();
        org.joda.time.DateTime dateTime44 = property43.roundHalfFloorCopy();
        boolean boolean45 = strSet31.equals((java.lang.Object) property43);
        org.joda.time.DateTime dateTime46 = property43.withMaximumValue();
        org.joda.time.DateTime.Property property47 = dateTime46.weekyear();
        org.joda.time.LocalDate localDate48 = dateTime46.toLocalDate();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime46.toMutableDateTime();
        boolean boolean50 = interval18.isBefore((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = strSet8.contains((java.lang.Object) dateTime46);
        java.util.stream.Stream<java.lang.String> strStream52 = strSet8.stream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Franz\366sisch" + "'", str6, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 12L + "'", long29 == 12L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strStream52);
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property13 = localTime7.property(dateTimeFieldType11);
        org.joda.time.LocalTime localTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime17 = localTime14.withMillisOfDay((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.minusDays(0);
        org.joda.time.Interval interval23 = dateMidnight22.toInterval();
        org.joda.time.Interval interval25 = interval23.withStartMillis((long) 0);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(0L, (long) 12);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.minusDays(0);
        org.joda.time.Interval interval35 = dateMidnight34.toInterval();
        boolean boolean36 = interval29.isAfter((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTime dateTime37 = interval29.getStart();
        boolean boolean38 = interval25.overlaps((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(dateTimeZone39);
        int int41 = timeOfDay40.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay40.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay43.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime48 = timeOfDay43.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay43.plusMillis((int) (short) -1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime53.toDateTime(dateTimeZone56);
        org.joda.time.LocalTime localTime58 = dateTime57.toLocalTime();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean63 = dateTime61.isSupported(dateTimeFieldType62);
        org.joda.time.LocalTime.Property property64 = localTime58.property(dateTimeFieldType62);
        java.lang.String str65 = dateTimeFieldType62.toString();
        org.joda.time.TimeOfDay.Property property66 = timeOfDay43.property(dateTimeFieldType62);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = timeOfDay68.toDateTimeToday();
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period80 = new org.joda.time.Period(100L, periodType79);
        org.joda.time.Period period81 = new org.joda.time.Period((int) '4', (-292275054), (int) (short) 1, 1970, 45, 5, (int) (short) 0, (int) (byte) 0, periodType79);
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay43, (org.joda.time.ReadablePartial) timeOfDay68, periodType79);
        org.joda.time.PeriodType periodType83 = periodType79.withHoursRemoved();
        org.joda.time.PeriodType periodType84 = periodType79.withMillisRemoved();
        org.joda.time.PeriodType periodType85 = periodType79.withMinutesRemoved();
        org.joda.time.Period period86 = interval25.toPeriod(periodType85);
        org.joda.time.LocalTime localTime87 = localTime17.minus((org.joda.time.ReadablePeriod) period86);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay50);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str55, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "minuteOfHour" + "'", str65, "minuteOfHour");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(localTime87);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths((int) (short) 100);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime31.toString(dateTimeFormatter32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateTime.Property property52 = dateTime35.year();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateMidnight.Property property54 = dateMidnight28.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight56 = property54.addWrapFieldToCopy((int) 'u');
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight58 = property57.roundHalfEvenCopy();
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        mutableDateTime62.setZoneRetainFields(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone65 = mutableDateTime62.getZone();
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now(dateTimeZone65);
        mutableDateTime60.setZoneRetainFields(dateTimeZone65);
        long long70 = dateTimeZone65.adjustOffset((long) 49, false);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight72 = org.joda.time.DateMidnight.now(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight58.withZoneRetainFields(dateTimeZone65);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateMidnight73);
        boolean boolean75 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateMidnight73);
        int int76 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime dateTime78 = dateTime11.withDayOfYear((int) (short) 100);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight28);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str33, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 49L + "'", long70 == 49L);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime3.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        mutableDateTime1.setZoneRetainFields(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now(dateTimeZone6);
        int int12 = dateMidnight11.getMillisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plusWeeks(54037);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 292278993);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) 8);
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.minusDays(0);
        org.joda.time.Interval interval10 = dateMidnight9.toInterval();
        org.joda.time.Interval interval12 = interval10.withStartMillis((long) 0);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.Interval interval16 = interval4.withChronology(chronology13);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfYear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays(0);
        org.joda.time.Interval interval22 = dateMidnight21.toInterval();
        org.joda.time.Interval interval24 = interval22.withStartMillis((long) 0);
        org.joda.time.Interval interval25 = interval24.toInterval();
        boolean boolean26 = interval24.isAfterNow();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfYear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.minusDays(0);
        org.joda.time.Interval interval32 = dateMidnight31.toInterval();
        org.joda.time.Interval interval34 = interval32.withStartMillis((long) 0);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.Interval interval36 = interval24.overlap((org.joda.time.ReadableInterval) interval35);
        boolean boolean38 = interval36.contains((long) 'a');
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period(readableInstant43, readableInstant44, periodType45);
        org.joda.time.Period period48 = period46.plusDays(2022);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.dayOfYear();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusDays(0);
        org.joda.time.Interval interval55 = dateMidnight54.toInterval();
        org.joda.time.Interval interval57 = interval55.withStartMillis((long) 0);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        boolean boolean59 = interval49.contains((org.joda.time.ReadableInterval) interval57);
        boolean boolean60 = interval36.abuts((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) (short) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.withZone(dateTimeZone71);
        org.joda.time.DateTime.Property property73 = dateTime72.yearOfCentury();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration62, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Interval interval75 = interval36.gap((org.joda.time.ReadableInterval) interval74);
        boolean boolean76 = interval4.contains((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Period period77 = interval4.toPeriod();
        org.joda.time.Period period78 = period77.toPeriod();
        org.joda.time.Period period80 = period77.multipliedBy(44);
        org.joda.time.Duration duration81 = period80.toStandardDuration();
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property84 = dateMidnight83.dayOfYear();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight83.minusDays(0);
        org.joda.time.Interval interval87 = dateMidnight86.toInterval();
        org.joda.time.Interval interval89 = interval87.withStartMillis((long) 0);
        org.joda.time.Chronology chronology90 = interval89.getChronology();
        org.joda.time.DurationField durationField91 = chronology90.centuries();
        org.joda.time.LocalDate localDate92 = new org.joda.time.LocalDate(chronology90);
        org.joda.time.LocalDate.Property property93 = localDate92.yearOfCentury();
        org.joda.time.DateTime dateTime94 = localDate92.toDateTimeAtMidnight();
        org.joda.time.Interval interval95 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period80, (org.joda.time.ReadableInstant) dateTime94);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        long long13 = duration12.getStandardMinutes();
        org.joda.time.Instant instant15 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration12, 2);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant26, readableInstant27, periodType28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = period29.normalizedStandard(periodType30);
        java.lang.String str32 = period29.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.Duration duration42 = period29.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.DateTime dateTime48 = property46.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str50 = periodType49.getName();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime48, periodType49);
        org.joda.time.DateTime dateTime52 = dateTime23.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = duration61.plus((long) 'u');
        mutableDateTime54.add((org.joda.time.ReadableDuration) duration63, (-1));
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (-1), chronology67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = dateTime68.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 1, periodType76);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime54, (org.joda.time.ReadableInstant) dateTime74, periodType76);
        mutableDateTime54.setMillis((long) 1969);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.Seconds seconds82 = duration42.toStandardSeconds();
        org.joda.time.Instant instant83 = instant15.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Instant instant85 = instant83.plus(86400013L);
        org.joda.time.Instant instant87 = instant83.plus((long) 3);
        org.joda.time.Instant instant89 = instant87.plus((long) 3);
        org.joda.time.Instant instant91 = instant89.minus(32769L);
        org.joda.time.Chronology chronology92 = instant91.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(0, 100441, 84959999, 53847612, 54031, chronology92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53847612 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "YearWeekDay" + "'", str50, "YearWeekDay");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(seconds82);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(chronology92);
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        java.util.Date date14 = calendar12.getTime();
        int int15 = calendar12.getWeeksInWeekYear();
        calendar12.set(31, (int) (short) 0, (int) '#');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant30, readableInstant31, periodType32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = period33.normalizedStandard(periodType34);
        java.lang.String str36 = period33.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withZone(dateTimeZone44);
        org.joda.time.Duration duration46 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str54 = periodType53.getName();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime52, periodType53);
        org.joda.time.DateTime dateTime56 = dateTime27.minus((org.joda.time.ReadableDuration) duration46);
        boolean boolean57 = calendar12.before((java.lang.Object) duration46);
        int int58 = calendar12.getFirstDayOfWeek();
        int int59 = calendar12.getWeekYear();
        boolean boolean60 = calendar12.isWeekDateSupported();
        java.util.TimeZone timeZone61 = calendar12.getTimeZone();
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.fromCalendarFields(calendar12);
        int int63 = calendar12.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-61186147200001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=35,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0S" + "'", str36, "PT0S");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "YearWeekDay" + "'", str54, "YearWeekDay");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 31 + "'", int59 == 31);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        calendar12.setFirstDayOfWeek(10);
        calendar12.roll(8, 9);
        int int19 = calendar12.getMinimum((int) (byte) 10);
        java.lang.String str20 = calendar12.getCalendarType();
        java.lang.String str21 = calendar12.getCalendarType();
        java.util.TimeZone timeZone22 = calendar12.getTimeZone();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=10,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        org.joda.time.Period period1 = org.joda.time.Period.days(2030);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = dateTime7.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant11, readableInstant12, periodType13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = period14.normalizedStandard(periodType15);
        org.joda.time.Period period18 = period16.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray19 = period18.getFieldTypes();
        org.joda.time.Period period21 = period18.minusYears(7);
        org.joda.time.Period period23 = period21.withMinutes(59);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime10.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period1.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period27 = period25.plusYears(249);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldTypeArray19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("1 Jan 1970 00:19:57 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1 Jan 1970 00:19:57 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight1, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setYear(1969);
        boolean boolean33 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableDuration) duration40, periodType43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfYear();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(0);
        org.joda.time.Interval interval51 = dateMidnight50.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int53 = dateMidnight50.get(dateTimeFieldType52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight0.withField(dateTimeFieldType52, 3);
        int int56 = dateMidnight0.getDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay57 = dateMidnight0.toYearMonthDay();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(periodType58);
        mutablePeriod59.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray62 = mutablePeriod59.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod63 = mutablePeriod59.toMutablePeriod();
        java.lang.String str64 = mutablePeriod59.toString();
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay57.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.YearMonthDay.Property property66 = yearMonthDay65.year();
        org.joda.time.DateTime dateTime67 = yearMonthDay65.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property68 = yearMonthDay65.dayOfMonth();
        org.joda.time.YearMonthDay.Property property69 = yearMonthDay65.monthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "P35D" + "'", str64, "P35D");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime32 = dateTime12.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime34 = dateTime12.minusMonths(0);
        org.joda.time.DateTime dateTime36 = dateTime12.minusMinutes((int) '#');
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis(52);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime38);
        int int40 = dateTime38.getYear();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1969 + "'", int40 == 1969);
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 44);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) 12);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        mutableDateTime22.setZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime22.getZone();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        mutableDateTime20.setZoneRetainFields(dateTimeZone25);
        long long30 = dateTimeZone25.adjustOffset((long) 49, false);
        org.joda.time.DateTime dateTime31 = dateTime6.toDateTime(dateTimeZone25);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.minusDays(0);
        org.joda.time.Interval interval38 = dateMidnight37.toInterval();
        int int39 = dateMidnight37.getCenturyOfEra();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period41 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight37, periodType40);
        org.joda.time.PeriodType periodType42 = periodType40.withMonthsRemoved();
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.minusDays(0);
        org.joda.time.Interval interval48 = dateMidnight47.toInterval();
        org.joda.time.Interval interval50 = interval48.withStartMillis((long) 0);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.centuries();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.centuryOfEra();
        org.joda.time.DurationField durationField54 = chronology51.halfdays();
        org.joda.time.DurationField durationField55 = chronology51.hours();
        org.joda.time.Period period56 = duration1.toPeriod(periodType42, chronology51);
        java.lang.String str57 = chronology51.toString();
        long long61 = chronology51.add((long) 58, (long) 86393999, 86393999);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 49L + "'", long30 == 49L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(period56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[+00:00:00.683]" + "'", str57, "ISOChronology[+00:00:00.683]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 7463923063212059L + "'", long61 == 7463923063212059L);
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(3308400000L, periodType1);
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withDayOfWeek(2);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMinutes((int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = duration33.plus((long) 'u');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime38.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration56);
        boolean boolean59 = duration35.isEqual((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime19.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusMonths(200);
        int int63 = localDateTime62.size();
        org.joda.time.LocalDateTime.Property property64 = localDateTime62.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str40, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime3.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        mutableDateTime1.setZoneRetainFields(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        boolean boolean15 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime19.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime19.getZone();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        mutableDateTime17.setZoneRetainFields(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime11.toDateTime(dateTimeZone22);
        int int28 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime dateTime29 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfMonth();
        org.joda.time.DurationField durationField31 = property30.getDurationField();
        long long34 = durationField31.getValueAsLong((long) 70, (long) 52);
        org.joda.time.DurationFieldType durationFieldType35 = durationField31.getType();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType35);
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        boolean boolean3 = localDateTime1.isSupported(durationFieldType2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withYearOfEra(45);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(2525);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withWeekyear(41);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYearOfEra((int) '4');
        int int59 = localDateTime58.getWeekyear();
        java.lang.String str60 = localDateTime58.toString();
        int int61 = localDateTime58.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.minusMinutes(23);
        int int64 = localDateTime63.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0052-12-27T00:00:00.682" + "'", str60, "0052-12-27T00:00:00.682");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 85020682 + "'", int64 == 85020682);
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight1, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setYear(1969);
        boolean boolean33 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableDuration) duration40, periodType43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfYear();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(0);
        org.joda.time.Interval interval51 = dateMidnight50.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int53 = dateMidnight50.get(dateTimeFieldType52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight0.withField(dateTimeFieldType52, 3);
        int int56 = dateMidnight0.getDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay57 = dateMidnight0.toYearMonthDay();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(periodType58);
        mutablePeriod59.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray62 = mutablePeriod59.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod63 = mutablePeriod59.toMutablePeriod();
        java.lang.String str64 = mutablePeriod59.toString();
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay57.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = dateTime73.withZone(dateTimeZone75);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period79 = new org.joda.time.Period((long) 1, periodType78);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone75, periodType78);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) 12, periodType78);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType82.getDurationType();
        int int84 = mutablePeriod81.indexOf(durationFieldType83);
        int int85 = mutablePeriod81.size();
        org.joda.time.MutablePeriod mutablePeriod86 = mutablePeriod81.copy();
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay65.plus((org.joda.time.ReadablePeriod) mutablePeriod81);
        mutablePeriod81.setMinutes(0);
        org.joda.time.Period period90 = new org.joda.time.Period();
        mutablePeriod81.add((org.joda.time.ReadablePeriod) period90);
        org.joda.time.Period period93 = period90.plusDays(2000);
        org.joda.time.Days days94 = period93.toStandardDays();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "P35D" + "'", str64, "P35D");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 5 + "'", int85 == 5);
        org.junit.Assert.assertNotNull(mutablePeriod86);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(days94);
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        long long8 = duration7.getStandardMinutes();
        org.joda.time.Instant instant10 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration7, 2);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime14.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime.Property property35 = dateTime18.year();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight11, dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        mutableDateTime40.setYear(1969);
        boolean boolean43 = dateMidnight11.isEqual((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration52 = duration50.plus((long) 'u');
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration50, periodType53);
        mutablePeriod54.addSeconds(42);
        mutablePeriod54.addWeeks((-1));
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (-1), chronology63);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = dateTime64.withZone(dateTimeZone66);
        org.joda.time.DateTime.Property property68 = dateTime64.dayOfWeek();
        org.joda.time.DateTime dateTime69 = property68.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property70 = dateTime69.millisOfDay();
        org.joda.time.DateTime dateTime72 = property70.addToCopy((long) 100);
        org.joda.time.Duration duration73 = mutablePeriod54.toDurationFrom((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (-1), chronology75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.Duration duration80 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Duration duration82 = duration80.plus((long) 'u');
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (-1), chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean87 = dateTime85.isSupported(dateTimeFieldType86);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period89 = duration80.toPeriodTo((org.joda.time.ReadableInstant) dateTime85, periodType88);
        boolean boolean90 = duration73.isShorterThan((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Interval interval91 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableDuration) duration80);
        org.joda.time.Chronology chronology92 = instant10.getChronology();
        org.joda.time.Instant instant95 = instant10.withDurationAdded(50080131L, 8);
        org.joda.time.Instant instant98 = instant95.withDurationAdded((long) 392, 53829);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateMidnight11);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str16, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(instant95);
        org.junit.Assert.assertNotNull(instant98);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate4 = localDate2.plusYears(10);
        boolean boolean6 = localDate2.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime9.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.minusDays(10);
        org.joda.time.Period period19 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay18.year();
        org.joda.time.YearMonthDay yearMonthDay22 = property20.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.Period period24 = org.joda.time.Period.months((int) ' ');
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay22.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weeks();
        int int27 = period24.get(durationFieldType26);
        boolean boolean28 = periodType1.isSupported(durationFieldType26);
        java.lang.String str29 = periodType1.getName();
        org.joda.time.Period period30 = new org.joda.time.Period(0L, periodType1);
        org.joda.time.Minutes minutes31 = period30.toStandardMinutes();
        org.joda.time.Period period33 = period30.plusHours((int) (byte) 0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Time" + "'", str29, "Time");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        java.lang.String str6 = period3.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.Duration duration16 = period3.toDurationFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime22 = property20.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str24 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime22, periodType23);
        int int26 = dateTime22.getCenturyOfEra();
        org.joda.time.DateTime.Property property27 = dateTime22.dayOfYear();
        int int28 = property27.getMinimumValueOverall();
        org.joda.time.DateTime dateTime29 = property27.withMaximumValue();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDay" + "'", str24, "YearWeekDay");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean4 = dateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plusWeeks(32);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 32769);
        boolean boolean10 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight5.dayOfYear();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateMidnight dateMidnight13 = property11.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight15 = property11.addToCopy((int) (short) 100);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfYear" + "'", str12, "dayOfYear");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(2419200, (-85), 714, 56, 2021);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(100);
        org.joda.time.LocalDate localDate5 = localDate0.minusMonths(31);
        int int6 = localDate5.getYearOfCentury();
        org.joda.time.LocalDate.Property property7 = localDate5.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        boolean boolean10 = localDate5.isSupported(durationFieldType9);
        org.joda.time.DateTime dateTime11 = localDate5.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime12 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDate5.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period14 = new org.joda.time.Period((java.lang.Object) dateTimeFieldArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: [Lorg.joda.time.DateTimeField;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        int int55 = localDateTime52.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property56 = localDateTime52.secondOfMinute();
        org.joda.time.LocalDateTime.Property property57 = localDateTime52.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime52.plusYears(54025);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration14 = duration12.plus((long) 'u');
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration14, (-1));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime19.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, periodType27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableInstant) dateTime25, periodType27);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.minusDays(0);
        org.joda.time.Interval interval35 = dateMidnight34.toInterval();
        org.joda.time.Interval interval37 = interval35.withStartMillis((long) 0);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 50, periodType27, chronology38);
        org.joda.time.Period period40 = new org.joda.time.Period((long) 2022, (long) 45, chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.centuryOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (-1), chronology46);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration50 = duration48.plus((long) 'u');
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Period period53 = period51.withMillis(0);
        int[] intArray56 = chronology38.get((org.joda.time.ReadablePeriod) period51, 100L, 0L);
        org.joda.time.TimeOfDay timeOfDay57 = org.joda.time.TimeOfDay.fromMillisOfDay((-155174400000L), chronology38);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, -100]");
        org.junit.Assert.assertNotNull(timeOfDay57);
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withCenturyOfEra((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = localDateTime52.toString(dateTimeFormatter57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime52.plusDays(29);
        int int61 = localDateTime52.size();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime52.plusHours(19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = localDateTime52.withMonthOfYear(203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 203 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0100-01-01T00:00:00.682" + "'", str58, "0100-01-01T00:00:00.682");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(40L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration12 = duration10.plus((long) 'u');
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration12, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        mutableDateTime3.setRounding(dateTimeField17);
        org.joda.time.Interval interval19 = duration1.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setYear((-85));
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime3.millisOfSecond();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.millisOfSecond();
        mutableDateTime3.addMinutes(2000);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withZone(dateTimeZone11);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 1, periodType14);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone11, periodType14);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) 12, periodType14);
        org.joda.time.PeriodType periodType18 = periodType14.withMinutesRemoved();
        java.lang.Object obj24 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(0);
        org.joda.time.Interval interval30 = dateMidnight29.toInterval();
        org.joda.time.Interval interval32 = interval30.withStartMillis((long) 0);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.centuries();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.centuryOfEra();
        org.joda.time.DurationField durationField36 = chronology33.halfdays();
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(obj24, chronology33);
        org.joda.time.Period period38 = new org.joda.time.Period(20L, (long) (short) 100, chronology33);
        org.joda.time.Period period39 = new org.joda.time.Period(20L, 0L, chronology33);
        org.joda.time.Period period40 = new org.joda.time.Period((long) 1965, chronology33);
        org.joda.time.DateTimeField dateTimeField41 = chronology33.millisOfDay();
        org.joda.time.Period period42 = new org.joda.time.Period((long) (-5), 158155470735000L, periodType14, chronology33);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = mutableDateTime1.getZone();
        int int5 = mutableDateTime1.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        boolean boolean5 = localDate2.equals((java.lang.Object) 1.0d);
        org.joda.time.LocalDate localDate7 = localDate2.plusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property8 = localDate2.dayOfYear();
        org.joda.time.LocalDate localDate10 = localDate2.minusMonths(85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate2.withEra(88);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 88 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(periodType14);
        boolean boolean16 = calendar12.after((java.lang.Object) mutablePeriod15);
        int int18 = calendar12.getGreatestMinimum(0);
        calendar12.set(32, 0, 54);
        calendar12.setFirstDayOfWeek(53);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.lang.String str26 = timeZone25.getID();
        int int28 = timeZone25.getOffset((long) 999);
        timeZone25.setID("secondOfMinute");
        int int32 = timeZone25.getOffset((long) 57);
        calendar12.setTimeZone(timeZone25);
        java.util.TimeZone timeZone34 = calendar12.getTimeZone();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone34, locale35);
        java.time.Instant instant37 = calendar36.toInstant();
        java.lang.Object obj38 = calendar36.clone();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53,minimalDaysInFirstWeek=1,ERA=1,YEAR=32,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=54,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT" + "'", str26, "GMT");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455788558,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=558,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "java.util.GregorianCalendar[time=1645455788558,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=558,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "java.util.GregorianCalendar[time=1645455788558,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=558,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "java.util.GregorianCalendar[time=1645455788558,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=558,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        java.util.Date date1 = new java.util.Date((long) (byte) -1);
        date1.setMinutes(20);
        int int4 = date1.getYear();
        int int5 = date1.getSeconds();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date1);
        int int7 = date1.getDate();
        int int8 = date1.getTimezoneOffset();
        long long9 = date1.getTime();
        int int10 = date1.getDate();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (-1), chronology15);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZone(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar23 = dateTime18.toCalendar(locale22);
        int int24 = calendar23.getFirstDayOfWeek();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(periodType25);
        boolean boolean27 = calendar23.after((java.lang.Object) mutablePeriod26);
        java.util.Date date28 = calendar23.getTime();
        date28.setSeconds(86399);
        java.lang.String str31 = date28.toGMTString();
        boolean boolean32 = date1.before(date28);
        org.junit.Assert.assertEquals(date1.toString(), "Wed Dec 31 23:20:59 GMT 1969");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-2340001L) + "'", long9 == (-2340001L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 23:58:59 GMT 1970");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1 Jan 1970 23:58:59 GMT" + "'", str31, "1 Jan 1970 23:58:59 GMT");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMinutes((int) ' ');
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getISO3Language();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) ' ');
        java.util.Locale locale17 = java.util.Locale.ITALY;
        int int18 = property14.getMaximumShortTextLength(locale17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("PT0S");
        int int21 = property14.getMaximumShortTextLength(locale20);
        java.lang.String str22 = locale9.getDisplayVariant(locale20);
        java.lang.String str23 = dateTimeField7.getAsText((int) '4', locale20);
        java.lang.String str24 = property4.getAsShortText(locale20);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getISO3Language();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime36 = property34.addToCopy((int) ' ');
        java.util.Locale locale37 = java.util.Locale.ITALY;
        int int38 = property34.getMaximumShortTextLength(locale37);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("PT0S");
        int int41 = property34.getMaximumShortTextLength(locale40);
        java.lang.String str42 = locale29.getDisplayVariant(locale40);
        java.lang.String str43 = dateTimeField27.getAsText((int) '4', locale40);
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getISO3Language();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((int) ' ');
        java.util.Locale locale53 = java.util.Locale.ITALY;
        int int54 = property50.getMaximumShortTextLength(locale53);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("PT0S");
        int int57 = property50.getMaximumShortTextLength(locale56);
        java.lang.String str58 = locale45.getDisplayVariant(locale56);
        java.lang.String str59 = dateTimeField27.getAsText(1, locale45);
        java.lang.String str60 = locale45.getISO3Language();
        java.lang.String str61 = locale20.getDisplayScript(locale45);
        java.lang.String str62 = locale45.getScript();
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale63.getISO3Language();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (-1), chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.DateTime dateTime70 = property68.addToCopy((int) ' ');
        java.util.Locale locale71 = java.util.Locale.ITALY;
        int int72 = property68.getMaximumShortTextLength(locale71);
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("PT0S");
        int int75 = property68.getMaximumShortTextLength(locale74);
        java.lang.String str76 = locale63.getDisplayVariant(locale74);
        java.util.Locale locale77 = java.util.Locale.ITALY;
        java.lang.String str78 = locale74.getDisplayName(locale77);
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.lang.String str80 = locale79.getISO3Language();
        java.lang.String str81 = locale74.getDisplayScript(locale79);
        java.lang.String str82 = locale45.getDisplayName(locale79);
        java.lang.String str84 = locale79.getUnicodeLocaleType("71");
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "deu" + "'", str10, "deu");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "52" + "'", str23, "52");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "3" + "'", str24, "3");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "deu" + "'", str30, "deu");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "52" + "'", str43, "52");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "deu" + "'", str46, "deu");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "deu" + "'", str60, "deu");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "deu" + "'", str64, "deu");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "deu" + "'", str80, "deu");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Deutsch" + "'", str82, "Deutsch");
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withCenturyOfEra(2022);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight0.toYearMonthDay();
        org.joda.time.LocalDate localDate6 = dateMidnight0.toLocalDate();
        int int7 = dateMidnight0.getMonthOfYear();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        boolean boolean10 = periodType8.isSupported(durationFieldType9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight0.withFieldAdded(durationFieldType9, 1439);
        int int13 = dateMidnight12.getDayOfWeek();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.year();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight17 = property14.addToCopy((long) 'u');
        org.joda.time.DateMidnight dateMidnight19 = property14.addToCopy((-54));
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime3.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        mutableDateTime1.setZoneRetainFields(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone6);
        int int10 = yearMonthDay9.getDayOfMonth();
        int int11 = yearMonthDay9.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        int int5 = localDate3.getDayOfWeek();
        int int6 = localDate3.getYear();
        int int7 = localDate3.getCenturyOfEra();
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfEra();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDate3, 32, locale10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType12);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.toMutablePeriod();
        int int15 = mutablePeriod14.getMillis();
        org.joda.time.LocalDate localDate17 = localDate3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) '4');
        org.joda.time.LocalDate localDate19 = localDate3.withYearOfCentury(57);
        org.joda.time.LocalDate localDate21 = localDate19.withWeekyear(1969);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) 'a');
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfYear();
        java.util.Date date25 = localDate23.toDate();
        org.joda.time.LocalDate localDate27 = localDate23.minusDays((int) (short) 10);
        java.util.Date date28 = localDate27.toDate();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Feb 21 00:00:00 GMT 2154");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Feb 11 00:00:00 GMT 2154");
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusMinutes((int) ' ');
        int int5 = timeOfDay4.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusMinutes(20);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusSeconds(69);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusMillis(1979);
        org.joda.time.Chronology chronology12 = timeOfDay9.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) 53956, chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus(readablePeriod15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.plusDays(0);
        org.junit.Assert.assertNotNull(timeOfDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(714, 1935, 15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1935 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        java.lang.Object obj0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(obj0);
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration10, (-1));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration21.plus((long) 'u');
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration23, (-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime34, periodType36);
        mutableDateTime14.setMillis((long) 1969);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration47.plus((long) 'u');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean54 = dateTime52.isSupported(dateTimeFieldType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period56 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime52, periodType55);
        org.joda.time.Period period57 = duration10.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime14, periodType55);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime14.centuryOfEra();
        mutableDateTime14.addMinutes(0);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime14.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.roundHalfCeiling();
        int int63 = mutableDateTime62.getEra();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withWeekyear(41);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime59 = property57.addToCopy(0);
        int int60 = localDateTime59.getYear();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 41 + "'", int60 == 41);
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime2.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property13 = localTime7.property(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property14 = localTime7.secondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        mutableDateTime33.setZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime33.getZone();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        mutableDateTime31.setZoneRetainFields(dateTimeZone36);
        long long41 = dateTimeZone36.adjustOffset((long) 49, false);
        org.joda.time.DateTime dateTime42 = dateTime17.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime43 = localTime7.toDateTimeToday(dateTimeZone36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime();
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks((int) (byte) 1);
        boolean boolean54 = dateTime43.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property55 = dateTime53.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = dateTime53.withMonthOfYear(100375);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100375 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str4, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 49L + "'", long41 == 49L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1439);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear(56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) (-54));
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("minuteOfHour");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withLocale(locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 19);
        boolean boolean17 = dateTimeFormatter16.isPrinter();
        boolean boolean18 = dateTimeFormatter16.isPrinter();
        boolean boolean19 = dateTimeFormatter16.isOffsetParsed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(90, 28);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = period13.normalizedStandard(periodType14);
        java.lang.String str16 = period13.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withZone(dateTimeZone24);
        org.joda.time.Duration duration26 = period13.toDurationFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime32 = property30.addToCopy((int) ' ');
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.String str34 = periodType33.getName();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime32, periodType33);
        org.joda.time.DateTime dateTime36 = dateTime7.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = duration45.plus((long) 'u');
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration47, (-1));
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (-1), chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime52.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 1, periodType60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime38, (org.joda.time.ReadableInstant) dateTime58, periodType60);
        mutableDateTime38.setMillis((long) 1969);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(dateTimeZone66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period(readableInstant68, readableInstant69, periodType70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = period71.normalizedStandard(periodType72);
        java.lang.String str74 = period71.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (-1), chronology76);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (-1), chronology79);
        org.joda.time.Duration duration81 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = dateTime80.withZone(dateTimeZone82);
        org.joda.time.Duration duration84 = period71.toDurationFrom((org.joda.time.ReadableInstant) dateTime83);
        mutableDateTime67.add((org.joda.time.ReadableDuration) duration84, 12);
        org.joda.time.Duration duration88 = duration84.withMillis((long) 42);
        org.joda.time.Duration duration89 = duration26.minus((org.joda.time.ReadableDuration) duration88);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "YearWeekDay" + "'", str34, "YearWeekDay");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT0S" + "'", str74, "PT0S");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration89);
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight1, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setYear(1969);
        boolean boolean33 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableDuration) duration40, periodType43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfYear();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(0);
        org.joda.time.Interval interval51 = dateMidnight50.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int53 = dateMidnight50.get(dateTimeFieldType52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight0.withField(dateTimeFieldType52, 3);
        int int56 = dateMidnight0.getDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay57 = dateMidnight0.toYearMonthDay();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(periodType58);
        mutablePeriod59.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray62 = mutablePeriod59.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod63 = mutablePeriod59.toMutablePeriod();
        java.lang.String str64 = mutablePeriod59.toString();
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay57.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.YearMonthDay.Property property66 = yearMonthDay65.year();
        org.joda.time.DateTime dateTime67 = yearMonthDay65.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property68 = yearMonthDay65.dayOfMonth();
        java.lang.String str69 = yearMonthDay65.toString();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "P35D" + "'", str64, "P35D");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-01-17" + "'", str69, "2022-01-17");
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusSeconds((int) (byte) 10);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType5);
        mutablePeriod6.addYears((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod6, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay4.withSecondOfMinute(14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withZone(dateTimeZone22);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 1, periodType25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone22, periodType25);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) 12, periodType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        int int31 = mutablePeriod28.indexOf(durationFieldType30);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay12.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay12.minusHours(1971);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay12.minusMinutes(17);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withZone(dateTimeZone44);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period48 = new org.joda.time.Period((long) 1, periodType47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone44, periodType47);
        org.joda.time.MutablePeriod mutablePeriod50 = mutablePeriod49.copy();
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod49.copy();
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay12.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod51, 25579);
        int int54 = timeOfDay12.size();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (-1), chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime63 = dateTime57.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay64 = dateTime63.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay64.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay66.plusMonths((int) (byte) -1);
        org.joda.time.YearMonthDay.Property property69 = yearMonthDay68.year();
        org.joda.time.YearMonthDay yearMonthDay71 = property69.addToCopy((int) (short) 1);
        org.joda.time.DateTime dateTime72 = yearMonthDay71.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime73 = yearMonthDay71.toDateTimeAtMidnight();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.months();
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay71.withFieldAdded(durationFieldType74, 54);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay76.withField(dateTimeFieldType77, 99);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay81 = timeOfDay12.withField(dateTimeFieldType77, 366);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(yearMonthDay79);
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        org.joda.time.Period period1 = org.joda.time.Period.days(2030);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = dateTime7.toLocalDateTime();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant11, readableInstant12, periodType13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = period14.normalizedStandard(periodType15);
        org.joda.time.Period period18 = period16.minusDays(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray19 = period18.getFieldTypes();
        org.joda.time.Period period21 = period18.minusYears(7);
        org.joda.time.Period period23 = period21.withMinutes(59);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime10.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period1.withFields((org.joda.time.ReadablePeriod) period21);
        int int26 = period25.getYears();
        org.joda.time.Period period28 = period25.minusHours(13);
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (-1), chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime32.toString(dateTimeFormatter33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (-1), chronology41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTime.Property property53 = dateTime36.year();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight29, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateMidnight.Property property55 = dateMidnight29.yearOfCentury();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (-1), chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.Duration duration62 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = duration62.plus((long) 'u');
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration64);
        java.lang.String str66 = dateMidnight29.toString();
        org.joda.time.Duration duration67 = period25.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period69 = period25.multipliedBy(25253);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldTypeArray19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-7) + "'", int26 == (-7));
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateMidnight29);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str34, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-21T00:00:00.000+00:00:00.683" + "'", str66, "2022-02-21T00:00:00.000+00:00:00.683");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration39, periodType42);
        mutablePeriod43.addSeconds(42);
        mutablePeriod43.addWeeks((-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withZone(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((long) 100);
        org.joda.time.Duration duration62 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(dateTimeZone63);
        mutableDateTime64.setDayOfYear(1);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime64.millisOfDay();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (-1), chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (-1), chronology72);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration76 = duration74.plus((long) 'u');
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean81 = dateTime79.isSupported(dateTimeFieldType80);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period83 = duration74.toPeriodTo((org.joda.time.ReadableInstant) dateTime79, periodType82);
        org.joda.time.PeriodType periodType84 = periodType82.withWeeksRemoved();
        org.joda.time.Period period85 = duration62.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime64, periodType84);
        mutableDateTime64.addHours(1967);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime64.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime89 = mutableDateTime64.copy();
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(mutableDateTime89);
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate4 = localDate2.plusYears(10);
        boolean boolean6 = localDate2.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime9.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.minusDays(10);
        org.joda.time.Period period19 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime22.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.Duration duration28 = period19.toDurationTo((org.joda.time.ReadableInstant) dateMidnight27);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration28, 86399);
        mutableDateTime1.setMinuteOfDay(6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = mutableDateTime1.toString("ap. J.-C.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: p");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(duration28);
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusDays(10);
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay16.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property18.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = property24.addToCopy((int) ' ');
        java.util.Locale locale27 = java.util.Locale.ITALY;
        int int28 = property24.getMaximumShortTextLength(locale27);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("PT0S");
        int int31 = property24.getMaximumShortTextLength(locale30);
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = property18.getAsShortText(locale30);
        int int34 = property18.getMaximumValueOverall();
        int int35 = property18.getMaximumValueOverall();
        int int36 = property18.getMaximumValue();
        org.joda.time.DurationField durationField37 = property18.getRangeDurationField();
        int int38 = property18.getMaximumValue();
        int int39 = property18.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay41 = property18.setCopy(1925);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1978" + "'", str33, "1978");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertNull(durationField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay41);
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(20L);
        int[] intArray2 = mutablePeriod1.getValues();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setValue(2002, 53887);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2002");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 20]");
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime26 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime7.minusMinutes((int) (short) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (-1), chronology33);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime31.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay38.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay38.plusMonths(999);
        org.joda.time.Interval interval43 = yearMonthDay38.toInterval();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        mutableDateTime47.setZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime47.getZone();
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        mutableDateTime45.setZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = yearMonthDay38.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.DateTime.Property property54 = dateTime53.weekyear();
        org.joda.time.DateTime dateTime56 = dateTime53.minusMillis(41);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.dayOfYear();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minusDays(0);
        org.joda.time.Interval interval62 = dateMidnight61.toInterval();
        org.joda.time.Interval interval64 = interval62.withStartMillis((long) 0);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.centuries();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.centuryOfEra();
        long long70 = dateTimeField67.set((long) ' ', "55");
        long long73 = dateTimeField67.getDifferenceAsLong(511L, 0L);
        org.joda.time.LocalDate localDate74 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate76 = localDate74.plusYears(10);
        org.joda.time.LocalDate.Property property77 = localDate76.year();
        org.joda.time.LocalDate localDate79 = property77.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate80 = property77.roundHalfCeilingCopy();
        java.util.Locale locale81 = java.util.Locale.JAPANESE;
        java.lang.String str82 = dateTimeField67.getAsText((org.joda.time.ReadablePartial) localDate80, locale81);
        int int84 = dateTimeField67.getMinimumValue((long) 24);
        int int85 = dateTime56.get(dateTimeField67);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = dateTimeField67.getType();
        int int87 = dateTime7.get(dateTimeFieldType86);
        org.joda.time.DateTime dateTime89 = dateTime7.minusWeeks(360000000);
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 113605027200032L + "'", long70 == 113605027200032L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "20" + "'", str82, "20");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 19 + "'", int85 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 19 + "'", int87 == 19);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        boolean boolean5 = dateTimeFormatter4.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 1439);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        int int9 = dateTimeFormatter8.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withPivotYear(575);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter11.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withDefaultYear(21);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) 31);
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter14.withChronology(chronology17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '4', (long) 2059, chronology17);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2000 + "'", int9 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.plusMonths(999);
        org.joda.time.DateTime dateTime14 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.parse("2022-02-21T00:01:40.436Z");
        org.joda.time.DateTime dateTime17 = yearMonthDay13.toDateTime((org.joda.time.ReadableInstant) mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withWeekyear((-292275054));
        int int3 = dateTime2.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        boolean boolean9 = dateTime7.isBefore((long) 2);
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = property10.setCopy("1970-01-04T00:00:00.682+00:00:00.683");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-04T00:00:00.682+00:00:00.683\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(0);
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        boolean boolean16 = interval7.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        long long17 = interval7.toDurationMillis();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.minusDays(0);
        org.joda.time.Interval interval23 = dateMidnight22.toInterval();
        org.joda.time.Interval interval25 = interval23.withStartMillis((long) 0);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfYear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.minusDays(0);
        org.joda.time.Interval interval32 = dateMidnight31.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = interval32.toMutableInterval();
        boolean boolean34 = interval25.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        boolean boolean35 = interval7.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (-1), chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (-1), chronology47);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean52 = dateTime48.isAfterNow();
        org.joda.time.DateTime dateTime54 = dateTime48.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime55 = dateTime54.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean57 = localDateTime55.isSupported(dateTimeFieldType56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        mutableDateTime59.setDayOfYear(1);
        int int62 = mutableDateTime59.getSecondOfMinute();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = dateTime65.toString(dateTimeFormatter66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = dateTime65.toDateTime(dateTimeZone68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (-1), chronology71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (-1), chronology74);
        org.joda.time.Duration duration76 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology78);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (-1), chronology81);
        org.joda.time.Duration duration83 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableDuration) duration83);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableDuration) duration83);
        mutableDateTime59.add((org.joda.time.ReadableDuration) duration83);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime55.withDurationAdded((org.joda.time.ReadableDuration) duration83, 23);
        int int89 = localDateTime88.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime88.withWeekyear(2030);
        boolean boolean92 = mutableInterval33.equals((java.lang.Object) localDateTime91);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86399317L + "'", long17 == 86399317L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str67, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        int int5 = localDate3.getDayOfWeek();
        int int6 = localDate3.getYear();
        int int7 = localDate3.getCenturyOfEra();
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfEra();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDate3, 32, locale10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType12);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.toMutablePeriod();
        int int15 = mutablePeriod14.getMillis();
        org.joda.time.LocalDate localDate17 = localDate3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) '4');
        org.joda.time.LocalDate localDate19 = localDate3.withYearOfCentury(57);
        org.joda.time.LocalDate localDate21 = localDate19.withWeekyear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        int int23 = localDate21.get(dateTimeFieldType22);
        int int24 = localDate21.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Interval interval8 = interval7.toInterval();
        boolean boolean9 = interval7.isAfterNow();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusDays(0);
        org.joda.time.Interval interval15 = dateMidnight14.toInterval();
        org.joda.time.Interval interval17 = interval15.withStartMillis((long) 0);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.Interval interval19 = interval7.overlap((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval19.withEndMillis(86400013L);
        boolean boolean22 = interval21.containsNow();
        org.joda.time.DateTime dateTime23 = interval21.getEnd();
        long long24 = interval21.getEndMillis();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86400013L + "'", long24 == 86400013L);
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-21T14:59:11.877Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:59:11.877Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration8.plus((long) 'u');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean15 = dateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period17 = duration8.toPeriodTo((org.joda.time.ReadableInstant) dateTime13, periodType16);
        org.joda.time.PeriodType periodType18 = periodType16.withSecondsRemoved();
        org.joda.time.PeriodType periodType19 = periodType16.withYearsRemoved();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays(0);
        org.joda.time.Interval interval25 = dateMidnight24.toInterval();
        org.joda.time.Interval interval27 = interval25.withStartMillis((long) 0);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology28);
        long long34 = chronology28.add(18L, (long) 3, 200);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 45, (long) 10, periodType16, chronology28);
        org.joda.time.DurationField durationField36 = chronology28.minutes();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.monthOfYear();
        long long39 = dateTimeField37.remainder(1645455371604L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 618L + "'", long34 == 618L);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1781772287L + "'", long39 == 1781772287L);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.set(23);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int6 = property2.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime8 = property2.add((long) 6);
        mutableDateTime8.setMinuteOfDay(99);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusDays(0);
        org.joda.time.Interval interval16 = dateMidnight15.toInterval();
        org.joda.time.Interval interval18 = interval16.withStartMillis((long) 0);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.yearOfEra();
        int int24 = mutableDateTime8.get(dateTimeField23);
        boolean boolean26 = mutableDateTime8.isEqual(50214866L);
        mutableDateTime8.addWeeks(11);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (-1), chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = duration37.plus((long) 'u');
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration39, (-1));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime30.toMutableDateTime(dateTimeZone42);
        mutableDateTime43.addMonths(2030);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime43.minuteOfDay();
        mutableDateTime43.add((long) 86393999);
        boolean boolean49 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        mutableDateTime53.setZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime53.getZone();
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(dateTimeZone56);
        mutableDateTime51.setZoneRetainFields(dateTimeZone56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (-1), chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean63 = dateTime61.isSupported(dateTimeFieldType62);
        org.joda.time.DateMidnight dateMidnight64 = dateTime61.toDateMidnight();
        boolean boolean65 = mutableDateTime51.isEqual((org.joda.time.ReadableInstant) dateTime61);
        int int66 = mutableDateTime51.getMinuteOfDay();
        java.util.GregorianCalendar gregorianCalendar67 = mutableDateTime51.toGregorianCalendar();
        mutableDateTime51.addMonths(2013);
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime8.setTime((long) 980);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar67);
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration39, periodType42);
        org.joda.time.PeriodType periodType44 = periodType42.withMonthsRemoved();
        org.joda.time.PeriodType periodType45 = periodType42.withMonthsRemoved();
        org.joda.time.PeriodType periodType46 = periodType45.withYearsRemoved();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) ' ');
        boolean boolean51 = localTime48.isEqual((org.joda.time.ReadablePartial) localTime50);
        java.lang.String str52 = localTime50.toString();
        org.joda.time.LocalTime localTime54 = localTime50.minusMillis(3);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.hours();
        boolean boolean56 = localTime54.isSupported(durationFieldType55);
        boolean boolean57 = periodType45.isSupported(durationFieldType55);
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "00:00:00.715" + "'", str52, "00:00:00.715");
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.minusDays(0);
        org.joda.time.Interval interval10 = dateMidnight9.toInterval();
        org.joda.time.Interval interval12 = interval10.withStartMillis((long) 0);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        long long19 = chronology13.getDateTimeMillis(41, 7, 3, 3);
        org.joda.time.DateTime dateTime20 = dateMidnight4.toDateTime(chronology13);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight4.minusWeeks((int) (short) 1);
        int int23 = dateMidnight22.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(dateTimeZone25);
        int int27 = timeOfDay26.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.plusHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfYear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.minusDays(0);
        org.joda.time.Interval interval39 = dateMidnight38.toInterval();
        org.joda.time.Interval interval41 = interval39.withStartMillis((long) 0);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.days();
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay33.withChronologyRetainFields(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.seconds();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) 9, chronology42);
        org.joda.time.DateTimeField dateTimeField47 = chronology42.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight22.withChronology(chronology42);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay((-1053276307200000L), chronology42);
        org.joda.time.DurationField durationField50 = chronology42.months();
        int int53 = durationField50.getDifference((long) 53, 75736738870091L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60857481600680L) + "'", long19 == (-60857481600680L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 359 + "'", int23 == 359);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-28800) + "'", int53 == (-28800));
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Date date2 = new java.util.Date();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date2);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime7.getZone();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        mutableDateTime5.setZoneRetainFields(dateTimeZone10);
        long long15 = dateTimeZone10.convertLocalToUTC((long) 17, true);
        org.joda.time.DateTime dateTime16 = yearMonthDay3.toDateTimeAtMidnight(dateTimeZone10);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale18.getExtension('u');
        java.lang.String str21 = dateTimeZone10.getShortName((-604758L), locale18);
        java.util.Locale.Builder builder22 = builder1.setLocale(locale18);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("1");
        java.util.Locale.Builder builder25 = builder1.setLocale(locale24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale24);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = calendar26.getGreatestMinimum(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 15:03:09 GMT 2022");
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-666L) + "'", long15 == (-666L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNull(str20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.683" + "'", str21, "+00:00:00.683");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645455789555,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=9,MILLISECOND=555,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("PT0S");
        java.util.Calendar calendar12 = dateTime7.toCalendar(locale11);
        int int13 = calendar12.getFirstDayOfWeek();
        java.util.Date date14 = calendar12.getTime();
        java.util.Date date21 = new java.util.Date(11, 18, 48, 17, 1970, 5);
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromDateFields(date21);
        boolean boolean23 = date14.before(date21);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromDateFields(date21);
        long long25 = date21.getTime();
        int int26 = date21.getDate();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=682,ZONE_OFFSET=683,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertEquals(date21.toString(), "Mon Aug 19 01:50:05 GMT 1912");
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1810418995000L) + "'", long25 == (-1810418995000L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        org.joda.time.DurationField durationField11 = chronology8.halfdays();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField13.set((long) 27424259, (-758));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -758 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfEra();
        mutableDateTime1.add((long) 'u');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime11.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant16, readableInstant17, periodType18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = period19.normalizedStandard(periodType20);
        org.joda.time.DateTime dateTime23 = dateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period19, 2022);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime11.toDateTime(dateTimeZone24);
        org.joda.time.LocalDate localDate26 = dateTime25.toLocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.withYear(1969);
        org.joda.time.LocalDate localDate30 = localDate26.plusWeeks(31);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate26.minus(readablePeriod31);
        org.joda.time.LocalDate localDate34 = localDate32.withYear(2000);
        org.joda.time.LocalDate localDate35 = localDate8.withFields((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = localDate34.plusDays((-758));
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(dateTimeZone38);
        int int40 = timeOfDay39.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay39.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.minusSeconds(45);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay42.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime47 = timeOfDay42.toDateTimeToday();
        int int49 = timeOfDay42.getValue(0);
        org.joda.time.TimeOfDay.Property property50 = timeOfDay42.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay42.plusSeconds(47);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.withSecondOfMinute(8);
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.fromMillisOfDay((long) 32);
        boolean boolean57 = timeOfDay54.equals((java.lang.Object) localTime56);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = localDate37.compareTo((org.joda.time.ReadablePartial) timeOfDay54);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str13, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 15 + "'", int49 == 15);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-1), chronology14);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration18 = duration16.plus((long) 'u');
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration18, (-1));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1), chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology27);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = duration29.plus((long) 'u');
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration31, (-1));
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime36.plusMonths((int) (short) 100);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 1, periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) dateTime42, periodType44);
        mutableDateTime22.setMillis((long) 1969);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (-1), chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = duration55.plus((long) 'u');
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-1), chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean62 = dateTime60.isSupported(dateTimeFieldType61);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period64 = duration55.toPeriodTo((org.joda.time.ReadableInstant) dateTime60, periodType63);
        org.joda.time.Period period65 = duration18.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime22, periodType63);
        org.joda.time.PeriodType periodType66 = periodType63.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(53959823, 53810, 0, 54017, 980, 53896626, 10070, 100911, periodType66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        int int5 = localDate3.getDayOfWeek();
        int int6 = localDate3.getYear();
        int int7 = localDate3.getCenturyOfEra();
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfEra();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDate3, 32, locale10);
        org.joda.time.LocalDate localDate13 = localDate3.withYearOfCentury(15);
        int int14 = localDate13.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtStartOfDay();
        int int16 = localDate13.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2015 + "'", int16 == 2015);
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration8 = duration6.plus((long) 'u');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = duration6.toPeriodTo((org.joda.time.ReadableInstant) dateTime11, periodType14);
        org.joda.time.DateTime dateTime17 = dateTime11.withYearOfCentury(35);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime20.toString(dateTimeFormatter21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime(dateTimeZone23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant25, readableInstant26, periodType27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = period28.normalizedStandard(periodType29);
        org.joda.time.DateTime dateTime32 = dateTime20.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 2022);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone33);
        org.joda.time.LocalDate localDate35 = dateTime34.toLocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.withYear(1969);
        org.joda.time.LocalDate localDate39 = localDate35.minusYears(58);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.minuteOfDay();
        org.joda.time.DateTime dateTime42 = dateTime17.withChronology(chronology40);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str22, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(10);
        boolean boolean4 = localDate0.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (-1), chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusDays(10);
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay16.year();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.minusYears(53);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (-1), chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.withZone(dateTimeZone28);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime31 = property30.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime31.toMutableDateTime();
        org.joda.time.DateTime dateTime34 = yearMonthDay16.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime36 = dateTime31.minusYears(5);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (-1), chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (-1), chronology43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = duration45.plus((long) 'u');
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration47, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType50.getField(chronology51);
        mutableDateTime38.setRounding(dateTimeField52);
        int int54 = dateTime36.get(dateTimeField52);
        org.joda.time.DateTime dateTime56 = dateTime36.minusHours((-7194));
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1965 + "'", int54 == 1965);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.weekyear();
        org.joda.time.LocalDate localDate4 = localDate0.withWeekOfWeekyear(19);
        java.lang.String str5 = localDate0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = localDate0.getFieldType((-1850));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1850");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21" + "'", str5, "2022-02-21");
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (-1), chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (-1), chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (-1), chronology13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1), chronology20);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime.Property property25 = dateTime8.year();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight1, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime30.setYear(1969);
        boolean boolean33 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration40.plus((long) 'u');
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableDuration) duration40, periodType43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight0.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.withYearOfEra(101);
        int int48 = dateMidnight45.getDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay49 = dateMidnight45.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.minusMonths(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = yearMonthDay51.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant53, readableInstant54, periodType55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = period56.normalizedStandard(periodType57);
        java.lang.String str59 = period56.toString();
        org.joda.time.Period period61 = period56.plusWeeks((int) 'a');
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(periodType62);
        mutablePeriod63.addDays((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray66 = mutablePeriod63.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod67 = mutablePeriod63.toMutablePeriod();
        org.joda.time.Period period68 = period56.withFields((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.Days days69 = period56.toStandardDays();
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay51.plus((org.joda.time.ReadablePeriod) days69);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str6, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PT0S" + "'", str59, "PT0S");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray66);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(yearMonthDay70);
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((-1053270190228000L));
        int int2 = dateMidnight1.getMillisOfDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((int) ' ');
        java.util.Locale locale9 = java.util.Locale.ITALY;
        int int10 = property6.getMaximumShortTextLength(locale9);
        java.util.Locale.setDefault(locale9);
        java.util.Calendar calendar12 = dateMidnight1.toCalendar(locale9);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-1053270259200683,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.683,offset=683,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=31408,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=309,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=683,DST_OFFSET=0]");
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        boolean boolean3 = localDateTime1.isSupported(durationFieldType2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMinutes((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusDays(53986456);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays(57);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfEra(2);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 40, chronology1);
        int int3 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.add(100L);
        mutableDateTime2.setMillis(1645455371604L);
        int int8 = mutableDateTime2.getYear();
        int int9 = mutableDateTime2.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1), chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (-1), chronology19);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property24 = dateTime7.year();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setYear(1969);
        boolean boolean32 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (-1), chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = duration39.plus((long) 'u');
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration39, periodType42);
        mutablePeriod43.addSeconds(42);
        mutablePeriod43.addWeeks((-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (-1), chronology52);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withZone(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy((long) 100);
        org.joda.time.Duration duration62 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.tz.Provider provider63 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet64 = provider63.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider63);
        boolean boolean66 = mutablePeriod43.equals((java.lang.Object) provider63);
        java.util.Set<java.lang.String> strSet67 = provider63.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider63);
        org.joda.time.DateTimeZone.setProvider(provider63);
        org.joda.time.DateTimeZone.setProvider(provider63);
        org.joda.time.DateTimeZone dateTimeZone72 = provider63.getZone("T15:17:23.604");
        org.joda.time.DateTimeZone dateTimeZone74 = provider63.getZone("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"secondOfMinute\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=35,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str5, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNull(dateTimeZone72);
        org.junit.Assert.assertNull(dateTimeZone74);
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        int int15 = property11.getDifference((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime16 = property11.withMinimumValue();
        java.util.Locale locale21 = new java.util.Locale("1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.009Z", "inglese", "1981-12-20");
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = dateTime16.toString("52", locale22);
        org.joda.time.DateTime dateTime25 = dateTime16.plusHours(654120000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(locale21.toString(), "1970-01-01t00:00:00.001z/1970-01-01t00:00:00.009z_INGLESE_1981-12-20");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "1970-01-01t00:00:00.001z/1970-01-01t00:00:00.009z_INGLESE_1981-12-20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "52" + "'", str23, "52");
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.minusDays(0);
        org.joda.time.Interval interval5 = dateMidnight4.toInterval();
        org.joda.time.Interval interval7 = interval5.withStartMillis((long) 0);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(0L, (long) 12);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays(0);
        org.joda.time.Interval interval17 = dateMidnight16.toInterval();
        boolean boolean18 = interval11.isAfter((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTime dateTime19 = interval11.getStart();
        boolean boolean20 = interval7.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Chronology chronology21 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology21);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusDays(10);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate18 = localDate15.plusWeeks(100);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property20.addWrapFieldToCopy(0);
        int int23 = localDate18.compareTo((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateMidnight dateMidnight24 = localDate22.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(0);
        org.joda.time.Interval interval30 = dateMidnight29.toInterval();
        org.joda.time.Interval interval32 = interval30.withStartMillis((long) 0);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight24.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay12.withChronologyRetainFields(chronology33);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(0L, chronology33);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate41 = localDate39.plusYears(10);
        boolean boolean43 = localDate39.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime46.plusMonths((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.minusDays(10);
        org.joda.time.Period period56 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) yearMonthDay55);
        org.joda.time.YearMonthDay.Property property57 = yearMonthDay55.year();
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.minusYears(53);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (-1), chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-1), chronology64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime65.withZone(dateTimeZone67);
        org.joda.time.DateTime.Property property69 = dateTime65.dayOfWeek();
        org.joda.time.DateTime dateTime70 = property69.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property71 = dateTime70.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime70.toMutableDateTime();
        org.joda.time.DateTime dateTime73 = yearMonthDay55.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        int[] intArray75 = chronology33.get((org.joda.time.ReadablePartial) yearMonthDay55, (long) 9);
        org.joda.time.DurationField durationField76 = chronology33.months();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(chronology33);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1), chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-1), chronology11);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateTime12.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        mutableDateTime23.setDayOfYear(1);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (-1), chronology38);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (-1), chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (-1), chronology45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration47);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 23);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        int int55 = localDateTime52.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property56 = localDateTime52.secondOfMinute();
        org.joda.time.LocalDateTime.Property property57 = localDateTime52.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime58 = property57.roundHalfCeilingCopy();
        int int59 = localDateTime58.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.682+00:00:00.683" + "'", str31, "1970-01-01T00:00:00.682+00:00:00.683");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getISO3Language();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime13 = property11.addToCopy((int) ' ');
        java.util.Locale locale14 = java.util.Locale.ITALY;
        int int15 = property11.getMaximumShortTextLength(locale14);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("PT0S");
        int int18 = property11.getMaximumShortTextLength(locale17);
        java.lang.String str19 = locale6.getDisplayVariant(locale17);
        java.lang.String str20 = dateTimeField4.getAsText((int) '4', locale17);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getISO3Language();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((int) ' ');
        java.util.Locale locale30 = java.util.Locale.ITALY;
        int int31 = property27.getMaximumShortTextLength(locale30);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("PT0S");
        int int34 = property27.getMaximumShortTextLength(locale33);
        java.lang.String str35 = locale22.getDisplayVariant(locale33);
        java.lang.String str36 = dateTimeField4.getAsText(1, locale22);
        java.lang.String str37 = locale22.getISO3Language();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone1, locale22);
        calendar38.setLenient(true);
        int int41 = calendar38.getWeeksInWeekYear();
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromCalendarFields(calendar38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = timeOfDay42.getFieldTypes();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "deu" + "'", str7, "deu");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "52" + "'", str20, "52");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "deu" + "'", str23, "deu");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645455790023,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=10,MILLISECOND=23,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = timeOfDay1.toDateTimeToday();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (-1), chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (-1), chronology7);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks((int) (byte) 1);
        int int13 = dateTime12.getDayOfYear();
        org.joda.time.DateTime dateTime14 = timeOfDay1.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalTime localTime15 = timeOfDay1.toLocalTime();
        int[] intArray16 = timeOfDay1.getValues();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay1.plusMillis((-54));
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 359 + "'", int13 == 359);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[15, 3, 10, 723]");
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (-1), chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (-1), chronology5);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (-1), chronology12);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime13);
        boolean boolean17 = dateTime13.isAfterNow();
        org.joda.time.DateTime dateTime19 = dateTime13.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = dateTime19.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = localDateTime20.toDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withDayOfWeek(2);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.plusMinutes((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        java.lang.String str31 = dateTimeFieldType28.toString();
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.property(dateTimeFieldType28);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 41);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        mutableDateTime36.setZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime36.getZone();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        mutableDateTime34.setZoneRetainFields(dateTimeZone39);
        long long44 = dateTimeZone39.adjustOffset((long) 49, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.DateTime dateTime46 = localDateTime27.toDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(0L, dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "year" + "'", str31, "year");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 49L + "'", long44 == 49L);
        org.junit.Assert.assertNotNull(dateTime46);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest39 {

    public static boolean debug = false;

    @Test
    public void test19501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19501");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime dateTime26 = dateTime23.plus((long) 17);
        org.joda.time.DateTime dateTime29 = dateTime26.withDurationAdded((long) 53716013, 32769);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.withCenturyOfEra(2);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = chronology34.add(readablePeriod35, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.secondOfDay();
        org.joda.time.DateTime dateTime40 = dateTime29.toDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField41 = chronology34.yearOfCentury();
        int int43 = dateTimeField41.getLeapAmount((long) 53878763);
        org.joda.time.DurationField durationField44 = dateTimeField41.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54215740 + "'", int5 == 54215740);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54215 + "'", int9 == 54215);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 53633152L + "'", long38 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(durationField44);
    }

    @Test
    public void test19502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19502");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        java.util.Locale locale6 = new java.util.Locale("50");
        java.lang.String str7 = property3.getAsText(locale6);
        org.joda.time.LocalDateTime localDateTime8 = property3.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = property3.roundFloorCopy();
        long long10 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime11 = property3.getLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals(locale6.toString(), "50");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 259200001L + "'", long10 == 259200001L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test19503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19503");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate0.minusWeeks(12);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate0.minus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(101);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtMidnight();
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime18 = property16.addWrapFieldToCopy(26);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str13, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test19504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19504");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMinutes(53636369);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays(53819831);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test19505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19505");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        int int6 = dateTimeZone3.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone3);
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 53657);
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        timeZone15.setID("+00:00");
        timeZone15.setRawOffset(2);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        timeZone22.setID("+00:00");
        boolean boolean25 = timeZone15.hasSameRules(timeZone22);
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone15, locale26);
        java.lang.String str28 = locale26.getLanguage();
        java.lang.String str31 = nameProvider11.getName(locale26, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = locale33.getISO3Country();
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale locale37 = java.util.Locale.getDefault(category32);
        java.lang.String str38 = locale26.getDisplayLanguage(locale37);
        java.lang.String str39 = dateTimeZone1.getName((long) 107297114, locale37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        int int42 = dateTime41.getEra();
        org.joda.time.DateTime.Property property43 = dateTime41.secondOfMinute();
        org.joda.time.DateTime dateTime45 = dateTime41.withCenturyOfEra((int) ' ');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime41.minus(readableDuration46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        int int49 = dateTime47.get(dateTimeFieldType48);
        org.joda.time.DateTime dateTime51 = dateTime47.withYearOfEra(53634);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        int int56 = dateTimeZone53.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.now(dateTimeZone53);
        boolean boolean58 = dateTimeZone53.isFixed();
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeZone53.getShortName((long) 54, locale60);
        org.joda.time.DateTime dateTime62 = dateTime47.withZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTime dateTime63 = dateTime62.toDateTime();
        int int64 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = dateTime63.withCenturyOfEra(53773);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.plus(readableDuration67);
        long long69 = dateTime68.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 53657L + "'", long9 == 53657L);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645455815783,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=35,MILLISECOND=785,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zh" + "'", str28, "zh");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str34, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str38, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 169629729519815783L + "'", long69 == 169629729519815783L);
    }

    @Test
    public void test19506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19506");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter8.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 53730);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withZoneUTC();
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = dateTimeFormatter12.print(1645455689000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test19507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19507");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(32772);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTimeISO();
        int int16 = dateTime12.getMillisOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusYears(12);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime22.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        boolean boolean30 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime6.withChronology(chronology31);
        java.util.Date date39 = new java.util.Date((int) (short) 10, (int) (byte) 1, 9, (int) (byte) -1, (int) (byte) 1, (int) (byte) 0);
        date39.setYear(1);
        int int42 = date39.getYear();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.fromDateFields(date39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getEra();
        int int47 = dateTime45.getSecondOfDay();
        org.joda.time.DateTime dateTime49 = dateTime45.minusYears(12);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime49.toMutableDateTime(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int53 = mutableDateTime51.get(dateTimeFieldType52);
        int int54 = localTime43.get(dateTimeFieldType52);
        int int55 = dateTime32.get(dateTimeFieldType52);
        int int56 = dateTime32.getSecondOfDay();
        int int57 = dateTime32.getYear();
        org.joda.time.DateTime dateTime59 = dateTime32.withYear(0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54215816 + "'", int16 == 54215816);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 54215 + "'", int20 == 54215);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Fri Feb 08 23:01:00 GMT+00:00 1901");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 54215 + "'", int47 == 54215);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 11 + "'", int54 == 11);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test19508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19508");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(2);
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = chronology5.add(readablePeriod6, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology5.millis();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((long) 53668, chronology5);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((-53637000L));
        org.joda.time.LocalTime localTime17 = localTime15.plusMillis(53760293);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        boolean boolean19 = localTime15.isSupported(durationFieldType18);
        java.lang.String str20 = durationFieldType18.toString();
        boolean boolean21 = localTime13.isSupported(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 53633152L + "'", long9 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test19509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19509");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        int int5 = calendar0.getGreatestMinimum(12);
        calendar0.set((-53626948), 53629, 53632, 53633, 53632);
        calendar0.set((int) (short) 1, (int) ' ', 53630324, 53629404, 5);
        int int18 = calendar0.getWeeksInWeekYear();
        calendar0.set(365, 23, 53670067);
        java.util.TimeZone timeZone23 = calendar0.getTimeZone();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = property29.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusHours(53670462);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusWeeks(9);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusSeconds(53627827);
        org.joda.time.LocalDateTime.Property property41 = localDateTime35.dayOfMonth();
        boolean boolean42 = localDateTime31.equals((java.lang.Object) localDateTime35);
        boolean boolean43 = calendar0.before((java.lang.Object) localDateTime31);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime31.minusDays(53786842);
        org.joda.time.Chronology chronology46 = localDateTime31.getChronology();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=365,MONTH=23,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=53670067,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=53629404,MINUTE=5,SECOND=35,MILLISECOND=855,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test19510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19510");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withPeriodAdded(readablePeriod9, 53625);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.year();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withPeriodAdded(readablePeriod17, 53713435);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDateTime15.getValue(54025600);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54025600");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test19511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19511");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(43200, 53995, 54202280, 54208119);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43200 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19512");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        long long6 = dateTime5.getMillis();
        java.lang.String str7 = dateTime5.toString();
        org.joda.time.DateTime dateTime9 = dateTime5.minusHours(575);
        org.joda.time.DateTime dateTime12 = dateTime5.withDurationAdded((long) 53689, 55);
        org.joda.time.DateTime dateTime14 = dateTime5.minusSeconds(53998);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime16.getFieldTypes();
        org.joda.time.Chronology chronology19 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.months();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.yearOfEra();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTime dateTime24 = dateTime5.toDateTime(chronology19);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "35" + "'", str4, "35");
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645455816000L + "'", long6 == 1645455816000L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T15:03:36.000Z" + "'", str7, "2022-02-21T15:03:36.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test19513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19513");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime.Property property7 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime9 = localTime2.plusHours(53626975);
        org.joda.time.LocalTime.Property property10 = localTime2.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime26 = dateTime15.minusMonths(53628014);
        int int27 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime30 = dateTime15.withDurationAdded((long) 100, 53698);
        java.util.Date date31 = dateTime15.toDate();
        org.joda.time.DateTime dateTime32 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime32.withMinuteOfHour(53917012);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53917012 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 54215 + "'", int21 == 54215);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Mon Feb 21 15:03:35 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test19514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19514");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("591");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test19515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19515");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        int int6 = dateTimeZone1.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime.Property property8 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime9 = property8.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property8.addCopy(18955954L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test19516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19516");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        int int7 = localDate4.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate4.withDayOfMonth(54034);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54034 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test19517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19517");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = localTime2.withHourOfDay(53767483);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53767483 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test19518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19518");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        java.lang.String str6 = chronology4.toString();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.secondOfMinute();
        long long14 = dateTimeField12.roundHalfEven((long) 32769);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str6, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 33000L + "'", long14 == 33000L);
    }

    @Test
    public void test19519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19519");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 32772);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        boolean boolean9 = dateTime8.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test19520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19520");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths(53628);
        org.joda.time.LocalDate.Property property8 = localDate5.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate5.plus(readablePeriod9);
        int int11 = localDate10.getWeekyear();
        org.joda.time.LocalDate localDate13 = localDate10.withYearOfEra(53834);
        java.lang.String str14 = localDate10.toString();
        org.joda.time.LocalDate localDate16 = localDate10.withYearOfEra(53656981);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate16.withMonthOfYear(54144);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54144 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-21" + "'", str14, "2022-02-21");
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test19521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19521");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        java.lang.Object obj3 = null;
        org.joda.time.tz.Provider provider4 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone6 = provider4.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj3, dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.LocalDate.Property property10 = localDate2.centuryOfEra();
        int int11 = localDate2.getDayOfWeek();
        org.joda.time.LocalDate.Property property12 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime.Property property17 = dateTime15.secondOfMinute();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear((int) (byte) 100);
        int int21 = localDate18.getDayOfWeek();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        int int26 = dateTimeZone23.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime27 = localDate18.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime15.toMutableDateTime(dateTimeZone23);
        org.joda.time.DateTime.Property property29 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime15.toDateTime();
        int int31 = property12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(provider4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Etc/UTC" + "'", str24, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test19522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19522");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology9.years();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfMonth();
        boolean boolean15 = dateTimeField14.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test19523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19523");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DateTimeField dateTimeField24 = chronology5.clockhourOfHalfday();
        org.joda.time.DurationField durationField25 = chronology5.hours();
        boolean boolean26 = durationField25.isPrecise();
        long long29 = durationField25.add((long) 53959484, 24);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 53642476]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 140359484L + "'", long29 == 140359484L);
    }

    @Test
    public void test19524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19524");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTimeISO();
        int int6 = dateTime2.getMillisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusYears(12);
        boolean boolean13 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime12.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = property16.setCopy("58");
        org.joda.time.DateTime dateTime19 = property16.roundHalfCeilingCopy();
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.withCenturyOfEra(2);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(obj20, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime19.toDateTime(chronology25);
        org.joda.time.DurationField durationField29 = chronology25.hours();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 53674832, chronology25);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology25.add(readablePeriod31, (long) 53951349, 53744);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54215996 + "'", int6 == 54215996);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54215 + "'", int10 == 54215);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 53951349L + "'", long34 == 53951349L);
    }

    @Test
    public void test19525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19525");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int6 = localDate5.size();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        int int9 = property7.getMaximumTextLength(locale8);
        org.joda.time.LocalDate localDate10 = property7.roundCeilingCopy();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        org.joda.time.LocalDate localDate14 = property7.setCopy("53726", locale12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, 54193101);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test19526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19526");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int13 = dateTime11.get(dateTimeFieldType12);
        boolean boolean14 = dateTime6.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime.Property property15 = dateTime6.weekyear();
        int int16 = dateTime6.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-61779833783980L) + "'", long7 == (-61779833783980L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    }

    @Test
    public void test19527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19527");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.withCenturyOfEra(2);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withChronology(chronology8);
        org.joda.time.Chronology chronology10 = dateTimeFormatter3.getChronology();
        org.joda.time.tz.Provider provider12 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone14 = provider12.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 53650853, dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter3.withZone(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear((int) (byte) 100);
        int int20 = localDate17.getDayOfWeek();
        org.joda.time.LocalDate localDate22 = localDate17.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate17.minusWeeks(12);
        org.joda.time.LocalDate localDate26 = localDate17.plusYears(53646831);
        org.joda.time.LocalDate localDate28 = localDate26.minusDays(53738);
        org.joda.time.LocalDate.Property property29 = localDate28.year();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("Fri Feb 08 23:01:00 GMT+00:00 1901");
        java.lang.String str33 = locale32.getCountry();
        java.util.Locale locale34 = locale32.stripExtensions();
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = null;
        org.joda.time.format.DateTimeParser dateTimeParser36 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.withCenturyOfEra(2);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter37.withChronology(chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter37.withPivotYear((java.lang.Integer) 53642);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        int int50 = dateTimeZone47.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone47);
        java.lang.String str53 = dateTimeZone47.getNameKey((long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter37.withZone(dateTimeZone47);
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter37.withLocale(locale55);
        java.lang.String str57 = locale34.getDisplayCountry(locale55);
        org.joda.time.LocalDate localDate58 = property29.setCopy("51", locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter16.withLocale(locale55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant60 = org.joda.time.Instant.parse("", dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(provider12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
    }

    @Test
    public void test19528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19528");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        int int7 = dateTimeField5.get((long) ' ');
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusSeconds(6);
        int int14 = localDateTime9.getYear();
        int[] intArray21 = new int[] { (short) 10, 6, 53629404, 3, '4', (short) 0 };
        int int22 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime9, intArray21);
        long long25 = dateTimeField5.set((-1L), 14);
        long long27 = dateTimeField5.roundFloor(1645401997228L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "36" + "'", str4, "36");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 6, 53629404, 3, 52, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-45001L) + "'", long25 == (-45001L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645401997000L + "'", long27 == 1645401997000L);
    }

    @Test
    public void test19529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19529");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusSeconds(53627827);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMinutes(1969);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusYears(464);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withYear(54010864);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.plusMinutes(54149715);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test19530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19530");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusSeconds((int) (short) -1);
        int int10 = localDateTime7.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.dayOfMonth();
        java.util.Locale locale15 = new java.util.Locale("clockhourOfHalfday");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        int int17 = property13.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime18 = property13.roundHalfFloorCopy();
        java.lang.String str19 = localDateTime18.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals(locale15.toString(), "clockhourofhalfday");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.000" + "'", str19, "1970-01-01T00:00:00.000");
    }

    @Test
    public void test19531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19531");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("14:58:31.343");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '14:58:31.343' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19532");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 2318587200000L);
        org.joda.time.LocalDate localDate3 = localDate1.withYear(53931862);
        org.joda.time.LocalDate.Property property4 = localDate3.era();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test19533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19533");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime.Property property7 = localTime2.hourOfDay();
        int int8 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime localTime10 = localTime2.withMinuteOfHour(19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localTime2.toString(dateTimeFormatter11);
        int int13 = localTime2.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime16 = localTime2.withPeriodAdded(readablePeriod14, 53665281);
        org.joda.time.LocalTime.Property property17 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime18 = property17.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "00:00:00.100" + "'", str12, "00:00:00.100");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test19534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19534");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        int int6 = timeZone2.getOffset((long) 365);
        java.lang.String str7 = timeZone2.getID();
        timeZone2.setRawOffset(53691906);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime.Property property13 = dateTime11.secondOfMinute();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        int int18 = dateTimeField15.getDifference(606L, (long) 1970);
        long long20 = dateTimeField15.remainder((long) (short) 1);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField15.getAsShortText(53635, locale22);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale28 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str29 = locale25.getDisplayLanguage(locale28);
        java.lang.String str30 = dateTimeField15.getAsShortText((int) (byte) -1, locale28);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale28.getDisplayVariant(locale31);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone2, locale28);
        calendar33.set(53637, 53666500, 53662, (-53622326), 53735859);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = localDateTime44.getFieldTypes();
        org.joda.time.Chronology chronology47 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.hourOfDay();
        boolean boolean52 = durationFieldType42.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField53 = chronology47.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.weekyear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.minusWeeks(9);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusMinutes(53628560);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plus(readableDuration62);
        int int64 = localDateTime63.getSecondOfMinute();
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale locale66 = builder65.build();
        java.util.Locale.Builder builder68 = builder65.setScript("");
        java.util.Locale locale69 = builder65.build();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.millisOfDay();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime71.withPeriodAdded(readablePeriod74, 53625);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.year();
        org.joda.time.LocalDateTime localDateTime79 = property77.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime80 = property77.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime81 = property77.roundHalfFloorCopy();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(chronology82);
        int int84 = dateTime83.getEra();
        org.joda.time.DateTime.Property property85 = dateTime83.secondOfMinute();
        java.util.Locale locale87 = java.util.Locale.getDefault();
        org.joda.time.DateTime dateTime88 = property85.setCopy("46", locale87);
        int int89 = property77.getMaximumShortTextLength(locale87);
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(locale87);
        java.util.Locale.Builder builder91 = builder65.setLocale(locale87);
        java.util.Locale.Builder builder94 = builder65.setExtension('u', "");
        java.util.Locale locale95 = builder65.build();
        java.lang.String str96 = dateTimeField54.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, locale95);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = calendar33.getDisplayName(53774, 0, locale95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+14:54");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "36" + "'", str14, "36");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "53635" + "'", str23, "53635");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str26, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals(locale28.toString(), "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=53691906,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53637,MONTH=53666500,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=53662,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=5,HOUR_OF_DAY=-53622326,MINUTE=53735859,SECOND=28,MILLISECOND=4,ZONE_OFFSET=53691906,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(locale87);
// flaky:         org.junit.Assert.assertEquals(locale87.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertNotNull(calendar90);
// flaky:         org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=1645455816099,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=36,MILLISECOND=99,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(locale95);
// flaky:         org.junit.Assert.assertEquals(locale95.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "2071" + "'", str96, "2071");
    }

    @Test
    public void test19535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19535");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        int int7 = dateTimeZone4.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        int int9 = localDate8.size();
        int int10 = localDate8.getWeekOfWeekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 53677);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withDefaultYear(53659);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter31.withOffsetParsed();
        org.joda.time.Chronology chronology33 = dateTimeFormatter32.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter32.withDefaultYear(53585);
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = dateTimeFormatter35.getPrinter();
        org.joda.time.Chronology chronology37 = dateTimeFormatter35.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53633152L + "'", long24 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNull(dateTimePrinter36);
        org.junit.Assert.assertNull(chronology37);
    }

    @Test
    public void test19536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19536");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = property2.withMinimumValue();
        java.util.Locale locale5 = new java.util.Locale("2022-02-21T14:54:47.855Z");
        java.lang.String str6 = property2.getAsText(locale5);
        java.lang.String str7 = locale5.getLanguage();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals(locale5.toString(), "2022-02-21t14:54:47.855z");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21t14:54:47.855z" + "'", str7, "2022-02-21t14:54:47.855z");
    }

    @Test
    public void test19537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19537");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 32772);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        timeZone12.setID("+00:00");
        timeZone12.setRawOffset(2);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        timeZone19.setID("+00:00");
        boolean boolean22 = timeZone12.hasSameRules(timeZone19);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone12, locale23);
        java.lang.String str25 = locale23.getLanguage();
        java.lang.String str28 = nameProvider8.getName(locale23, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale30 = new java.util.Locale("hi!");
        java.lang.String str31 = locale30.getISO3Country();
        java.util.Locale locale32 = locale30.stripExtensions();
        java.lang.String str33 = locale30.getScript();
        java.lang.String str35 = locale30.getUnicodeLocaleType("57");
        java.lang.String str38 = nameProvider8.getShortName(locale30, "49", "GMT");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        java.util.Locale locale40 = java.util.Locale.UK;
        java.lang.String str43 = nameProvider8.getShortName(locale40, "seconds", "57");
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("Fri Feb 08 23:01:00 GMT+00:00 1901");
        java.lang.String str46 = locale45.getCountry();
        java.util.Locale locale47 = locale45.stripExtensions();
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = null;
        org.joda.time.format.DateTimeParser dateTimeParser49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter48, dateTimeParser49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.withCenturyOfEra(2);
        org.joda.time.Chronology chronology55 = dateTime54.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter50.withChronology(chronology55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter50.withPivotYear((java.lang.Integer) 53642);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        int int63 = dateTimeZone60.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone60);
        java.lang.String str66 = dateTimeZone60.getNameKey((long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter50.withZone(dateTimeZone60);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter50.withLocale(locale68);
        java.lang.String str70 = locale47.getDisplayCountry(locale68);
        java.lang.String str73 = nameProvider8.getShortName(locale47, "156", "2022-02-21T14:54:32.000Z");
        java.lang.String str74 = property6.getAsText(locale47);
        org.joda.time.DateTime dateTime76 = property6.addToCopy((long) 53875197);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645455816139,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=36,MILLISECOND=141,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(str73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "3" + "'", str74, "3");
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test19538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19538");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        long long10 = chronology5.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology5.year();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(921L, chronology5);
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1695288531543715772L + "'", long10 == 1695288531543715772L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test19539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19539");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str6 = dateTimeZone5.toString();
        int int8 = dateTimeZone5.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime9 = localDate0.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.LocalDate localDate11 = localDate0.plusDays((int) '4');
        org.joda.time.LocalDate localDate13 = localDate11.withCenturyOfEra(53638);
        org.joda.time.LocalDate localDate15 = localDate13.minusDays(9);
        org.joda.time.LocalDate localDate17 = localDate15.plusDays(53767);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime21.getFieldTypes();
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.months();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.DurationField durationField27 = chronology24.halfdays();
        boolean boolean28 = dateTimeFieldType18.isSupported(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localDate15.get(dateTimeFieldType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test19540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19540");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.joda.time.DateTime dateTime9 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField11 = property3.getField();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 180L + "'", long4 == 180L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test19541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19541");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalDate.Property property5 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale.setDefault(locale8);
        java.util.Locale locale11 = locale8.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = property5.setCopy("2022-02-21T15:00:40.901Z", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T15:00:40.901Z\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
    }

    @Test
    public void test19542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19542");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMillis((int) (byte) 10);
        java.lang.Object obj5 = null;
        boolean boolean6 = localDateTime1.equals(obj5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusSeconds(6);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds((int) (short) -1);
        int int17 = localDateTime14.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getRangeDurationType();
        java.lang.String str23 = dateTimeFieldType21.toString();
        int int24 = localDateTime14.indexOf(dateTimeFieldType21);
        boolean boolean25 = localDateTime1.isSupported(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType21.getDurationType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "year" + "'", str23, "year");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
    }

    @Test
    public void test19543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19543");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = property7.addWrapFieldToCopy(154);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test19544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19544");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((-10976053948L), dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test19545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19545");
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.withCenturyOfEra(2);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter8.withChronology(chronology13);
        org.joda.time.Chronology chronology15 = dateTimeFormatter8.getChronology();
        boolean boolean16 = dateTimeFormatter8.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 53683509);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int23 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime21.toMutableDateTimeISO();
        int int25 = dateTime21.getMillisOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getEra();
        int int29 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime dateTime31 = dateTime27.minusYears(12);
        boolean boolean32 = dateTime21.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear((int) (byte) 100);
        int int36 = localDate33.getDayOfWeek();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        int int41 = dateTimeZone38.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime42 = localDate33.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = dateTime21.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime45 = dateTime21.minusDays(0);
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfCentury(35);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(53688);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime47.getZone();
        int int52 = dateTimeZone50.getOffsetFromLocal((-31536000000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter8.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(53829953, 53935, 995, 53633931, 54047480, 886, dateTimeZone50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53633931 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 54216222 + "'", int25 == 54216222);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 54216 + "'", int29 == 54216);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etc/UTC" + "'", str39, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test19546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19546");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths(53628);
        org.joda.time.LocalDate.Property property8 = localDate5.yearOfEra();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        boolean boolean10 = calendar9.isWeekDateSupported();
        int int12 = calendar9.getActualMinimum(15);
        calendar9.clear();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromCalendarFields(calendar9);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        int int17 = localDate14.getCenturyOfEra();
        int int18 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate14);
        int int19 = localDate14.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-46800000) + "'", int12 == (-46800000));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
    }

    @Test
    public void test19547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19547");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap10);
        org.joda.time.tz.Provider provider12 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone14 = provider12.getZone("Etc/UTC");
        java.util.Set<java.lang.String> strSet15 = provider12.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList21.parallelStream();
        boolean boolean25 = strSet15.retainAll((java.util.Collection<java.lang.String>) strList21);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getEra();
        int int36 = dateTime34.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.plus(readableDuration37);
        boolean boolean39 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime41 = dateTime30.minusMonths(53628014);
        int int42 = dateTime30.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime30.withDurationAdded((long) 100, 53698);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.plus(readablePeriod46);
        boolean boolean48 = strSet15.remove((java.lang.Object) dateTime45);
        java.lang.String str49 = java.util.Locale.lookupTag(languageRangeList11, (java.util.Collection<java.lang.String>) strSet15);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(provider12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 54216 + "'", int36 == 54216);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test19548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19548");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 5);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTime();
        org.joda.time.DateTime.Property property8 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime9 = property8.withMinimumValue();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test19549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19549");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime7 = property3.withMinimumValue();
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths(32770);
        org.joda.time.DateTime dateTime11 = dateTime7.plusWeeks(53720891);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime7.withHourOfDay(54133241);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54133241 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "36" + "'", str4, "36");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test19550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19550");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        org.joda.time.DurationField durationField17 = property14.getDurationField();
        org.joda.time.LocalTime localTime19 = property14.addNoWrapToCopy(357);
        org.joda.time.DateTimeField dateTimeField20 = property14.getField();
        org.joda.time.LocalTime localTime22 = property14.addWrapFieldToCopy(53998);
        java.lang.Class<?> wildcardClass23 = localTime22.getClass();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test19551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19551");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        int int5 = calendar0.getGreatestMinimum(12);
        calendar0.set((-53626948), 53629, 53632, 53633, 53632);
        calendar0.setFirstDayOfWeek(53632);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime20 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalTime localTime22 = localTime16.plusMillis((-1));
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.LocalTime localTime24 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime25 = property23.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime26 = property23.roundFloorCopy();
        boolean boolean27 = calendar0.after((java.lang.Object) property23);
        int int28 = calendar0.getWeekYear();
        long long29 = calendar0.getTimeInMillis();
        calendar0.roll(0, 28);
        calendar0.set(53699, 53702, 53887227, 18, 53869392, 4);
        calendar0.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = calendar0.getActualMinimum(53813840);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53813840");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=53632,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-53622326) + "'", int28 == (-53622326));
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1692254077924043698L) + "'", long29 == (-1692254077924043698L));
    }

    @Test
    public void test19552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19552");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(54075320);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test19553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19553");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getEra();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime.Property property8 = localTime3.hourOfDay();
        int int9 = localTime3.getSecondOfMinute();
        org.joda.time.LocalTime localTime11 = localTime3.withMinuteOfHour(19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = localTime3.toString(dateTimeFormatter12);
        int int14 = localTime3.getSecondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int18 = dateTime16.get(dateTimeFieldType17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider20 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone22 = provider20.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime16.toMutableDateTime(dateTimeZone22);
        java.util.TimeZone timeZone24 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime25 = localTime3.toDateTimeToday(dateTimeZone22);
        long long28 = dateTimeZone22.convertLocalToUTC((long) (short) 1, true);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 53769342, dateTimeZone22);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.100" + "'", str13, "00:00:00.100");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(provider20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test19554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19554");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withPeriodAdded(readablePeriod5, 53625);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        java.lang.String str12 = dateTimeZone9.getShortName((long) 32772);
        long long15 = dateTimeZone9.adjustOffset((long) (byte) 10, true);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) readablePeriod5, dateTimeZone9);
        boolean boolean18 = dateTimeZone9.isStandardOffset(0L);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(1645455283000L, dateTimeZone9);
        java.util.TimeZone timeZone21 = dateTimeZone9.toTimeZone();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Etc/UTC" + "'", str10, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
    }

    @Test
    public void test19555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19555");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfDay((int) (short) 0);
        int int9 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfDay(2);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withYear((int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        int int18 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        int int19 = localDateTime16.getEra();
        int int20 = localDateTime16.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 999 + "'", int20 == 999);
    }

    @Test
    public void test19556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19556");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder1.clear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getEra();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfMinute();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime10 = property7.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds(2922789);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getISO3Country();
        java.util.Locale locale17 = locale14.stripExtensions();
        java.util.Calendar calendar18 = dateTime11.toCalendar(locale14);
        java.util.Locale.Builder builder19 = builder3.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("weekyear");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder20.addUnicodeLocaleAttribute("2022-02-21T15:01:44.000Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-21T15:01:44.000Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "36" + "'", str8, "36");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str15, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "KOR" + "'", str16, "KOR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455816000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=36,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test19557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19557");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.minus(readablePeriod3);
        org.joda.time.DateTime dateTime5 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        int int8 = dateTimeZone6.getOffsetFromLocal(53900246L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 53919, dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test19558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19558");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        java.lang.Object obj3 = null;
        org.joda.time.tz.Provider provider4 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone6 = provider4.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj3, dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtMidnight(dateTimeZone6);
        boolean boolean10 = dateTime9.isEqualNow();
        int int11 = dateTime9.getDayOfYear();
        org.joda.time.DateTime.Property property12 = dateTime9.minuteOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(2);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.minuteOfDay();
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime13.toMutableDateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(provider4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str20, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test19559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19559");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(53630);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        boolean boolean12 = localTime8.equals((java.lang.Object) localTime10);
        org.joda.time.DateTime dateTime13 = localTime10.toDateTimeToday();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMonths(53701200);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((java.lang.Object) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = localTime16.withField(dateTimeFieldType17, 53903);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test19560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19560");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfEvenCopy();
        int int9 = localDateTime8.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.yearOfCentury();
        int int11 = localDateTime8.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withDayOfYear(53725);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53725 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test19561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19561");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime10 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = property7.withMinimumValue();
        java.util.Locale locale16 = new java.util.Locale("clockhourOfHalfday");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime18 = property7.setCopy("32772", locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale16);
        java.lang.String str20 = locale16.getVariant();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals(locale16.toString(), "clockhourofhalfday");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645455816425,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=36,MILLISECOND=425,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test19562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19562");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 100);
        org.joda.time.Interval interval4 = localDate1.toInterval();
        int int5 = localDate1.size();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        int int10 = dateTimeZone7.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight12 = localDate1.toDateMidnight(dateTimeZone7);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(575L, dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, 365);
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDate13.getValue(54045583);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54045583");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test19563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19563");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(53633931);
        org.joda.time.TimeOfDay timeOfDay8 = dateTime7.toTimeOfDay();
        org.joda.time.Instant instant9 = dateTime7.toInstant();
        long long10 = instant9.getMillis();
        org.joda.time.MutableDateTime mutableDateTime11 = instant9.toMutableDateTime();
        long long12 = instant9.getMillis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54216 + "'", int3 == 54216);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(instant9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-4632352620983553L) + "'", long10 == (-4632352620983553L));
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-4632352620983553L) + "'", long12 == (-4632352620983553L));
    }

    @Test
    public void test19564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19564");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        int int7 = dateTimeZone4.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        int int9 = localDate8.size();
        int int10 = localDate8.getWeekOfWeekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 259);
        java.lang.Integer int31 = dateTimeFormatter27.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter27.getParser();
        boolean boolean33 = dateTimeFormatter27.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53633152L + "'", long24 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test19565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19565");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        int int17 = dateTimeZone14.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone14);
        int int19 = localDate18.size();
        int int20 = localDate18.getWeekOfWeekyear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter12.withZone(dateTimeZone22);
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        timeZone30.setID("+00:00");
        timeZone30.setRawOffset(2);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        timeZone37.setID("+00:00");
        boolean boolean40 = timeZone30.hasSameRules(timeZone37);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone30, locale41);
        java.lang.String str43 = locale41.getLanguage();
        java.lang.String str46 = nameProvider26.getName(locale41, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale48 = new java.util.Locale("hi!");
        java.lang.String str49 = locale48.getISO3Country();
        java.util.Locale locale50 = locale48.stripExtensions();
        java.lang.String str51 = locale48.getScript();
        java.lang.String str53 = locale48.getUnicodeLocaleType("57");
        java.lang.String str56 = nameProvider26.getShortName(locale48, "49", "GMT");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter25.withLocale(locale48);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.lang.String str59 = locale58.getDisplayName();
        java.util.Locale locale61 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str62 = locale58.getDisplayLanguage(locale61);
        java.lang.String str63 = locale48.getDisplayScript(locale61);
        java.lang.String str65 = locale61.getExtension('a');
        java.lang.String str66 = dateTimeField8.getAsText(53815131, locale61);
        int int67 = dateTimeField8.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "36" + "'", str4, "36");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645455816472,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=36,MILLISECOND=474,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str59, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals(locale61.toString(), "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Korean" + "'", str62, "Korean");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "53815131" + "'", str66, "53815131");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 59 + "'", int67 == 59);
    }

    @Test
    public void test19566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19566");
        java.util.Date date3 = new java.util.Date(10, (int) (byte) -1, (-1));
        int int4 = date3.getTimezoneOffset();
        java.util.Date date10 = new java.util.Date(0, 0, 0, 9, (int) '#');
        boolean boolean11 = date3.before(date10);
        java.time.Instant instant12 = date10.toInstant();
        date10.setSeconds((int) (short) 0);
        date10.setHours((-10976054));
        date10.setHours(357);
        int int19 = date10.getTimezoneOffset();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Sun Jan 14 21:35:00 GMT+00:00 1900");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test19567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19567");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime9 = property7.addCopy(30);
        int int10 = localTime9.getMinuteOfHour();
        org.joda.time.LocalTime localTime12 = localTime9.plusMillis(54211474);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test19568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19568");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusHours(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime4.era();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusSeconds(6);
        java.util.Date date23 = new java.util.Date(10, (int) (byte) -1, (-1));
        int int24 = date23.getTimezoneOffset();
        java.util.Date date30 = new java.util.Date(0, 0, 0, 9, (int) '#');
        boolean boolean31 = date23.before(date30);
        java.time.Instant instant32 = date30.toInstant();
        date30.setSeconds((int) (short) 0);
        int int35 = date30.getMinutes();
        boolean boolean36 = localDateTime19.equals((java.lang.Object) int35);
        boolean boolean37 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        int int38 = localDateTime19.getHourOfDay();
        org.joda.time.LocalDateTime.Property property39 = localDateTime19.dayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 31 09:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test19569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19569");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        calendar0.clear();
        java.time.Instant instant4 = calendar0.toInstant();
        java.util.Date date5 = java.util.Date.from(instant4);
        java.util.Date date6 = java.util.Date.from(instant4);
        java.lang.String str7 = date6.toGMTString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str7, "1 Jan 1970 00:00:00 GMT");
    }

    @Test
    public void test19570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19570");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.setLenient(true);
        java.util.Date date6 = calendar0.getTime();
        java.lang.Object obj7 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455816540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=36,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 15:03:36 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "java.util.GregorianCalendar[time=1645455816540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=36,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "java.util.GregorianCalendar[time=1645455816540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=36,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "java.util.GregorianCalendar[time=1645455816540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=36,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test19571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19571");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        int int7 = dateTimeZone4.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        int int9 = localDate8.size();
        int int10 = localDate8.getWeekOfWeekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 53677);
        boolean boolean30 = dateTimeFormatter27.isPrinter();
        org.joda.time.Chronology chronology31 = dateTimeFormatter27.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter27.getParser();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter27.withLocale(locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeFormatter27.getZone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        int int39 = dateTime38.getEra();
        int int40 = dateTime38.getSecondOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(53633931);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.plusSeconds(10);
        boolean boolean48 = dateTime47.isEqualNow();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = localDateTime50.getFieldTypes();
        org.joda.time.Chronology chronology53 = localDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.yearOfEra();
        int int58 = dateTimeField55.getDifference((long) (-53637188), 343L);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField55.getType();
        org.joda.time.DateTime dateTime61 = dateTime47.withField(dateTimeFieldType59, 464);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = dateTimeFormatter27.print((org.joda.time.ReadableInstant) dateTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53633152L + "'", long24 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(chronology31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 54216 + "'", int40 == 54216);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test19572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19572");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        int int7 = dateTimeZone4.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        int int9 = localDate8.size();
        int int10 = localDate8.getWeekOfWeekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 53677);
        boolean boolean30 = dateTimeFormatter27.isPrinter();
        org.joda.time.Chronology chronology31 = dateTimeFormatter27.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter27.getParser();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter27.withLocale(locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeFormatter27.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter27.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = dateTimeFormatter27.print((long) 53934);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53633152L + "'", long24 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(chronology31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
    }

    @Test
    public void test19573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19573");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime6.withMinuteOfHour(53992805);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53992805 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 596L + "'", long4 == 596L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test19574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19574");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setRawOffset(0);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean25 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime15);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = dateTime15.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        timeZone35.setID("+00:00");
        timeZone35.setRawOffset(2);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        timeZone42.setID("+00:00");
        boolean boolean45 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone35, locale46);
        java.lang.String str48 = locale46.getLanguage();
        java.lang.String str51 = nameProvider31.getName(locale46, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.lang.String str54 = locale53.getISO3Country();
        java.util.Locale locale55 = locale53.stripExtensions();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str58 = locale53.getUnicodeLocaleType("57");
        java.lang.String str61 = nameProvider31.getShortName(locale53, "49", "GMT");
        java.lang.String str62 = dateTimeZone27.getShortName((long) 32770, locale53);
        java.lang.String str63 = locale5.getDisplayCountry(locale53);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.util.Date date66 = new java.util.Date((long) 56);
        java.lang.String str67 = date66.toGMTString();
        calendar64.setTime(date66);
        java.util.Locale locale71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap72 = calendar64.getDisplayNames(54066931, 53708, locale71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str6, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "KOR" + "'", str7, "KOR");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 54216 + "'", int21 == 54216);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(nameProvider31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645455816706,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=36,MILLISECOND=708,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh" + "'", str48, "zh");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals(locale53.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "South Korea" + "'", str63, "South Korea");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=56,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=56,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str67, "1 Jan 1970 00:00:00 GMT");
    }

    @Test
    public void test19575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19575");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        timeZone2.setRawOffset(2);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        timeZone9.setID("+00:00");
        boolean boolean12 = timeZone2.hasSameRules(timeZone9);
        int int13 = timeZone2.getRawOffset();
        boolean boolean14 = timeZone2.observesDaylightTime();
        boolean boolean15 = timeZone2.observesDaylightTime();
        boolean boolean16 = timeZone2.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test19576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19576");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology5.weekyears();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(1695739891622400000L, chronology5);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test19577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19577");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ko-KR");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        double double8 = languageRange1.getWeight();
        java.lang.String str9 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko-kr" + "'", str2, "ko-kr");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ko-kr" + "'", str4, "ko-kr");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko-kr" + "'", str7, "ko-kr");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko-kr" + "'", str9, "ko-kr");
    }

    @Test
    public void test19578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19578");
        java.util.Date date6 = new java.util.Date((int) (short) 10, (int) (byte) 1, 9, (int) (byte) -1, (int) (byte) 1, (int) (byte) 0);
        date6.setYear(1);
        int int9 = date6.getYear();
        java.lang.Object obj10 = date6.clone();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 08 23:01:00 GMT+00:00 1901");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "Fri Feb 08 23:01:00 GMT+00:00 1901");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "Fri Feb 08 23:01:00 GMT+00:00 1901");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "Fri Feb 08 23:01:00 GMT+00:00 1901");
    }

    @Test
    public void test19579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19579");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusSeconds(53627827);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMinutes(1969);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMinutes(53781856);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusYears(187);
        java.lang.String str16 = localDateTime15.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2157-01-01T00:00:00.000" + "'", str16, "2157-01-01T00:00:00.000");
    }

    @Test
    public void test19580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19580");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int18 = localDateTime13.get(dateTimeFieldType17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        int int23 = dateTimeZone20.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone20);
        java.lang.String str26 = dateTimeZone20.getNameKey((long) 10);
        org.joda.time.DateTime dateTime27 = localDateTime13.toDateTime(dateTimeZone20);
        long long30 = dateTimeZone20.convertLocalToUTC((long) 54108386, false);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(provider5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 54108386L + "'", long30 == 54108386L);
    }

    @Test
    public void test19581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19581");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(53746517, 86299100, 53995438, 54047452, 54065955, 53665281);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54047452 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19582");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        boolean boolean19 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property20 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.withCenturyOfEra(4);
        org.joda.time.DateTime dateTime24 = dateTime18.withWeekyear(0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime18.withDurationAdded(readableDuration25, 53665218);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear(54181809);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54216836 + "'", int5 == 54216836);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54216 + "'", int9 == 54216);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test19583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19583");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime1.withCenturyOfEra((int) ' ');
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(53731);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test19584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19584");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime7.getZone();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "36" + "'", str4, "36");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test19585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19585");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        int int15 = localDateTime13.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withCenturyOfEra(3);
        int[] intArray20 = new int[] { 32769, 53628014 };
        int int21 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17, intArray20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minus(readableDuration22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        int int25 = localDateTime23.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32769, 53628014]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test19586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19586");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 53656028);
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtStartOfDay();
        int int3 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate localDate5 = localDate1.withYearOfEra(53940679);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19 + "'", int3 == 19);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test19587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19587");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getISO3Country();
        long long13 = dateTimeField7.set((long) 53635206, "55", locale10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField7.getType();
        org.joda.time.DateTime dateTime16 = dateTime1.withField(dateTimeFieldType14, 894);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(53655035);
        org.joda.time.DateTime dateTime20 = dateTime16.plusYears(53672);
        int int21 = dateTime16.getYearOfEra();
        org.joda.time.DateTime dateTime23 = dateTime16.minusMonths(53679762);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear((int) (byte) 100);
        int int27 = localDate24.getDayOfWeek();
        java.lang.String str28 = localDate24.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getEra();
        org.joda.time.DateTime.Property property34 = dateTime32.secondOfMinute();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate37 = localDate35.withDayOfYear((int) (byte) 100);
        int int38 = localDate35.getDayOfWeek();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        int int43 = dateTimeZone40.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime44 = localDate35.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime32.toMutableDateTime(dateTimeZone40);
        int int47 = dateTimeZone40.getOffsetFromLocal((long) 53626975);
        java.lang.String str48 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-61779834366119L), dateTimeZone40);
        long long51 = dateTimeZone29.getMillisKeepLocal(dateTimeZone40, (long) 9);
        org.joda.time.DateTime dateTime52 = localDate24.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.DateTime dateTime53 = dateTime23.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime.Property property54 = dateTime23.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime23.withMinuteOfHour(53680304);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53680304 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str11, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "KOR" + "'", str12, "KOR");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 113605080835206L + "'", long13 == 113605080835206L);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 89422 + "'", int21 == 89422);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-21" + "'", str28, "2022-02-21");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 9L + "'", long51 == 9L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test19588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19588");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        java.lang.String str11 = dateTimeFieldType9.toString();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDurationAdded(readableDuration15, 7);
        org.joda.time.Chronology chronology18 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType9.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        int int24 = localDateTime22.getYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withCenturyOfEra(3);
        int[] intArray29 = new int[] { 32769, 53628014 };
        int int30 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26, intArray29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.minus(readableDuration31);
        int int33 = localDateTime26.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.withDurationAdded(readableDuration34, 53853441);
        int int37 = localDateTime26.getMinuteOfHour();
        int int38 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        long long41 = dateTimeField7.getDifferenceAsLong((-1691006403443092L), (long) 54093781);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "clockhourOfHalfday" + "'", str11, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32769, 53628014]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-53585L) + "'", long41 == (-53585L));
    }

    @Test
    public void test19589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19589");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        int int7 = dateTime6.getWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime9.getFieldTypes();
        org.joda.time.Chronology chronology12 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField15 = chronology12.seconds();
        org.joda.time.DateTime dateTime16 = dateTime6.withChronology(chronology12);
        int int17 = dateTime6.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 962L + "'", long4 == 962L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
    }

    @Test
    public void test19590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19590");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        java.lang.String str5 = dateTimeFieldType3.toString();
        int int6 = localDateTime1.indexOf(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withYear(53641141);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.plusWeeks(53705210);
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, 1970);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant11.withDurationAdded(readableDuration15, (-53622326));
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant17.withDurationAdded(readableDuration18, 50);
        boolean boolean21 = localDateTime10.equals((java.lang.Object) 50);
        org.joda.time.LocalDateTime.Property property22 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMillis(53815131);
        int int26 = localDateTime23.size();
        java.lang.String str27 = localDateTime23.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "clockhourOfHalfday" + "'", str5, "clockhourOfHalfday");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1031249-02-04T00:00:00.001" + "'", str27, "1031249-02-04T00:00:00.001");
    }

    @Test
    public void test19591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19591");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        boolean boolean19 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology20 = dateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.millis();
        org.joda.time.Chronology chronology22 = chronology20.withUTC();
        org.joda.time.DurationField durationField23 = chronology22.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54216990 + "'", int5 == 54216990);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54216 + "'", int9 == 54216);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test19592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19592");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.setLenient(true);
        calendar0.set((int) (byte) 10, 53625, 17, 10, 0);
        calendar0.set(13, 145, 54);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        calendar0.setMinimalDaysInFirstWeek(511);
        calendar0.roll(1, true);
        calendar0.setTimeInMillis((long) 53640590);
        calendar0.setMinimalDaysInFirstWeek(53720891);
        calendar0.set(53871000, 53983692, 53733985, 53773666, 370, 53635206);
        int int33 = calendar0.getWeekYear();
        calendar0.set(53702, 53647, 1080);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=53720891,ERA=1,YEAR=53702,MONTH=53647,WEEK_OF_YEAR=43,WEEK_OF_MONTH=4,DAY_OF_MONTH=1080,DAY_OF_YEAR=301,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=50,SECOND=6,MILLISECOND=590,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 58522895 + "'", int33 == 58522895);
    }

    @Test
    public void test19593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19593");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = property2.withMinimumValue();
        java.lang.String str5 = localDateTime3.toString("13");
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(53699);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = property8.addWrapFieldToCopy(53967527);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy((long) 3);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int20 = dateTime18.get(dateTimeFieldType19);
        int int21 = localDateTime16.get(dateTimeFieldType19);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType19.getDurationType();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime10.withFieldAdded(durationFieldType22, 53865099);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "13" + "'", str5, "13");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test19594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19594");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusHours(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfDay(9);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.weekyear();
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test19595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19595");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate7 = localDate5.plusDays((int) '#');
        org.joda.time.LocalDate.Property property8 = localDate7.weekyear();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.getLocalDate();
        int int11 = localDate10.getYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test19596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19596");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone2);
        int int7 = timeZone2.getOffset((long) 53626);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone2, locale9);
        int int11 = calendar10.getWeeksInWeekYear();
        java.util.Date date15 = new java.util.Date(10, (int) (byte) -1, (-1));
        int int16 = date15.getTimezoneOffset();
        java.util.Date date22 = new java.util.Date(0, 0, 0, 9, (int) '#');
        boolean boolean23 = date15.before(date22);
        java.time.Instant instant24 = date22.toInstant();
        date22.setSeconds((int) (short) 0);
        int int27 = date22.getMinutes();
        calendar10.setTime(date22);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.fromDateFields(date22);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(53772896);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = localDateTime29.getField(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-2209040700000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1899,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 31 09:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test19597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19597");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 53642);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        int int15 = dateTimeZone12.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter20.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withPivotYear(53687487);
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter23.getParser();
        java.lang.Appendable appendable25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = dateTime27.withMillisOfDay(8);
        org.joda.time.DateTime dateTime32 = dateTime27.toDateTimeISO();
        org.joda.time.Instant instant33 = dateTime27.toInstant();
        org.joda.time.Instant instant35 = instant33.withMillis(1645455488657L);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter23.printTo(appendable25, (org.joda.time.ReadableInstant) instant35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeParser24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
    }

    @Test
    public void test19598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19598");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DurationField durationField11 = chronology9.seconds();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology9);
        boolean boolean14 = dateTime12.isAfter((long) 48);
        org.joda.time.DateTime dateTime15 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readableDuration16);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test19599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19599");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        int int7 = localTime6.size();
        org.joda.time.Chronology chronology8 = localTime6.getChronology();
        int int9 = localTime6.size();
        int int10 = localTime6.getMillisOfDay();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str12 = durationFieldType11.getName();
        boolean boolean13 = localTime6.isSupported(durationFieldType11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = localTime6.getField(53770612);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53770612");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "seconds" + "'", str12, "seconds");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test19600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19600");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        int int8 = property7.getMaximumValueOverall();
        org.joda.time.LocalTime localTime9 = property7.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime11 = property7.setCopy("11");
        org.joda.time.LocalTime localTime13 = property7.addWrapFieldToCopy((-1645455248));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 86399999 + "'", int8 == 86399999);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test19601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19601");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property14 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(53677);
        org.joda.time.DateTime.Property property18 = dateTime15.year();
        org.joda.time.DateTime dateTime20 = dateTime15.minusMonths(38);
        int int21 = dateTime20.getMinuteOfDay();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54217 + "'", int10 == 54217);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 903 + "'", int21 == 903);
    }

    @Test
    public void test19602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19602");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.DateTime dateTime7 = dateTime1.minusMinutes((-1));
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfYear();
        int int10 = property9.getMaximumValueOverall();
        org.joda.time.DateTime dateTime12 = property9.addToCopy(1448);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(53846725);
        int int15 = dateTime12.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54217 + "'", int3 == 54217);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T15:04:37.111Z" + "'", str8, "2022-02-21T15:04:37.111Z");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 366 + "'", int10 == 366);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
    }

    @Test
    public void test19603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19603");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        int int21 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.withCenturyOfEra(53725);
        org.joda.time.DateTime dateTime26 = dateTime25.withLaterOffsetAtOverlap();
        int int27 = dateTime25.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime25.toMutableDateTimeISO();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        java.lang.String str32 = dateTimeZone30.getID();
        org.joda.time.DateTime dateTime33 = dateTime25.withZoneRetainFields(dateTimeZone30);
        int int34 = dateTime33.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime33.withDayOfYear(54077);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54077 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "37" + "'", str19, "37");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 53725 + "'", int27 == 53725);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Etc/UTC" + "'", str32, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-5372522) + "'", int34 == (-5372522));
    }

    @Test
    public void test19604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19604");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test19605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19605");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime.Property property7 = localTime2.hourOfDay();
        int int8 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime localTime10 = localTime2.withMinuteOfHour(19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localTime2.toString(dateTimeFormatter11);
        int int13 = localTime2.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime16 = localTime2.withPeriodAdded(readablePeriod14, 53665281);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime19 = localTime2.withPeriodAdded(readablePeriod17, 53705210);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localTime2.getValue(54063997);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54063997");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "00:00:00.100" + "'", str12, "00:00:00.100");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test19606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19606");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property15.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime20 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long25 = dateTimeZone21.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        boolean boolean26 = dateTimeZone21.isFixed();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54217154 + "'", int5 == 54217154);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54217 + "'", int9 == 54217);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 53689L + "'", long25 == 53689L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test19607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19607");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        int int5 = localTime3.getHourOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.minusHours(53716);
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds(53835944);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test19608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19608");
        java.util.Date date1 = new java.util.Date((long) 53642927);
        long long2 = date1.getTime();
        date1.setTime(1645455355000L);
        date1.setHours(53726);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromDateFields(date1);
        date1.setHours(53851041);
        org.junit.Assert.assertEquals(date1.toString(), "Fri Jul 26 09:55:55 GMT+00:00 8171");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 53642927L + "'", long2 == 53642927L);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test19609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19609");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = property2.withMinimumValue();
        java.util.Locale locale5 = new java.util.Locale("2022-02-21T14:54:47.855Z");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.DurationField durationField7 = property2.getDurationField();
        org.joda.time.LocalDateTime localDateTime8 = property2.withMinimumValue();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getEra();
        int int12 = dateTime10.getSecondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.minusMonths((int) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((java.lang.Object) dateTime14);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals(locale5.toString(), "2022-02-21t14:54:47.855z");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 54217 + "'", int12 == 54217);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test19610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19610");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.DateTime dateTime7 = dateTime1.minusMinutes((-1));
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.minusYears(53628);
        org.joda.time.DateTime.Property property11 = dateTime10.centuryOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime18 = property15.addToCopy((int) (byte) 100);
        long long19 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(53647287);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54217 + "'", int3 == 54217);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T15:04:37.196Z" + "'", str8, "2022-02-21T15:04:37.196Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "37" + "'", str16, "37");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-536L) + "'", long19 == (-536L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test19611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19611");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        java.lang.String str8 = localTime2.toString("+00:00");
        int int9 = localTime2.getMillisOfSecond();
        org.joda.time.LocalTime.Property property10 = localTime2.hourOfDay();
        org.joda.time.tz.Provider provider11 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone13 = provider11.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone13.toTimeZone();
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime17 = localTime2.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.minus(53660L);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test19612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19612");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.monthOfYear();
        org.joda.time.DurationField durationField7 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfHour();
        java.lang.String str11 = dateTimeField9.getAsText(53688289L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getEra();
        int int16 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMonths((int) (byte) 10);
        int int19 = dateTime18.getWeekyear();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        timeZone24.setID("+00:00");
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone24, locale27);
        java.util.Calendar calendar29 = dateTime18.toCalendar(locale27);
        java.lang.String str30 = dateTimeField9.getAsText((long) 53785565, locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = dateTimeField9.getType();
        int int33 = dateTimeField9.getMaximumValue(2324376000000L);
        java.lang.String str34 = dateTimeField9.toString();
        java.lang.String str36 = dateTimeField9.getAsShortText((long) 53777977);
        int int38 = dateTimeField9.getMaximumValue(174L);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.hourOfDay();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDurationAdded(readableDuration42, 7);
        org.joda.time.Chronology chronology45 = localDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale locale51 = builder50.build();
        java.util.Locale.Builder builder53 = builder50.setScript("");
        java.util.Locale locale54 = builder50.build();
        int int55 = property49.getMaximumTextLength(locale54);
        int int56 = dateTimeField46.getMaximumShortTextLength(locale54);
        java.lang.Object obj57 = null;
        org.joda.time.tz.Provider provider58 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone60 = provider58.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(obj57, dateTimeZone60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        int int64 = dateTime63.getEra();
        org.joda.time.DateTime.Property property65 = dateTime63.secondOfMinute();
        java.lang.String str66 = property65.getAsString();
        org.joda.time.DateTime dateTime68 = property65.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime69 = property65.getDateTime();
        int int70 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime69.toDateTime(dateTimeZone71);
        boolean boolean73 = org.joda.time.field.FieldUtils.equals((java.lang.Object) locale54, (java.lang.Object) dateTimeZone71);
        int int74 = dateTimeField9.getMaximumTextLength(locale54);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "54" + "'", str11, "54");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54217 + "'", int16 == 54217);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2021 + "'", int19 == 2021);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455817224,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=37,MILLISECOND=224,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1619017417223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2021,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=111,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=37,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "56" + "'", str30, "56");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DateTimeField[minuteOfHour]" + "'", str34, "DateTimeField[minuteOfHour]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "56" + "'", str36, "56");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(provider58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(property65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "37" + "'", str66, "37");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test19613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19613");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        long long6 = dateTime5.getMillis();
        java.lang.String str7 = dateTime5.toString();
        org.joda.time.DateTime dateTime9 = dateTime5.minusHours(575);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(558);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readableDuration13);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime12.year();
        boolean boolean17 = dateTime12.isEqualNow();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "37" + "'", str4, "37");
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645455818000L + "'", long6 == 1645455818000L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T15:03:38.000Z" + "'", str7, "2022-02-21T15:03:38.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test19614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19614");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(32772);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withCenturyOfEra(2);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMillis(53626975);
        long long16 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime18 = dateTime11.withWeekyear(16);
        org.joda.time.DateTime dateTime20 = dateTime11.minusMinutes(2022);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 16172935736L + "'", long16 == 16172935736L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test19615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19615");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        int int5 = calendar0.getGreatestMinimum(12);
        long long6 = calendar0.getTimeInMillis();
        org.joda.time.tz.Provider provider7 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone9 = provider7.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        boolean boolean11 = calendar0.after((java.lang.Object) dateTimeZone9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone9);
        int int13 = localDate12.getWeekyear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455817275,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=37,MILLISECOND=275,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645455817275L + "'", long6 == 1645455817275L);
        org.junit.Assert.assertNotNull(provider7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
    }

    @Test
    public void test19616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19616");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 53657);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        java.lang.String str3 = property2.getAsString();
        org.joda.time.LocalTime localTime4 = property2.roundFloorCopy();
        java.lang.String str5 = property2.toString();
        org.joda.time.LocalTime localTime7 = property2.addCopy((long) 54005242);
        org.joda.time.LocalTime localTime9 = localTime7.plusSeconds(1300000);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra(12);
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(localTime15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        java.lang.String str21 = dateTimeZone18.getShortName((long) 5);
        boolean boolean22 = localDate14.equals((java.lang.Object) str21);
        org.joda.time.LocalDate.Property property23 = localDate14.yearOfEra();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfWeek();
        org.joda.time.LocalDate localDate26 = property25.withMinimumValue();
        org.joda.time.LocalDate localDate27 = property25.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate28 = property25.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate30 = localDate28.plusYears(53781856);
        org.joda.time.LocalDate localDate32 = localDate30.plusMonths(53697271);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate34 = localDate32.plus(readablePeriod33);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = localTime9.isBefore((org.joda.time.ReadablePartial) localDate34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "657" + "'", str3, "657");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[millisOfSecond]" + "'", str5, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test19617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19617");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths(53628);
        int int8 = localDate7.size();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfCentury(4);
        org.joda.time.LocalDate.Property property11 = localDate10.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate10.plus(readablePeriod12);
        org.joda.time.LocalDate.Property property14 = localDate13.weekOfWeekyear();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime.Property property19 = dateTime17.secondOfMinute();
        java.lang.String str20 = property19.getAsString();
        org.joda.time.DateTime dateTime22 = property19.addWrapFieldToCopy(53630);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.DateTime dateTime26 = dateTime22.withFieldAdded(durationFieldType24, 53633152);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime22.plus(readablePeriod27);
        org.joda.time.DateTime dateTime30 = dateTime22.withWeekyear(53705316);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfSecond();
        long long32 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8" + "'", str15, "8");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "37" + "'", str20, "37");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-2802334559L) + "'", long32 == (-2802334559L));
    }

    @Test
    public void test19618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19618");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.setLenient(false);
        java.util.TimeZone timeZone4 = calendar0.getTimeZone();
        java.lang.String str5 = timeZone4.getID();
        java.util.Locale locale7 = new java.util.Locale("2022-02-21T15:00:40.901Z");
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone4, locale7);
        java.lang.Object obj9 = null;
        boolean boolean10 = calendar8.equals(obj9);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455817328,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=37,MILLISECOND=328,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals(locale7.toString(), "2022-02-21t15:00:40.901z");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455817328,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=37,MILLISECOND=328,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19619");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getISO3Country();
        long long13 = dateTimeField7.set((long) 53635206, "55", locale10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField7.getType();
        org.joda.time.DateTime dateTime16 = dateTime1.withField(dateTimeFieldType14, 894);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(53655035);
        org.joda.time.DateTime dateTime20 = dateTime16.plusYears(53672);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(53764);
        org.joda.time.DateTime dateTime24 = dateTime20.minusMonths(53755);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str11, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "KOR" + "'", str12, "KOR");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 113605080835206L + "'", long13 == 113605080835206L);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test19620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19620");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = property2.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(53689);
        java.util.Date date8 = localDateTime5.toDate();
        java.util.Date date10 = new java.util.Date((long) 56);
        java.time.Instant instant11 = date10.toInstant();
        int int12 = date10.getHours();
        boolean boolean13 = date8.after(date10);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        timeZone16.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone16);
        int int21 = timeZone16.getOffset((long) 53626);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone16, locale23);
        int int25 = calendar24.getWeeksInWeekYear();
        java.util.Date date29 = new java.util.Date(10, (int) (byte) -1, (-1));
        int int30 = date29.getTimezoneOffset();
        java.util.Date date36 = new java.util.Date(0, 0, 0, 9, (int) '#');
        boolean boolean37 = date29.before(date36);
        java.time.Instant instant38 = date36.toInstant();
        date36.setSeconds((int) (short) 0);
        int int41 = date36.getMinutes();
        calendar24.setTime(date36);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromDateFields(date36);
        int int44 = date36.getYear();
        boolean boolean45 = date8.after(date36);
        date36.setMinutes(129715);
        int int48 = date36.getDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-2209040700000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1899,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
        org.junit.Assert.assertEquals(date29.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Mar 31 10:55:00 GMT+00:00 1900");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
    }

    @Test
    public void test19621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19621");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("-53622326");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test19622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19622");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(32772);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTimeISO();
        int int16 = dateTime12.getMillisOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusYears(12);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime22.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        boolean boolean30 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime6.withChronology(chronology31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.plus(readableDuration33);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54217383 + "'", int16 == 54217383);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 54217 + "'", int20 == 54217);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test19623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19623");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        java.lang.Object obj4 = null;
        boolean boolean5 = localDateTime1.equals(obj4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(148892);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 148892 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test19624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19624");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.monthOfYear();
        org.joda.time.DurationField durationField7 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.clockhourOfHalfday();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.lang.String str10 = locale9.getDisplayScript();
        java.util.Locale.setDefault(locale9);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = locale12.getISO3Country();
        java.util.Locale locale15 = locale12.stripExtensions();
        java.lang.String str16 = locale9.getDisplayName(locale12);
        int int17 = dateTimeField8.getMaximumShortTextLength(locale12);
        java.lang.String str18 = locale12.getDisplayScript();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str13, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "KOR" + "'", str14, "KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str16, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test19625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19625");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.clear();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        int int6 = calendar0.getFirstDayOfWeek();
        java.util.TimeZone timeZone7 = calendar0.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455817429,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=37,MILLISECOND=429,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test19626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19626");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(53633152);
        int int12 = localDateTime9.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minus(readableDuration13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withDurationAdded(readableDuration15, (int) ' ');
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test19627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19627");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        boolean boolean19 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology20 = dateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.hourOfHalfday();
        int int25 = dateTimeField23.getMaximumValue((-61779834095365L));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalTime localTime34 = localTime28.plusMillis((-1));
        org.joda.time.LocalTime localTime36 = localTime34.plusSeconds(5);
        int int37 = localTime34.getMillisOfSecond();
        org.joda.time.LocalTime localTime39 = localTime34.plusSeconds(53656);
        org.joda.time.LocalTime localTime41 = localTime39.minusMillis(53683381);
        org.joda.time.LocalTime localTime43 = localTime41.minusMinutes(53766516);
        int int44 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54217449 + "'", int5 == 54217449);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54217 + "'", int9 == 54217);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test19628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19628");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology4.year();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField15 = chronology4.hours();
        java.lang.String str16 = chronology4.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
    }

    @Test
    public void test19629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19629");
        int int2 = org.joda.time.field.FieldUtils.safeAdd(54194, 54116600);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54170794 + "'", int2 == 54170794);
    }

    @Test
    public void test19630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19630");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        java.lang.Object obj4 = null;
        boolean boolean5 = localDateTime1.equals(obj4);
        int int6 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withYearOfEra(53640590);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.plusYears(53633);
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.centuryOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test19631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19631");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = property2.withMinimumValue();
        java.lang.String str5 = localDateTime3.toString("13");
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(53699);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = property8.addWrapFieldToCopy(53967527);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plus(readablePeriod12);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "13" + "'", str5, "13");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test19632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19632");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate0.property(dateTimeFieldType2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType2.getField(chronology4);
        int int7 = dateTimeField5.getMaximumValue(100L);
        org.joda.time.DurationField durationField8 = dateTimeField5.getRangeDurationField();
        java.lang.String str10 = dateTimeField5.getAsShortText(1266764034698L);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear((int) (byte) 100);
        int int14 = localDate11.getDayOfWeek();
        java.lang.String str15 = localDate11.toString();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property17 = localDate11.year();
        org.joda.time.LocalDate.Property property18 = localDate11.dayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate11.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        int int28 = dateTimeZone25.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(dateTimeZone25);
        int int30 = localDate29.size();
        int int31 = localDate29.getWeekOfWeekyear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter23.withZone(dateTimeZone33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime38.withCenturyOfEra(2);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology41.add(readablePeriod42, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField46 = chronology41.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter36.withChronology(chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter36.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter48.withPivotYear((java.lang.Integer) 53677);
        boolean boolean51 = dateTimeFormatter48.isPrinter();
        org.joda.time.Chronology chronology52 = dateTimeFormatter48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone53.previousTransition((long) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter48.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(53660L, dateTimeZone53);
        org.joda.time.DateTime dateTime58 = localDate11.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.LocalDate localDate60 = localDate11.plusYears(54206134);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10" + "'", str10, "10");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-21" + "'", str15, "2022-02-21");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 99 + "'", int16 == 99);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Etc/UTC" + "'", str34, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53633152L + "'", long45 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 13L + "'", long55 == 13L);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test19633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19633");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(32772);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTimeISO();
        int int16 = dateTime12.getMillisOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusYears(12);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime22.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        boolean boolean30 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime6.withChronology(chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMonths(0);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear(53670067);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getEra();
        org.joda.time.DateTime dateTime44 = localTime40.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        java.lang.String str46 = dateTime44.toString("+00:00");
        org.joda.time.DateTime.Property property47 = dateTime44.monthOfYear();
        org.joda.time.DateTime dateTime48 = property47.roundFloorCopy();
        org.joda.time.DateTime dateTime50 = property47.addToCopy(53691674);
        org.joda.time.DateTime.Property property51 = dateTime50.era();
        org.joda.time.DateTime dateTime52 = property51.roundHalfCeilingCopy();
        boolean boolean53 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime35.plus(readablePeriod54);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54217566 + "'", int16 == 54217566);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 54217 + "'", int20 == 54217);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test19634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19634");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        int int7 = dateTimeZone4.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        int int9 = localDate8.size();
        int int10 = localDate8.getWeekOfWeekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withChronology(chronology20);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeFormatter26.getZone();
        java.lang.String str29 = dateTimeZone27.getName((long) 53634698);
        java.lang.String str30 = dateTimeZone27.getID();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        int int33 = dateTimeZone27.getOffset((long) 1901);
        java.lang.String str35 = dateTimeZone27.getNameKey((-60L));
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53633152L + "'", long24 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
    }

    @Test
    public void test19635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19635");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusHours(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(101);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusSeconds(6);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusSeconds((int) (short) -1);
        int int26 = localDateTime23.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.minus(readablePeriod27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime23.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getRangeDurationType();
        java.lang.String str32 = dateTimeFieldType30.toString();
        int int33 = localDateTime23.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime15.property(dateTimeFieldType30);
        org.joda.time.LocalDateTime.Property property35 = localDateTime15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = property35.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getDurationType();
        java.lang.String str39 = dateTimeFieldType37.toString();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.hourOfDay();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDurationAdded(readableDuration43, 7);
        org.joda.time.Chronology chronology46 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType37.getField(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField49.getType();
        org.joda.time.LocalDateTime.Property property51 = localDateTime36.property(dateTimeFieldType50);
        org.joda.time.DateTimeField dateTimeField52 = property51.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "year" + "'", str32, "year");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "clockhourOfHalfday" + "'", str39, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test19636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19636");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        int int3 = localDateTime1.getYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusHours(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) 'u');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear(53843);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime.Property property13 = dateTime11.secondOfMinute();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        int int17 = dateTimeField15.get((long) ' ');
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusSeconds(6);
        int int24 = localDateTime19.getYear();
        int[] intArray31 = new int[] { (short) 10, 6, 53629404, 3, '4', (short) 0 };
        int int32 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDateTime19, intArray31);
        org.joda.time.DurationField durationField33 = dateTimeField15.getRangeDurationField();
        long long35 = durationField33.getValueAsLong(34214400000L);
        long long37 = durationField33.getMillis((long) 53655);
        org.joda.time.DurationFieldType durationFieldType38 = durationField33.getType();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime9.withFieldAdded(durationFieldType38, 53887679);
        org.joda.time.LocalDateTime.Property property41 = localDateTime9.hourOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "37" + "'", str14, "37");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 6, 53629404, 3, 52, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 570240L + "'", long35 == 570240L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3219300000L + "'", long37 == 3219300000L);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test19637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19637");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology4.years();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology4.getZone();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test19638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19638");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("Etc/UTC");
        long long5 = dateTimeZone2.convertLocalToUTC(0L, true);
        long long7 = dateTimeZone2.nextTransition((long) 53680649);
        java.lang.String str9 = dateTimeZone2.getNameKey((long) 53911823);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 53680649L + "'", long7 == 53680649L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
    }

    @Test
    public void test19639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19639");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime6.toMutableDateTimeISO();
        int int10 = dateTime6.getMillisOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        int int14 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusYears(12);
        boolean boolean17 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withDurationAdded(readableDuration20, 1);
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime19.toYearMonthDay();
        org.joda.time.DateTime dateTime25 = dateTime19.withDayOfYear((int) 'x');
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears(365);
        int int28 = property4.getDifference((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDate localDate29 = property4.withMaximumValue();
        int int30 = localDate29.getCenturyOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int34 = dateTime32.get(dateTimeFieldType33);
        boolean boolean35 = localDate29.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology36 = localDate29.getChronology();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int40 = dateTime38.get(dateTimeFieldType39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime38.toMutableDateTimeISO();
        int int42 = dateTime38.getMillisOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        int int45 = dateTime44.getEra();
        int int46 = dateTime44.getSecondOfDay();
        org.joda.time.DateTime dateTime48 = dateTime44.minusYears(12);
        boolean boolean49 = dateTime38.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime48.plus(readableDuration50);
        org.joda.time.DateTime.Property property52 = dateTime51.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime54 = dateTime51.plus(readablePeriod53);
        org.joda.time.LocalDate localDate55 = dateTime51.toLocalDate();
        org.joda.time.LocalDate localDate56 = localDate29.withFields((org.joda.time.ReadablePartial) localDate55);
        org.joda.time.LocalDate.Property property57 = localDate56.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54217676 + "'", int10 == 54217676);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 54217 + "'", int14 == 54217);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 605139 + "'", int28 == 605139);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 54217676 + "'", int42 == 54217676);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 54217 + "'", int46 == 54217);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test19640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19640");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(5097600032L);
        org.joda.time.DateTime dateTime3 = dateTime1.withSecondOfMinute(30);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis(53754);
        org.joda.time.DateTime dateTime7 = dateTime3.plusSeconds(53722089);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime9.getFieldTypes();
        org.joda.time.Chronology chronology12 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        long long17 = chronology12.add((long) 53669, (long) 53632, 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.millisOfDay();
        long long22 = chronology12.add(4642L, (long) 53763577, 25);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime3.toMutableDateTime(chronology12);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime3.plus(readableDuration24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 53669L + "'", long17 == 53669L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1344094067L + "'", long22 == 1344094067L);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test19641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19641");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        timeZone4.setID("+00:00");
        timeZone4.setRawOffset(2);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        timeZone11.setID("+00:00");
        boolean boolean14 = timeZone4.hasSameRules(timeZone11);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.lang.String str17 = locale15.getLanguage();
        java.lang.String str20 = nameProvider0.getName(locale15, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getISO3Country();
        java.util.Locale locale24 = locale22.stripExtensions();
        java.lang.String str25 = locale22.getScript();
        java.lang.String str27 = locale22.getUnicodeLocaleType("57");
        java.lang.String str30 = nameProvider0.getShortName(locale22, "49", "GMT");
        java.util.Locale locale32 = new java.util.Locale("50");
        java.lang.String str35 = nameProvider0.getShortName(locale32, "clockhourofhalfday", "0");
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("Fri Feb 08 23:01:00 GMT+00:00 1901");
        java.lang.String str38 = locale37.getCountry();
        java.util.Locale locale39 = locale37.stripExtensions();
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = null;
        org.joda.time.format.DateTimeParser dateTimeParser41 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter40, dateTimeParser41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.withCenturyOfEra(2);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter42.withChronology(chronology47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter42.withPivotYear((java.lang.Integer) 53642);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        int int55 = dateTimeZone52.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone52);
        java.lang.String str58 = dateTimeZone52.getNameKey((long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter42.withZone(dateTimeZone52);
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter42.withLocale(locale60);
        java.lang.String str62 = locale39.getDisplayCountry(locale60);
        java.lang.String str65 = nameProvider0.getName(locale60, "14:55:51.156", "2022-02-21T14:54:42.000Z");
        java.lang.String str66 = locale60.getDisplayLanguage();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.LocalDate localDate70 = localDate68.plusYears((int) (byte) 10);
        org.joda.time.LocalDate.Property property71 = localDate70.dayOfWeek();
        org.joda.time.LocalDate localDate72 = property71.roundFloorCopy();
        org.joda.time.LocalDate localDate73 = property71.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Interval interval75 = localDate73.toInterval(dateTimeZone74);
        boolean boolean76 = locale60.equals((java.lang.Object) interval75);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455817756,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=37,MILLISECOND=758,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals(locale32.toString(), "50");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\uc601\uc5b4" + "'", str66, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test19642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19642");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.tz.Provider provider4 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone6 = provider4.getZone("Etc/UTC");
        java.util.Set<java.lang.String> strSet7 = provider4.getAvailableIDs();
        boolean boolean8 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet7);
        boolean boolean10 = strSet3.equals((java.lang.Object) 53723);
        strSet3.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str1, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KOR" + "'", str2, "KOR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(provider4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19643");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        int int7 = dateTimeZone4.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        int int9 = localDate8.size();
        int int10 = localDate8.getWeekOfWeekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 53677);
        boolean boolean30 = dateTimeFormatter27.isPrinter();
        boolean boolean31 = dateTimeFormatter27.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53633152L + "'", long24 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test19644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19644");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime4.dayOfMonth();
        int int12 = localDateTime4.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.minus(readableDuration13);
        int int15 = localDateTime14.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMillis(53653);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minus(readablePeriod18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readableDuration20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 29 + "'", int15 == 29);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test19645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19645");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale.setDefault(locale6);
        java.lang.String str9 = locale6.getVariant();
        int int10 = dateTimeField5.getMaximumShortTextLength(locale6);
        int int12 = dateTimeField5.get(497L);
        long long15 = dateTimeField5.addWrapField((long) 53797, 53634900);
        java.lang.String str16 = dateTimeField5.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField5.getType();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-259146203L) + "'", long15 == (-259146203L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[dayOfWeek]" + "'", str16, "DateTimeField[dayOfWeek]");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test19646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19646");
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear((int) (byte) 100);
        int int10 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate localDate12 = localDate7.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate7.minusWeeks(12);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology15.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(1080, 53760327, 0, 53831, (-53864), 54112, 86399999, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53831 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test19647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19647");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime dateTime20 = dateTime14.withDayOfYear((int) 'x');
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property22 = localDate21.centuryOfEra();
        org.joda.time.LocalDate localDate23 = property22.roundHalfCeilingCopy();
        java.lang.Object obj24 = null;
        org.joda.time.tz.Provider provider25 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone27 = provider25.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj24, dateTimeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDate23.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = dateTime20.toDateTime(dateTimeZone27);
        boolean boolean32 = dateTime20.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime20.getZone();
        org.joda.time.DateTime.Property property34 = dateTime20.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime20.secondOfMinute();
        org.joda.time.DateTime dateTime37 = dateTime20.plusHours(21);
        org.joda.time.DateTime dateTime39 = dateTime20.plusDays(53962469);
        org.joda.time.DateTime dateTime41 = dateTime20.minusYears(53858144);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54217847 + "'", int5 == 54217847);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54217 + "'", int9 == 54217);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(provider25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test19648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19648");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (short) -1);
        org.joda.time.Interval interval8 = localDate5.toInterval();
        int int9 = localDate5.size();
        int int10 = localDate5.size();
        int int11 = localDate5.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = localDate5.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property13 = localDate5.dayOfMonth();
        int int14 = localDate5.getYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
    }

    @Test
    public void test19649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19649");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDurationAdded(readableDuration3, 7);
        org.joda.time.Chronology chronology6 = localDateTime1.getChronology();
        int int7 = localDateTime1.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.withMillisOfDay(53685045);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        boolean boolean11 = calendar10.isWeekDateSupported();
        int int13 = calendar10.getActualMinimum(15);
        calendar10.clear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields(calendar10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withPeriodAdded(readablePeriod20, 53625);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName((long) 32772);
        long long30 = dateTimeZone24.adjustOffset((long) (byte) 10, true);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) readablePeriod20, dateTimeZone24);
        boolean boolean32 = localDateTime15.isAfter((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusHours(53723);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int41 = dateTime39.get(dateTimeFieldType40);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime39.toMutableDateTimeISO();
        int int43 = dateTime39.getMillisOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getEra();
        int int47 = dateTime45.getSecondOfDay();
        org.joda.time.DateTime dateTime49 = dateTime45.minusYears(12);
        boolean boolean50 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime49.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfHour();
        org.joda.time.DateTime dateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        java.lang.String str60 = dateTimeFieldType58.toString();
        int int61 = localDateTime56.indexOf(dateTimeFieldType58);
        int int62 = dateTime54.get(dateTimeFieldType58);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType58.getRangeDurationType();
        int int64 = localDateTime35.get(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-46800000) + "'", int13 == (-46800000));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Etc/UTC" + "'", str25, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 54217887 + "'", int43 == 54217887);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 54217 + "'", int47 == 54217);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "clockhourOfHalfday" + "'", str60, "clockhourOfHalfday");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
    }

    @Test
    public void test19650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19650");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645455448000L);
        int int2 = localDateTime1.getSecondOfMinute();
        java.lang.String str4 = localDateTime1.toString("1970-01-01");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 28 + "'", int2 == 28);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
    }

    @Test
    public void test19651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19651");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime4.dayOfMonth();
        int int12 = localDateTime4.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.plusSeconds(53846);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime16.getFieldTypes();
        org.joda.time.Chronology chronology19 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField22 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology19.millis();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology19.getZone();
        org.joda.time.DateTime dateTime29 = localDateTime14.toDateTime(dateTimeZone28);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test19652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19652");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.minus(readablePeriod2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime3.plusSeconds(53695);
        org.joda.time.LocalDateTime localDateTime10 = dateTime3.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test19653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19653");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths(53628);
        org.joda.time.LocalDate.Property property8 = localDate5.yearOfEra();
        org.joda.time.LocalDate.Property property9 = localDate5.dayOfYear();
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = localDate5.getFields();
        org.joda.time.LocalDate localDate12 = localDate5.withWeekyear(54075244);
        int int13 = localDate5.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
    }

    @Test
    public void test19654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19654");
        int int1 = org.joda.time.field.FieldUtils.safeNegate(54169436);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-54169436) + "'", int1 == (-54169436));
    }

    @Test
    public void test19655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19655");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.LocalDate.Property property13 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate15 = localDate4.withCenturyOfEra((int) 'a');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime.Property property20 = dateTime18.secondOfMinute();
        java.lang.String str21 = property20.getAsString();
        org.joda.time.DateTime dateTime23 = property20.addWrapFieldToCopy(53630);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        org.joda.time.DateTime dateTime27 = dateTime23.withFieldAdded(durationFieldType25, 53633152);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTime dateTime30 = dateTime27.withFieldAdded(durationFieldType28, 53680);
        org.joda.time.LocalDate localDate32 = localDate15.withFieldAdded(durationFieldType28, 53726);
        org.joda.time.LocalDate localDate34 = localDate32.plusDays(811);
        org.joda.time.LocalDate localDate36 = localDate34.minusWeeks(726560);
        int int37 = localDate36.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "37" + "'", str21, "37");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3182 + "'", int37 == 3182);
    }

    @Test
    public void test19656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19656");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra(12);
        org.joda.time.LocalTime localTime6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(localTime6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        java.lang.String str12 = dateTimeZone9.getShortName((long) 5);
        boolean boolean13 = localDate5.equals((java.lang.Object) str12);
        org.joda.time.LocalDate.Property property14 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate15 = property14.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, 53);
        org.joda.time.LocalDate.Property property19 = localDate18.weekyear();
        int int20 = property19.get();
        org.joda.time.LocalDate localDate22 = property19.addToCopy(53655035);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int29 = dateTime27.get(dateTimeFieldType28);
        int int30 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 0, dateTimeZone25);
        org.joda.time.DateTime dateTime32 = localDate22.toDateTimeAtCurrentTime(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) "14:54:46.888", dateTimeZone25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"14:54:46.888\" is malformed at \":54:46.888\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test19657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19657");
        java.util.Date date3 = new java.util.Date(10, (int) (byte) -1, (-1));
        int int4 = date3.getTimezoneOffset();
        java.util.Date date10 = new java.util.Date(0, 0, 0, 9, (int) '#');
        boolean boolean11 = date3.before(date10);
        java.time.Instant instant12 = date10.toInstant();
        int int13 = date10.getHours();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromDateFields(date10);
        int int15 = date10.getDate();
        int int16 = date10.getSeconds();
        org.junit.Assert.assertEquals(date3.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 31 09:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test19658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19658");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        java.lang.String str11 = dateTimeFieldType0.getName();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime13.getFieldTypes();
        org.joda.time.Chronology chronology16 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.months();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType0.getField(chronology16);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.withCenturyOfEra(2);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = chronology25.add(readablePeriod26, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.minuteOfHour();
        org.joda.time.DurationField durationField31 = durationFieldType20.getField(chronology25);
        boolean boolean32 = dateTimeFieldType0.isSupported(chronology25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int36 = dateTime34.get(dateTimeFieldType35);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime34.toMutableDateTimeISO();
        int int38 = dateTime34.getMillisOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        int int41 = dateTime40.getEra();
        int int42 = dateTime40.getSecondOfDay();
        org.joda.time.DateTime dateTime44 = dateTime40.minusYears(12);
        boolean boolean45 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = dateTime44.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property48 = dateTime47.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime47.getZone();
        org.joda.time.Chronology chronology50 = chronology25.withZone(dateTimeZone49);
        org.joda.time.Chronology chronology51 = chronology50.withUTC();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMillis(53625);
        org.joda.time.LocalDateTime localDateTime56 = dateTime55.toLocalDateTime();
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        java.lang.String str59 = localDateTime56.toString("20", locale58);
        long long61 = chronology50.set((org.joda.time.ReadablePartial) localDateTime56, (long) 53783);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime63 = localDateTime56.withWeekOfWeekyear(54150);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54150 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "clockhourOfHalfday" + "'", str11, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 53633152L + "'", long29 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 54218033 + "'", int38 == 54218033);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 54218 + "'", int42 == 54218);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "20" + "'", str59, "20");
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645455764408L + "'", long61 == 1645455764408L);
    }

    @Test
    public void test19659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19659");
        long long2 = org.joda.time.field.FieldUtils.safeAdd(257L, 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 257L + "'", long2 == 257L);
    }

    @Test
    public void test19660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19660");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime dateTime20 = dateTime14.withDayOfYear((int) 'x');
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears(365);
        org.joda.time.DateTime dateTime23 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property24 = dateTime20.minuteOfHour();
        org.joda.time.DateTime.Property property25 = dateTime20.era();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime20.minus(readablePeriod26);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54218063 + "'", int5 == 54218063);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54218 + "'", int9 == 54218);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test19661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19661");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        boolean boolean12 = dateTimeField10.isLeap(5L);
        int int15 = dateTimeField10.getDifference(632L, (long) 53708878);
        long long18 = dateTimeField10.getDifferenceAsLong(1645455352000L, 1645455475559L);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = dateTimeField10.set((long) 1645455302, "53642927");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53642927 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-14) + "'", int15 == (-14));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test19662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19662");
        java.util.Date date3 = new java.util.Date(53816903, 53684637, 53701413);
        date3.setDate(54203);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Jul 25 00:00:00 GMT+00:00 58439700");
    }

    @Test
    public void test19663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19663");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("1970-01-01T00:00:00.001Z");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("2022-02-21T14:54:57.513Z");
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.joda.time.tz.Provider provider8 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider8);
        java.util.Set<java.lang.String> strSet10 = provider8.getAvailableIDs();
        java.util.Iterator<java.lang.String> strItor11 = strSet10.iterator();
        boolean boolean12 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet10);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(provider8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test19664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19664");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withPeriodAdded(readablePeriod9, 53625);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.year();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withYearOfEra(53686663);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears(53697958);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.withYearOfEra(3);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.minus(readableDuration23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withPeriodAdded(readablePeriod29, 53625);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.year();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.LocalDateTime localDateTime35 = property32.setCopy(99);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays(53642927);
        int int38 = localDateTime37.getMinuteOfHour();
        java.lang.String str39 = localDateTime37.toString();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusMillis((int) (short) 10);
        int int42 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = localDateTime24.withYearOfCentury(54016085);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54016085 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970" + "'", str33, "1970");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "146968-05-07T00:00:00.001" + "'", str39, "146968-05-07T00:00:00.001");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test19665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19665");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.weekyear();
        java.lang.String str8 = dateTimeField7.getName();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.minusWeeks(53687487);
        org.joda.time.LocalDateTime.Property property19 = localDateTime10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime25.getFieldTypes();
        org.joda.time.Chronology chronology28 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField31 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.dayOfWeek();
        org.joda.time.DurationField durationField34 = chronology28.minutes();
        org.joda.time.DateTime dateTime35 = dateTime23.toDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusMillis((int) (byte) 10);
        int[] intArray42 = chronology28.get((org.joda.time.ReadablePartial) localDateTime37, (long) 54);
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.lang.String str45 = localDateTime37.toString("\u4e2d\u6587", locale44);
        int int46 = property19.getMaximumShortTextLength(locale44);
        java.util.Locale.setDefault(locale44);
        int int48 = dateTimeField7.getMaximumTextLength(locale44);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "weekyear" + "'", str8, "weekyear");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 54]");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u4e2d\u6587" + "'", str45, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
    }

    @Test
    public void test19666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19666");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime9 = property8.withMaximumValue();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime.Property property13 = dateTime11.secondOfMinute();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.DateTime dateTime16 = property13.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime17 = property13.withMinimumValue();
        org.joda.time.DateTime dateTime19 = property13.addToCopy((long) 53647);
        org.joda.time.DateTime dateTime20 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime22 = property13.addWrapFieldToCopy(53660);
        org.joda.time.DateTime dateTime23 = property13.getDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.minusYears(956);
        int int26 = property8.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = property8.addWrapFieldToCopy(53733945);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime28.withDate(53968317, 54201462, 53850881);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54201462 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 141L + "'", long4 == 141L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "38" + "'", str14, "38");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test19667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19667");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 53642);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        int int15 = dateTimeZone12.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter20.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withPivotYear(53687487);
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter23.getParser();
        java.lang.StringBuffer stringBuffer25 = null;
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra(12);
        org.joda.time.LocalTime localTime31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(localTime31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        java.lang.String str37 = dateTimeZone34.getShortName((long) 5);
        boolean boolean38 = localDate30.equals((java.lang.Object) str37);
        org.joda.time.LocalDate.Property property39 = localDate30.yearOfEra();
        org.joda.time.LocalDate localDate40 = property39.roundCeilingCopy();
        org.joda.time.DateTime dateTime41 = localDate40.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate43 = localDate40.minusWeeks(53696);
        int int44 = localDate43.getDayOfMonth();
        org.joda.time.LocalDate.Property property45 = localDate43.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter23.printTo(stringBuffer25, (org.joda.time.ReadablePartial) localDate43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeParser24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 25 + "'", int44 == 25);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test19668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19668");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plus(readableDuration10);
        int int12 = localDateTime11.getHourOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        timeZone16.setID("+00:00");
        timeZone16.setRawOffset(2);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        timeZone23.setID("+00:00");
        boolean boolean26 = timeZone16.hasSameRules(timeZone23);
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone16, locale27);
        timeZone16.setID("1970");
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = locale31.getDisplayName();
        java.lang.String str33 = locale31.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleAttributes();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone16, locale31);
        java.lang.String str36 = localDateTime11.toString("27", locale31);
        org.joda.time.LocalDateTime.Property property37 = localDateTime11.dayOfMonth();
        int int38 = localDateTime11.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455818167,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=38,MILLISECOND=169,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str32, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "KOR" + "'", str33, "KOR");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645455818167,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=38,MILLISECOND=169,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "27" + "'", str36, "27");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
    }

    @Test
    public void test19669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19669");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMinutes(53);
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minusMillis(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test19670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19670");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        java.lang.String str11 = dateTimeFieldType0.getName();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime13.getFieldTypes();
        org.joda.time.Chronology chronology16 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.months();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType0.getField(chronology16);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.withCenturyOfEra(2);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = chronology25.add(readablePeriod26, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.minuteOfHour();
        org.joda.time.DurationField durationField31 = durationFieldType20.getField(chronology25);
        boolean boolean32 = dateTimeFieldType0.isSupported(chronology25);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDateTime34.getFieldTypes();
        org.joda.time.Chronology chronology37 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekyear();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfEra();
        boolean boolean40 = dateTimeFieldType0.isSupported(chronology37);
        org.joda.time.Chronology chronology41 = chronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "clockhourOfHalfday" + "'", str11, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 53633152L + "'", long29 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test19671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19671");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        int int11 = dateTimeField7.getDifference(411L, (long) 54000440);
        long long14 = dateTimeField7.addWrapField(1645455724000L, 886);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1658934124000L + "'", long14 == 1658934124000L);
    }

    @Test
    public void test19672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19672");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate3 = property1.getLocalDate();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test19673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19673");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.Chronology chronology6 = chronology4.withUTC();
        org.joda.time.DurationField durationField7 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test19674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19674");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDurationAdded(readableDuration3, 7);
        org.joda.time.Chronology chronology6 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.DurationField durationField10 = chronology6.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField12 = dateTimeField11.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19675");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis(53625);
        boolean boolean5 = dateTime1.isEqual((long) 53627);
        long long6 = dateTime1.getMillis();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime1.plus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime9 = dateTime1.toLocalDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645455818257L + "'", long6 == 1645455818257L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test19676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19676");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        int int6 = timeZone2.getOffset((long) 365);
        java.lang.String str7 = timeZone2.getID();
        timeZone2.setRawOffset(53691906);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime.Property property13 = dateTime11.secondOfMinute();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        int int18 = dateTimeField15.getDifference(606L, (long) 1970);
        long long20 = dateTimeField15.remainder((long) (short) 1);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField15.getAsShortText(53635, locale22);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale28 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str29 = locale25.getDisplayLanguage(locale28);
        java.lang.String str30 = dateTimeField15.getAsShortText((int) (byte) -1, locale28);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale28.getDisplayVariant(locale31);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone2, locale28);
        calendar33.set(53637, 53666500, 53662, (-53622326), 53735859);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.lang.String str41 = timeZone40.getID();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getEra();
        int int45 = dateTime43.getSecondOfDay();
        org.joda.time.DateTime dateTime47 = dateTime43.minusYears(12);
        org.joda.time.DateTime dateTime49 = dateTime43.minusMinutes((-1));
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime.Property property51 = dateTime49.dayOfYear();
        int int52 = property51.getMaximumValueOverall();
        java.util.Locale locale53 = java.util.Locale.UK;
        java.lang.String str54 = property51.getAsShortText(locale53);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone40, locale53);
        calendar33.setTimeZone(timeZone40);
        calendar33.setFirstDayOfWeek(16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+14:54");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "38" + "'", str14, "38");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "53635" + "'", str23, "53635");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str26, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertEquals(locale28.toString(), "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=16,minimalDaysInFirstWeek=1,ERA=1,YEAR=53637,MONTH=53666500,WEEK_OF_YEAR=12,WEEK_OF_MONTH=3,DAY_OF_MONTH=53662,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=5,HOUR_OF_DAY=-53622326,MINUTE=53735859,SECOND=30,MILLISECOND=172,ZONE_OFFSET=53691906,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 54218 + "'", int45 == 54218);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-21T15:04:38.266Z" + "'", str50, "2022-02-21T15:04:38.266Z");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 366 + "'", int52 == 366);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "52" + "'", str54, "52");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645455818266,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=38,MILLISECOND=266,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test19677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19677");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.plusYears(10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = localDate5.toString("2022-02-21T14:58:50.685Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test19678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19678");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(53633152);
        int int12 = localDateTime9.getDayOfWeek();
        int int13 = localDateTime9.getDayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test19679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19679");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis(54050074);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(provider5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test19680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19680");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        timeZone2.setRawOffset(2);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        timeZone9.setID("+00:00");
        boolean boolean12 = timeZone2.hasSameRules(timeZone9);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone2, locale13);
        calendar14.setFirstDayOfWeek(53635206);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar14);
        java.util.Date date24 = new java.util.Date((int) (short) 10, (int) (byte) 1, 9, (int) (byte) -1, (int) (byte) 1, (int) (byte) 0);
        date24.setYear(1);
        int int27 = date24.getMinutes();
        calendar14.setTime(date24);
        calendar14.setLenient(false);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromCalendarFields(calendar14);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.LocalTime.Property property33 = localTime31.minuteOfHour();
        org.joda.time.LocalTime localTime34 = property33.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime37.getFieldTypes();
        org.joda.time.Chronology chronology40 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.centuryOfEra();
        int int43 = dateTimeField41.get((long) (byte) 1);
        java.util.Locale.Category category45 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.lang.String str48 = locale47.getDisplayName();
        java.util.Locale locale50 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str51 = locale47.getDisplayLanguage(locale50);
        java.lang.String str52 = locale50.getDisplayName();
        java.util.Locale.setDefault(category45, locale50);
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale54.getDisplayName();
        java.lang.String str56 = locale54.getISO3Country();
        java.util.Locale locale57 = locale54.stripExtensions();
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale57.getISO3Language();
        java.util.Locale.setDefault(locale57);
        java.util.Locale.Category category62 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        java.lang.String str64 = locale57.getDisplayScript(locale63);
        java.util.Set<java.lang.String> strSet65 = locale57.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category45, locale57);
        java.lang.String str67 = dateTimeField41.getAsShortText(32563641600000L, locale57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime68 = property33.setCopy("2022-02-21T15:01:41.000Z", locale57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T15:01:41.000Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-2174086740000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=53635206,minimalDaysInFirstWeek=1,ERA=1,YEAR=1901,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=39,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=1,SECOND=0,MILLISECOND=2,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertEquals(date24.toString(), "Fri Feb 08 23:01:00 GMT+00:00 1901");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category45.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str48, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertEquals(locale50.toString(), "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Korean" + "'", str51, "Korean");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "clockhourofhalfday" + "'", str52, "clockhourofhalfday");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Korean (South Korea)" + "'", str55, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "KOR" + "'", str56, "KOR");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category62.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "30" + "'", str67, "30");
    }

    @Test
    public void test19681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19681");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra(12);
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(localTime9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getShortName((long) 5);
        boolean boolean16 = localDate8.equals((java.lang.Object) str15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int20 = dateTime18.get(dateTimeFieldType19);
        boolean boolean21 = localDate8.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property22 = localDate8.dayOfWeek();
        org.joda.time.DateTime dateTime23 = localDate8.toDateTimeAtMidnight();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        int int28 = dateTimeZone25.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(dateTimeZone25);
        int int30 = localDate29.size();
        int int31 = localDate29.getWeekOfWeekyear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime23.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = dateTime1.toDateTime(dateTimeZone33);
        org.joda.time.DateTime.Property property38 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime40 = dateTime1.minus((long) 53954196);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Etc/UTC" + "'", str34, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test19682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19682");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int6 = dateTime4.get(dateTimeFieldType5);
        int int7 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0, dateTimeZone2);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property11 = localDate10.era();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTimeISO();
        int int17 = dateTime13.getMillisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusYears(12);
        boolean boolean24 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear((int) (byte) 100);
        int int28 = localDate25.getDayOfWeek();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        int int33 = dateTimeZone30.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime34 = localDate25.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime13.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(0);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfCentury(35);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(53688);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime39.getZone();
        long long44 = dateTimeZone42.previousTransition((long) 53700);
        org.joda.time.DateTime dateTime45 = localDate10.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime45.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 54218406 + "'", int17 == 54218406);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 54218 + "'", int21 == 54218);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 53700L + "'", long44 == 53700L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test19683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19683");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = dateTimeField5.set(1645455533815L, "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455818434,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=38,MILLISECOND=434,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test19684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19684");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.clockhourOfDay();
        boolean boolean11 = dateTimeFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        java.lang.String str14 = dateTimeFieldType12.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.hourOfDay();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDurationAdded(readableDuration18, 7);
        org.joda.time.Chronology chronology21 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType12.getField(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology21);
        org.joda.time.DurationField durationField26 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.yearOfCentury();
        long long30 = dateTimeField27.addWrapField((long) 54063968, 53813840);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "clockhourOfHalfday" + "'", str14, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1893401936032L) + "'", long30 == (-1893401936032L));
    }

    @Test
    public void test19685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19685");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusHours(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(101);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.secondOfMinute();
        int int18 = localDateTime15.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusMillis((int) (byte) 100);
        int int21 = localDateTime15.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withMonthOfYear(53723145);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53723145 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 30 + "'", int21 == 30);
    }

    @Test
    public void test19686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19686");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime7 = property3.withMinimumValue();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime10 = dateTime7.withYear(2005);
        int int11 = dateTime10.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "38" + "'", str4, "38");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54180468 + "'", int11 == 54180468);
    }

    @Test
    public void test19687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19687");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMinutes((int) (byte) -1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getDurationType();
        boolean boolean18 = localDateTime12.isSupported(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withWeekyear(1968);
        org.joda.time.LocalDateTime.Property property21 = localDateTime12.dayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test19688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19688");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getISO3Country();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.lang.String str6 = locale3.getScript();
        java.util.Set<java.lang.Character> charSet7 = locale3.getExtensionKeys();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        timeZone12.setID("+00:00");
        timeZone12.setRawOffset(2);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        timeZone19.setID("+00:00");
        boolean boolean22 = timeZone12.hasSameRules(timeZone19);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone12, locale23);
        java.lang.String str25 = locale23.getLanguage();
        java.lang.String str28 = nameProvider8.getName(locale23, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        timeZone31.setID("+00:00");
        timeZone31.setRawOffset(2);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        timeZone38.setID("+00:00");
        boolean boolean41 = timeZone31.hasSameRules(timeZone38);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone31, locale42);
        java.lang.String str44 = locale42.getLanguage();
        java.lang.String str45 = locale42.getDisplayLanguage();
        java.lang.String str48 = nameProvider8.getShortName(locale42, "DateTimeField[clockhourOfHalfday]", "57");
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str53 = nameProvider8.getName(locale49, "DateTimeField[secondOfMinute]", "Korean");
        java.util.Set<java.lang.String> strSet54 = locale49.getUnicodeLocaleKeys();
        java.lang.String str55 = locale3.getDisplayVariant(locale49);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str1, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KOR" + "'", str2, "KOR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645455818492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=38,MILLISECOND=494,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645455818492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=38,MILLISECOND=494,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh" + "'", str44, "zh");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str45, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh-TW" + "'", str50, "zh-TW");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test19689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19689");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        boolean boolean24 = dateTime23.isEqualNow();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = dateTime23.getWeekyear();
        int int27 = dateTime23.getEra();
        org.joda.time.DateTime.Property property28 = dateTime23.yearOfEra();
        java.lang.String str29 = property28.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54218513 + "'", int5 == 54218513);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54218 + "'", int9 == 54218);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
    }

    @Test
    public void test19690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19690");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.LocalDate.Property property13 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, 53);
        org.joda.time.LocalDate.Property property18 = localDate17.weekyear();
        int int19 = property18.get();
        org.joda.time.LocalDate localDate21 = property18.addToCopy(53655035);
        org.joda.time.LocalDate.Property property22 = localDate21.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 13 + "'", int19 == 13);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test19691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19691");
        java.util.Date date6 = new java.util.Date((int) (short) 10, (int) (byte) 1, 9, (int) (byte) -1, (int) (byte) 1, (int) (byte) 0);
        date6.setYear(1);
        int int9 = date6.getYear();
        int int10 = date6.getHours();
        int int11 = date6.getDate();
        int int12 = date6.getDay();
        int int13 = date6.getDate();
        date6.setTime(1645455352000L);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 14:55:52 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test19692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19692");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long8 = durationField5.getDifferenceAsLong(0L, 2318587200000L);
        java.lang.String str9 = durationField5.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-881L) + "'", long8 == (-881L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DurationField[months]" + "'", str9, "DurationField[months]");
    }

    @Test
    public void test19693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19693");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int16 = dateTime14.get(dateTimeFieldType15);
        boolean boolean17 = localDate4.isSupported(dateTimeFieldType15);
        int int18 = localDate4.getMonthOfYear();
        org.joda.time.Interval interval19 = localDate4.toInterval();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate4.minus(readablePeriod20);
        org.joda.time.LocalDate localDate23 = localDate4.plusWeeks(53628014);
        org.joda.time.LocalDate.Property property24 = localDate23.era();
        org.joda.time.LocalDate localDate26 = localDate23.minusDays((-1));
        org.joda.time.DateMidnight dateMidnight27 = localDate26.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test19694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19694");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.yearOfEra();
        int int9 = dateTimeField6.getDifference((long) (-53637188), 343L);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField6.getType();
        java.lang.String str11 = dateTimeFieldType10.toString();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withCenturyOfEra(2);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology17.add(readablePeriod18, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfHour();
        org.joda.time.DurationField durationField23 = durationFieldType12.getField(chronology17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology26 = chronology17.withZone(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusWeeks(9);
        java.util.Date date36 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant37 = date36.toInstant();
        boolean boolean38 = localDateTime32.equals((java.lang.Object) instant37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime32.plusHours(2022);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusYears(53638);
        int[] intArray44 = chronology17.get((org.joda.time.ReadablePartial) localDateTime42, (-536L));
        boolean boolean45 = dateTimeFieldType10.isSupported(chronology17);
        org.joda.time.DurationField durationField46 = chronology17.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long49 = durationField46.subtract((long) 54047221, 53900162);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -5390016200");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "yearOfEra" + "'", str11, "yearOfEra");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 53633152L + "'", long21 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1969, 12, 31, 86399464]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test19695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19695");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.util.Date date1 = localDateTime0.toDate();
        date1.setMonth(54187);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Wed Aug 21 15:03:38 GMT+00:00 6537");
    }

    @Test
    public void test19696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19696");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider6 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone8 = provider6.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime2.toMutableDateTime(dateTimeZone8);
        long long11 = dateTimeZone8.previousTransition((long) 53688289);
        int int13 = dateTimeZone8.getOffsetFromLocal(957L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(2);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfDay();
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.year();
        java.util.Locale locale31 = new java.util.Locale("hourOfDay", "-1", "52");
        java.lang.String str32 = locale31.getDisplayScript();
        java.lang.String str33 = dateTimeField26.getAsText(53781856, locale31);
        java.lang.String str34 = dateTimeZone8.getName((long) 53737783, locale31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(obj0, dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property39.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = property42.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime46 = property42.roundCeilingCopy();
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.year();
        int int49 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(provider6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 53688289L + "'", long11 == 53688289L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str21, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals(locale31.toString(), "hourofday_-1_52");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "53781856" + "'", str33, "53781856");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test19697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19697");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime13 = property9.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime15 = localTime13.plusHours(53628014);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        timeZone18.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone18);
        timeZone18.setID("2022-02-21T14:55:03.940Z");
        boolean boolean24 = localTime13.equals((java.lang.Object) timeZone18);
        org.joda.time.LocalTime.Property property25 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMinimumValue();
        org.joda.time.LocalTime localTime27 = property25.getLocalTime();
        org.joda.time.LocalTime localTime29 = localTime27.minusSeconds(54076650);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test19698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19698");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        int int3 = localDateTime1.getYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withWeekyear((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusSeconds(53784127);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours(53808);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test19699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19699");
        java.util.Date date3 = new java.util.Date(53702515, 53970758, 327);
        java.util.Date date7 = new java.util.Date(10, (int) (byte) -1, (-1));
        int int8 = date7.getTimezoneOffset();
        java.util.Date date14 = new java.util.Date(0, 0, 0, 9, (int) '#');
        boolean boolean15 = date7.before(date14);
        date14.setYear(14);
        boolean boolean18 = date3.after(date14);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Jan 21 00:00:00 GMT+00:00 58201979");
        org.junit.Assert.assertEquals(date7.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 09:35:00 GMT+00:00 1914");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test19700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19700");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears(100);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        int int22 = property21.getMaximumValue();
        int int23 = property21.getMaximumValueOverall();
        org.joda.time.DateTime dateTime24 = property21.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54218650 + "'", int5 == 54218650);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54218 + "'", int9 == 54218);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 23 + "'", int22 == 23);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test19701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19701");
        java.lang.String[] strArray4 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList13);
        boolean boolean16 = strSet5.addAll((java.util.Collection<java.lang.String>) strList13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime dateTime23 = localTime19.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = strSet5.equals((java.lang.Object) dateTime21);
        java.util.Set<java.lang.String> strSet25 = org.joda.time.DateTimeZone.getAvailableIDs();
        int int26 = strSet25.size();
        boolean boolean27 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.Iterator<java.lang.String> strItor28 = strSet5.iterator();
        java.util.Set<java.lang.String> strSet29 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean30 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet29);
        strSet5.clear();
        java.lang.String[] strArray36 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        boolean boolean39 = strSet37.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList45);
        boolean boolean48 = strSet37.addAll((java.util.Collection<java.lang.String>) strList45);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        int int54 = dateTime53.getEra();
        org.joda.time.DateTime dateTime55 = localTime51.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = strSet37.equals((java.lang.Object) dateTime53);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        int int62 = dateTimeZone59.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((long) 0, dateTimeZone59);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(dateTimeZone59);
        org.joda.time.DateTime dateTime65 = dateTime53.toDateTime(dateTimeZone59);
        boolean boolean66 = strSet5.contains((java.lang.Object) dateTime53);
        strSet5.clear();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 575 + "'", int26 == 575);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test19702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19702");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        org.joda.time.Chronology chronology9 = dateTimeFormatter2.getChronology();
        boolean boolean10 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 53683509);
        int int13 = dateTimeFormatter12.getDefaultYear();
        int int14 = dateTimeFormatter12.getDefaultYear();
        org.joda.time.Chronology chronology15 = dateTimeFormatter12.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = dateTimeFormatter12.getPrinter();
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        timeZone21.setID("+00:00");
        timeZone21.setRawOffset(2);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        timeZone28.setID("+00:00");
        boolean boolean31 = timeZone21.hasSameRules(timeZone28);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone21, locale32);
        java.lang.String str34 = locale32.getLanguage();
        java.lang.String str37 = nameProvider17.getName(locale32, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale39 = new java.util.Locale("hi!");
        java.lang.String str40 = locale39.getISO3Country();
        java.util.Locale locale41 = locale39.stripExtensions();
        java.lang.String str42 = locale39.getScript();
        java.lang.String str44 = locale39.getUnicodeLocaleType("57");
        java.lang.String str47 = nameProvider17.getShortName(locale39, "49", "GMT");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider17);
        java.util.Locale locale51 = new java.util.Locale("2022-02-21T14:55:13.000Z", "");
        java.lang.String str54 = nameProvider17.getShortName(locale51, "2071-12-19T01:19:59.999", "Heure de Greenwich");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter12.withLocale(locale51);
        java.io.Writer writer56 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(writer56, 51978L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNull(chronology15);
        org.junit.Assert.assertNull(dateTimePrinter16);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455818700,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=38,MILLISECOND=702,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals(locale51.toString(), "2022-02-21t14:55:13.000z");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
    }

    @Test
    public void test19703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19703");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusHours(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(101);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        java.lang.Object obj17 = null;
        boolean boolean18 = localDateTime15.equals(obj17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = property19.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test19704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19704");
        java.lang.Object obj0 = null;
        org.joda.time.tz.Provider provider1 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone3 = provider1.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfMinute();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.DateTime dateTime11 = property8.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime12 = property8.getDateTime();
        int int13 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate14 = dateTime4.toLocalDate();
        org.joda.time.Interval interval15 = localDate14.toInterval();
        org.joda.time.LocalDate.Property property16 = localDate14.dayOfYear();
        org.junit.Assert.assertNotNull(provider1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "38" + "'", str9, "38");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test19705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19705");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.field.FieldUtils.safeMultiply(54072755, 53850);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 54072755 * 53850");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19706");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        org.joda.time.Chronology chronology9 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean12 = dateTimeFormatter11.isParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        java.lang.String str15 = dateTimeFieldType13.toString();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDurationAdded(readableDuration19, 7);
        org.joda.time.Chronology chronology22 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType13.getField(chronology22);
        org.joda.time.DurationField durationField24 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter11.withChronology(chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withPivotYear(29);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) 53642);
        java.lang.String str34 = dateTimeZone30.getNameKey((long) 53665281);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter26.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter36.withDefaultYear(53995639);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "clockhourOfHalfday" + "'", str15, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
    }

    @Test
    public void test19707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19707");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        int int6 = localDateTime1.getYear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plus(readableDuration7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, 20);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfDay(2000);
        int int14 = localDateTime13.getDayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test19708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19708");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(53752);
        org.joda.time.LocalDate.Property property3 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear((int) (byte) 100);
        int int7 = localDate4.getDayOfWeek();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        int int12 = dateTimeZone9.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime13 = localDate4.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = localDate4.plusDays((int) '4');
        org.joda.time.LocalDate localDate17 = localDate15.withCenturyOfEra(53638);
        org.joda.time.LocalDate localDate19 = localDate17.minusDays(9);
        org.joda.time.LocalDate.Property property20 = localDate19.monthOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        int int28 = dateTimeZone25.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(dateTimeZone25);
        int int30 = localDate29.size();
        int int31 = localDate29.getWeekOfWeekyear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter23.withZone(dateTimeZone33);
        int int38 = dateTimeZone33.getOffsetFromLocal((long) 53665281);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(dateTimeZone33);
        long long42 = dateTimeZone33.adjustOffset(53662L, true);
        org.joda.time.DateTime dateTime43 = localDate19.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.DateTime dateTime44 = localDate0.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime44.getZone();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Etc/UTC" + "'", str10, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Etc/UTC" + "'", str34, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 53662L + "'", long42 == 53662L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
    }

    @Test
    public void test19709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19709");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfEra();
        org.joda.time.LocalDate localDate4 = property3.roundFloorCopy();
        org.joda.time.LocalDate localDate6 = localDate4.minusDays(53869676);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455818815,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=38,MILLISECOND=815,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test19710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19710");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property12.addWrapFieldToCopy(0);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.tz.Provider provider17 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone19 = provider17.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 53650853, dateTimeZone19);
        long long23 = dateTimeZone19.convertLocalToUTC((long) 53816, true);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime dateTime30 = localTime26.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear(32772);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        java.util.Date date34 = dateTime33.toDate();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 100);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.plus((long) 53754094);
        int int40 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology41 = chronology15.withZone(dateTimeZone19);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(provider17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53816L + "'", long23 == 53816L);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test19711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19711");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int7 = localDate5.get(dateTimeFieldType6);
        org.joda.time.LocalDate localDate9 = localDate5.withWeekyear(147210);
        int int10 = localDate9.getEra();
        int int11 = localDate9.getEra();
        int int12 = localDate9.getYearOfCentury();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate9.toDateTime(readableInstant13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate9.withCenturyOfEra(53959599);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53959599 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test19712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19712");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(53904058, 54064, 53679762, 0, 54023, 54141, 54018166);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54023 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19713");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:58:44.190Z");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test19714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19714");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.monthOfYear();
        org.joda.time.DurationField durationField7 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.halfdayOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test19715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19715");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        long long6 = dateTime5.getMillis();
        java.lang.String str7 = dateTime5.toString();
        org.joda.time.DateTime dateTime9 = dateTime5.minusHours(575);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime.Property property13 = dateTime11.secondOfMinute();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear((int) (byte) 100);
        int int17 = localDate14.getDayOfWeek();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        int int22 = dateTimeZone19.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime23 = localDate14.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime11.toMutableDateTime(dateTimeZone19);
        long long26 = dateTimeZone19.convertUTCToLocal((long) (-1));
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone19);
        boolean boolean28 = dateTimeZone19.isFixed();
        int int30 = dateTimeZone19.getOffset((long) 53774974);
        java.lang.String str31 = dateTimeZone19.getID();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "38" + "'", str4, "38");
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645455819000L + "'", long6 == 1645455819000L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T15:03:39.000Z" + "'", str7, "2022-02-21T15:03:39.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Etc/UTC" + "'", str20, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test19716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19716");
        java.util.Locale locale1 = new java.util.Locale("1 Jan 1970 00:00:00 GMT");
        java.lang.String str2 = locale1.getDisplayName();
        org.junit.Assert.assertEquals(locale1.toString(), "1 jan 1970 00:00:00 gmt");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1 jan 1970 00:00:00 gmt" + "'", str2, "1 jan 1970 00:00:00 gmt");
    }

    @Test
    public void test19717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19717");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.stream();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strSet3.spliterator();
        java.lang.Object[] objArray6 = strSet3.toArray();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        boolean boolean15 = durationFieldType8.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField17 = durationFieldType7.getField(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        java.lang.String str20 = dateTimeFieldType18.toString();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.hourOfDay();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDurationAdded(readableDuration24, 7);
        org.joda.time.Chronology chronology27 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType18.getField(chronology27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.DurationField durationField30 = durationFieldType7.getField(chronology27);
        java.lang.String str31 = durationFieldType7.toString();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime33.getFieldTypes();
        org.joda.time.Chronology chronology36 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField39 = chronology36.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.secondOfDay();
        org.joda.time.DurationField durationField43 = durationFieldType7.getField(chronology36);
        org.joda.time.DurationField durationField44 = chronology36.seconds();
        boolean boolean45 = strSet3.equals((java.lang.Object) chronology36);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str1, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KOR" + "'", str2, "KOR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strSpliterator5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourOfHalfday" + "'", str20, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "halfdays" + "'", str31, "halfdays");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test19718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19718");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withYearOfEra(53634);
        int int5 = localDateTime2.getDayOfWeek();
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        long long10 = chronology6.add((long) (-10976054), 53669L, 605139);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) 847L, chronology6);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis(53792450);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTime.Property property15 = dateTime13.weekyear();
        long long16 = dateTime13.getMillis();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32466228937L + "'", long10 == 32466228937L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-53791603L) + "'", long16 == (-53791603L));
    }

    @Test
    public void test19719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19719");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar calendar6 = builder5.build();
        java.util.Calendar calendar7 = builder5.build();
        java.util.Calendar.Builder builder11 = builder5.setDate(605139, 14, 20);
        java.util.Calendar.Builder builder13 = builder11.setLenient(true);
        java.util.Calendar.Builder builder17 = builder11.setTimeOfDay((int) (byte) 1, 53656981, (int) (byte) 100);
        java.util.Calendar.Builder builder21 = builder17.setDate(53646831, 53654791, 9);
        java.util.Calendar.Builder builder25 = builder21.setWeekDate(643776, 53629, 53760293);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.time.ZoneId zoneId28 = timeZone27.toZoneId();
        java.lang.String str29 = timeZone27.getID();
        java.util.Calendar.Builder builder30 = builder25.setTimeZone(timeZone27);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=51022099,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=10,SECOND=22,MILLISECOND=99,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=51022099,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=10,SECOND=22,MILLISECOND=99,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(zoneId28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GMT" + "'", str29, "GMT");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test19720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19720");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int16 = dateTime14.get(dateTimeFieldType15);
        boolean boolean17 = localDate4.isSupported(dateTimeFieldType15);
        int int18 = localDate4.getMonthOfYear();
        org.joda.time.Interval interval19 = localDate4.toInterval();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate4.minus(readablePeriod20);
        org.joda.time.LocalDate localDate23 = localDate4.plusWeeks(53628014);
        org.joda.time.LocalDate localDate25 = localDate4.minusWeeks(53626975);
        java.lang.String str26 = localDate4.toString();
        int int27 = localDate4.getYearOfEra();
        org.joda.time.LocalDate.Property property28 = localDate4.weekyear();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0012-04-10" + "'", str26, "0012-04-10");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test19721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19721");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        int int3 = calendar0.getWeekYear();
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(54095373, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455818993,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=38,MILLISECOND=993,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test19722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19722");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths(605139);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.era();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withYearOfEra(5363800);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withSecondOfMinute(54196400);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54196400 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test19723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19723");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar calendar6 = builder5.build();
        java.util.Calendar calendar7 = builder5.build();
        java.util.Calendar.Builder builder11 = builder5.setDate(605139, 14, 20);
        java.util.Calendar.Builder builder13 = builder11.setLenient(true);
        java.util.Calendar.Builder builder15 = builder11.setLenient(false);
        java.util.Calendar.Builder builder19 = builder15.setDate(34, 53685476, 70);
        java.util.Calendar.Builder builder21 = builder19.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder24 = builder21.set(53934, 55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=51022099,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=10,SECOND=22,MILLISECOND=99,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=51022099,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=10,SECOND=22,MILLISECOND=99,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test19724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19724");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate5.minus(readablePeriod6);
        org.joda.time.LocalDate.Property property8 = localDate7.centuryOfEra();
        org.joda.time.LocalDate.Property property9 = localDate7.centuryOfEra();
        int int10 = localDate7.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test19725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19725");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.DateTime dateTime7 = dateTime1.minusMinutes((-1));
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime11 = dateTime7.withDurationAdded((long) 53910138, 54048741);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54219 + "'", int3 == 54219);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T15:04:39.022Z" + "'", str8, "2022-02-21T15:04:39.022Z");
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test19726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19726");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        java.lang.String str5 = dateTimeZone2.getShortName((long) 5);
        java.lang.String str6 = dateTimeZone2.getID();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTimeISO();
        int int13 = dateTime9.getMillisOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        int int17 = dateTime15.getSecondOfDay();
        org.joda.time.DateTime dateTime19 = dateTime15.minusYears(12);
        boolean boolean20 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        int int24 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 53647, dateTimeZone2);
        long long27 = dateTimeZone2.previousTransition((long) 54091880);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 54219030 + "'", int13 == 54219030);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 54219 + "'", int17 == 54219);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 54091880L + "'", long27 == 54091880L);
    }

    @Test
    public void test19727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19727");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay((int) (short) -1, 53629404, 53629, 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime.Property property18 = localTime13.hourOfDay();
        int int19 = localTime13.getSecondOfMinute();
        org.joda.time.LocalTime localTime21 = localTime13.withMinuteOfHour(19);
        int[] intArray22 = localTime13.getValues();
        java.util.Calendar.Builder builder23 = builder0.setFields(intArray22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMinimumValue();
        org.joda.time.DurationField durationField28 = property26.getDurationField();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMillisOfSecond(896);
        int[] intArray32 = localDateTime29.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder33 = builder23.setFields(intArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 1]");
    }

    @Test
    public void test19728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19728");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        int int8 = dateTimeZone5.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        int int10 = localDate9.size();
        int int11 = localDate9.getWeekOfWeekyear();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter3.withZone(dateTimeZone13);
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        timeZone21.setID("+00:00");
        timeZone21.setRawOffset(2);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        timeZone28.setID("+00:00");
        boolean boolean31 = timeZone21.hasSameRules(timeZone28);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone21, locale32);
        java.lang.String str34 = locale32.getLanguage();
        java.lang.String str37 = nameProvider17.getName(locale32, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale39 = new java.util.Locale("hi!");
        java.lang.String str40 = locale39.getISO3Country();
        java.util.Locale locale41 = locale39.stripExtensions();
        java.lang.String str42 = locale39.getScript();
        java.lang.String str44 = locale39.getUnicodeLocaleType("57");
        java.lang.String str47 = nameProvider17.getShortName(locale39, "49", "GMT");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter16.withLocale(locale39);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str51 = dateTimeZone50.toString();
        java.lang.String str52 = dateTimeZone50.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter48.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeFormatter53.getZone();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 366, dateTimeZone54);
        org.joda.time.LocalDate localDate57 = localDate55.withYearOfCentury(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate59 = localDate55.withDayOfMonth(54199985);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54199985 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455819055,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=39,MILLISECOND=57,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Etc/UTC" + "'", str51, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Etc/UTC" + "'", str52, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test19729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19729");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long9 = chronology4.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.yearOfEra();
        org.joda.time.DurationField durationField12 = chronology4.years();
        org.joda.time.DateTimeField dateTimeField13 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField14 = chronology4.weeks();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime16.getFieldTypes();
        org.joda.time.Chronology chronology19 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekyear();
        org.joda.time.Chronology chronology21 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) durationField14, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.PreciseDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1695288531543715772L + "'", long9 == 1695288531543715772L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19730");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 32772);
        long long7 = dateTimeZone1.adjustOffset((long) (byte) 10, true);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone9 = dateTimeZone1.toTimeZone();
        boolean boolean10 = timeZone9.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19731");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusHours(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        java.lang.String str15 = dateTimeFieldType13.toString();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDurationAdded(readableDuration19, 7);
        org.joda.time.Chronology chronology22 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType13.getField(chronology22);
        org.joda.time.DurationField durationField24 = chronology22.seconds();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.weekyear();
        long long29 = dateTimeField26.add((long) 18, (long) 53661);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField26.getType();
        boolean boolean31 = localDateTime12.equals((java.lang.Object) dateTimeField26);
        long long34 = dateTimeField26.getDifferenceAsLong((long) 53919, (long) 54063260);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "clockhourOfHalfday" + "'", str15, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1693377705600018L + "'", long29 == 1693377705600018L);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test19732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19732");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int6 = dateTime4.get(dateTimeFieldType5);
        int int7 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0, dateTimeZone2);
        org.joda.time.LocalDate localDate10 = localDate8.plusMonths(53650853);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test19733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19733");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long9 = chronology4.add((-45001L), 53641L, 53652018);
        org.joda.time.DurationField durationField10 = chronology4.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.centuryOfEra();
        long long15 = chronology4.add((long) 53885885, (long) 53796, (-53692));
        org.joda.time.DateTimeField dateTimeField16 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField17 = chronology4.seconds();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2877947852537L + "'", long9 == 2877947852537L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-2834528947L) + "'", long15 == (-2834528947L));
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test19734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19734");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        int int7 = dateTimeField5.get((long) ' ');
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusSeconds(6);
        int int14 = localDateTime9.getYear();
        int[] intArray21 = new int[] { (short) 10, 6, 53629404, 3, '4', (short) 0 };
        int int22 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime9, intArray21);
        org.joda.time.DurationField durationField23 = dateTimeField5.getRangeDurationField();
        int int24 = dateTimeField5.getMaximumValue();
        int int27 = dateTimeField5.getDifference((long) 53738, 53626948L);
        boolean boolean28 = dateTimeField5.isLenient();
        long long30 = dateTimeField5.roundHalfFloor((long) 54132988);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "39" + "'", str4, "39");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 6, 53629404, 3, 52, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-53573) + "'", int27 == (-53573));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 54133000L + "'", long30 == 54133000L);
    }

    @Test
    public void test19735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19735");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime10 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.year();
        int int13 = localDateTime11.size();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test19736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19736");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMinutes(53);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withWeekyear(20);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime18 = property15.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime19 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds(2922789);
        org.joda.time.DateTime dateTime22 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.DateTime.Property property24 = dateTime21.secondOfDay();
        org.joda.time.DateTime.Property property25 = dateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths(605139);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minus(readableDuration34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = localDateTime35.getFieldType(0);
        org.joda.time.DateTime.Property property38 = dateTime21.property(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = property38.addWrapFieldToCopy(53877519);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "39" + "'", str16, "39");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test19737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19737");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test19738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19738");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(53630);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime10 = dateTime6.withFieldAdded(durationFieldType8, 53633152);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.Chronology chronology12 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime.Property property20 = dateTime18.secondOfMinute();
        java.lang.String str21 = property20.getAsString();
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder27 = builder22.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar.Builder builder32 = builder22.setTimeOfDay((int) (short) -1, 53629404, 53629, 0);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        int int38 = dateTimeZone35.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 0, dateTimeZone35);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = dateTimeZone35.getName(0L, locale41);
        java.util.Calendar.Builder builder43 = builder32.setLocale(locale41);
        int int44 = property20.getMaximumTextLength(locale41);
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale45.getISO3Country();
        java.util.Locale locale48 = locale45.stripExtensions();
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.lang.String str51 = locale41.getDisplayLanguage(locale48);
        java.lang.String str52 = locale41.toLanguageTag();
        java.lang.String str53 = locale41.getISO3Country();
        java.lang.String str54 = dateTimeField15.getAsText(53927203, locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = locale41.getUnicodeLocaleType("2022-02-21T15:03:16.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-21T15:03:16.000Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "39" + "'", str4, "39");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "39" + "'", str21, "39");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str46, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "KOR" + "'", str47, "KOR");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str51, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zh" + "'", str52, "zh");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "53927203" + "'", str54, "53927203");
    }

    @Test
    public void test19739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19739");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = property15.setCopy("58");
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra(52);
        int int20 = dateTime19.getMonthOfYear();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime19.toGregorianCalendar();
        java.time.Instant instant22 = gregorianCalendar21.toInstant();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54219218 + "'", int5 == 54219218);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54219 + "'", int9 == 54219);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(instant22);
    }

    @Test
    public void test19740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19740");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        boolean boolean3 = property2.isLeap();
        org.joda.time.LocalDateTime localDateTime4 = property2.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        int int7 = localDateTime5.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMillis(53891177);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test19741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19741");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        int int5 = localDateTime1.getEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYear(53669267);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy(345L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test19742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19742");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime4.minusMonths(53628014);
        org.joda.time.DateTime dateTime17 = dateTime4.plusMinutes((-500));
        org.joda.time.Chronology chronology18 = dateTime4.getChronology();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54219 + "'", int10 == 54219);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test19743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19743");
        java.lang.String[] strArray4 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.lang.Object[] objArray8 = strSet5.toArray();
        java.util.Set<java.lang.String> strSet9 = java.util.Calendar.getAvailableCalendarTypes();
        boolean boolean10 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList16);
        java.util.stream.Stream<java.lang.String> strStream19 = strList18.stream();
        boolean boolean20 = strSet5.removeAll((java.util.Collection<java.lang.String>) strList18);
        java.util.Spliterator<java.lang.String> strSpliterator21 = strSet5.spliterator();
        java.util.stream.Stream<java.lang.String> strStream22 = strSet5.stream();
        boolean boolean23 = strSet5.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator24 = strSet5.spliterator();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale25.getDisplayName();
        java.lang.String str27 = locale25.getISO3Country();
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet28.spliterator();
        java.util.stream.Stream<java.lang.String> strStream31 = strSet28.stream();
        boolean boolean32 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet28);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[Nov 29, 1909 12:00:00 AM, Etc/UTC, 47, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[Nov 29, 1909 12:00:00 AM, Etc/UTC, 47, ]");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSpliterator24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str26, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "KOR" + "'", str27, "KOR");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test19744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19744");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plus(readableDuration10);
        int int12 = localDateTime11.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusWeeks(9);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMinutes(53628560);
        int int20 = localDateTime14.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.minusMillis(53635);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int29 = dateTime27.get(dateTimeFieldType28);
        boolean boolean30 = localDateTime24.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.plusYears((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean34 = localDateTime24.isSupported(dateTimeFieldType33);
        int int35 = localDateTime14.get(dateTimeFieldType33);
        int int36 = localDateTime11.get(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime11.withYear(53816668);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readablePeriod39);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test19745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19745");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.secondOfMinute();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        timeZone11.setID("+00:00");
        timeZone11.setRawOffset(2);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        timeZone18.setID("+00:00");
        boolean boolean21 = timeZone11.hasSameRules(timeZone18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone11, locale22);
        timeZone11.setID("1970");
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = locale26.getISO3Country();
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleAttributes();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone11, locale26);
        int int31 = dateTimeField8.getMaximumTextLength(locale26);
        java.util.Locale locale32 = locale26.stripExtensions();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645455819306,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=39,MILLISECOND=308,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str27, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "KOR" + "'", str28, "KOR");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645455819306,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=39,MILLISECOND=308,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
    }

    @Test
    public void test19746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19746");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology5);
        int int9 = dateTime8.getMinuteOfDay();
        int int10 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime.Property property11 = dateTime8.weekyear();
        int int12 = property11.getLeapAmount();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 903 + "'", int9 == 903);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test19747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19747");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        int int7 = dateTimeZone4.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        int int9 = localDate8.size();
        int int10 = localDate8.getWeekOfWeekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 259);
        java.lang.Integer int31 = dateTimeFormatter27.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter27.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = dateTimeFormatter27.print((-1692253227052800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53633152L + "'", long24 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(dateTimeParser32);
    }

    @Test
    public void test19748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19748");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.hourOfDay();
        boolean boolean10 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = chronology5.getDateTimeMillis(809L, 54174451, 53986567, 54094168, 53674);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54174451 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test19749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19749");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(53630);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime10 = dateTime6.withFieldAdded(durationFieldType8, 53633152);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, 53680);
        org.joda.time.DateTime dateTime15 = dateTime10.withYear(53740896);
        org.joda.time.DateTime dateTime16 = dateTime10.withLaterOffsetAtOverlap();
        int int17 = dateTime16.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "39" + "'", str4, "39");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test19750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19750");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale.setDefault(locale6);
        java.lang.String str9 = locale6.getVariant();
        int int10 = dateTimeField5.getMaximumShortTextLength(locale6);
        int int12 = dateTimeField5.get(497L);
        int int14 = dateTimeField5.getMinimumValue((long) (-101));
        long long17 = dateTimeField5.add((long) 53683575, 53636);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4634204083575L + "'", long17 == 4634204083575L);
    }

    @Test
    public void test19751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19751");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("minutes");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"minutes\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19752");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone2);
        int int7 = timeZone2.getOffset((long) 53626);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone2, locale9);
        java.lang.String str11 = calendar10.getCalendarType();
        calendar10.set(53646, 13, 53642, 365, 53663092, 50);
        int int19 = calendar10.getWeekYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1638626997170386,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53896,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=9,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=52,SECOND=50,MILLISECOND=386,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53896 + "'", int19 == 53896);
    }

    @Test
    public void test19753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19753");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfCentury((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate6 = dateTime5.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType7.getRangeDurationType();
        int int10 = localDate6.get(dateTimeFieldType7);
        org.joda.time.LocalDate localDate12 = localDate6.plusDays(53900267);
        org.joda.time.LocalDate.Property property13 = localDate6.monthOfYear();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNull(durationFieldType8);
        org.junit.Assert.assertNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test19754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19754");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.withMaximumValue();
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate.Property property4 = localDate2.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        java.lang.String str7 = durationFieldType6.toString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "years" + "'", str7, "years");
    }

    @Test
    public void test19755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19755");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(8);
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property7 = dateTime1.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate11 = localDate9.plusYears((int) (byte) 10);
        org.joda.time.LocalDate.Property property12 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate16 = localDate13.plusDays(2010);
        boolean boolean17 = dateTime1.equals((java.lang.Object) 2010);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test19756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19756");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(650L);
        org.joda.time.Instant instant3 = instant1.plus((long) 29);
        org.joda.time.Instant instant5 = instant1.plus(2906381314265568L);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
    }

    @Test
    public void test19757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19757");
        java.util.Date date1 = new java.util.Date((long) 53693876);
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(2);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter4.withChronology(chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 53642);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        int int17 = dateTimeZone14.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone14);
        java.lang.String str20 = dateTimeZone14.getNameKey((long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser23 = dateTimeFormatter22.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter22.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withOffsetParsed();
        boolean boolean26 = date1.equals((java.lang.Object) dateTimeFormatter25);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 14:54:53 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(dateTimeParser23);
        org.junit.Assert.assertNull(dateTimeParser24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test19758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19758");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int6 = localDate5.size();
        int int7 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property8 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate10 = property8.addToCopy(53770);
        org.joda.time.LocalDate.Property property11 = localDate10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test19759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19759");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(644462519L);
    }

    @Test
    public void test19760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19760");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        int int3 = calendar0.getMinimalDaysInFirstWeek();
        java.util.Date date4 = calendar0.getTime();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        timeZone7.setID("+00:00");
        timeZone7.setRawOffset(2);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        timeZone14.setID("+00:00");
        boolean boolean17 = timeZone7.hasSameRules(timeZone14);
        int int18 = timeZone7.getRawOffset();
        timeZone7.setID("12");
        calendar0.setTimeZone(timeZone7);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.set(54058871, 54068362);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455819472,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=12,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=39,MILLISECOND=472,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:03:39 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test19761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19761");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(53630);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.minus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) '4');
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder12.clear();
        java.util.Locale.Builder builder17 = builder14.setUnicodeLocaleKeyword("20", "943");
        java.util.Locale locale18 = builder14.build();
        java.util.Locale.Builder builder19 = builder14.clear();
        boolean boolean20 = dateTime8.equals((java.lang.Object) builder14);
        java.util.Locale.Builder builder21 = builder14.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "39" + "'", str4, "39");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test19762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19762");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay(2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withYear((int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds(99);
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withFields(readablePartial10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMinimumValue();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        int int18 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.minusHours(53793);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMinutes(53786056);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusHours(86299100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0029-11-11T15:01:38.999" + "'", str21, "0029-11-11T15:01:38.999");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test19763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19763");
        org.joda.time.tz.Provider provider1 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone3 = provider1.getZone("Etc/UTC");
        boolean boolean5 = dateTimeZone3.isStandardOffset(1645455317479L);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(1694358359783208000L, dateTimeZone3);
        org.junit.Assert.assertNotNull(provider1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test19764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19764");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 5);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded(readableDuration7, 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths(575);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        long long16 = property15.remainder();
        org.joda.time.DateTime dateTime18 = property15.setCopy("47");
        boolean boolean19 = dateTime18.isEqualNow();
        int int20 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateMidnight dateMidnight21 = dateTime18.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 547L + "'", long16 == 547L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test19765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19765");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.hourOfHalfday();
        org.joda.time.Chronology chronology7 = chronology4.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.weekyear();
        java.lang.String[] strArray15 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        boolean boolean18 = strSet16.isEmpty();
        java.lang.Object[] objArray19 = strSet16.toArray();
        java.util.Set<java.lang.String> strSet20 = java.util.Calendar.getAvailableCalendarTypes();
        boolean boolean21 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("KOR");
        java.lang.String[] strArray28 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        boolean boolean31 = strSet29.isEmpty();
        java.lang.Object[] objArray32 = strSet29.toArray();
        java.lang.String str33 = java.util.Locale.lookupTag(languageRangeList23, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = locale34.getISO3Country();
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleAttributes();
        boolean boolean38 = strSet29.containsAll((java.util.Collection<java.lang.String>) strSet37);
        boolean boolean39 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale41.getISO3Country();
        java.util.Locale.setDefault(category40, locale41);
        java.util.Locale locale45 = java.util.Locale.getDefault(category40);
        boolean boolean46 = strSet29.contains((java.lang.Object) category40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        int int52 = dateTime51.getEra();
        org.joda.time.DateTime dateTime53 = localTime49.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalTime localTime55 = localTime49.plusMillis((-1));
        org.joda.time.LocalTime localTime57 = localTime55.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalTime localTime60 = localTime55.withPeriodAdded(readablePeriod58, (int) '4');
        org.joda.time.LocalTime.Property property61 = localTime60.millisOfSecond();
        org.joda.time.LocalTime localTime62 = property61.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime64 = property61.addNoWrapToCopy((int) (short) 100);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.util.TimeZone timeZone67 = dateTimeZone66.toTimeZone();
        timeZone67.setID("+00:00");
        timeZone67.setRawOffset(2);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.util.TimeZone timeZone74 = dateTimeZone73.toTimeZone();
        timeZone74.setID("+00:00");
        boolean boolean77 = timeZone67.hasSameRules(timeZone74);
        java.util.Locale locale78 = java.util.Locale.CHINESE;
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone67, locale78);
        int int80 = property61.getMaximumShortTextLength(locale78);
        java.lang.String str81 = locale78.getCountry();
        java.util.Locale.setDefault(category40, locale78);
        java.util.Locale locale83 = java.util.Locale.getDefault(category40);
        java.util.Locale locale85 = new java.util.Locale("clockhourOfHalfday");
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleKeys();
        java.lang.String str87 = locale85.getDisplayVariant();
        java.util.Locale.setDefault(category40, locale85);
        java.util.Set<java.lang.String> strSet89 = locale85.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            long long90 = dateTimeField8.set((-193113126000000L), "\uc601\uc5b4\uc601\uad6d)", locale85);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"????? (??????)\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[Nov 29, 1909 12:00:00 AM, Etc/UTC, 47, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[Nov 29, 1909 12:00:00 AM, Etc/UTC, 47, ]");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Nov 29, 1909 12:00:00 AM, Etc/UTC, 47, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Nov 29, 1909 12:00:00 AM, Etc/UTC, 47, ]");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str35, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "KOR" + "'", str36, "KOR");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str42, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "KOR" + "'", str43, "KOR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1645455819558,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=39,MILLISECOND=560,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh");
        org.junit.Assert.assertEquals(locale85.toString(), "clockhourofhalfday");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test19766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19766");
        java.util.Date date3 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant4 = date3.toInstant();
        java.lang.String str5 = date3.toLocaleString();
        date3.setMonth(53652018);
        java.lang.String str8 = date3.toLocaleString();
        date3.setSeconds(292278993);
        int int11 = date3.getMinutes();
        date3.setMonth(53728661);
        int int14 = date3.getHours();
        int int15 = date3.getHours();
        java.time.Instant instant16 = date3.toInstant();
        java.util.Date date17 = java.util.Date.from(instant16);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Jun 01 20:36:33 GMT+00:00 8950307");
        org.junit.Assert.assertNotNull(instant4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc624\uc804 12:00:00" + "'", str5, "\uc624\uc804 12:00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc624\uc804 12:00:00" + "'", str8, "\uc624\uc804 12:00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36 + "'", int11 == 36);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jun 01 20:36:33 GMT+00:00 8950307");
    }

    @Test
    public void test19767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19767");
        java.util.Date date3 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant4 = date3.toInstant();
        java.lang.String str5 = date3.toLocaleString();
        date3.setMonth(53652018);
        date3.setHours(0);
        date3.setMinutes(785);
        java.lang.Object obj12 = date3.clone();
        org.junit.Assert.assertEquals(date3.toString(), "Tue Jul 29 13:05:00 GMT+00:00 4472910");
        org.junit.Assert.assertNotNull(instant4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc624\uc804 12:00:00" + "'", str5, "\uc624\uc804 12:00:00");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Tue Jul 29 13:05:00 GMT+00:00 4472910");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Tue Jul 29 13:05:00 GMT+00:00 4472910");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Tue Jul 29 13:05:00 GMT+00:00 4472910");
    }

    @Test
    public void test19768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19768");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears(100);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundCeilingCopy();
        org.joda.time.DateTime dateTime23 = property21.getDateTime();
        org.joda.time.DateTime dateTime24 = property21.getDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54219593 + "'", int5 == 54219593);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54219 + "'", int9 == 54219);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test19769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19769");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        int int5 = calendar0.getGreatestMinimum(12);
        calendar0.set((-53626948), 53629, 53632, 53633, 53632);
        calendar0.set((int) (short) 1, (int) ' ', 53630324, 53629404, 5);
        int int18 = calendar0.getWeeksInWeekYear();
        calendar0.set(365, 23, 53670067);
        java.util.TimeZone timeZone23 = calendar0.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        timeZone26.setID("+00:00");
        timeZone26.setRawOffset(2);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        timeZone33.setID("+00:00");
        boolean boolean36 = timeZone26.hasSameRules(timeZone33);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone26, locale37);
        calendar0.setTimeZone(timeZone26);
        boolean boolean40 = timeZone26.observesDaylightTime();
        int int42 = timeZone26.getOffset(1645455671000L);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = timeZone26.getOffset(597, 53982, 53913388, (-616), 53995639, 54106032);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 597");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=365,MONTH=23,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=53670067,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=53629404,MINUTE=5,SECOND=39,MILLISECOND=606,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645455819606,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=39,MILLISECOND=608,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test19770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19770");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        org.joda.time.DateTime dateTime6 = property3.setCopy("46", locale5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getISO3Country();
        java.util.Locale locale11 = locale8.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        java.util.Locale.setDefault(locale11);
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.lang.String str18 = locale11.getDisplayScript(locale17);
        java.util.Calendar calendar19 = dateTime6.toCalendar(locale17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.fromCalendarFields(calendar19);
        java.time.Instant instant21 = calendar19.toInstant();
        java.util.TimeZone timeZone22 = calendar19.getTimeZone();
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap26 = calendar19.getDisplayNames(54138, 54066002, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Korean (South Korea)" + "'", str9, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "KOR" + "'", str10, "KOR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645455826616,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=46,MILLISECOND=616,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
    }

    @Test
    public void test19771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19771");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        int int6 = dateTimeZone1.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfWeek();
        org.joda.time.DurationField durationField12 = dateTimeField11.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19772");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(53633152);
        int int12 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withWeekyear(53865266);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test19773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19773");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime2.minusSeconds(53626975);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime2.withPeriodAdded(readablePeriod11, 20);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        java.lang.String str18 = dateTimeZone15.getShortName((long) 5);
        java.lang.String str19 = dateTimeZone15.getID();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(readableDuration21, 32772);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        int int29 = dateTimeZone26.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 0, dateTimeZone26);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.LocalTime localTime33 = localTime31.minusSeconds((int) (byte) 1);
        int int34 = localTime33.getMillisOfDay();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        int int39 = dateTimeZone36.getOffsetFromLocal((long) 53626948);
        long long41 = dateTimeZone36.nextTransition((long) 5);
        org.joda.time.DateTime dateTime42 = localTime33.toDateTimeToday(dateTimeZone36);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((java.lang.Object) readableDuration21, dateTimeZone36);
        org.joda.time.DateTime dateTime44 = localTime13.toDateTimeToday(dateTimeZone36);
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.seconds();
        org.joda.time.DurationFieldType durationFieldType47 = durationField46.getType();
        java.lang.String str48 = durationFieldType47.getName();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 54218649 + "'", int34 == 54218649);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Etc/UTC" + "'", str37, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5L + "'", long41 == 5L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "seconds" + "'", str48, "seconds");
    }

    @Test
    public void test19774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19774");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfEra(53634);
        int int4 = localDateTime3.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, 53640);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMonths(53675);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusWeeks(53680304);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((long) 53719552);
        org.joda.time.LocalTime localTime15 = localTime13.plusMillis(9);
        int int16 = localTime13.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localTime13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
    }

    @Test
    public void test19775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19775");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.year();
        int int8 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime1.millisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test19776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19776");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = dateTime1.toLocalDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.Chronology chronology11 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology11.years();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime1.toMutableDateTime(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 683 + "'", int5 == 683);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test19777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19777");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar calendar6 = builder5.build();
        java.util.Calendar calendar7 = builder5.build();
        java.util.Calendar.Builder builder11 = builder5.setDate(605139, 14, 20);
        java.util.Calendar.Builder builder13 = builder11.setLenient(true);
        java.util.Calendar.Builder builder15 = builder11.setLenient(false);
        java.util.Calendar.Builder builder19 = builder11.setWeekDate(53665281, 53628014, 366);
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = locale20.getISO3Country();
        java.util.Locale locale23 = locale20.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Calendar.Builder builder26 = builder11.setLocale(locale23);
        java.util.Calendar.Builder builder29 = builder11.set(3, 53702);
        java.util.Calendar.Builder builder33 = builder11.setDate(44, 53770346, 53753947);
        java.util.Calendar.Builder builder37 = builder33.setWeekDate((-946258560), 53754, 53862745);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder39 = builder37.setInstant((long) 54033);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=51022099,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=10,SECOND=22,MILLISECOND=99,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=51022099,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=10,SECOND=22,MILLISECOND=99,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str21, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "KOR" + "'", str22, "KOR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test19778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19778");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        boolean boolean6 = dateTimeZone1.isFixed();
        int int8 = dateTimeZone1.getOffsetFromLocal(0L);
        java.util.TimeZone timeZone9 = dateTimeZone1.toTimeZone();
        java.lang.String str10 = timeZone9.getID();
        timeZone9.setRawOffset(53865266);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Etc/UTC" + "'", str10, "Etc/UTC");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455819705,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=53865266,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=1,SECOND=24,MILLISECOND=971,ZONE_OFFSET=53865266,DST_OFFSET=0]");
    }

    @Test
    public void test19779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19779");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        timeZone2.setRawOffset(2);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        timeZone9.setID("+00:00");
        boolean boolean12 = timeZone2.hasSameRules(timeZone9);
        int int13 = timeZone2.getRawOffset();
        timeZone2.setID("und");
        java.lang.String str16 = timeZone2.getID();
        java.util.TimeZone.setDefault(timeZone2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = timeZone2.getDisplayName(true, 963);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 963");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
    }

    @Test
    public void test19780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19780");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long9 = chronology4.add((-45001L), 53641L, 53652018);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.Chronology chronology14 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.Chronology chronology18 = chronology4.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.hourOfDay();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDurationAdded(readableDuration23, 7);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusMinutes(53);
        int[] intArray28 = localDateTime27.getValues();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime.Property property32 = dateTime30.secondOfMinute();
        org.joda.time.DateTime dateTime34 = dateTime30.withCenturyOfEra((int) ' ');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime30.minus(readableDuration35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.era();
        int int38 = dateTime36.get(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int42 = dateTime40.get(dateTimeFieldType41);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime40.toMutableDateTimeISO();
        int int44 = dateTime40.getMillisOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getEra();
        int int48 = dateTime46.getSecondOfDay();
        org.joda.time.DateTime dateTime50 = dateTime46.minusYears(12);
        boolean boolean51 = dateTime40.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime50.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.minus(readablePeriod56);
        boolean boolean58 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology59 = dateTime57.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.millis();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType37.getField(chronology59);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.withPeriodAdded(readablePeriod68, 53625);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.year();
        org.joda.time.LocalDateTime localDateTime73 = property71.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime74 = property71.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = property71.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.year();
        int[] intArray78 = chronology59.get((org.joda.time.ReadablePartial) localDateTime75, (long) 53764);
        chronology18.validate((org.joda.time.ReadablePartial) localDateTime27, intArray78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime27.plusWeeks(972);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2877947852537L + "'", long9 == 2877947852537L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 3179999]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 54219723 + "'", int44 == 54219723);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 54219 + "'", int48 == 54219);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 53764]");
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test19781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19781");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime localTime9 = localTime6.withSecondOfMinute(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property11 = localTime9.property(dateTimeFieldType10);
        int int12 = property11.getMaximumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime21 = localTime15.plusMillis((-1));
        org.joda.time.LocalTime localTime23 = localTime21.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime26 = localTime21.withPeriodAdded(readablePeriod24, (int) '4');
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        int int30 = dateTime29.getEra();
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        java.lang.String str32 = property31.getAsString();
        org.joda.time.DateTime dateTime33 = property31.roundCeilingCopy();
        int int34 = property27.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime36 = dateTime33.withEra((int) (byte) 0);
        org.joda.time.DateTime.Property property37 = dateTime33.secondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime33.plusWeeks(53764060);
        long long40 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalTime localTime41 = property11.roundFloorCopy();
        org.joda.time.LocalTime localTime42 = property11.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "39" + "'", str32, "39");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-9032819151L) + "'", long40 == (-9032819151L));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
    }

    @Test
    public void test19782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19782");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        int int21 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalTime localTime22 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime24 = property14.addCopy((long) 53626948);
        org.joda.time.LocalTime localTime26 = property14.addWrapFieldToCopy(53698587);
        org.joda.time.LocalTime localTime27 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime28 = property14.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "39" + "'", str19, "39");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test19783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19783");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        java.lang.String str8 = dateTime6.toString("+00:00");
        org.joda.time.DateTime.Property property9 = dateTime6.millisOfDay();
        org.joda.time.DateTime.Property property10 = dateTime6.monthOfYear();
        org.joda.time.DateTime.Property property11 = dateTime6.dayOfMonth();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test19784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19784");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime localTime9 = localTime6.withSecondOfMinute(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property11 = localTime9.property(dateTimeFieldType10);
        int int12 = property11.getMaximumValue();
        org.joda.time.LocalTime localTime13 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime14 = property11.withMinimumValue();
        org.joda.time.DurationField durationField15 = property11.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType16 = durationField15.getType();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationFieldType16);
    }

    @Test
    public void test19785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19785");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.LocalDate.Property property13 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundCeilingCopy();
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.LocalDate localDate17 = property15.addWrapFieldToCopy(21);
        org.joda.time.DurationField durationField18 = property15.getRangeDurationField();
        org.joda.time.LocalDate localDate19 = property15.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight20 = localDate19.toDateMidnight();
        int int21 = localDate19.getYearOfCentury();
        int int22 = localDate19.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
    }

    @Test
    public void test19786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19786");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        int int21 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalTime localTime22 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime24 = property14.addCopy((long) 53626948);
        org.joda.time.LocalTime localTime26 = property14.addCopy(341564063414000L);
        org.joda.time.LocalTime localTime28 = localTime26.minusMillis(54018166);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "39" + "'", str19, "39");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test19787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19787");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths(605139);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.secondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test19788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19788");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate0.withYear(53627);
        org.joda.time.LocalDate localDate9 = localDate0.plusYears(53920);
        org.joda.time.LocalDate.Property property10 = localDate0.year();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear((int) (byte) 100);
        org.joda.time.Interval interval15 = localDate12.toInterval();
        int int16 = localDate12.size();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight23 = localDate12.toDateMidnight(dateTimeZone18);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(575L, dateTimeZone18);
        long long27 = dateTimeZone18.convertLocalToUTC(3219300000L, true);
        org.joda.time.DateMidnight dateMidnight28 = localDate0.toDateMidnight(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3219300000L + "'", long27 == 3219300000L);
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test19789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19789");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay((int) (short) -1, 53629404, 53629, 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        int int16 = dateTimeZone13.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 0, dateTimeZone13);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = dateTimeZone13.getName(0L, locale19);
        java.util.Calendar.Builder builder21 = builder10.setLocale(locale19);
        java.util.TimeZone timeZone22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder23 = builder10.setTimeZone(timeZone22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test19790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19790");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(54166936);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19791");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMinutes(53);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withWeekyear(20);
        int int12 = localDateTime1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime1.minus(readablePeriod13);
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder20 = builder15.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar.Builder builder25 = builder15.setTimeOfDay((int) (short) -1, 53629404, 53629, 0);
        java.util.Calendar calendar26 = builder25.build();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        boolean boolean30 = property29.isLeap();
        org.joda.time.LocalDateTime localDateTime32 = property29.addToCopy(53637);
        int int33 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusWeeks(53662);
        boolean boolean36 = calendar26.after((java.lang.Object) localDateTime32);
        calendar26.setMinimalDaysInFirstWeek(53656028);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.fromCalendarFields(calendar26);
        calendar26.set(53770113, 53845242, 53645083, 53844249, 53643123, 53839426);
        boolean boolean47 = localDateTime14.equals((java.lang.Object) 53643123);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=und,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=53656028,ERA=1,YEAR=53770113,MONTH=53845242,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=53645083,DAY_OF_YEAR=354,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=5,HOUR_OF_DAY=53844249,MINUTE=53643123,SECOND=53839426,MILLISECOND=0,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test19792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19792");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = localDate1.plusYears((int) (byte) 10);
        org.joda.time.LocalDate.Property property4 = localDate1.weekOfWeekyear();
        org.joda.time.LocalDate.Property property5 = localDate1.dayOfWeek();
        int int6 = property5.getLeapAmount();
        org.joda.time.LocalDate localDate7 = property5.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test19793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19793");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.clear();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withPeriodAdded(readablePeriod10, 53625);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName((long) 32772);
        long long20 = dateTimeZone14.adjustOffset((long) (byte) 10, true);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) readablePeriod10, dateTimeZone14);
        boolean boolean22 = localDateTime5.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfDay(53698730);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusSeconds((-45533));
        int int29 = localDateTime24.getEra();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-2,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=und,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Etc/UTC" + "'", str15, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test19794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19794");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale4 = new java.util.Locale("clockhourOfHalfday");
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet5);
        java.lang.String[] strArray8 = new java.lang.String[] { "2022-02-21T14:54:47.855Z" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean11 = strSet9.isEmpty();
        boolean boolean13 = strSet9.equals((java.lang.Object) 593L);
        boolean boolean14 = strSet5.removeAll((java.util.Collection<java.lang.String>) strSet9);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime16.getFieldTypes();
        org.joda.time.Chronology chronology19 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.months();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.yearOfEra();
        boolean boolean23 = strSet5.contains((java.lang.Object) dateTimeField22);
        long long25 = dateTimeField22.roundHalfFloor((long) 53651407);
        java.lang.String str26 = dateTimeField22.getName();
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = locale28.getISO3Country();
        java.util.Locale.setDefault(category27, locale28);
        int int32 = dateTimeField22.getMaximumTextLength(locale28);
        org.joda.time.DurationField durationField33 = dateTimeField22.getDurationField();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfEra();
        org.joda.time.LocalDateTime localDateTime41 = property39.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusHours(53670462);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusWeeks(9);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusSeconds(53627827);
        org.joda.time.LocalDateTime.Property property51 = localDateTime45.dayOfMonth();
        boolean boolean52 = localDateTime41.equals((java.lang.Object) localDateTime45);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime41.minusYears(895);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.withCenturyOfEra(2);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.minuteOfDay();
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.lang.String str62 = locale61.getDisplayName();
        java.lang.String str63 = locale61.getISO3Country();
        java.util.Locale locale64 = locale61.stripExtensions();
        java.util.Locale locale65 = java.util.Locale.CHINESE;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        java.lang.String str67 = locale64.getISO3Language();
        java.util.Locale.setDefault(locale64);
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.getDefault(category69);
        java.lang.String str71 = locale64.getDisplayScript(locale70);
        int int72 = dateTimeField60.getMaximumTextLength(locale70);
        java.lang.String str73 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime41, locale70);
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((long) 38087);
        org.joda.time.LocalTime localTime77 = localTime75.minusHours(53883610);
        org.joda.time.LocalDate localDate79 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate81 = localDate79.withDayOfYear((int) (byte) 100);
        int int82 = localDate79.getDayOfWeek();
        org.joda.time.LocalDate localDate84 = localDate79.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate86 = localDate84.minusMonths(53628);
        org.joda.time.LocalDate.Property property87 = localDate84.yearOfEra();
        org.joda.time.LocalDate localDate88 = property87.withMaximumValue();
        org.joda.time.LocalDate localDate89 = property87.roundHalfFloorCopy();
        int[] intArray90 = localDate89.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = dateTimeField22.addWrapField((org.joda.time.ReadablePartial) localTime75, 54044538, intArray90, (-29999));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54044538");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale4.toString(), "clockhourofhalfday");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "yearOfEra" + "'", str26, "yearOfEra");
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str29, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "KOR" + "'", str30, "KOR");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str62, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "KOR" + "'", str63, "KOR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "kor" + "'", str67, "kor");
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970" + "'", str73, "1970");
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[2022, 1, 1]");
    }

    @Test
    public void test19795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19795");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.setLenient(true);
        calendar0.set((int) (byte) 10, 53625, 17, 10, 0);
        calendar0.set(13, 145, 54);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfWeek();
        int int18 = localDate16.getWeekOfWeekyear();
        int int19 = localDate16.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property20 = localDate16.era();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61371093560020,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=und,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=25,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=5,DAY_OF_MONTH=26,DAY_OF_YEAR=85,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=0,SECOND=39,MILLISECOND=982,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 13 + "'", int18 == 13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 13 + "'", int19 == 13);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test19796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19796");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime17 = property14.addNoWrapToCopy((int) (short) 100);
        org.joda.time.LocalTime localTime18 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime20 = property14.addWrapFieldToCopy(53825348);
        org.joda.time.DateTime dateTime21 = localTime20.toDateTimeToday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = localTime20.toString(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "00:00:00.447" + "'", str23, "00:00:00.447");
    }

    @Test
    public void test19797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19797");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        int int11 = localTime8.getMillisOfSecond();
        org.joda.time.LocalTime localTime13 = localTime8.plusSeconds(53656);
        org.joda.time.LocalTime localTime15 = localTime13.minusMillis(53683381);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusYears(12);
        org.joda.time.DateTime dateTime24 = dateTime18.minusMinutes((-1));
        org.joda.time.DateTime dateTime26 = dateTime18.withYear(366);
        int int27 = property16.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 54220 + "'", int20 == 54220);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test19798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19798");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int6 = dateTime4.get(dateTimeFieldType5);
        int int7 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0, dateTimeZone2);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property11 = localDate10.era();
        org.joda.time.LocalDate localDate13 = localDate10.plusYears(53693326);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra(12);
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(localTime19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        java.lang.String str25 = dateTimeZone22.getShortName((long) 5);
        boolean boolean26 = localDate18.equals((java.lang.Object) str25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate28 = localDate18.minus(readablePeriod27);
        org.joda.time.LocalDate.Property property29 = localDate18.era();
        org.joda.time.LocalDate.Property property30 = localDate18.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime.Property property36 = dateTime34.secondOfMinute();
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate39 = localDate37.withDayOfYear((int) (byte) 100);
        int int40 = localDate37.getDayOfWeek();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        int int45 = dateTimeZone42.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime46 = localDate37.toDateTimeAtMidnight(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime34.toMutableDateTime(dateTimeZone42);
        int int49 = dateTimeZone42.getOffsetFromLocal((long) 53626975);
        java.lang.String str50 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-61779834366119L), dateTimeZone42);
        long long53 = dateTimeZone31.getMillisKeepLocal(dateTimeZone42, (long) 9);
        boolean boolean54 = dateTimeZone42.isFixed();
        org.joda.time.DateMidnight dateMidnight55 = localDate18.toDateMidnight(dateTimeZone42);
        org.joda.time.DateTime dateTime56 = localDate10.toDateTimeAtCurrentTime(dateTimeZone42);
        int int57 = localDate10.getDayOfWeek();
        org.joda.time.LocalDate.Property property58 = localDate10.dayOfYear();
        org.joda.time.LocalDate localDate60 = localDate10.withYearOfCentury(0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Etc/UTC" + "'", str43, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 9L + "'", long53 == 9L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test19799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19799");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale locale4 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap5);
        org.joda.time.tz.Provider provider7 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider7);
        java.util.Set<java.lang.String> strSet9 = provider7.getAvailableIDs();
        java.util.Set<java.lang.String> strSet10 = provider7.getAvailableIDs();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime.Property property14 = dateTime12.secondOfMinute();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        int int18 = dateTimeField16.get((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField16.getType();
        int int20 = dateTimeField16.getMaximumValue();
        org.joda.time.DurationField durationField21 = dateTimeField16.getRangeDurationField();
        long long24 = durationField21.getValueAsLong((long) 1439, 753L);
        boolean boolean25 = strSet10.equals((java.lang.Object) long24);
        org.joda.time.tz.Provider provider26 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider26);
        java.util.Set<java.lang.String> strSet28 = provider26.getAvailableIDs();
        java.util.Set<java.lang.String> strSet29 = provider26.getAvailableIDs();
        boolean boolean30 = strSet10.addAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.Iterator<java.lang.String> strItor31 = strSet29.iterator();
        java.util.Iterator<java.lang.String> strItor32 = strSet29.iterator();
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet29);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.parse("KOR");
        java.lang.String[] strArray40 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        boolean boolean43 = strSet41.isEmpty();
        java.lang.Object[] objArray44 = strSet41.toArray();
        java.lang.String str45 = java.util.Locale.lookupTag(languageRangeList35, (java.util.Collection<java.lang.String>) strSet41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList35, strMap46);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.parse("KOR");
        java.util.Locale locale51 = new java.util.Locale("clockhourOfHalfday");
        java.util.Locale locale53 = new java.util.Locale("clockhourOfHalfday");
        boolean boolean54 = locale53.hasExtensions();
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale51, locale53, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter(languageRangeList49, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.Locale locale61 = java.util.Locale.lookup(languageRangeList35, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList60, filteringMode62);
        java.util.Collection<java.lang.String> strCollection64 = null;
        java.lang.String str65 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection64);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(provider7);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "40" + "'", str15, "40");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[Nov 29, 1909 12:00:00 AM, Etc/UTC, 47, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[Nov 29, 1909 12:00:00 AM, Etc/UTC, 47, ]");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertEquals(locale51.toString(), "clockhourofhalfday");
        org.junit.Assert.assertEquals(locale53.toString(), "clockhourofhalfday");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNull(locale61);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode62.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test19800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19800");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDurationAdded(readableDuration3, 7);
        org.joda.time.Chronology chronology6 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusDays(53649);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minusMinutes(53738867);
        int int11 = localDateTime10.getEra();
        int int12 = localDateTime10.size();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusYears(53873600);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test19801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19801");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getDurationType();
        java.lang.String str3 = dateTimeFieldType1.toString();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDurationAdded(readableDuration7, 7);
        org.joda.time.Chronology chronology10 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType1.getField(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.dayOfWeek();
        long long20 = chronology10.add((long) 53869676, (long) 54056889, 54004826);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) 54138239, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "clockhourOfHalfday" + "'", str3, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2919332938415990L + "'", long20 == 2919332938415990L);
    }

    @Test
    public void test19802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19802");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded(readableDuration6, 53626975);
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 2922789, (int) (short) 100);
        int int12 = dateTime5.getMinuteOfDay();
        org.joda.time.DateTime dateTime14 = dateTime5.withMillis((long) 53625);
        boolean boolean15 = dateTime5.isAfterNow();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54220 + "'", int3 == 54220);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 903 + "'", int12 == 903);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test19803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19803");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(53753);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes(54169);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test19804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19804");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int16 = dateTime14.get(dateTimeFieldType15);
        boolean boolean17 = localDate4.isSupported(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property18 = localDate4.dayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate4.monthOfYear();
        org.joda.time.LocalDate.Property property20 = localDate4.dayOfWeek();
        int int21 = localDate4.getDayOfMonth();
        org.joda.time.LocalDate localDate23 = localDate4.minusYears(53937);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test19805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19805");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(2);
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromMillisOfDay(1645455453000L, chronology5);
        org.joda.time.LocalTime localTime8 = localTime6.plusSeconds(962);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test19806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19806");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2022L);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks(303);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime3.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test19807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19807");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar calendar6 = builder5.build();
        java.util.Calendar calendar7 = builder5.build();
        java.util.Calendar.Builder builder11 = builder5.setDate(605139, 14, 20);
        java.util.Calendar.Builder builder13 = builder11.setLenient(true);
        java.util.Calendar.Builder builder15 = builder11.setLenient(false);
        java.util.Calendar.Builder builder19 = builder11.setWeekDate(53665281, 53628014, 366);
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = locale20.getISO3Country();
        java.util.Locale locale23 = locale20.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Calendar.Builder builder26 = builder11.setLocale(locale23);
        java.util.Calendar.Builder builder29 = builder11.set(3, 53702);
        java.util.Calendar.Builder builder33 = builder11.setDate(44, 53770346, 53753947);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder35 = builder33.setCalendarType("2022-02-21T14:58:39.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 2022-02-21T14:58:39.000Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=51022097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=und,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=10,SECOND=22,MILLISECOND=99,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=51022097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=und,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=10,SECOND=22,MILLISECOND=99,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str21, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "KOR" + "'", str22, "KOR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test19808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19808");
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime8.getFieldTypes();
        org.joda.time.Chronology chronology11 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.months();
        long long16 = chronology11.add((-45001L), 53641L, 53652018);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime18.getFieldTypes();
        org.joda.time.Chronology chronology21 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.Chronology chronology25 = chronology11.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField26 = chronology25.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(54008536, 53979927, 53650168, 6164, 54163896, 0, 54122486, chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6164 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2877947852537L + "'", long16 == 2877947852537L);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test19809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19809");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(53753);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTimeISO();
        int int7 = dateTime3.getMillisOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getEra();
        int int11 = dateTime9.getSecondOfDay();
        org.joda.time.DateTime dateTime13 = dateTime9.minusYears(12);
        boolean boolean14 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = dateTime13.withDurationAdded(0L, (int) (byte) -1);
        org.joda.time.DateTime dateTime18 = dateTime13.withEarlierOffsetAtOverlap();
        int int19 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property20 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime22 = dateTime18.withYearOfEra(53643000);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getEra();
        int int26 = dateTime24.getSecondOfDay();
        org.joda.time.DateTime dateTime28 = dateTime24.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(53633931);
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds(10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusDays((-10976054));
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra(999);
        int int38 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property39 = dateTime18.secondOfDay();
        org.joda.time.DateTime dateTime41 = property39.addToCopy((long) 53899602);
        java.lang.String str42 = property39.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 54220168 + "'", int7 == 54220168);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54220 + "'", int11 == 54220);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53753 + "'", int19 == 53753);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 54220 + "'", int26 == 54220);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "secondOfDay" + "'", str42, "secondOfDay");
    }

    @Test
    public void test19810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19810");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        boolean boolean9 = dateTimeFormatter2.isParser();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str12 = dateTimeZone11.toString();
        int int14 = dateTimeZone11.getOffsetFromLocal((long) (short) -1);
        int int16 = dateTimeZone11.getStandardOffset((long) 13);
        long long19 = dateTimeZone11.convertLocalToUTC((long) 53641, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        boolean boolean24 = property23.isLeap();
        org.joda.time.LocalDateTime localDateTime26 = property23.addToCopy(53637);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusWeeks(53662);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTimeISO();
        int int35 = dateTime31.getMillisOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getEra();
        int int39 = dateTime37.getSecondOfDay();
        org.joda.time.DateTime dateTime41 = dateTime37.minusYears(12);
        boolean boolean42 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime41.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property45 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime46 = property45.roundCeilingCopy();
        org.joda.time.DateTime dateTime47 = property45.withMaximumValue();
        org.joda.time.DateTime dateTime49 = property45.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime50 = property45.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime50.getZone();
        long long55 = dateTimeZone51.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        org.joda.time.DateTime dateTime56 = localDateTime29.toDateTime(dateTimeZone51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter2.withZone(dateTimeZone51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter2.withChronology(chronology58);
        java.io.Writer writer60 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer60, (long) 495);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Etc/UTC" + "'", str12, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 53641L + "'", long19 == 53641L);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 54220191 + "'", int35 == 54220191);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 54220 + "'", int39 == 54220);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 53689L + "'", long55 == 53689L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
    }

    @Test
    public void test19811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19811");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.withMaximumValue();
        org.joda.time.LocalDate localDate6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate7 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate9 = localDate7.plusYears(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime.Property property13 = dateTime11.secondOfMinute();
        long long14 = property13.remainder();
        org.joda.time.DateTime dateTime16 = property13.setCopy("47");
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime19 = localDate7.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears(0);
        org.joda.time.DateTime dateTime23 = dateTime21.plus(1728000100L);
        org.joda.time.DateTime.Property property24 = dateTime21.yearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 209L + "'", long14 == 209L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test19812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19812");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.LocalDate.Property property13 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundCeilingCopy();
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.LocalDate localDate17 = property15.addWrapFieldToCopy(21);
        org.joda.time.LocalDate localDate18 = property15.getLocalDate();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear((int) (byte) 100);
        int int22 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate.Property property23 = localDate19.dayOfWeek();
        org.joda.time.LocalDate localDate24 = property23.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate25 = property23.roundFloorCopy();
        int int26 = property23.getMinimumValue();
        org.joda.time.LocalDate localDate27 = property23.roundCeilingCopy();
        org.joda.time.LocalDate localDate28 = property23.roundHalfCeilingCopy();
        int int29 = localDate28.getEra();
        int int30 = property15.compareTo((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate.Property property31 = localDate28.era();
        org.joda.time.LocalDate.Property property32 = localDate28.dayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test19813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19813");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str6 = dateTimeZone5.toString();
        int int8 = dateTimeZone5.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime9 = localDate0.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.LocalDate localDate11 = localDate0.plusDays((int) '4');
        org.joda.time.LocalDate localDate13 = localDate11.withCenturyOfEra(53638);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.minus(readablePeriod14);
        org.joda.time.LocalDate localDate17 = localDate13.withYear(53778986);
        org.joda.time.LocalDate localDate19 = localDate17.withCenturyOfEra(53893);
        java.util.Date date20 = localDate17.toDate();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 14 00:00:00 GMT+00:00 53778986");
    }

    @Test
    public void test19814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19814");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.LocalDate.Property property13 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, 53);
        org.joda.time.LocalDate.Property property18 = localDate17.weekyear();
        int int19 = localDate17.getYearOfCentury();
        org.joda.time.LocalDate.Property property20 = localDate17.weekOfWeekyear();
        org.joda.time.LocalDate localDate22 = property20.addToCopy(54130384);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 13 + "'", int19 == 13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test19815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19815");
        int int1 = org.joda.time.field.FieldUtils.safeNegate(53878);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-53878) + "'", int1 == (-53878));
    }

    @Test
    public void test19816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19816");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str6 = dateTimeZone5.toString();
        int int8 = dateTimeZone5.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime9 = localDate0.toDateTimeAtMidnight(dateTimeZone5);
        int int10 = localDate0.getEra();
        org.joda.time.LocalDate localDate12 = localDate0.minusYears(53731);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate0.minus(readablePeriod13);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test19817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19817");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(53630);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTime dateTime10 = dateTime6.withFieldAdded(durationFieldType8, 53633152);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.Chronology chronology12 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology12.eras();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test19818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19818");
        org.joda.time.tz.Provider provider1 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone3 = provider1.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(15778476000L, dateTimeZone3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear((int) (byte) 100);
        int int10 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate localDate12 = localDate7.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths(53628);
        org.joda.time.LocalDate localDate16 = localDate14.minusDays(53630);
        org.joda.time.LocalDate localDate18 = localDate14.minusYears(53698333);
        int int19 = localDate18.size();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate18.plus(readablePeriod20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getEra();
        org.joda.time.DateTime.Property property25 = dateTime23.secondOfMinute();
        java.lang.String str26 = property25.getAsString();
        org.joda.time.DateTime dateTime28 = property25.addWrapFieldToCopy(53630);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.DateTime dateTime32 = dateTime28.withFieldAdded(durationFieldType30, 53633152);
        boolean boolean33 = localDate18.isSupported(durationFieldType30);
        org.joda.time.DateTime dateTime35 = dateTime6.withFieldAdded(durationFieldType30, 53736);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks(53853441);
        org.joda.time.DateTime.Property property38 = dateTime35.secondOfDay();
        org.joda.time.DateTime.Property property39 = dateTime35.year();
        org.junit.Assert.assertNotNull(provider1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40" + "'", str26, "40");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test19819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19819");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        int int18 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime17.plusYears(53627);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes((-53637188));
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.DateTime dateTime26 = dateTime20.withFieldAdded(durationFieldType24, 53656028);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.withCenturyOfEra(2);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.seconds();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(1695436472016000290L, chronology33);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 53739, chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.hourOfDay();
        boolean boolean38 = durationFieldType24.isSupported(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54220317 + "'", int5 == 54220317);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54220 + "'", int9 == 54220);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test19820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19820");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        int int5 = calendar0.getGreatestMinimum(12);
        calendar0.set((-53626948), 53629, 53632, 53633, 53632);
        calendar0.clear();
        java.util.TimeZone timeZone13 = calendar0.getTimeZone();
        calendar0.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.add(733, 53732556);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test19821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19821");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(2);
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = chronology5.add(readablePeriod6, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.minuteOfHour();
        org.joda.time.DurationField durationField11 = durationFieldType0.getField(chronology5);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology14 = chronology5.withZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField16 = chronology5.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology5.secondOfMinute();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 53633152L + "'", long9 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test19822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19822");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DurationField durationField12 = chronology9.millis();
        org.joda.time.DurationField durationField13 = chronology9.millis();
        org.joda.time.DurationField durationField14 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.weekOfWeekyear();
        boolean boolean16 = dateTimeField15.isSupported();
        long long18 = dateTimeField15.remainder(229L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 259200229L + "'", long18 == 259200229L);
    }

    @Test
    public void test19823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19823");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = property15.setCopy("58");
        org.joda.time.DateTime dateTime19 = property15.addToCopy(53688349L);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withPeriodAdded(readablePeriod20, 5220100);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54220358 + "'", int5 == 54220358);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54220 + "'", int9 == 54220);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test19824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19824");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getEra();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear((int) (byte) 100);
        int int9 = localDate6.getDayOfWeek();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str12 = dateTimeZone11.toString();
        int int14 = dateTimeZone11.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime15 = localDate6.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime3.toMutableDateTime(dateTimeZone11);
        int int18 = dateTimeZone11.getOffsetFromLocal((long) 53626975);
        java.lang.String str19 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-61779834366119L), dateTimeZone11);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) 9);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getEra();
        int int27 = dateTime25.getSecondOfDay();
        org.joda.time.DateTime dateTime29 = dateTime25.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(53633931);
        org.joda.time.DateTime.Property property32 = dateTime29.millisOfSecond();
        org.joda.time.DateTime dateTime33 = property32.getDateTime();
        boolean boolean34 = localDate23.equals((java.lang.Object) dateTime33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDate localDate37 = localDate23.withFieldAdded(durationFieldType35, 0);
        org.joda.time.LocalDate.Property property38 = localDate23.dayOfYear();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property42 = localDate41.centuryOfEra();
        org.joda.time.LocalDate localDate43 = property42.roundHalfCeilingCopy();
        java.lang.Object obj44 = null;
        org.joda.time.tz.Provider provider45 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone47 = provider45.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(obj44, dateTimeZone47);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate43.toDateTimeAtMidnight(dateTimeZone47);
        long long52 = dateTimeZone47.nextTransition((long) 53662);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 53659798, dateTimeZone47);
        long long56 = dateTimeZone47.adjustOffset((long) '#', false);
        org.joda.time.DateTime dateTime57 = localDate39.toDateTimeAtStartOfDay(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Etc/UTC" + "'", str12, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9L + "'", long22 == 9L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 54220 + "'", int27 == 54220);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(provider45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 53662L + "'", long52 == 53662L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 35L + "'", long56 == 35L);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test19825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19825");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.plusYears(10);
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        java.util.Date date9 = localDate7.toDate();
        date9.setMinutes(53986347);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Oct 14 12:27:00 GMT+00:00 2134");
    }

    @Test
    public void test19826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19826");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate7 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear((int) (byte) 100);
        int int11 = localDate8.getDayOfWeek();
        org.joda.time.LocalDate localDate13 = localDate8.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate15 = localDate8.minusWeeks(12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate8.minus(readablePeriod16);
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths(101);
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtMidnight();
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.plus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime20.minusHours(53804127);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime25.toMutableDateTimeISO();
        boolean boolean27 = localDate7.equals((java.lang.Object) dateTime25);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str21, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test19827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19827");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        int int7 = dateTimeZone4.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        int int9 = localDate8.size();
        int int10 = localDate8.getWeekOfWeekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 53677);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withDefaultYear(53659);
        boolean boolean32 = dateTimeFormatter27.isOffsetParsed();
        boolean boolean33 = dateTimeFormatter27.isParser();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53633152L + "'", long24 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test19828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19828");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.setLenient(true);
        int int6 = calendar0.getWeeksInWeekYear();
        calendar0.setLenient(false);
        boolean boolean9 = calendar0.isWeekDateSupported();
        calendar0.clear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test19829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19829");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = dateTimeZone2.toString();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) (short) -1);
        int int7 = dateTimeZone2.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(262L, dateTimeZone2);
        org.joda.time.DateTime dateTime11 = dateTime9.minusYears(53969664);
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        timeZone16.setID("+00:00");
        timeZone16.setRawOffset(2);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        timeZone23.setID("+00:00");
        boolean boolean26 = timeZone16.hasSameRules(timeZone23);
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone16, locale27);
        java.lang.String str29 = locale27.getLanguage();
        java.lang.String str32 = nameProvider12.getName(locale27, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = locale34.getISO3Country();
        java.util.Locale locale36 = locale34.stripExtensions();
        java.lang.String str37 = locale34.getScript();
        java.lang.String str39 = locale34.getUnicodeLocaleType("57");
        java.lang.String str42 = nameProvider12.getShortName(locale34, "49", "GMT");
        java.util.Locale locale44 = new java.util.Locale("50");
        java.lang.String str47 = nameProvider12.getShortName(locale44, "clockhourofhalfday", "0");
        java.util.Calendar calendar48 = dateTime9.toCalendar(locale44);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455820445,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=40,MILLISECOND=447,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh" + "'", str29, "zh");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals(locale44.toString(), "50");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=262,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=262,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test19830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19830");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime2.minusSeconds(53626975);
        org.joda.time.LocalTime localTime12 = localTime10.plusSeconds(0);
        org.joda.time.DateTime dateTime13 = localTime10.toDateTimeToday();
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMinutes(53700);
        int int17 = dateTime16.getDayOfYear();
        org.joda.time.TimeOfDay timeOfDay18 = dateTime16.toTimeOfDay();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 89 + "'", int17 == 89);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test19831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19831");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime10 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = property7.withMinimumValue();
        java.util.Locale locale16 = new java.util.Locale("clockhourOfHalfday");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime18 = property7.setCopy("32772", locale16);
        java.lang.String str19 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getDisplayCountry();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals(locale16.toString(), "clockhourofhalfday");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "clockhourofhalfday" + "'", str19, "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test19832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19832");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = property2.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(53689);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime14.getFieldTypes();
        org.joda.time.Chronology chronology17 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.months();
        boolean boolean19 = durationFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withPeriodAdded(readablePeriod25, 53625);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.year();
        org.joda.time.LocalDateTime localDateTime30 = property28.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfSecond(11);
        int[] intArray35 = chronology17.get((org.joda.time.ReadablePartial) localDateTime33, (long) 53642476);
        org.joda.time.DateTimeField dateTimeField36 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField38 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType10.getField(chronology17);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime41.getFieldTypes();
        org.joda.time.Chronology chronology44 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.months();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.monthOfYear();
        org.joda.time.DurationField durationField47 = chronology44.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType10.getField(chronology44);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType10.getDurationType();
        int int50 = localDateTime5.get(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1, 53642476]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
    }

    @Test
    public void test19833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19833");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale.setDefault(locale6);
        java.lang.String str9 = locale6.getVariant();
        int int10 = dateTimeField5.getMaximumShortTextLength(locale6);
        int int12 = dateTimeField5.get(497L);
        long long15 = dateTimeField5.addWrapField((long) 53797, 53634900);
        java.lang.String str16 = dateTimeField5.toString();
        java.lang.String str18 = dateTimeField5.getAsShortText((long) 53843612);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-259146203L) + "'", long15 == (-259146203L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[dayOfWeek]" + "'", str16, "DateTimeField[dayOfWeek]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ubaa9" + "'", str18, "\ubaa9");
    }

    @Test
    public void test19834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19834");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.LocalDate localDate7 = property4.getLocalDate();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test19835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19835");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        int int5 = calendar0.getGreatestMinimum(12);
        calendar0.set((-53626948), 53629, 53632, 53633, 53632);
        calendar0.set((int) (short) 1, (int) ' ', 53630324, 53629404, 5);
        calendar0.set(13, 3, 53635, 53635, 53633202);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = calendar0.getLeastMaximum(53903769);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53903769");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=3,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=53635,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=53635,MINUTE=53633202,SECOND=40,MILLISECOND=520,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test19836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19836");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay((int) (short) -1, 53629404, 53629, 0);
        java.util.Calendar calendar11 = builder10.build();
        java.util.Calendar.Builder builder15 = builder10.setTimeOfDay(0, 53642, 53628);
        java.util.Calendar.Builder builder19 = builder15.setTimeOfDay(53646261, 53717, 895);
        java.util.Calendar calendar20 = builder15.build();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromCalendarFields(calendar20);
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.lang.String str25 = locale24.getDisplayName();
        java.util.Locale locale27 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str28 = locale24.getDisplayLanguage(locale27);
        java.lang.String str29 = locale27.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = calendar20.getDisplayName(54054, 53899871, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=3217814269000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2071,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=354,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=17,SECOND=49,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=193129763515000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8090,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=14,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=31,SECOND=55,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str25, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals(locale27.toString(), "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Korean" + "'", str28, "Korean");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "clockhourofhalfday" + "'", str29, "clockhourofhalfday");
    }

    @Test
    public void test19837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19837");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        int int4 = localTime3.size();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(2);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withChronology(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 53642);
        java.util.Locale locale16 = dateTimeFormatter7.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter7.getParser();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter7.getZone();
        boolean boolean19 = localTime3.equals((java.lang.Object) dateTimeFormatter7);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis(53625);
        org.joda.time.LocalDateTime localDateTime24 = dateTime23.toLocalDateTime();
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = localDateTime24.toString("20", locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean29 = localDateTime24.isSupported(dateTimeFieldType28);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = localTime3.get(dateTimeFieldType28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertNull(dateTimeParser17);
        org.junit.Assert.assertNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "20" + "'", str27, "20");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test19838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19838");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMillis((int) (byte) 10);
        int int5 = localDateTime4.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMinutes(53877);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test19839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19839");
        java.util.Date date3 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.lang.String str4 = date3.toLocaleString();
        int int5 = date3.getYear();
        int int6 = date3.getYear();
        int int7 = date3.getTimezoneOffset();
        date3.setSeconds(54190371);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Aug 18 04:52:51 GMT+00:00 1911");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc624\uc804 12:00:00" + "'", str4, "\uc624\uc804 12:00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test19840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19840");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear(99);
        int int4 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property6 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime8 = property6.addToCopy(121);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test19841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19841");
        java.util.Date date6 = new java.util.Date((int) (short) 10, (int) (byte) 1, 9, (int) (byte) -1, (int) (byte) 1, (int) (byte) 0);
        date6.setYear(1);
        int int9 = date6.getYear();
        date6.setMonth((int) (byte) 10);
        int int12 = date6.getTimezoneOffset();
        org.junit.Assert.assertEquals(date6.toString(), "Fri Nov 08 23:01:00 GMT+00:00 1901");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test19842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19842");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:56:09.000Z");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.time.ZoneId zoneId4 = timeZone3.toZoneId();
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeZone1.getDisplayName(true, 54093275);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 54093275");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test19843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19843");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Locale.Builder builder4 = builder1.setLocale(locale3);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        timeZone7.setID("+00:00");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone7, locale10);
        java.util.Locale.Builder builder12 = builder1.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder13.build();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.getDisplayScript();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455820584,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=40,MILLISECOND=584,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test19844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19844");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime localDateTime5 = property2.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime7 = property2.addToCopy((long) 357);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(0);
        int int10 = localDateTime9.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 999 + "'", int10 == 999);
    }

    @Test
    public void test19845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19845");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.LocalDate.Property property13 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate15 = localDate4.withCenturyOfEra((int) 'a');
        org.joda.time.tz.Provider provider16 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone18 = provider16.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate4.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate.Property property21 = localDate4.year();
        long long22 = property21.remainder();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getEra();
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        long long28 = property27.remainder();
        org.joda.time.DateTime dateTime30 = property27.setCopy("47");
        org.joda.time.DateTime dateTime31 = property27.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime33 = property27.addWrapFieldToCopy(558);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.plusMinutes(53627);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfWeek();
        int int38 = property21.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate40 = property21.addToCopy(2922789);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate44 = property21.setCopy("15:01:49.702", locale42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"15:01:49.702\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(provider16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 8640000000L + "'", long22 == 8640000000L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 603L + "'", long28 == 603L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str43, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test19846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19846");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Locale.Builder builder4 = builder1.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder1.setLanguage("zh");
        java.util.Locale.Builder builder7 = builder6.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test19847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19847");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(53655035);
        org.joda.time.DateTime dateTime11 = dateTime9.plusWeeks(53673913);
        int int12 = dateTime9.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test19848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19848");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.LocalTime.Property property4 = localTime2.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.getLocalTime();
        org.joda.time.LocalTime localTime7 = property4.addCopy((long) 53835944);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test19849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19849");
        java.util.Locale locale1 = new java.util.Locale("clockhourOfHalfday");
        boolean boolean2 = locale1.hasExtensions();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale1.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("31 Dec 1899 09:35:00 GMT");
        java.lang.String str7 = locale1.getDisplayScript(locale6);
        org.junit.Assert.assertEquals(locale1.toString(), "clockhourofhalfday");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test19850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19850");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        long long6 = dateTime5.getMillis();
        java.lang.String str7 = dateTime5.toString();
        org.joda.time.DateTime dateTime9 = dateTime5.minusHours(575);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime9.plusSeconds(53684367);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfDay(53736737);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        int int16 = dateTime15.getSecondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime15.withHourOfDay(54185);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54185 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "40" + "'", str4, "40");
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645455821000L + "'", long6 == 1645455821000L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T15:03:41.000Z" + "'", str7, "2022-02-21T15:03:41.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53736 + "'", int16 == 53736);
    }

    @Test
    public void test19851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19851");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime13 = property9.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime15 = localTime13.plusHours(53628014);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        timeZone18.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone18);
        timeZone18.setID("2022-02-21T14:55:03.940Z");
        boolean boolean24 = localTime13.equals((java.lang.Object) timeZone18);
        org.joda.time.LocalTime.Property property25 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMaximumValue();
        org.joda.time.LocalTime localTime28 = property25.setCopy(53722636);
        org.joda.time.LocalTime.Property property29 = localTime28.secondOfMinute();
        org.joda.time.LocalTime localTime31 = localTime28.minusHours(53788330);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test19852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19852");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths(53628);
        org.joda.time.LocalDate localDate9 = localDate7.minusDays(53630);
        int int10 = localDate9.getDayOfMonth();
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate14 = localDate9.withPeriodAdded(readablePeriod12, 10);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate14.minus(readablePeriod17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getEra();
        int int22 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readableDuration23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded(readableDuration25, 53626975);
        org.joda.time.DateTime dateTime30 = dateTime24.withDurationAdded((long) 2922789, (int) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime30.minusYears(70);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        boolean boolean34 = dateTime30.isSupported(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType33.getDurationType();
        boolean boolean36 = localDate18.isSupported(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 54220 + "'", int22 == 54220);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test19853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19853");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths(53628);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime();
        boolean boolean9 = dateTime8.isEqualNow();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 53683509);
        int int13 = dateTime8.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) 51, 0);
        int int17 = dateTime16.getCenturyOfEra();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        int int22 = dateTimeZone19.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone19);
        java.lang.String str25 = dateTimeZone19.getNameKey((long) 10);
        java.lang.String str27 = dateTimeZone19.getName(32477248339200000L);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime16.toMutableDateTime(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test19854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19854");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long8 = durationField5.add((long) 53628, (long) 53627827);
        int int11 = durationField5.getDifference(66L, (long) 53630324);
        long long14 = durationField5.add((long) 53660, 0L);
        long long17 = durationField5.add((long) 53730, 0L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withPeriodAdded(readablePeriod22, 53625);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.LocalDateTime localDateTime28 = property25.setCopy(99);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays(53642927);
        int int31 = localDateTime28.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = localDateTime28.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int38 = dateTime36.get(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime36.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider40 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone42 = provider40.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime36.toMutableDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusMillis((int) (byte) 10);
        boolean boolean49 = dateTimeZone42.isLocalDateTimeGap(localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withMinuteOfHour(52);
        int int52 = localDateTime48.getMonthOfYear();
        boolean boolean53 = dateTimeZone32.isLocalDateTimeGap(localDateTime48);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 141027563462453628L + "'", long8 == 141027563462453628L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 53660L + "'", long14 == 53660L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 53730L + "'", long17 == 53730L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970" + "'", str26, "1970");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test19855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19855");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        timeZone2.setRawOffset(2);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        timeZone9.setID("+00:00");
        boolean boolean12 = timeZone2.hasSameRules(timeZone9);
        boolean boolean13 = timeZone9.observesDaylightTime();
        int int14 = timeZone9.getRawOffset();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("14");
        java.util.TimeZone.setDefault(timeZone16);
        int int18 = timeZone16.getRawOffset();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("clockhourofhalfday");
        boolean boolean21 = timeZone20.observesDaylightTime();
        boolean boolean22 = timeZone16.hasSameRules(timeZone20);
        boolean boolean23 = timeZone9.hasSameRules(timeZone20);
        java.util.Locale locale26 = new java.util.Locale("49", "51");
        java.lang.String str27 = locale26.getDisplayVariant();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone9, locale26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals(locale26.toString(), "49_51");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455820737,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=40,MILLISECOND=737,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test19856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19856");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        boolean boolean3 = property2.isLeap();
        org.joda.time.LocalDateTime localDateTime4 = property2.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withSecondOfMinute(54077512);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54077512 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test19857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19857");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime4.minusMonths(53628014);
        int int16 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime4.plusMillis((int) 'x');
        int int19 = dateTime4.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime4.withMillisOfSecond(53965892);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53965892 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54220 + "'", int10 == 54220);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
    }

    @Test
    public void test19858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19858");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test19859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19859");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(32772);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTime.Property property18 = dateTime16.dayOfMonth();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        java.lang.String str23 = dateTimeZone20.getShortName((long) 5);
        java.lang.String str24 = dateTimeZone20.getID();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime(dateTimeZone20);
        boolean boolean27 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime29 = dateTime16.minusHours(3);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime16.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime16.getZone();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        int int34 = dateTimeZone31.getOffset((long) 53915313);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Etc/UTC" + "'", str24, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test19860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19860");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.era();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minus(readableDuration8);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test19861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19861");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) "41", chronology5);
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfCentury();
        java.lang.String str10 = dateTimeField9.toString();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra(12);
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(localTime16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        java.lang.String str22 = dateTimeZone19.getShortName((long) 5);
        boolean boolean23 = localDate15.equals((java.lang.Object) str22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int27 = dateTime25.get(dateTimeFieldType26);
        boolean boolean28 = localDate15.isSupported(dateTimeFieldType26);
        int int29 = localDate15.getMonthOfYear();
        org.joda.time.Interval interval30 = localDate15.toInterval();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate15.minus(readablePeriod31);
        org.joda.time.LocalDate localDate34 = localDate15.plusWeeks(53628014);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = localDate34.getFields();
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property37 = dateTime36.year();
        org.joda.time.LocalDate localDate38 = dateTime36.toLocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = property43.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfEra();
        int int47 = localDateTime45.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.minuteOfHour();
        int[] intArray49 = localDateTime45.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray51 = dateTimeField9.addWrapPartial((org.joda.time.ReadablePartial) localDate38, 53679, intArray49, 53982437);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53679");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str10, "DateTimeField[yearOfCentury]");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 19 + "'", int47 == 19);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1970, 1, 1, 10799999]");
    }

    @Test
    public void test19862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19862");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime.Property property7 = localTime2.hourOfDay();
        int int8 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime localTime10 = localTime2.withMinuteOfHour(19);
        org.joda.time.LocalTime localTime12 = localTime10.plusMillis(53628);
        org.joda.time.LocalTime localTime14 = localTime10.plusMinutes(53647031);
        org.joda.time.LocalTime.Property property15 = localTime10.minuteOfHour();
        org.joda.time.LocalTime localTime17 = property15.addCopy((long) 53981560);
        org.joda.time.LocalTime localTime18 = property15.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test19863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19863");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.weekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test19864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19864");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(984361622169000L);
        int int2 = localTime1.getMillisOfSecond();
        int int3 = localTime1.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test19865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19865");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundCeilingCopy();
        org.joda.time.DurationField durationField10 = property7.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withDayOfYear((int) '4');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970" + "'", str8, "1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test19866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19866");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.String str17 = locale15.getISO3Country();
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = locale20.getISO3Country();
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale24 = java.util.Locale.getDefault(category19);
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale27.getDisplayName();
        java.lang.String str29 = locale27.getISO3Country();
        java.util.Locale.setDefault(category26, locale27);
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str34 = locale32.getISO3Country();
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Category[] categoryArray37 = new java.util.Locale.Category[] { category19, category25, category26, category31, category36 };
        java.lang.Enum<java.util.Locale.Category>[] categoryEnumArray38 = strSet18.toArray((java.lang.Enum<java.util.Locale.Category>[]) categoryArray37);
        boolean boolean39 = dateTime11.equals((java.lang.Object) strSet18);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        int int45 = dateTimeZone42.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 0, dateTimeZone42);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(dateTimeZone42);
        java.lang.String str48 = localTime47.toString();
        org.joda.time.LocalTime.Property property49 = localTime47.millisOfSecond();
        org.joda.time.LocalTime localTime50 = property49.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime52 = property49.addWrapFieldToCopy(53665218);
        org.joda.time.DateTime dateTime53 = dateTime11.withFields((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.LocalTime localTime54 = dateTime11.toLocalTime();
        int int55 = localTime54.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54220875 + "'", int5 == 54220875);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54220 + "'", int9 == 54220);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str16, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "KOR" + "'", str17, "KOR");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str21, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "KOR" + "'", str22, "KOR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str28, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "KOR" + "'", str29, "KOR");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category31.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str33, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "KOR" + "'", str34, "KOR");
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category36.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(categoryArray37);
        org.junit.Assert.assertNotNull(categoryEnumArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "15:03:40.875" + "'", str48, "15:03:40.875");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
    }

    @Test
    public void test19867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19867");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int18 = localDateTime13.get(dateTimeFieldType17);
        int int19 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.plusMillis(53754183);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear(357);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        int int25 = localDateTime23.getEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(provider5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test19868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19868");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DurationField durationField10 = chronology4.hours();
        org.joda.time.DurationField durationField11 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.clockhourOfHalfday();
        int int13 = dateTimeField12.getMinimumValue();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalTime localTime17 = localTime15.minus(readablePeriod16);
        int int18 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localTime17);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 53633152L + "'", long8 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
    }

    @Test
    public void test19869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19869");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("Etc/UTC");
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = locale5.stripExtensions();
        java.lang.String str8 = locale5.getScript();
        java.lang.String str10 = locale5.getUnicodeLocaleType("57");
        java.lang.String str11 = locale5.getScript();
        java.lang.String str12 = dateTimeZone2.getName((long) 290, locale5);
        boolean boolean13 = dateTimeZone2.isFixed();
        java.lang.String str15 = dateTimeZone2.getName(1645455608000L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.yearOfCentury();
        boolean boolean22 = dateTimeZone2.isLocalDateTimeGap(localDateTime17);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test19870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19870");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DurationField durationField12 = chronology9.millis();
        org.joda.time.DurationField durationField13 = chronology9.millis();
        org.joda.time.DurationField durationField14 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = dateTimeFieldType16.toString();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDurationAdded(readableDuration22, 7);
        org.joda.time.Chronology chronology25 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType16.getField(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.seconds();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField15, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "clockhourOfHalfday" + "'", str18, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test19871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19871");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs((-10));
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test19872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19872");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = property3.addWrapFieldToCopy(558);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMinutes(53627);
        org.joda.time.DateTime.Property property13 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime9.plusSeconds(53676368);
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTimeISO();
        int int22 = dateTime18.getMillisOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getEra();
        int int26 = dateTime24.getSecondOfDay();
        org.joda.time.DateTime dateTime28 = dateTime24.minusYears(12);
        boolean boolean29 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime28.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.withDurationAdded(readableDuration32, 1);
        int int35 = dateTime34.getWeekOfWeekyear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getEra();
        org.joda.time.DateTime.Property property39 = dateTime37.secondOfMinute();
        org.joda.time.DateTime dateTime41 = dateTime37.withCenturyOfEra((int) ' ');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime37.minus(readableDuration42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        int int45 = dateTime43.get(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getDurationType();
        boolean boolean47 = dateTime34.isSupported(dateTimeFieldType44);
        org.joda.time.DateTime.Property property48 = dateTime15.property(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 963L + "'", long4 == 963L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 54220963 + "'", int22 == 54220963);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 54220 + "'", int26 == 54220);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test19873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19873");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.MutableDateTime mutableDateTime10 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime11 = instant0.toDateTime();
        org.joda.time.Instant instant13 = instant0.minus((long) 54006);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40" + "'", str5, "40");
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 40 + "'", int7 == 40);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test19874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19874");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long8 = durationField5.add((long) 53628, (long) 53627827);
        long long11 = durationField5.add((long) (-53626975), (int) (short) -1);
        long long14 = durationField5.getMillis(53628560, (long) 53636);
        long long17 = durationField5.subtract((long) 56, 0L);
        long long20 = durationField5.add(421L, (long) 53773);
        org.joda.time.DurationFieldType durationFieldType21 = durationField5.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = durationField5.getMillis((-32408985600000L), (-62162845235379L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: -32408985600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 141027563462453628L + "'", long8 == 141027563462453628L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-2732026975L) + "'", long11 == (-2732026975L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 141029491132800000L + "'", long14 == 141029491132800000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 56L + "'", long17 == 56L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 141409411200421L + "'", long20 == 141409411200421L);
        org.junit.Assert.assertNotNull(durationFieldType21);
    }

    @Test
    public void test19875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19875");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        java.lang.String str8 = dateTime6.toString("+00:00");
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        long long11 = dateTime10.getMillis();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withCenturyOfEra(2);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology16.add(readablePeriod17, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField21.getType();
        int int23 = dateTime10.get(dateTimeField21);
        boolean boolean25 = dateTimeField21.isLeap(53816L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        java.lang.String str28 = dateTimeFieldType26.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.hourOfDay();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDurationAdded(readableDuration32, 7);
        org.joda.time.Chronology chronology35 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType26.getField(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.monthOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (short) -1);
        int int40 = dateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 53634900);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        java.lang.String str48 = dateTimeZone45.getShortName((long) 32772);
        long long51 = dateTimeZone45.adjustOffset((long) (byte) 10, true);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.DateTime dateTime53 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.LocalDate localDate55 = localDate43.withYear(53720510);
        org.joda.time.LocalDate.Property property56 = localDate43.monthOfYear();
        int[] intArray57 = localDate43.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = dateTimeField21.add((org.joda.time.ReadablePartial) localDateTime39, 206, intArray57, 53947661);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 206");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1643673600000L + "'", long11 == 1643673600000L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 53633152L + "'", long20 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "clockhourOfHalfday" + "'", str28, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Etc/UTC" + "'", str46, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1]");
    }

    @Test
    public void test19876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19876");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalDate.Property property5 = localDate2.weekOfWeekyear();
        int int6 = property5.getLeapAmount();
        org.joda.time.LocalDate localDate7 = property5.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test19877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19877");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusDays((int) 'x');
        int int11 = localDateTime6.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test19878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19878");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = property15.setCopy("58");
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra(52);
        org.joda.time.LocalDate localDate20 = dateTime19.toLocalDate();
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDate20.getFields();
        org.joda.time.DateMidnight dateMidnight22 = localDate20.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = localDate20.withEra(54220);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54220 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54221046 + "'", int5 == 54221046);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54221 + "'", int9 == 54221);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test19879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19879");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(53699);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getOffset(230L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53699 + "'", int4 == 53699);
    }

    @Test
    public void test19880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19880");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar calendar6 = builder5.build();
        java.util.Calendar calendar7 = builder5.build();
        java.util.Calendar.Builder builder11 = builder5.setDate(605139, 14, 20);
        java.util.Calendar.Builder builder13 = builder11.setLenient(true);
        java.util.Calendar.Builder builder17 = builder11.setTimeOfDay((int) (byte) 1, 53656981, (int) (byte) 100);
        java.util.Calendar.Builder builder21 = builder17.setDate(53646831, 53654791, 9);
        java.util.Calendar.Builder builder25 = builder21.setWeekDate(643776, 53629, 53760293);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        boolean boolean27 = calendar26.isWeekDateSupported();
        int int29 = calendar26.getActualMinimum(15);
        calendar26.setLenient(true);
        calendar26.set((int) (byte) 10, 53625, 17, 10, 0);
        calendar26.set(13, 145, 54);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.fromCalendarFields(calendar26);
        calendar26.set(53634698, 53705316, (int) (short) 0, 53732556, 53673913, 53656028);
        calendar26.set(53864410, 86399, 53652961);
        int int54 = calendar26.getMinimalDaysInFirstWeek();
        calendar26.set(53759503, 53698956, 0);
        java.util.TimeZone timeZone59 = calendar26.getTimeZone();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("2022-02-21T14:56:09.000Z");
        boolean boolean62 = timeZone59.hasSameRules(timeZone61);
        java.util.Calendar.Builder builder63 = builder25.setTimeZone(timeZone61);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=51022099,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=10,SECOND=22,MILLISECOND=99,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=51022099,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=10,SECOND=22,MILLISECOND=99,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53759503,MONTH=53698956,WEEK_OF_YEAR=13,WEEK_OF_MONTH=5,DAY_OF_MONTH=0,DAY_OF_YEAR=85,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=53732556,MINUTE=53673913,SECOND=53656028,MILLISECOND=65,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-46800000) + "'", int29 == (-46800000));
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test19881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19881");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DurationField durationField11 = chronology9.seconds();
        org.joda.time.DurationField durationField12 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19882");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        int int5 = localDateTime1.getEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYear(53669267);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfSecond();
        boolean boolean10 = property9.isLeap();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19883");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears(53687892);
        int int6 = localDateTime5.getDayOfMonth();
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale8.getDisplayCountry();
        java.lang.String str10 = localDateTime5.toString("07:37:05.100", locale8);
        java.lang.String str12 = localDateTime5.toString("31");
        org.joda.time.DateTime dateTime13 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.plusSeconds(53698730);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusYears(53743076);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc77c\ubcf8" + "'", str9, "\uc77c\ubcf8");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "07:37:05.100" + "'", str10, "07:37:05.100");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "31" + "'", str12, "31");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test19884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19884");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(2922789);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getISO3Country();
        java.util.Locale locale13 = locale10.stripExtensions();
        java.util.Calendar calendar14 = dateTime7.toCalendar(locale10);
        org.joda.time.DateTime dateTime15 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTime dateTime18 = dateTime15.withFieldAdded(durationFieldType16, 53699);
        java.lang.String str19 = durationFieldType16.toString();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.parse("00:00:00.100");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis(53625);
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfSecond();
        org.joda.time.DateTime dateTime28 = property26.addToCopy(56L);
        org.joda.time.DateTime dateTime29 = localTime21.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = durationFieldType16.getField(chronology30);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "34" + "'", str4, "34");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str11, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "KOR" + "'", str12, "KOR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455821301,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:53.699,offset=53699,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=4,SECOND=35,MILLISECOND=0,ZONE_OFFSET=53699,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weeks" + "'", str19, "weeks");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test19885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19885");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int16 = dateTime14.get(dateTimeFieldType15);
        boolean boolean17 = localDate4.isSupported(dateTimeFieldType15);
        int int18 = localDate4.getMonthOfYear();
        org.joda.time.Interval interval19 = localDate4.toInterval();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate4.minus(readablePeriod20);
        org.joda.time.LocalDate localDate23 = localDate4.plusWeeks(53628014);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = localDate23.getFields();
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property26 = dateTime25.year();
        org.joda.time.LocalDate localDate27 = dateTime25.toLocalDate();
        int int28 = localDate27.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property29 = localDate27.year();
        int int30 = localDate27.size();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:53.699" + "'", str11, "+00:00:53.699");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 47 + "'", int28 == 47);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test19886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19886");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths(53628);
        org.joda.time.LocalDate.Property property8 = localDate5.yearOfEra();
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime10 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property11 = localDate5.dayOfWeek();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.LocalDate localDate13 = property11.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test19887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19887");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond(11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.String str17 = locale15.getDisplayLanguage();
        boolean boolean18 = locale15.hasExtensions();
        java.lang.String str19 = locale15.getDisplayName();
        int int20 = property13.getMaximumShortTextLength(locale15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        boolean boolean22 = calendar21.isWeekDateSupported();
        int int24 = calendar21.getActualMinimum(15);
        int int26 = calendar21.getGreatestMinimum(12);
        calendar21.set((-53626948), 53629, 53632, 53633, 53632);
        calendar21.set((int) (short) 1, (int) ' ', 53630324, 53629404, 5);
        int int39 = calendar21.getWeeksInWeekYear();
        calendar21.set(365, 23, 53670067);
        calendar21.setTimeInMillis(1645455528444L);
        boolean boolean46 = property13.equals((java.lang.Object) calendar21);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str16, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str19, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645455528444,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=444,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-46800000) + "'", int24 == (-46800000));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test19888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19888");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        int int5 = calendar0.getGreatestMinimum(12);
        calendar0.set((-53626948), 53629, 53632, 53633, 53632);
        calendar0.setFirstDayOfWeek(53632);
        java.lang.Object obj14 = null;
        boolean boolean15 = calendar0.after(obj14);
        calendar0.setMinimalDaysInFirstWeek(53898);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53632,minimalDaysInFirstWeek=53898,ERA=1,YEAR=-53626948,MONTH=53629,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=53632,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=53633,MINUTE=53632,SECOND=41,MILLISECOND=196,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test19889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19889");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(66L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYear(53640590);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMinutes(53647287);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear(53707354);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusMillis(53907);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusSeconds(6);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusSeconds((int) (short) -1);
        org.joda.time.Chronology chronology23 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.hours();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property28.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plus(readableDuration36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getDurationType();
        java.lang.String str40 = dateTimeFieldType38.toString();
        int int41 = localDateTime37.indexOf(dateTimeFieldType38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime25.property(dateTimeFieldType38);
        int int43 = localDateTime12.indexOf(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "clockhourOfHalfday" + "'", str40, "clockhourOfHalfday");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test19890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19890");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 10);
        org.joda.time.Instant instant3 = instant1.minus(1645455254089L);
        org.joda.time.Instant instant5 = instant3.minus((long) 53679);
        long long6 = instant3.getMillis();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1645455254079L) + "'", long6 == (-1645455254079L));
    }

    @Test
    public void test19891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19891");
        java.util.Date date6 = new java.util.Date(53968196, 3, 53995438, (int) (byte) 10, 54183193, 107324957);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 26 19:42:17 GMT 54118037");
    }

    @Test
    public void test19892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19892");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property15.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime20 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long25 = dateTimeZone21.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        timeZone26.setRawOffset(53833313);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54274949 + "'", int5 == 54274949);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54274 + "'", int9 == 54274);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-10L) + "'", long25 == (-10L));
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+14:57");
    }

    @Test
    public void test19893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19893");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        int int3 = localDateTime1.getYear();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        int int9 = localDateTime7.getYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(53655);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        java.lang.String str16 = dateTimeFieldType14.toString();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.hourOfDay();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDurationAdded(readableDuration20, 7);
        org.joda.time.Chronology chronology23 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType14.getField(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.seconds();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withPeriodAdded(readablePeriod32, 53625);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.year();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime38 = property35.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = property35.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDateTime45.getFieldTypes();
        org.joda.time.Chronology chronology48 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.weekOfWeekyear();
        org.joda.time.DurationField durationField51 = chronology48.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.dayOfWeek();
        org.joda.time.DurationField durationField54 = chronology48.minutes();
        org.joda.time.DateTime dateTime55 = dateTime43.toDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusMillis((int) (byte) 10);
        int[] intArray62 = chronology48.get((org.joda.time.ReadablePartial) localDateTime57, (long) 54);
        chronology23.validate((org.joda.time.ReadablePartial) localDateTime39, intArray62);
        chronology4.validate((org.joda.time.ReadablePartial) localDateTime13, intArray62);
        org.joda.time.DateTimeField dateTimeField65 = chronology4.minuteOfHour();
        org.joda.time.DurationField durationField66 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField67 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.millisOfDay();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.withPeriodAdded(readablePeriod73, 53625);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withPeriodAdded(readablePeriod76, (int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = localDateTime78.getFieldTypes();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.minus(readableDuration80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withCenturyOfEra(50);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minus(readableDuration84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.plusYears(53655035);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.plusMillis(42);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime87.minusYears(53750578);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime87.minusSeconds(21);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime87.minusMillis(53652018);
        long long97 = chronology4.set((org.joda.time.ReadablePartial) localDateTime95, 1645455741455L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "clockhourOfHalfday" + "'", str16, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 1, 54]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1693287190573601682L + "'", long97 == 1693287190573601682L);
    }

    @Test
    public void test19894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19894");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.setLenient(true);
        calendar0.set((int) (byte) 10, 53625, 17, 10, 0);
        calendar0.set(13, 145, 54);
        int int16 = calendar0.getFirstDayOfWeek();
        java.time.Instant instant17 = calendar0.toInstant();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusYears(12);
        org.joda.time.DateTime dateTime25 = dateTime19.minusMinutes((-1));
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime.Property property27 = dateTime25.dayOfYear();
        int int28 = property27.getMaximumValueOverall();
        java.util.Locale locale29 = java.util.Locale.UK;
        java.lang.String str30 = property27.getAsShortText(locale29);
        java.lang.String str32 = locale29.getExtension('x');
        boolean boolean33 = calendar0.before((java.lang.Object) locale29);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61371093558666,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=25,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=5,DAY_OF_MONTH=26,DAY_OF_YEAR=85,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=0,SECOND=41,MILLISECOND=334,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 54275 + "'", int21 == 54275);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T15:05:35.033+00:00:53.699" + "'", str26, "2022-02-21T15:05:35.033+00:00:53.699");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 366 + "'", int28 == 366);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "52" + "'", str30, "52");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test19895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19895");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int6 = dateTime4.get(dateTimeFieldType5);
        boolean boolean7 = localDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusYears((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfSecond();
        int int11 = localDateTime9.getEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test19896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19896");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate0.minusWeeks(12);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate0.minus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(101);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtMidnight();
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T00:00:00.000+00:00:53.699" + "'", str13, "2022-02-21T00:00:00.000+00:00:53.699");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test19897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19897");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        timeZone10.setID("+00:00");
        timeZone10.setRawOffset(2);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        timeZone17.setID("+00:00");
        boolean boolean20 = timeZone10.hasSameRules(timeZone17);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone10, locale21);
        java.lang.String str23 = locale21.getLanguage();
        java.lang.String str24 = locale21.getDisplayLanguage();
        java.lang.String str25 = locale21.getCountry();
        java.util.Calendar calendar26 = dateTime7.toCalendar(locale21);
        calendar26.setMinimalDaysInFirstWeek(52);
        int int29 = calendar26.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = calendar26.getActualMaximum(54104);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 54104");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "35" + "'", str4, "35");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455821374,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=41,MILLISECOND=376,ZONE_OFFSET=2,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str24, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645455821301,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:53.699,offset=53699,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=52,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=4,SECOND=35,MILLISECOND=0,ZONE_OFFSET=53699,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test19898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19898");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime4.minusMonths(53628014);
        int int16 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime4.withDurationAdded((long) 100, 53698);
        java.lang.String str21 = dateTime4.toString("23");
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54275 + "'", int10 == 54275);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "23" + "'", str21, "23");
    }

    @Test
    public void test19899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19899");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTime.Property property5 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime7 = property5.setCopy("59");
        java.util.Date date8 = dateTime7.toDate();
        org.joda.time.Chronology chronology9 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology9);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Thu Feb 28 15:03:41 GMT 222");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test19900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19900");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.lang.String str10 = dateTimeZone8.getNameKey((-61609712752417L));
        boolean boolean11 = dateTimeZone8.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(53769, 624, 54128718, 54109, 54159979, 53899708, 791, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54109 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test19901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19901");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 10);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = instant1.isAfter(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.Instant instant7 = instant1.withDurationAdded((long) 53698730, 53684);
        boolean boolean8 = instant1.isAfterNow();
        org.joda.time.Instant instant10 = instant1.plus((long) 53648784);
        org.joda.time.DateTime dateTime11 = instant1.toDateTime();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test19902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19902");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 53646261);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTimeISO();
        int int7 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType9.getDurationType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType9.getField(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime8.withField(dateTimeFieldType9, 54041187);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localTime1.get(dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 133 + "'", int7 == 133);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNull(durationFieldType10);
        org.junit.Assert.assertNull(durationFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test19903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19903");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider11 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone13 = provider11.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime7.toMutableDateTime(dateTimeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone13.toTimeZone();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(576, 54136825, 53968196, 54194041, 86399979, 638, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54194041 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
    }

    @Test
    public void test19904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19904");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone2);
        int int7 = timeZone2.getOffset((long) 53626);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone2, locale9);
        int int11 = calendar10.getWeeksInWeekYear();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromCalendarFields(calendar10);
        calendar10.setLenient(false);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        timeZone18.setID("+00:00");
        boolean boolean21 = timeZone15.hasSameRules(timeZone18);
        java.lang.String str22 = timeZone15.getID();
        java.lang.String str23 = timeZone15.getID();
        int int25 = timeZone15.getOffset(16172935742L);
        calendar10.setTimeZone(timeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53699 + "'", int7 == 53699);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645455821455,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=+00:00,offset=53699,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=4,SECOND=35,MILLISECOND=154,ZONE_OFFSET=53699,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53699 + "'", int25 == 53699);
    }

    @Test
    public void test19905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19905");
        java.util.Date date6 = new java.util.Date((int) (short) 10, (int) (byte) 1, 9, (int) (byte) -1, (int) (byte) 1, (int) (byte) 0);
        date6.setYear(1);
        int int9 = date6.getYear();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        int int14 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusYears(12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int20 = mutableDateTime18.get(dateTimeFieldType19);
        int int21 = localTime10.get(dateTimeFieldType19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.withCenturyOfEra(2);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology26.add(readablePeriod27, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.minuteOfHour();
        java.lang.String str32 = chronology26.toString();
        boolean boolean33 = dateTimeFieldType19.isSupported(chronology26);
        org.joda.time.DurationField durationField34 = chronology26.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = durationField34.getDifferenceAsLong((long) 53914, 898L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 08 23:01:00 GMT+00:00 1901");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 54275 + "'", int14 == 54275);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 53633152L + "'", long30 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+00:00:53.699]" + "'", str32, "ISOChronology[+00:00:53.699]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test19906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19906");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMinutes(53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime1.getFieldTypes();
        int int9 = localDateTime1.getMonthOfYear();
        int int10 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime1.minusYears(81172);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test19907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19907");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMinutes(53);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.minusWeeks((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withWeekyear(20);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime18 = property15.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime19 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds(2922789);
        org.joda.time.DateTime dateTime22 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.DateTime.Property property24 = dateTime21.secondOfDay();
        org.joda.time.DateTime.Property property25 = dateTime21.millisOfSecond();
        org.joda.time.DateTime dateTime26 = property25.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readableDuration27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "35" + "'", str16, "35");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test19908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19908");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-21t14:54:47.855z");
        org.joda.time.DateTime.Property property2 = dateTime1.weekyear();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test19909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19909");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.withCenturyOfEra(2);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withChronology(chronology8);
        org.joda.time.Chronology chronology10 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.parse("68905", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test19910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19910");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        int int6 = dateTimeZone1.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime.Property property8 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime10 = property8.addWrapFieldToCopy(0);
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        int int17 = dateTimeZone14.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 0, dateTimeZone14);
        org.joda.time.LocalTime localTime20 = localTime18.plusHours(53630);
        org.joda.time.DateTime dateTime21 = localTime18.toDateTimeToday();
        org.joda.time.LocalTime localTime23 = localTime18.plusSeconds(53800871);
        org.joda.time.LocalTime localTime25 = localTime18.plusSeconds(53888702);
        int int26 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localTime18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:53.699" + "'", str2, "+00:00:53.699");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53699 + "'", int4 == 53699);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53699 + "'", int6 == 53699);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53699 + "'", int17 == 53699);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test19911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19911");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime13 = property9.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime15 = localTime13.plusHours(53628014);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        timeZone18.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone18);
        timeZone18.setID("2022-02-21T14:55:03.940Z");
        boolean boolean24 = localTime13.equals((java.lang.Object) timeZone18);
        org.joda.time.LocalTime.Property property25 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMaximumValue();
        org.joda.time.LocalTime localTime28 = property25.setCopy(53722636);
        org.joda.time.LocalTime.Property property29 = localTime28.secondOfMinute();
        org.joda.time.LocalTime.Property property30 = localTime28.millisOfSecond();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test19912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19912");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Chinese", strMap1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.lang.String str4 = locale3.getDisplayScript();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleKeys();
        java.lang.String str6 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet5);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test19913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19913");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(53913, 53953, 53804817, 53961086);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53913 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19914");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        int int8 = property7.getLeapAmount();
        org.joda.time.LocalTime localTime9 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime10 = property7.withMinimumValue();
        org.joda.time.LocalTime localTime12 = localTime10.minusHours(1823);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53699 + "'", int5 == 53699);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test19915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19915");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime2.minusSeconds(53626975);
        org.joda.time.LocalTime.Property property11 = localTime2.millisOfSecond();
        org.joda.time.LocalTime.Property property12 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.roundFloorCopy();
        org.joda.time.LocalTime localTime15 = localTime13.minusHours(57481363);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test19916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19916");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        boolean boolean2 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        int int4 = calendar0.getFirstDayOfWeek();
        int int5 = calendar0.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455821616,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=53699,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=4,SECOND=35,MILLISECOND=315,ZONE_OFFSET=53699,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
    }

    @Test
    public void test19917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19917");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate0.minusWeeks(12);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate0.minus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(101);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtMidnight();
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime15.toYearMonthDay();
        long long18 = dateTime15.getMillis();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T00:00:00.000+00:00:53.699" + "'", str13, "2022-02-21T00:00:00.000+00:00:53.699");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645401546301L + "'", long18 == 1645401546301L);
    }

    @Test
    public void test19918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19918");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(53633931);
        org.joda.time.TimeOfDay timeOfDay8 = dateTime7.toTimeOfDay();
        org.joda.time.Instant instant9 = dateTime7.toInstant();
        org.joda.time.Instant instant11 = instant9.minus((long) 57);
        java.lang.String str12 = instant9.toString();
        java.util.Date date13 = instant9.toDate();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54275 + "'", int3 == 54275);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-144824-08-03T15:03:41.639Z" + "'", str12, "-144824-08-03T15:03:41.639Z");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Jul 27 15:04:35 GMT+00:00 144822");
    }

    @Test
    public void test19919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19919");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(2);
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology5.getZone();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear((int) (byte) 100);
        int int12 = localDate9.getDayOfWeek();
        org.joda.time.LocalDate localDate14 = localDate9.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths(53628);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.eras();
        java.lang.String str18 = durationFieldType17.toString();
        java.lang.String str19 = durationFieldType17.toString();
        boolean boolean20 = localDate14.isSupported(durationFieldType17);
        java.lang.String str21 = durationFieldType17.toString();
        boolean boolean22 = localDate8.isSupported(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(2);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology28.add(readablePeriod29, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.minuteOfHour();
        org.joda.time.DurationField durationField34 = durationFieldType23.getField(chronology28);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology37 = chronology28.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology28.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((java.lang.Object) boolean22, chronology28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "eras" + "'", str18, "eras");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eras" + "'", str19, "eras");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eras" + "'", str21, "eras");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 53633152L + "'", long32 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test19920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19920");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        int int5 = calendar0.getGreatestMinimum(12);
        calendar0.set((-53626948), 53629, 53632, 53633, 53632);
        calendar0.set((int) (short) 1, (int) ' ', 53630324, 53629404, 5);
        int int18 = calendar0.getWeeksInWeekYear();
        calendar0.set(365, 23, 53670067);
        calendar0.set(53633202, 53690734, 40);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1833824276107481667,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=53699,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=58113547,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=349,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=5,SECOND=35,MILLISECOND=366,ZONE_OFFSET=53699,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test19921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19921");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        int int21 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalTime localTime22 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime24 = property14.addCopy((long) 53626948);
        org.joda.time.LocalTime localTime25 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime26 = property14.roundHalfCeilingCopy();
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("+00:00");
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale32 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str33 = locale29.getDisplayLanguage(locale32);
        java.lang.String str34 = locale32.getDisplayName();
        java.lang.String str35 = locale32.getVariant();
        java.lang.String str36 = locale28.getDisplayName(locale32);
        java.lang.String str37 = property14.getAsShortText(locale32);
        org.joda.time.LocalTime localTime38 = property14.roundCeilingCopy();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        int int45 = dateTimeZone42.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 0, dateTimeZone42);
        org.joda.time.LocalTime localTime48 = localTime46.plusHours(53630);
        org.joda.time.DateTime dateTime49 = localTime46.toDateTimeToday();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.withCenturyOfEra(2);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        long long58 = chronology54.add(readablePeriod55, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.secondOfDay();
        org.joda.time.DurationField durationField60 = chronology54.hours();
        org.joda.time.DateTimeField dateTimeField61 = chronology54.minuteOfHour();
        org.joda.time.DateTime dateTime62 = dateTime49.withChronology(chronology54);
        org.joda.time.DateTimeZone dateTimeZone63 = chronology54.getZone();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 53874199, dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localTime38.toDateTimeToday(dateTimeZone63);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(dateTimeZone63);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "35" + "'", str19, "35");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str30, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals(locale32.toString(), "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Korean" + "'", str33, "Korean");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "clockhourofhalfday" + "'", str34, "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "99" + "'", str37, "99");
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53699 + "'", int45 == 53699);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 53633152L + "'", long58 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test19922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19922");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.weekyears();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology4.add(readablePeriod8, 678L, 53666500);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        int int15 = localDateTime13.getYear();
        org.joda.time.Chronology chronology16 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 678L, chronology16);
        java.lang.String str20 = localDateTime19.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 678L + "'", long11 == 678L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.678" + "'", str20, "1970-01-01T00:00:00.678");
    }

    @Test
    public void test19923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19923");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        boolean boolean6 = dateTimeZone1.isFixed();
        int int8 = dateTimeZone1.getOffsetFromLocal(0L);
        java.util.TimeZone timeZone9 = dateTimeZone1.toTimeZone();
        java.lang.String str10 = timeZone9.getID();
        timeZone9.setRawOffset(53865266);
        int int13 = timeZone9.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53699 + "'", int4 == 53699);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53699 + "'", int8 == 53699);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+14:57");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:53.699" + "'", str10, "+00:00:53.699");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test19924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19924");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(32772);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime6.plusYears(2);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime.Property property16 = dateTime14.secondOfMinute();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        org.joda.time.DateTime dateTime19 = property16.setCopy("46", locale18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime23 = property21.addToCopy(53663528);
        int int24 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime23);
        java.util.GregorianCalendar gregorianCalendar25 = dateTime6.toGregorianCalendar();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(gregorianCalendar25);
    }

    @Test
    public void test19925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19925");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDurationAdded(readableDuration3, 7);
        org.joda.time.Chronology chronology6 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withPeriodAdded(readablePeriod14, 53625);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.era();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundCeilingCopy();
        org.joda.time.Instant instant21 = org.joda.time.Instant.now();
        org.joda.time.Instant instant24 = instant21.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getRangeDurationType();
        int int27 = instant21.get(dateTimeFieldType25);
        boolean boolean28 = localDateTime20.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime20.minusDays(53767483);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra(53634);
        int int36 = localDateTime35.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withPeriodAdded(readablePeriod37, 53640);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMonths(53675);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusWeeks(53680304);
        int[] intArray44 = localDateTime35.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray46 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) localDateTime20, 53871445, intArray44, 54130);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53871445");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 700 + "'", int36 == 700);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[53634, 1, 1, 53700]");
    }

    @Test
    public void test19926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19926");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.era();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMinuteOfHour(53851041);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53851041 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test19927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19927");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(53630);
        int int9 = localTime8.getMillisOfSecond();
        int[] intArray10 = localTime8.getValues();
        org.joda.time.LocalTime localTime12 = localTime8.withMillisOfDay(0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53699 + "'", int5 == 53699);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 699 + "'", int9 == 699);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[14, 0, 53, 699]");
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test19928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19928");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        org.joda.time.Chronology chronology6 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.months();
        boolean boolean8 = durationFieldType1.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField10 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.hourOfDay();
        org.joda.time.DurationField durationField12 = chronology6.centuries();
        org.joda.time.DurationFieldType durationFieldType13 = durationField12.getType();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test19929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19929");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths(605139);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes(53726374);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        java.lang.String str13 = localDateTime11.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1867-11-07T00:26:59.700" + "'", str13, "1867-11-07T00:26:59.700");
    }

    @Test
    public void test19930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19930");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(53672807);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test19931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19931");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        java.lang.String str8 = dateTime6.toString("+00:00");
        org.joda.time.DateTime.Property property9 = dateTime6.millisOfDay();
        org.joda.time.DateTime.Property property10 = dateTime6.dayOfYear();
        int int11 = property10.getLeapAmount();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        org.joda.time.DurationField durationField13 = property10.getLeapDurationField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTimeISO();
        int int19 = dateTime15.getMillisOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getEra();
        int int23 = dateTime21.getSecondOfDay();
        org.joda.time.DateTime dateTime25 = dateTime21.minusYears(12);
        boolean boolean26 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withDurationAdded(readableDuration29, 1);
        int int32 = dateTime31.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime31.plusYears(53627);
        int int35 = property10.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getEra();
        org.joda.time.DateTime dateTime44 = localTime40.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getEra();
        int int48 = dateTime46.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.plus(readableDuration49);
        boolean boolean51 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean52 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime42);
        int int53 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property54 = dateTime34.minuteOfDay();
        org.joda.time.DateTime dateTime56 = property54.addToCopy(1645455437000L);
        org.joda.time.DateTime dateTime57 = property54.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 54275525 + "'", int19 == 54275525);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 54275 + "'", int23 == 54275);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 54275 + "'", int48 == 54275);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test19932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19932");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime7 = localTime3.minusSeconds(53933450);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime10 = localTime3.withPeriodAdded(readablePeriod8, 53892790);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test19933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19933");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        int int8 = property7.getLeapAmount();
        org.joda.time.LocalTime localTime9 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property7.addCopy((long) 53654002);
        org.joda.time.LocalTime localTime13 = localTime11.minusHours(56);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        boolean boolean15 = calendar14.isWeekDateSupported();
        int int17 = calendar14.getActualMinimum(15);
        calendar14.setLenient(true);
        calendar14.set((int) (byte) 10, 53625, 17, 10, 0);
        calendar14.set(13, 145, 54);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromCalendarFields(calendar14);
        org.joda.time.LocalDate.Property property31 = localDate30.dayOfWeek();
        int int32 = localDate30.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate30.withPeriodAdded(readablePeriod33, 53845);
        org.joda.time.LocalDate localDate37 = localDate30.minusWeeks((-53702134));
        org.joda.time.DateTime dateTime38 = localDate37.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property40 = localDate39.centuryOfEra();
        org.joda.time.LocalDate localDate41 = property40.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDate localDate44 = localDate41.withPeriodAdded(readablePeriod42, 53739776);
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property46 = localDate45.centuryOfEra();
        org.joda.time.LocalDate localDate47 = property46.roundHalfCeilingCopy();
        java.lang.Object obj48 = null;
        org.joda.time.tz.Provider provider49 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone51 = provider49.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(obj48, dateTimeZone51);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = localDate47.toDateTimeAtMidnight(dateTimeZone51);
        org.joda.time.LocalDate.Property property55 = localDate47.centuryOfEra();
        int int56 = localDate47.getDayOfWeek();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.minus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property62 = dateTime60.property(dateTimeFieldType61);
        int int63 = localDate47.get(dateTimeFieldType61);
        int int64 = localDate44.get(dateTimeFieldType61);
        int int65 = dateTime38.get(dateTimeFieldType61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property66 = localTime13.property(dateTimeFieldType61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53699 + "'", int5 == 53699);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-61371093618127,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=53699,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=25,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=5,DAY_OF_MONTH=26,DAY_OF_YEAR=85,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=0,SECOND=35,MILLISECOND=572,ZONE_OFFSET=53699,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-46800000) + "'", int17 == (-46800000));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 13 + "'", int32 == 13);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(provider49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20 + "'", int65 == 20);
    }

    @Test
    public void test19934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19934");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate0.minusWeeks(12);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.Chronology chronology9 = chronology8.withUTC();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test19935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19935");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(8);
        java.util.Date date12 = dateTime9.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Oct 21 15:04:35 GMT+00:00 2013");
    }

    @Test
    public void test19936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19936");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        int int7 = dateTimeZone4.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        int int9 = localDate8.size();
        int int10 = localDate8.getWeekOfWeekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 53677);
        boolean boolean30 = dateTimeFormatter27.isPrinter();
        org.joda.time.Chronology chronology31 = dateTimeFormatter27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        long long34 = dateTimeZone32.previousTransition((long) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter27.withZone(dateTimeZone32);
        java.lang.Integer int36 = dateTimeFormatter27.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53633152L + "'", long24 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 13L + "'", long34 == 13L);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test19937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19937");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime.Property property7 = localTime2.hourOfDay();
        int int8 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime localTime10 = localTime2.withMinuteOfHour(19);
        org.joda.time.LocalTime.Property property11 = localTime2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        long long14 = dateTimeField12.remainder((long) 53767);
        java.util.Locale locale17 = new java.util.Locale("2169-05-11");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        org.joda.time.DateTime.Property property21 = dateTime19.secondOfMinute();
        java.lang.String str22 = property21.getAsString();
        org.joda.time.DateTime dateTime24 = property21.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime25 = property21.withMinimumValue();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(32770);
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds(53712243);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("minuteOfDay");
        java.lang.String str33 = dateTime29.toString("37", locale32);
        java.lang.String str34 = locale17.getDisplayCountry(locale32);
        java.lang.String str35 = dateTimeField12.getAsText((long) 554, locale17);
        java.lang.Object obj36 = locale17.clone();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals(locale17.toString(), "2169-05-11");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "41" + "'", str22, "41");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "37" + "'", str33, "37");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "554" + "'", str35, "554");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2169-05-11");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2169-05-11");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2169-05-11");
    }

    @Test
    public void test19938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19938");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        java.lang.String str16 = property15.getAsText();
        org.joda.time.DateTime dateTime17 = property15.roundFloorCopy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology19);
        int int21 = localTime20.getMillisOfSecond();
        org.joda.time.LocalTime.Property property22 = localTime20.millisOfDay();
        org.joda.time.LocalTime localTime24 = localTime20.plusMillis(0);
        org.joda.time.DateTime dateTime25 = dateTime17.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTime.Property property26 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime27 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime29 = dateTime17.minusMinutes(4373);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54221959 + "'", int5 == 54221959);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54221 + "'", int9 == 54221);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test19939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19939");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.LocalDate.Property property13 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundCeilingCopy();
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property16 = localDate14.era();
        java.lang.String str17 = property16.getName();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        java.util.Locale locale20 = new java.util.Locale("53910662");
        int int21 = property16.getMaximumShortTextLength(locale20);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "era" + "'", str17, "era");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale20.toString(), "53910662");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test19940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19940");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(38087);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19941");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withCenturyOfEra(2);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology6.add(readablePeriod7, (long) 53633152, 99);
        org.joda.time.DurationField durationField11 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.millisOfSecond();
        boolean boolean13 = durationFieldType1.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 53633152L + "'", long10 == 53633152L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test19942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19942");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis(53625);
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfSecond();
        org.joda.time.DateTime dateTime6 = property4.addToCopy(56L);
        org.joda.time.DateTime dateTime8 = property4.addWrapFieldToCopy(53828814);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test19943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19943");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        int int5 = calendar0.getGreatestMinimum(12);
        calendar0.set((-53626948), 53629, 53632, 53633, 53632);
        calendar0.setFirstDayOfWeek(53632);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime20 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalTime localTime22 = localTime16.plusMillis((-1));
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.LocalTime localTime24 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime25 = property23.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime26 = property23.roundFloorCopy();
        boolean boolean27 = calendar0.after((java.lang.Object) property23);
        org.joda.time.LocalTime localTime29 = property23.addWrapFieldToCopy(53695160);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfDay();
        org.joda.time.LocalTime localTime31 = property30.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime33 = property30.addCopy(53777327);
        org.joda.time.LocalTime localTime35 = property30.setCopy(53898216);
        org.joda.time.LocalTime localTime37 = localTime35.plusMillis(54102134);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=2022-02-21T14:55:03.940Z,offset=53699,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=53632,minimalDaysInFirstWeek=1,ERA=1,YEAR=-53626948,MONTH=53629,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=53632,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=53633,MINUTE=53632,SECOND=35,MILLISECOND=732,ZONE_OFFSET=53699,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
    }

    @Test
    public void test19944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19944");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 32772);
        long long7 = dateTimeZone1.adjustOffset((long) (byte) 10, true);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone1);
        int int9 = localDate8.getYear();
        org.joda.time.LocalDate localDate11 = localDate8.withYear(40);
        org.joda.time.LocalDate localDate13 = localDate8.withYearOfEra(54131209);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test19945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19945");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        java.lang.Object obj4 = null;
        boolean boolean5 = localDateTime1.equals(obj4);
        int int6 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        int int9 = localDateTime8.getDayOfYear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        java.lang.String str14 = dateTimeFieldType12.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.hourOfDay();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDurationAdded(readableDuration18, 7);
        org.joda.time.Chronology chronology21 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType12.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.monthOfYear();
        long long25 = dateTimeField23.roundHalfFloor((long) 11);
        long long28 = dateTimeField23.addWrapField(1645455254089L, 53635206);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clear();
        java.util.Locale.Builder builder32 = builder31.clear();
        java.util.Locale locale33 = builder31.build();
        java.lang.String str34 = locale33.getISO3Country();
        java.lang.String str35 = dateTimeField23.getAsText(1645455302000L, locale33);
        java.lang.String str36 = locale33.getISO3Country();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("Fri Feb 08 23:01:00 GMT+00:00 1901");
        java.lang.String str39 = locale38.getDisplayCountry();
        java.lang.String str40 = locale38.getDisplayName();
        java.lang.String str41 = locale38.getScript();
        boolean boolean42 = locale38.hasExtensions();
        java.lang.String str43 = locale33.getDisplayLanguage(locale38);
        java.lang.String str44 = localDateTime8.toString("53923336", locale38);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "clockhourOfHalfday" + "'", str14, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1661093654089L + "'", long28 == 1661093654089L);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "February" + "'", str35, "February");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "53923336" + "'", str44, "53923336");
    }

    @Test
    public void test19946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19946");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(5177946000000L);
    }

    @Test
    public void test19947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19947");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusSeconds((int) (short) -1);
        int int10 = localDateTime9.getYearOfEra();
        int int11 = localDateTime9.getEra();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        int int15 = localDateTime13.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusHours(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks(2);
        boolean boolean20 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime9.withPeriodAdded(readablePeriod21, 53909137);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime9.plusMonths(53896999);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test19948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19948");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis(14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getEra();
        org.joda.time.DateTime dateTime25 = localTime21.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime27 = localTime21.plusMillis((-1));
        org.joda.time.LocalTime localTime29 = localTime27.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime32 = localTime27.withPeriodAdded(readablePeriod30, (int) '4');
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getEra();
        org.joda.time.DateTime.Property property37 = dateTime35.secondOfMinute();
        java.lang.String str38 = property37.getAsString();
        org.joda.time.DateTime dateTime39 = property37.roundCeilingCopy();
        int int40 = property33.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeField dateTimeField41 = property33.getField();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        int int47 = dateTimeZone44.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) 0, dateTimeZone44);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(dateTimeZone44);
        org.joda.time.LocalTime localTime51 = localTime49.minusSeconds((int) (byte) 1);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        timeZone54.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone54);
        int int59 = timeZone54.getOffset((long) 53626);
        java.util.Locale locale61 = new java.util.Locale("hi!");
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone54, locale61);
        java.lang.String str63 = dateTimeField41.getAsText((org.joda.time.ReadablePartial) localTime51, locale61);
        java.lang.String str64 = dateTime14.toString("37", locale61);
        java.lang.String str65 = locale61.getDisplayLanguage();
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.lang.String str67 = locale66.getDisplayName();
        java.lang.String str68 = locale66.getISO3Country();
        java.util.Locale locale69 = locale66.stripExtensions();
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale69.getDisplayVariant(locale70);
        java.lang.String str72 = locale69.getISO3Language();
        java.util.Locale.setDefault(locale69);
        java.util.Locale.Category category74 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale75 = java.util.Locale.getDefault(category74);
        java.lang.String str76 = locale69.getDisplayScript(locale75);
        java.lang.String str77 = locale61.getDisplayScript(locale69);
        java.lang.String str78 = locale61.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54222103 + "'", int5 == 54222103);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54222 + "'", int9 == 54222);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "42" + "'", str38, "42");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1645455822104,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=42,MILLISECOND=104,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "103" + "'", str63, "103");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "37" + "'", str64, "37");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str67, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "KOR" + "'", str68, "KOR");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "kor" + "'", str72, "kor");
        org.junit.Assert.assertTrue("'" + category74 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category74.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
    }

    @Test
    public void test19949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19949");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.yearOfEra();
        org.joda.time.DurationField durationField13 = chronology4.hours();
        long long16 = durationField13.getMillis(53685476, (long) 53974315);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 193267713600000L + "'", long16 == 193267713600000L);
    }

    @Test
    public void test19950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19950");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str6 = dateTimeZone5.toString();
        int int8 = dateTimeZone5.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime9 = localDate0.toDateTimeAtMidnight(dateTimeZone5);
        java.lang.String str11 = dateTimeZone5.getShortName(422L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime17 = property15.roundCeilingCopy();
        long long18 = dateTime17.getMillis();
        java.lang.String str19 = dateTime17.toString();
        org.joda.time.DateTime dateTime21 = dateTime17.minusHours(575);
        int int22 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime17.getZone();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        java.lang.String str26 = dateTimeZone23.getName(1645455600000L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "42" + "'", str16, "42");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455823000L + "'", long18 == 1645455823000L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-21T15:03:43.000Z" + "'", str19, "2022-02-21T15:03:43.000Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
    }

    @Test
    public void test19951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19951");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.DateTime dateTime7 = dateTime1.withYearOfCentury(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withPeriodAdded(readablePeriod8, 53879449);
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54222167 + "'", int5 == 54222167);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test19952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19952");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        int int21 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalTime localTime22 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime24 = property14.addCopy((long) 53626948);
        org.joda.time.LocalTime localTime25 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime26 = property14.roundHalfCeilingCopy();
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("+00:00");
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale32 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str33 = locale29.getDisplayLanguage(locale32);
        java.lang.String str34 = locale32.getDisplayName();
        java.lang.String str35 = locale32.getVariant();
        java.lang.String str36 = locale28.getDisplayName(locale32);
        java.lang.String str37 = property14.getAsShortText(locale32);
        org.joda.time.LocalTime localTime38 = property14.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime40 = property14.setCopy("2022-02-21T14:59:06.756Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:59:06.756Z\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "42" + "'", str19, "42");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str30, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals(locale32.toString(), "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Korean" + "'", str33, "Korean");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "clockhourofhalfday" + "'", str34, "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "99" + "'", str37, "99");
        org.junit.Assert.assertNotNull(localTime38);
    }

    @Test
    public void test19953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19953");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(2);
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology5.getZone();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone7);
        java.lang.String str10 = dateTimeZone7.getNameKey(0L);
        java.lang.String str12 = dateTimeZone7.getNameKey((long) (-53693326));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
    }

    @Test
    public void test19954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19954");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property9.roundHalfFloorCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime17 = property15.roundCeilingCopy();
        long long18 = dateTime17.getMillis();
        java.lang.String str19 = dateTime17.toString();
        org.joda.time.DateTime dateTime21 = dateTime17.minusHours(575);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime21.plusSeconds(53684367);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillisOfDay(53736737);
        org.joda.time.DateTime dateTime27 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime29 = dateTime26.withYearOfEra(10799999);
        int int30 = property9.compareTo((org.joda.time.ReadableInstant) dateTime26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime26.withDate(53705, 54210382, 53801077);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54210382 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "42" + "'", str16, "42");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455823000L + "'", long18 == 1645455823000L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-21T15:03:43.000Z" + "'", str19, "2022-02-21T15:03:43.000Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test19955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19955");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long7 = durationField5.getValueAsLong((long) '4');
        long long9 = durationField5.getValueAsLong((long) 4);
        long long11 = durationField5.getValueAsLong((long) 53648784);
        long long13 = durationField5.getValueAsLong(2520117L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test19956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19956");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate0.minusWeeks(12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property9 = localDate8.centuryOfEra();
        org.joda.time.LocalDate localDate10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDate10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.monthOfYear();
        int int13 = localDate10.get(dateTimeFieldType12);
        boolean boolean14 = localDate0.isSupported(dateTimeFieldType12);
        org.joda.time.DateMidnight dateMidnight15 = localDate0.toDateMidnight();
        org.joda.time.LocalDate localDate17 = localDate0.minusMonths(54088);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test19957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19957");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale6.getISO3Country();
        long long9 = dateTimeField3.set((long) 53635206, "55", locale6);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale6);
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("+00:00");
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale15.getDisplayName();
        java.util.Locale locale18 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str19 = locale15.getDisplayLanguage(locale18);
        java.lang.String str20 = locale18.getDisplayName();
        java.lang.String str21 = locale18.getVariant();
        java.lang.String str22 = locale14.getDisplayName(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap23 = calendar10.getDisplayNames(153428, 0, locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str7, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "KOR" + "'", str8, "KOR");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 113605080835206L + "'", long9 == 113605080835206L);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645455822235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=42,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str16, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals(locale18.toString(), "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Korean" + "'", str19, "Korean");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourofhalfday" + "'", str20, "clockhourofhalfday");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test19958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19958");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property6 = localDate5.weekOfWeekyear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.secondOfMinute();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear((int) (byte) 100);
        int int15 = localDate12.getDayOfWeek();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        int int20 = dateTimeZone17.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime21 = localDate12.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime9.toMutableDateTime(dateTimeZone17);
        int int24 = dateTimeZone17.getOffsetFromLocal((long) 53626975);
        java.lang.String str25 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-61779834366119L), dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight27 = localDate5.toDateMidnight(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter4.withZone(dateTimeZone17);
        org.joda.time.Chronology chronology29 = dateTimeFormatter28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter28.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeFormatter28.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime33 = dateTimeFormatter28.parseLocalTime("2022-02-21T15:04:37.111Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Etc/UTC" + "'", str18, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Etc/UTC" + "'", str25, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test19959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19959");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusHours(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(101);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        java.lang.Object obj17 = null;
        boolean boolean18 = localDateTime15.equals(obj17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfSecond(54171);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54171 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test19960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19960");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.clear();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.withMaximumValue();
        org.joda.time.Interval interval8 = localDate7.toInterval();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test19961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19961");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply(169561814540551356L, 48);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 8138967097946465088L + "'", long2 == 8138967097946465088L);
    }

    @Test
    public void test19962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19962");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        org.joda.time.Chronology chronology9 = dateTimeFormatter2.getChronology();
        boolean boolean10 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(53729738);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 53916278, chronology14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test19963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19963");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        java.lang.Object obj3 = null;
        org.joda.time.tz.Provider provider4 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone6 = provider4.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj3, dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.LocalDate.Property property10 = localDate2.centuryOfEra();
        int int11 = localDate2.getDayOfWeek();
        org.joda.time.LocalDate.Property property12 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.LocalDate localDate15 = property14.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(provider4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test19964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19964");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        boolean boolean5 = strSet3.equals((java.lang.Object) 53663032);
        java.lang.String[] strArray10 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean13 = strSet11.isEmpty();
        java.lang.Object[] objArray14 = strSet11.toArray();
        java.util.Set<java.lang.String> strSet15 = java.util.Calendar.getAvailableCalendarTypes();
        boolean boolean16 = strSet11.containsAll((java.util.Collection<java.lang.String>) strSet15);
        boolean boolean17 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet11);
        java.lang.String[] strArray62 = new java.lang.String[] { "1", "00:00:00.100", "weekyearOfCentury", "10", "Korean (South Korea)", "57", "clockhourofhalfday", "days", "days", "1", "DateTimeField[clockhourOfHalfday]", "0012-04-10", "14:54:41.300", "1970-01-01T00:52:00.010", "2022-02-21T14:54:59.000Z", "2", "\uc624\uc804 12:00:00", "1970-01-01T00:00:00.001", "\uc911\uad6d\uc5b4", "AD", "dayOfWeek", "DateTimeField[clockhourOfHalfday]", "Fri Feb 08 23:01:00 GMT+00:00 1901", "32", "2022-02-21", "487", "yearOfEra", "\uc624\uc804 12:00:00", "2", "3", "\uc911\uad6d", "GMT", "14:54:25.218", "48", "39", "3", "57", "1970-01-01T00:52:00.010", "UTC", "2022-02-21T14:55:52.777Z", "2022-02-21T14:54:59.000Z", "halfdays", "0035-12-31T23:59:59.999", "100" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        int int65 = strSet63.size();
        java.lang.Object[] objArray66 = strSet63.toArray();
        boolean boolean67 = strSet11.removeAll((java.util.Collection<java.lang.String>) strSet63);
        boolean boolean68 = strSet63.isEmpty();
        boolean boolean70 = strSet63.contains((java.lang.Object) 62818383738602L);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[Nov 29, 1909 12:00:00 AM, Etc/UTC, 47, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[Nov 29, 1909 12:00:00 AM, Etc/UTC, 47, ]");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 36 + "'", int65 == 36);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "\uc624\uc804\uc911\uad6d\uc5b4\uc624\uc804\uc911\uad6d, GMT, 14:54:25.218, 48, 39, UTC, 2022-02-21T14:55:52.777Z, halfdays, 0035-12-31T23:59:59.999, 100]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "\uc624\uc804\uc911\uad6d\uc5b4\uc624\uc804\uc911\uad6d, GMT, 14:54:25.218, 48, 39, UTC, 2022-02-21T14:55:52.777Z, halfdays, 0035-12-31T23:59:59.999, 100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test19965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19965");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDurationAdded(readableDuration3, 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        boolean boolean8 = localDateTime1.isSupported(durationFieldType7);
        java.lang.String str9 = durationFieldType7.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hours" + "'", str9, "hours");
    }

    @Test
    public void test19966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19966");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        timeZone4.setID("523");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.secondOfMinute();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        int int16 = dateTimeField13.getDifference(606L, (long) 1970);
        long long19 = dateTimeField13.set((-61779834317782L), 15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone21.previousTransition((long) 13);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property25 = localDate24.centuryOfEra();
        org.joda.time.LocalDate localDate26 = property25.withMaximumValue();
        boolean boolean27 = dateTimeZone21.equals((java.lang.Object) localDate26);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = locale29.getISO3Country();
        java.util.Locale locale32 = locale29.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str35 = dateTimeZone21.getName(570240L, locale33);
        java.lang.String str36 = dateTimeField13.getAsShortText((long) 32770, locale33);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone4, locale33);
        // The following exception was thrown during execution in test generation
        try {
            calendar37.set(53868987, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "42" + "'", str12, "42");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-61779834344782L) + "'", long19 == (-61779834344782L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 13L + "'", long23 == 13L);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str30, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "KOR" + "'", str31, "KOR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "32" + "'", str36, "32");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645455822326,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=523,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=42,MILLISECOND=326,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test19967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19967");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology9.years();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime15.getFieldTypes();
        org.joda.time.Chronology chronology18 = localDateTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) "41", chronology18);
        org.joda.time.DurationField durationField22 = chronology18.seconds();
        org.joda.time.DurationField durationField23 = chronology18.centuries();
        int int24 = durationField12.compareTo(durationField23);
        long long27 = durationField23.subtract((long) 54188760, (long) 53408);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-168539369187411240L) + "'", long27 == (-168539369187411240L));
    }

    @Test
    public void test19968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19968");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        int int8 = dateTimeZone5.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        int int10 = localDate9.size();
        int int11 = localDate9.getWeekOfWeekyear();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter3.withZone(dateTimeZone13);
        java.lang.Integer int17 = dateTimeFormatter3.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withDefaultYear(0);
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter3.getParser();
        boolean boolean23 = dateTimeFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.parse("2022-02-21T14:59:14.000Z", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeParser21);
        org.junit.Assert.assertNull(dateTimeParser22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test19969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19969");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusHours(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfCeilingCopy();
        boolean boolean15 = property13.isLeap();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Nov 29 00:00:00 GMT+00:00 1909");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test19970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19970");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str6 = dateTimeZone5.toString();
        int int8 = dateTimeZone5.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime9 = localDate0.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.LocalDate localDate11 = localDate0.plusDays((int) '4');
        org.joda.time.LocalDate localDate13 = localDate11.withCenturyOfEra(53638);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.minus(readablePeriod14);
        org.joda.time.LocalDate localDate17 = localDate13.minusYears(22);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test19971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19971");
        java.util.Date date3 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant4 = date3.toInstant();
        java.lang.String str5 = date3.toLocaleString();
        date3.setMonth(53652018);
        java.lang.String str8 = date3.toLocaleString();
        date3.setSeconds(292278993);
        int int11 = date3.getMinutes();
        date3.setMonth(53728661);
        int int14 = date3.getHours();
        date3.setMinutes(53846725);
        java.lang.Object obj17 = date3.clone();
        org.junit.Assert.assertEquals(date3.toString(), "Sat Oct 17 09:25:33 GMT+00:00 8950409");
        org.junit.Assert.assertNotNull(instant4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc624\uc804 12:00:00" + "'", str5, "\uc624\uc804 12:00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc624\uc804 12:00:00" + "'", str8, "\uc624\uc804 12:00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36 + "'", int11 == 36);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "Sat Oct 17 09:25:33 GMT+00:00 8950409");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "Sat Oct 17 09:25:33 GMT+00:00 8950409");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "Sat Oct 17 09:25:33 GMT+00:00 8950409");
    }

    @Test
    public void test19972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19972");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.LocalDate.Property property13 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, 53);
        org.joda.time.LocalDate.Property property18 = localDate17.weekyear();
        java.util.Locale locale21 = new java.util.Locale("2022-02-21T14:54:47.855Z");
        org.joda.time.LocalDate localDate22 = property18.setCopy("13", locale21);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks(575);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        int int29 = dateTimeZone26.getOffsetFromLocal((long) (short) -1);
        int int31 = dateTimeZone26.getStandardOffset((long) 13);
        org.joda.time.Interval interval32 = localDate22.toInterval(dateTimeZone26);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfDay();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals(locale21.toString(), "2022-02-21t14:54:47.855z");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test19973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19973");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime.Property property7 = localTime2.hourOfDay();
        int int8 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime localTime10 = localTime2.withMinuteOfHour(19);
        org.joda.time.LocalTime.Property property11 = localTime2.millisOfSecond();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test19974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19974");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.setLenient(true);
        java.util.Date date6 = calendar0.getTime();
        calendar0.clear();
        calendar0.setLenient(true);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 15:03:42 GMT+00:00 2022");
    }

    @Test
    public void test19975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19975");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.yearOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology4.add(readablePeriod11, 1645455506000L, 54025);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455506000L + "'", long14 == 1645455506000L);
    }

    @Test
    public void test19976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19976");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        int int4 = dateTime3.getYearOfEra();
        java.lang.Object obj5 = null;
        org.joda.time.tz.Provider provider6 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone8 = provider6.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj5, dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime3.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime12 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        org.joda.time.LocalDate localDate18 = localDate13.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths(53628);
        org.joda.time.LocalDate.Property property21 = localDate18.yearOfEra();
        java.util.Locale locale24 = new java.util.Locale("2022-02-21T14:55:41.830Z", "und");
        java.lang.String str25 = property21.getAsShortText(locale24);
        java.util.Calendar calendar26 = dateTime12.toCalendar(locale24);
        int int27 = calendar26.getFirstDayOfWeek();
        calendar26.set(54004, 2022, 53842280);
        java.util.Date date32 = calendar26.getTime();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(provider6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals(locale24.toString(), "2022-02-21t14:55:41.830z_UND");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=6299324694222454,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=201587,MONTH=7,WEEK_OF_YEAR=35,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=239,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=42,MILLISECOND=454,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Thu Aug 27 15:03:42 GMT+00:00 201587");
    }

    @Test
    public void test19977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19977");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set(292269054, 53634900, 0, (int) '4', 11, 0);
        calendar0.set(3, (int) '#', 56);
        java.util.TimeZone timeZone12 = calendar0.getTimeZone();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("14");
        java.util.TimeZone.setDefault(timeZone14);
        boolean boolean16 = timeZone12.hasSameRules(timeZone14);
        timeZone14.setRawOffset(53875);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14);
        calendar19.clear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=35,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=56,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=52,MINUTE=11,SECOND=0,MILLISECOND=470,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=53875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test19978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19978");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.setLenient(true);
        calendar0.set((int) (byte) 10, 53625, 17, 10, 0);
        calendar0.set(13, 145, 54);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfWeek();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime19.toMutableDateTimeISO();
        int int23 = dateTime19.getMillisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getEra();
        int int27 = dateTime25.getSecondOfDay();
        org.joda.time.DateTime dateTime29 = dateTime25.minusYears(12);
        boolean boolean30 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = localDate16.equals((java.lang.Object) boolean30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = localDate16.withCenturyOfEra(54137139);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54137139 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61371093617521,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=53875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=25,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=5,DAY_OF_MONTH=26,DAY_OF_YEAR=85,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=0,SECOND=36,MILLISECOND=354,ZONE_OFFSET=53875,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-46800000) + "'", int3 == (-46800000));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 54222479 + "'", int23 == 54222479);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 54222 + "'", int27 == 54222);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test19979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19979");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.dayOfWeek();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = builder8.build();
        java.util.Locale.Builder builder11 = builder8.setScript("");
        java.util.Locale locale12 = builder8.build();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withPeriodAdded(readablePeriod17, 53625);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.year();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime23 = property20.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = property20.roundHalfFloorCopy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime.Property property28 = dateTime26.secondOfMinute();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        org.joda.time.DateTime dateTime31 = property28.setCopy("46", locale30);
        int int32 = property20.getMaximumShortTextLength(locale30);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale30);
        java.util.Locale.Builder builder34 = builder8.setLocale(locale30);
        java.util.Locale.Builder builder37 = builder8.setExtension('u', "");
        java.util.Locale locale38 = builder8.build();
        int int39 = dateTimeField7.getMaximumShortTextLength(locale38);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455822491,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=53875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=4,SECOND=36,MILLISECOND=366,ZONE_OFFSET=53875,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test19980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19980");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2022-02-21T14:58:05.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:58:05.000Z\" is malformed at \"T14:58:05.000Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19981");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime8 = dateTime5.toLocalDateTime();
        org.joda.time.DateTime.Property property9 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, 53845);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(53911);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53911 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54222 + "'", int3 == 54222);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test19982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19982");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime10 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = property7.withMinimumValue();
        java.util.Locale locale16 = new java.util.Locale("clockhourOfHalfday");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime18 = property7.setCopy("32772", locale16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfSecond(69);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime.Property property24 = dateTime22.secondOfMinute();
        java.lang.String str25 = property24.getAsString();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        int int28 = dateTimeField26.get((long) ' ');
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusSeconds(6);
        int int35 = localDateTime30.getYear();
        int[] intArray42 = new int[] { (short) 10, 6, 53629404, 3, '4', (short) 0 };
        int int43 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30, intArray42);
        java.lang.String str44 = dateTimeField26.getName();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = property47.addToCopy((long) 3);
        int[] intArray51 = new int[] { '#' };
        int int52 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) localDateTime49, intArray51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.withWeekyear(53632);
        org.joda.time.LocalDateTime.Property property55 = localDateTime49.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.year();
        java.lang.String str58 = property57.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals(locale16.toString(), "clockhourofhalfday");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "42" + "'", str25, "42");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 6, 53629404, 3, 52, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "secondOfMinute" + "'", str44, "secondOfMinute");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970" + "'", str58, "1970");
    }

    @Test
    public void test19983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19983");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        int int6 = dateTimeZone3.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone3);
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 53657);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone11 = dateTimeZone1.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = timeZone11.getOffset(54212, 54215, 54183302, 54190251, 53800689, (-10));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 54212");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 53657L + "'", long9 == 53657L);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
    }

    @Test
    public void test19984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19984");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        int int3 = calendar0.getWeekYear();
        java.util.TimeZone timeZone4 = calendar0.getTimeZone();
        calendar0.set(401, 1080, 54170, 401, 53900184, 885);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=53875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=401,MONTH=1080,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=54170,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=401,MINUTE=53900184,SECOND=885,MILLISECOND=439,ZONE_OFFSET=53875,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
    }

    @Test
    public void test19985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19985");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("2022-02-21T15:00:57.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19986");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTime.Property property5 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime6 = property5.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test19987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19987");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withCenturyOfEra(2);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay(1645455453000L, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfDay();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) 53956961, chronology6);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test19988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19988");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        int int7 = dateTimeZone4.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        int int9 = localDate8.size();
        int int10 = localDate8.getWeekOfWeekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withChronology(chronology20);
        java.lang.Integer int27 = dateTimeFormatter26.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 53657004);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withDefaultYear(53691674);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter31.withPivotYear(53683381);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        java.lang.String str38 = dateTimeZone35.getShortName((long) 32772);
        long long41 = dateTimeZone35.adjustOffset((long) (byte) 10, true);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone35);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str45 = dateTimeZone44.toString();
        int int47 = dateTimeZone44.getOffsetFromLocal((long) (short) -1);
        int int49 = dateTimeZone44.getStandardOffset((long) 13);
        long long51 = dateTimeZone35.getMillisKeepLocal(dateTimeZone44, (long) 2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter31.withZone(dateTimeZone44);
        java.lang.String str53 = dateTimeZone44.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53633152L + "'", long24 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Etc/UTC" + "'", str36, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 2022L + "'", long51 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Etc/UTC" + "'", str53, "Etc/UTC");
    }

    @Test
    public void test19989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19989");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.DateTime dateTime5 = dateTime1.minusMillis(53626975);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) dateTime5);
        java.util.Date date7 = dateTime5.toDate();
        boolean boolean8 = dateTime5.isEqualNow();
        org.joda.time.LocalDate localDate9 = dateTime5.toLocalDate();
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.LocalDate.Property property11 = localDate9.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 00:10:49 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test19990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19990");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.LocalDate.Property property13 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundCeilingCopy();
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.LocalDate localDate17 = property15.addWrapFieldToCopy(21);
        java.lang.String str18 = property15.getAsShortText();
        org.joda.time.LocalDate localDate19 = property15.withMinimumValue();
        org.joda.time.LocalDate localDate20 = property15.roundCeilingCopy();
        int int21 = property15.getLeapAmount();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud654" + "'", str18, "\ud654");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test19991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19991");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths(53628);
        int int8 = localDate7.size();
        java.util.Date date9 = localDate7.toDate();
        date9.setMinutes(53665);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        boolean boolean13 = calendar12.isWeekDateSupported();
        int int15 = calendar12.getActualMinimum(15);
        int int17 = calendar12.getGreatestMinimum(12);
        calendar12.set((-53626948), 53629, 53632, 53633, 53632);
        calendar12.set((int) (short) 1, (int) ' ', 53630324, 53629404, 5);
        int int30 = calendar12.getWeeksInWeekYear();
        calendar12.set(365, 23, 53670067);
        java.util.TimeZone timeZone35 = calendar12.getTimeZone();
        java.time.Instant instant36 = calendar12.toInstant();
        java.util.Date date37 = java.util.Date.from(instant36);
        date37.setTime((long) 53626948);
        date37.setTime((long) 53866699);
        date37.setYear(17921);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = date9.before(date37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: sun.util.calendar.JulianCalendar$Date cannot be cast to sun.util.calendar.Gregorian$Date");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Mar 30 06:25:00 GMT 2448");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=4779571147482637,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=53875,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=153428,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=213,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=5,SECOND=36,MILLISECOND=512,ZONE_OFFSET=53875,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-46800000) + "'", int15 == (-46800000));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Mon Jan 01 14:58:40 GMT 19821");
    }

    @Test
    public void test19992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19992");
        java.util.Date date1 = new java.util.Date((long) 54202280);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks(9);
        java.util.Date date10 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant11 = date10.toInstant();
        boolean boolean12 = localDateTime6.equals((java.lang.Object) instant11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.plusHours(2022);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(101);
        int int18 = localDateTime17.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfWeek();
        boolean boolean20 = date1.equals((java.lang.Object) localDateTime17);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 15:04:16 GMT 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Nov 29 00:00:00 GMT 1909");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21599999 + "'", int18 == 21599999);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test19993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19993");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        boolean boolean24 = dateTime23.isEqualNow();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = dateTime23.getWeekyear();
        org.joda.time.DateTime.Property property27 = dateTime23.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54222671 + "'", int5 == 54222671);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54222 + "'", int9 == 54222);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test19994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19994");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime11.withDayOfWeek((-53839887));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -53839887 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "clockhourOfHalfday" + "'", str2, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test19995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19995");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long8 = durationField5.add((long) 53628, (long) 53627827);
        int int11 = durationField5.getDifference(66L, (long) 53630324);
        long long14 = durationField5.add((long) 53660, 0L);
        long long17 = durationField5.add((long) 53730, 0L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withPeriodAdded(readablePeriod22, 53625);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.LocalDateTime localDateTime28 = property25.setCopy(99);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays(53642927);
        int int31 = localDateTime28.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = localDateTime28.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 141027563462453628L + "'", long8 == 141027563462453628L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 53660L + "'", long14 == 53660L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 53730L + "'", long17 == 53730L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970" + "'", str26, "1970");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test19996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19996");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology4);
        org.joda.time.DateTimeField dateTimeField12 = chronology4.yearOfCentury();
        int int14 = dateTimeField12.getMaximumValue((long) 54193101);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 53633152L + "'", long8 == 53633152L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 99 + "'", int14 == 99);
    }

    @Test
    public void test19997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19997");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTime.Property property5 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime7 = property5.setCopy("59");
        org.joda.time.DateTime dateTime8 = property5.roundCeilingCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        boolean boolean10 = dateTime8.isAfterNow();
        org.joda.time.Chronology chronology11 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours(2005);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readablePeriod14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime17.toMutableDateTimeISO();
        int int21 = dateTime17.getMillisOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getEra();
        int int25 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime23.minusYears(12);
        boolean boolean28 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear((int) (byte) 100);
        int int32 = localDate29.getDayOfWeek();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.lang.String str35 = dateTimeZone34.toString();
        int int37 = dateTimeZone34.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime38 = localDate29.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.DateTime dateTime39 = dateTime17.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime41 = dateTime17.minusDays(0);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfCentury(35);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes(53688);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime43.getZone();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime43.plus(readableDuration47);
        boolean boolean49 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology50 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 54222731 + "'", int21 == 54222731);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 54222 + "'", int25 == 54222);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test19998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19998");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        int int6 = dateTimeZone3.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone3);
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 53657);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        int int11 = timeZone10.getRawOffset();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 53657L + "'", long9 == 53657L);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test19999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test19999");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 53642);
        boolean boolean11 = dateTimeFormatter2.isParser();
        int int12 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getEra();
        int int16 = dateTime14.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.plus(readableDuration17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withDurationAdded(readableDuration19, 53626975);
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded((long) 2922789, (int) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours(53691674);
        int int27 = dateTime24.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2000 + "'", int12 == 2000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54222 + "'", int16 == 54222);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 669 + "'", int27 == 669);
    }

    @Test
    public void test20000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest39.test20000");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str11 = dateTimeZone8.getShortName((long) 5);
        boolean boolean12 = localDate4.equals((java.lang.Object) str11);
        org.joda.time.LocalDate.Property property13 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundCeilingCopy();
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property15.withMinimumValue();
        org.joda.time.LocalDate localDate17 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate18 = property15.withMaximumValue();
        org.joda.time.Instant instant20 = org.joda.time.Instant.parse("-51606-02-21T14:55:03.940Z");
        int int21 = property15.compareTo((org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.MutableDateTime mutableDateTime23 = instant20.toMutableDateTimeISO();
        org.joda.time.Instant instant25 = instant20.withMillis((long) 53852793);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-51606-02-21T14:55:03.940Z" + "'", str22, "-51606-02-21T14:55:03.940Z");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant25);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant3.withDurationAdded(readableDuration5, (int) (short) 10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime4", (instant7.compareTo(mutableDateTime4) == 0) == instant7.equals(mutableDateTime4));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.Instant instant7 = instant3.withDurationAdded((long) (short) -1, 6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime4", (instant3.compareTo(mutableDateTime4) == 0) == instant3.equals(mutableDateTime4));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime13 = instant8.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.Instant instant12 = instant9.withDurationAdded((long) 53627, (int) ' ');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDurationAdded(readableDuration16, 7);
        org.joda.time.Chronology chronology19 = localDateTime14.getChronology();
        org.joda.time.DateTime dateTime20 = instant8.toDateTime(chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.withMillis(0L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant8.minus(readableDuration15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant16", (dateTime1.compareTo(instant16) == 0) == dateTime1.equals(instant16));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int6 = localDate5.size();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTimeISO();
        int int12 = dateTime8.getMillisOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getEra();
        int int16 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusYears(12);
        boolean boolean19 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.withDurationAdded(readableDuration22, 1);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime27.getFieldTypes();
        org.joda.time.Chronology chronology30 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.months();
        boolean boolean32 = durationFieldType25.isSupported(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime24.toDateTime(chronology30);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) localDate5, chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime33", (dateTime21.compareTo(dateTime33) == 0) == dateTime21.equals(dateTime33));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getEra();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Instant instant8 = dateTime5.toInstant();
        org.joda.time.Instant instant10 = instant8.minus((long) 53629878);
        boolean boolean11 = org.joda.time.field.FieldUtils.equals((java.lang.Object) "Chinese", (java.lang.Object) 53629878);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant8", (dateTime5.compareTo(instant8) == 0) == dateTime5.equals(instant8));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime20.getFieldTypes();
        org.joda.time.Chronology chronology23 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.months();
        boolean boolean25 = durationFieldType18.isSupported(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology23);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        int int31 = dateTimeZone28.getOffsetFromLocal((long) (short) -1);
        int int33 = dateTimeZone28.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime34 = dateTime17.toDateTime(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime26", (dateTime34.compareTo(dateTime26) == 0) == dateTime34.equals(dateTime26));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int6 = localDate5.size();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = localDate8.toDateMidnight();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTimeISO();
        int int15 = dateTime11.getMillisOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        int int19 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusYears(12);
        boolean boolean22 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear((int) (byte) 100);
        int int26 = localDate23.getDayOfWeek();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        int int31 = dateTimeZone28.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime32 = localDate23.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime11.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime35 = dateTime11.minusDays(0);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((java.lang.Object) dateTime11);
        boolean boolean37 = dateMidnight9.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and instant36", (mutableDateTime14.compareTo(instant36) == 0) == mutableDateTime14.equals(instant36));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.withMillis(0L);
        org.joda.time.MutableDateTime mutableDateTime15 = instant8.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant0.minus(readableDuration10);
        org.joda.time.Instant instant13 = instant11.minus((-2209040700000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime2", (instant11.compareTo(dateTime2) == 0) == instant11.equals(dateTime2));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDate2.getFieldTypes();
        org.joda.time.LocalDate localDate5 = localDate2.plusYears(14);
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime.Property property10 = dateTime8.secondOfMinute();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        int int13 = instant6.get(dateTimeField12);
        org.joda.time.Chronology chronology14 = instant6.getChronology();
        org.joda.time.DateTime dateTime15 = localDate5.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTime dateTime17 = dateTime15.plusWeeks(53629878);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime8", (instant6.compareTo(dateTime8) == 0) == instant6.equals(dateTime8));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime.Property property30 = dateTime28.secondOfMinute();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear((int) (byte) 100);
        int int34 = localDate31.getDayOfWeek();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        int int39 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime40 = localDate31.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime28.toMutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = instant26.toDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ko-KR");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int11 = dateTime6.get(dateTimeFieldType10);
        boolean boolean12 = languageRange1.equals((java.lang.Object) dateTimeFieldType10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.withMillis(0L);
        org.joda.time.Instant instant16 = instant14.plus(5097600032L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime20.getFieldTypes();
        org.joda.time.Chronology chronology23 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.months();
        boolean boolean25 = durationFieldType18.isSupported(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime26", (dateTime14.compareTo(dateTime26) == 0) == dateTime14.equals(dateTime26));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime20.getFieldTypes();
        org.joda.time.Chronology chronology23 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.months();
        boolean boolean25 = durationFieldType18.isSupported(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int30 = dateTime28.get(dateTimeFieldType29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime28.toMutableDateTimeISO();
        int int32 = dateTime28.getMillisOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getEra();
        int int36 = dateTime34.getSecondOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusYears(12);
        boolean boolean39 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime38.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.minus(readablePeriod44);
        boolean boolean46 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property47 = dateTime45.hourOfDay();
        org.joda.time.LocalTime localTime48 = dateTime45.toLocalTime();
        int int49 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime26", (dateTime17.compareTo(dateTime26) == 0) == dateTime17.equals(dateTime26));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDate2.getFieldTypes();
        org.joda.time.LocalDate localDate5 = localDate2.plusYears(14);
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime.Property property10 = dateTime8.secondOfMinute();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        int int13 = instant6.get(dateTimeField12);
        org.joda.time.Chronology chronology14 = instant6.getChronology();
        org.joda.time.DateTime dateTime15 = localDate5.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime15.toMutableDateTime(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime8", (instant6.compareTo(dateTime8) == 0) == instant6.equals(dateTime8));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Instant instant27 = instant26.toInstant();
        boolean boolean29 = instant27.isAfter((long) 53646831);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant27", (dateTime1.compareTo(instant27) == 0) == dateTime1.equals(instant27));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        org.joda.time.DateTime dateTime13 = dateTime7.minusMinutes((-1));
        long long14 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = dateTime13.withDurationAdded((long) 53627827, 21);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(2);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology23.add(readablePeriod24, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.minuteOfHour();
        org.joda.time.DurationField durationField29 = durationFieldType18.getField(chronology23);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology32 = chronology23.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime13.toDateTime(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = chronology32.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime33", (dateTime13.compareTo(dateTime33) == 0) == dateTime13.equals(dateTime33));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant27", (dateTime1.compareTo(instant27) == 0) == dateTime1.equals(instant27));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int9 = dateTime4.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime4.plusMonths(8);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.plus((long) 53630);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant8.withDurationAdded(readableDuration15, 2021);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant17", (dateTime1.compareTo(instant17) == 0) == dateTime1.equals(instant17));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime.Property property30 = dateTime28.secondOfMinute();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear((int) (byte) 100);
        int int34 = localDate31.getDayOfWeek();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        int int39 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime40 = localDate31.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime28.toMutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = instant26.toDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime42.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.Instant instant11 = instant7.withMillis(5L);
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DurationField durationField10 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField10", Math.signum(durationField9.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField9)));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.MutableDateTime mutableDateTime13 = instant8.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant10 = instant0.plus((long) 53652018);
        org.joda.time.DateTime dateTime11 = instant10.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant8.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        java.lang.Object obj3 = null;
        org.joda.time.tz.Provider provider4 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone6 = provider4.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj3, dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtMidnight(dateTimeZone6);
        int int11 = dateTimeZone6.getOffset(911L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withCenturyOfEra(2);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology16.add(readablePeriod17, (long) 53633152, 99);
        org.joda.time.DurationField durationField21 = chronology16.minutes();
        org.joda.time.DurationField durationField22 = chronology16.eras();
        boolean boolean23 = dateTimeZone6.equals((java.lang.Object) durationField22);
        boolean boolean24 = dateTimeZone6.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField21 and durationField22", Math.signum(durationField21.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField21)));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds((int) (byte) 1);
        org.joda.time.LocalTime localTime11 = localTime9.plusMillis(13);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime9.plus(readablePeriod12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime20 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Instant instant21 = dateTime18.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int23 = dateTime18.get(dateTimeFieldType22);
        org.joda.time.LocalTime.Property property24 = localTime13.property(dateTimeFieldType22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant21", (dateTime18.compareTo(instant21) == 0) == dateTime18.equals(instant21));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(12);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(localTime10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        java.lang.String str16 = dateTimeZone13.getShortName((long) 5);
        boolean boolean17 = localDate9.equals((java.lang.Object) str16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate19 = localDate9.minus(readablePeriod18);
        org.joda.time.LocalDate.Property property20 = localDate9.era();
        boolean boolean21 = mutableDateTime4.equals((java.lang.Object) localDate9);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear((int) (byte) 100);
        int int25 = localDate22.getDayOfWeek();
        org.joda.time.LocalDate localDate27 = localDate22.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate22.minusWeeks(12);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate31 = localDate22.minus(readablePeriod30);
        org.joda.time.LocalDate localDate33 = localDate31.plusMonths(101);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDate localDate36 = localDate33.withPeriodAdded(readablePeriod34, 54);
        org.joda.time.LocalDate localDate37 = localDate9.withFields((org.joda.time.ReadablePartial) localDate33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime1.withCenturyOfEra((int) ' ');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.minus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusDays(56);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property13 = localDate12.centuryOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundHalfCeilingCopy();
        java.lang.Object obj15 = null;
        org.joda.time.tz.Provider provider16 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone18 = provider16.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj15, dateTimeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate14.toDateTimeAtMidnight(dateTimeZone18);
        int int23 = dateTimeZone18.getOffset(911L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(2);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology28.add(readablePeriod29, (long) 53633152, 99);
        org.joda.time.DurationField durationField33 = chronology28.minutes();
        org.joda.time.DurationField durationField34 = chronology28.eras();
        boolean boolean35 = dateTimeZone18.equals((java.lang.Object) durationField34);
        org.joda.time.DateTime dateTime36 = dateTime7.toDateTime(dateTimeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField33 and durationField34", Math.signum(durationField33.compareTo(durationField34)) == -Math.signum(durationField34.compareTo(durationField33)));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant10 = instant0.plus((long) 53652018);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 5);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant7.withDurationAdded(readableDuration8, 1970);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        int int12 = dateTime6.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        int int13 = mutableDateTime11.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant9 = instant0.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, (-46800000));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime2", (instant12.compareTo(dateTime2) == 0) == instant12.equals(dateTime2));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime4.minusMonths(53628014);
        org.joda.time.DateTime.Property property16 = dateTime4.yearOfCentury();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1645455243000L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime19.withChronology(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime19.withMinuteOfHour(17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime23", (dateTime19.compareTo(dateTime23) == 0) == dateTime19.equals(dateTime23));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.DateTime dateTime28 = dateTime1.withCenturyOfEra(1970);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and instant26", (mutableDateTime4.compareTo(instant26) == 0) == mutableDateTime4.equals(instant26));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime2.minusSeconds(53626975);
        org.joda.time.LocalTime localTime12 = localTime2.plusMinutes(56);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant20 = dateTime17.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int22 = dateTime17.get(dateTimeFieldType21);
        int int23 = localTime2.get(dateTimeFieldType21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant20", (dateTime17.compareTo(instant20) == 0) == dateTime17.equals(instant20));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfCentury(35);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime29.toMutableDateTimeISO();
        int int33 = dateTime29.getMillisOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getEra();
        int int37 = dateTime35.getSecondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusYears(12);
        boolean boolean40 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear((int) (byte) 100);
        int int44 = localDate41.getDayOfWeek();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        int int49 = dateTimeZone46.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime50 = localDate41.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = dateTime29.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime53 = dateTime29.minusDays(0);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((java.lang.Object) dateTime29);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        int int57 = dateTime56.getEra();
        org.joda.time.DateTime.Property property58 = dateTime56.secondOfMinute();
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate61 = localDate59.withDayOfYear((int) (byte) 100);
        int int62 = localDate59.getDayOfWeek();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.lang.String str65 = dateTimeZone64.toString();
        int int67 = dateTimeZone64.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime68 = localDate59.toDateTimeAtMidnight(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime56.toMutableDateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime70 = instant54.toDateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime71 = dateTime25.withZone(dateTimeZone64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime71 and instant54", (dateTime71.compareTo(instant54) == 0) == dateTime71.equals(instant54));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.Instant instant29 = instant26.plus(16172935745L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.plus((long) 53630);
        org.joda.time.Instant instant16 = instant8.plus((long) 53676872);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant7.withDurationAdded(readableDuration8, 1970);
        org.joda.time.DateTime dateTime11 = instant10.toDateTimeISO();
        int int12 = property4.compareTo((org.joda.time.ReadableInstant) dateTime11);
        boolean boolean13 = property4.isLeap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime11", (instant7.compareTo(dateTime11) == 0) == instant7.equals(dateTime11));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(2);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter30.withChronology(chronology35);
        org.joda.time.DurationField durationField37 = chronology35.centuries();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.minuteOfHour();
        org.joda.time.DateTime dateTime39 = instant27.toDateTime(chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant27", (dateTime1.compareTo(instant27) == 0) == dateTime1.equals(instant27));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfHour();
        org.joda.time.DurationField durationField10 = chronology4.eras();
        org.joda.time.DurationField durationField11 = chronology4.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField11, and durationField10", !(durationField10.compareTo(durationField11) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField11.compareTo(durationField10))));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        org.joda.time.MutableDateTime mutableDateTime12 = instant8.toMutableDateTime();
        boolean boolean13 = dateTime6.isAfter((org.joda.time.ReadableInstant) instant8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime12", (instant8.compareTo(mutableDateTime12) == 0) == instant8.equals(mutableDateTime12));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 5);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant7.withDurationAdded(readableDuration8, 1970);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        int int12 = dateTime6.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime6.minus(readablePeriod13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime11", (instant7.compareTo(mutableDateTime11) == 0) == instant7.equals(mutableDateTime11));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.Instant instant10 = instant7.toInstant();
        org.joda.time.Instant instant12 = instant7.plus((long) 53673);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        int int21 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime dateTime28 = localTime24.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Instant instant29 = dateTime26.toInstant();
        int int30 = dateTime26.getDayOfWeek();
        int int31 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant29", (dateTime4.compareTo(instant29) == 0) == dateTime4.equals(instant29));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfCentury((int) ' ');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime7.getFieldTypes();
        org.joda.time.Chronology chronology10 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.months();
        boolean boolean12 = durationFieldType5.isSupported(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.clockhourOfHalfday();
        int int14 = dateTime2.get(dateTimeField13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime20 = dateTime16.withCenturyOfEra((int) ' ');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime16.minus(readableDuration21);
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.lang.String str25 = locale24.toLanguageTag();
        java.lang.String str26 = property23.getAsShortText(locale24);
        int int27 = dateTimeField13.getMaximumTextLength(locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime16", (dateTime2.compareTo(dateTime16) == 0) == dateTime2.equals(dateTime16));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.Chronology chronology16 = dateTime14.getChronology();
        long long17 = dateTime14.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime19.getFieldTypes();
        org.joda.time.Chronology chronology22 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DurationField durationField25 = chronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology22.years();
        org.joda.time.DateTime dateTime28 = dateTime14.withChronology(chronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField25 and durationField27", (durationField25.compareTo(durationField27) == 0) == durationField25.equals(durationField27));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfHour();
        org.joda.time.DurationField durationField10 = chronology4.eras();
        org.joda.time.DurationField durationField11 = chronology4.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField11, and durationField10", !(durationField10.compareTo(durationField11) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField11.compareTo(durationField10))));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant6 = instant0.withDurationAdded(readableDuration4, (-53622326));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 50);
        org.joda.time.Instant instant11 = instant6.withMillis((long) 53648);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime dateTime18 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        java.lang.String str20 = dateTime18.toString("+00:00");
        org.joda.time.DateTime dateTime21 = dateTime18.withTimeAtStartOfDay();
        boolean boolean22 = instant11.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime16", (instant0.compareTo(dateTime16) == 0) == instant0.equals(dateTime16));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 53657910);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getEra();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime localTime9 = localTime3.plusMillis((-1));
        org.joda.time.LocalTime localTime11 = localTime9.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime14 = localTime9.withPeriodAdded(readablePeriod12, (int) '4');
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime.Property property19 = dateTime17.secondOfMinute();
        java.lang.String str20 = property19.getAsString();
        org.joda.time.DateTime dateTime21 = property19.roundCeilingCopy();
        int int22 = property15.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime21.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minusYears((int) (byte) 0);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        int int31 = dateTimeZone28.getOffsetFromLocal((long) (short) -1);
        int int33 = dateTimeZone28.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(dateTimeZone28);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime26.toMutableDateTime(chronology35);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 53702134, chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and mutableDateTime36", (dateTime24.compareTo(mutableDateTime36) == 0) == dateTime24.equals(mutableDateTime36));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.plus((long) 53630);
        org.joda.time.DateTime dateTime15 = instant14.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 5);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant7.withDurationAdded(readableDuration8, 1970);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        int int12 = dateTime6.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate15 = property14.roundHalfCeilingCopy();
        java.lang.Object obj16 = null;
        org.joda.time.tz.Provider provider17 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone19 = provider17.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(obj16, dateTimeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate15.toDateTimeAtMidnight(dateTimeZone19);
        long long24 = dateTimeZone19.nextTransition((long) 53662);
        org.joda.time.DateTime dateTime25 = dateTime6.withZone(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime11", (instant7.compareTo(mutableDateTime11) == 0) == instant7.equals(mutableDateTime11));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone2);
        int int7 = timeZone2.getOffset((long) 53626);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone2, locale9);
        java.lang.String str11 = calendar10.getCalendarType();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        int int17 = dateTimeZone14.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 0, dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localTime18.toDateTimeToday();
        org.joda.time.LocalTime localTime21 = localTime18.withSecondOfMinute(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property23 = localTime21.property(dateTimeFieldType22);
        boolean boolean24 = calendar10.before((java.lang.Object) property23);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        int int32 = dateTimeZone29.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(dateTimeZone29);
        int int34 = localDate33.size();
        int int35 = localDate33.getWeekOfWeekyear();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str38 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime39 = localDate33.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter27.withZone(dateTimeZone37);
        org.joda.time.tz.NameProvider nameProvider41 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider41);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        timeZone45.setID("+00:00");
        timeZone45.setRawOffset(2);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        timeZone52.setID("+00:00");
        boolean boolean55 = timeZone45.hasSameRules(timeZone52);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone45, locale56);
        java.lang.String str58 = locale56.getLanguage();
        java.lang.String str61 = nameProvider41.getName(locale56, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale63 = new java.util.Locale("hi!");
        java.lang.String str64 = locale63.getISO3Country();
        java.util.Locale locale65 = locale63.stripExtensions();
        java.lang.String str66 = locale63.getScript();
        java.lang.String str68 = locale63.getUnicodeLocaleType("57");
        java.lang.String str71 = nameProvider41.getShortName(locale63, "49", "GMT");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter40.withLocale(locale63);
        java.util.Locale locale73 = java.util.Locale.KOREA;
        java.lang.String str74 = locale73.getDisplayName();
        java.lang.String str75 = locale73.getDisplayLanguage();
        boolean boolean76 = locale73.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter40.withLocale(locale73);
        java.lang.String str78 = property23.getAsText(locale73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar57", (calendar10.compareTo(calendar57) == 0) == calendar10.equals(calendar57));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar calendar6 = builder5.build();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.lang.String str9 = timeZone8.getID();
        timeZone8.setRawOffset(0);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = locale12.getISO3Country();
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime dateTime24 = localTime20.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getEra();
        int int28 = dateTime26.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.plus(readableDuration29);
        boolean boolean31 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean32 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime22);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTime dateTime35 = dateTime22.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        timeZone42.setID("+00:00");
        timeZone42.setRawOffset(2);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        timeZone49.setID("+00:00");
        boolean boolean52 = timeZone42.hasSameRules(timeZone49);
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone42, locale53);
        java.lang.String str55 = locale53.getLanguage();
        java.lang.String str58 = nameProvider38.getName(locale53, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale60 = new java.util.Locale("hi!");
        java.lang.String str61 = locale60.getISO3Country();
        java.util.Locale locale62 = locale60.stripExtensions();
        java.lang.String str63 = locale60.getScript();
        java.lang.String str65 = locale60.getUnicodeLocaleType("57");
        java.lang.String str68 = nameProvider38.getShortName(locale60, "49", "GMT");
        java.lang.String str69 = dateTimeZone34.getShortName((long) 32770, locale60);
        java.lang.String str70 = locale12.getDisplayCountry(locale60);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone8, locale12);
        calendar6.setTimeZone(timeZone8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar54 and calendar71", (calendar54.compareTo(calendar71) == 0) == calendar54.equals(calendar71));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.Instant instant10 = instant7.toInstant();
        java.lang.String str11 = instant7.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long9 = chronology4.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DurationField durationField11 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField11", Math.signum(durationField5.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField5)));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        java.lang.String str8 = dateTime6.toString("+00:00");
        org.joda.time.DateTime.Property property9 = dateTime6.millisOfDay();
        boolean boolean10 = dateTime6.isEqualNow();
        org.joda.time.DateTime dateTime12 = dateTime6.withYear(53725);
        org.joda.time.Instant instant13 = org.joda.time.Instant.now();
        org.joda.time.Instant instant16 = instant13.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getRangeDurationType();
        int int19 = instant13.get(dateTimeFieldType17);
        boolean boolean20 = dateTime12.isSupported(dateTimeFieldType17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant13", (dateTime4.compareTo(instant13) == 0) == dateTime4.equals(instant13));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime.Property property30 = dateTime28.secondOfMinute();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear((int) (byte) 100);
        int int34 = localDate31.getDayOfWeek();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        int int39 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime40 = localDate31.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime28.toMutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = instant26.toDateTime(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant26.minus(readableDuration43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getEra();
        org.joda.time.DateTime.Property property48 = dateTime46.secondOfMinute();
        java.lang.String str49 = property48.getAsString();
        org.joda.time.DateTime dateTime51 = property48.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime52 = property48.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime54 = dateTime52.minusSeconds(2922789);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime57 = dateTime54.withFieldAdded(durationFieldType55, 53655);
        org.joda.time.DateTime dateTime59 = dateTime57.plus((long) 605139);
        boolean boolean60 = instant44.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant44", (dateTime1.compareTo(instant44) == 0) == dateTime1.equals(instant44));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.monthOfYear();
        org.joda.time.DurationField durationField7 = chronology4.weekyears();
        org.joda.time.DurationField durationField8 = chronology4.weekyears();
        org.joda.time.DurationField durationField9 = chronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField5, and durationField7", !(durationField9.compareTo(durationField5) == 0) || (Math.signum(durationField9.compareTo(durationField7)) == Math.signum(durationField5.compareTo(durationField7))));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int9 = dateTime4.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime4.plusMonths(8);
        org.joda.time.DateTime.Property property12 = dateTime11.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology13);
        org.joda.time.DurationField durationField21 = chronology13.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant10 = instant0.plus((long) 53652018);
        org.joda.time.MutableDateTime mutableDateTime11 = instant0.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant7.withDurationAdded(readableDuration9, 53663032);
        org.joda.time.DateTime dateTime12 = instant7.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime7 = property3.withMinimumValue();
        org.joda.time.DateTime dateTime9 = property3.addToCopy((long) 53647);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime(dateTimeZone11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime12", (dateTime1.compareTo(dateTime12) == 0) == dateTime1.equals(dateTime12));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property15.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime20 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long25 = dateTimeZone21.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        timeZone31.setID("+00:00");
        timeZone31.setRawOffset(2);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        timeZone38.setID("+00:00");
        boolean boolean41 = timeZone31.hasSameRules(timeZone38);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone31, locale42);
        java.lang.String str44 = locale42.getLanguage();
        java.lang.String str47 = nameProvider27.getName(locale42, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale49 = new java.util.Locale("hi!");
        java.lang.String str50 = locale49.getISO3Country();
        java.util.Locale locale51 = locale49.stripExtensions();
        java.lang.String str52 = locale49.getScript();
        java.lang.String str54 = locale49.getUnicodeLocaleType("57");
        java.lang.String str57 = nameProvider27.getShortName(locale49, "49", "GMT");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTime dateTime62 = dateTime60.withCenturyOfEra(2);
        org.joda.time.Chronology chronology63 = dateTime62.getChronology();
        org.joda.time.DateTime.Property property64 = dateTime62.dayOfYear();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.lang.String str66 = locale65.getDisplayName();
        java.lang.String str67 = locale65.getISO3Country();
        java.util.Locale locale68 = locale65.stripExtensions();
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale68.getISO3Language();
        java.util.Locale locale72 = java.util.Locale.KOREA;
        java.lang.String str73 = locale72.getDisplayName();
        java.lang.String str74 = locale72.getISO3Country();
        java.util.Locale locale75 = locale72.stripExtensions();
        java.lang.String str76 = locale68.getDisplayLanguage(locale72);
        java.util.Calendar calendar77 = dateTime62.toCalendar(locale68);
        java.lang.String str80 = nameProvider27.getShortName(locale68, "Property[millisOfSecond]", "Property[dayOfWeek]");
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone26, locale68);
        java.lang.String str82 = locale68.getDisplayScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar43 and calendar81", (calendar43.compareTo(calendar81) == 0) == calendar43.equals(calendar81));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.Instant instant29 = instant26.minus(922L);
        org.joda.time.Instant instant31 = instant26.withMillis((long) 57);
        org.joda.time.MutableDateTime mutableDateTime32 = instant31.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant27", (dateTime1.compareTo(instant27) == 0) == dateTime1.equals(instant27));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology4.years();
        org.joda.time.DurationField durationField10 = chronology4.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField7 and durationField9", (durationField7.compareTo(durationField9) == 0) == durationField7.equals(durationField9));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(12);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(localTime10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        java.lang.String str16 = dateTimeZone13.getShortName((long) 5);
        boolean boolean17 = localDate9.equals((java.lang.Object) str16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate19 = localDate9.minus(readablePeriod18);
        org.joda.time.LocalDate.Property property20 = localDate9.era();
        boolean boolean21 = mutableDateTime4.equals((java.lang.Object) localDate9);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getEra();
        int int25 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime23.minusYears(12);
        org.joda.time.DateTime dateTime29 = dateTime23.minusMinutes((-1));
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.minusYears(53628);
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        boolean boolean34 = mutableDateTime4.equals((java.lang.Object) property33);
        org.joda.time.DateTime dateTime35 = property33.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant13 = instant11.minus((long) 53757823);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant11", (dateTime6.compareTo(instant11) == 0) == dateTime6.equals(instant11));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getEra();
        int int12 = dateTime10.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        boolean boolean15 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime10);
        boolean boolean16 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime6);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = dateTime6.withZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime.Property property23 = dateTime21.secondOfMinute();
        org.joda.time.DateTime dateTime25 = dateTime21.withCenturyOfEra((int) ' ');
        boolean boolean26 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime21);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        int int32 = dateTimeZone29.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 0, dateTimeZone29);
        int int34 = localTime33.size();
        org.joda.time.Chronology chronology35 = localTime33.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime6, chronology35);
        org.joda.time.DurationField durationField37 = chronology35.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime36", (dateTime1.compareTo(dateTime36) == 0) == dateTime1.equals(dateTime36));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Locale.Builder builder16 = builder13.setLocale(locale15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        timeZone19.setID("+00:00");
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone19, locale22);
        java.util.Locale.Builder builder24 = builder13.setLocale(locale22);
        java.lang.String str25 = locale11.getDisplayName(locale22);
        java.lang.String str26 = dateTimeField6.getAsText(readablePartial8, (-10), locale11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) (byte) 100);
        int int8 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate localDate10 = localDate5.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths(53628);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime();
        int int14 = dateTime13.getWeekyear();
        boolean boolean15 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime13);
        long long16 = dateTime13.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.Instant instant11 = instant9.withMillis(452L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) (byte) 100);
        int int8 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate localDate10 = localDate5.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths(53628);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime();
        int int14 = dateTime13.getWeekyear();
        boolean boolean15 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = dateTime4.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime13", (instant0.compareTo(dateTime13) == 0) == instant0.equals(dateTime13));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime.Property property28 = dateTime26.secondOfMinute();
        java.lang.String str29 = property28.getAsString();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getEra();
        int int34 = dateTime32.getSecondOfDay();
        org.joda.time.DateTime dateTime36 = dateTime32.minusYears(12);
        org.joda.time.DateTime dateTime38 = dateTime32.minusMinutes((-1));
        long long39 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime42 = dateTime38.withDurationAdded((long) 53627827, 21);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.withCenturyOfEra(2);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        long long52 = chronology48.add(readablePeriod49, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = durationFieldType43.getField(chronology48);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology57 = chronology48.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = dateTime38.toDateTime(chronology57);
        boolean boolean59 = mutableDateTime24.isBefore((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.format.DateTimePrinter dateTimePrinter60 = null;
        org.joda.time.format.DateTimeParser dateTimeParser61 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter60, dateTimeParser61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        org.joda.time.DateTime dateTime66 = dateTime64.withCenturyOfEra(2);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter62.withChronology(chronology67);
        boolean boolean69 = dateTimeFormatter62.isParser();
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        java.lang.String str72 = dateTimeZone71.toString();
        int int74 = dateTimeZone71.getOffsetFromLocal((long) (short) -1);
        int int76 = dateTimeZone71.getStandardOffset((long) 13);
        long long79 = dateTimeZone71.convertLocalToUTC((long) 53641, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter62.withZone(dateTimeZone71);
        org.joda.time.LocalDate localDate81 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property82 = localDate81.centuryOfEra();
        org.joda.time.LocalDate localDate83 = property82.roundHalfCeilingCopy();
        java.lang.Object obj84 = null;
        org.joda.time.tz.Provider provider85 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone87 = provider85.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime(obj84, dateTimeZone87);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone87);
        org.joda.time.DateTime dateTime90 = localDate83.toDateTimeAtMidnight(dateTimeZone87);
        boolean boolean91 = dateTimeZone71.equals((java.lang.Object) localDate83);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime24, dateTimeZone71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and dateTime58", (dateTime38.compareTo(dateTime58) == 0) == dateTime38.equals(dateTime58));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DurationField durationField10 = chronology4.eras();
        org.joda.time.DurationField durationField11 = chronology4.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField10", Math.signum(durationField11.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField11)));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        int int18 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime17.plusYears(53627);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes((-53637188));
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.DateTime dateTime26 = dateTime20.withFieldAdded(durationFieldType24, 53656028);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        java.lang.String str32 = dateTimeFieldType30.toString();
        int int33 = localDateTime28.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withYear(53641141);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime20.toDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime37", (dateTime20.compareTo(dateTime37) == 0) == dateTime20.equals(dateTime37));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getRangeDurationType();
        int int6 = instant0.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = instant0.toDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant0.minus(readableDuration8);
        org.joda.time.tz.Provider provider10 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone12 = provider10.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        boolean boolean14 = instant0.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant0", (dateTime7.compareTo(instant0) == 0) == dateTime7.equals(instant0));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant7.withDurationAdded(readableDuration9, 53663032);
        org.joda.time.Instant instant12 = instant7.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        org.joda.time.tz.Provider provider2 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone4 = provider2.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(15778476000L, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 57, dateTimeZone4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime14 = localTime10.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str16 = dateTime14.toString("+00:00");
        org.joda.time.DateTime dateTime17 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime12", (dateTime5.compareTo(dateTime12) == 0) == dateTime5.equals(dateTime12));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int18 = localDateTime13.get(dateTimeFieldType17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        int int23 = dateTimeZone20.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone20);
        java.lang.String str26 = dateTimeZone20.getNameKey((long) 10);
        org.joda.time.DateTime dateTime27 = localDateTime13.toDateTime(dateTimeZone20);
        java.lang.String str29 = dateTimeZone20.getShortName((long) 53730231);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime8", (dateTime1.compareTo(mutableDateTime8) == 0) == dateTime1.equals(mutableDateTime8));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DateTimeField dateTimeField24 = chronology5.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology5.halfdayOfDay();
        org.joda.time.DurationField durationField26 = chronology5.eras();
        org.joda.time.DurationField durationField27 = chronology5.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField26", Math.signum(durationField6.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField6)));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str6 = dateTimeZone5.toString();
        int int8 = dateTimeZone5.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime9 = localDate0.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider15 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone17 = provider15.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime11.toMutableDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getShortName((long) 53670067);
        long long23 = dateTimeZone5.getMillisKeepLocal(dateTimeZone17, (long) 53750);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and mutableDateTime18", (dateTime11.compareTo(mutableDateTime18) == 0) == dateTime11.equals(mutableDateTime18));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int20 = localDateTime16.get(dateTimeFieldType19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime8", (dateTime1.compareTo(mutableDateTime8) == 0) == dateTime1.equals(mutableDateTime8));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        timeZone4.setID("+00:00");
        timeZone4.setRawOffset(2);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        timeZone11.setID("+00:00");
        boolean boolean14 = timeZone4.hasSameRules(timeZone11);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.lang.String str17 = locale15.getLanguage();
        java.lang.String str20 = nameProvider0.getName(locale15, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getISO3Country();
        java.util.Locale locale24 = locale22.stripExtensions();
        java.lang.String str25 = locale22.getScript();
        java.lang.String str27 = locale22.getUnicodeLocaleType("57");
        java.lang.String str30 = nameProvider0.getShortName(locale22, "49", "GMT");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String str35 = nameProvider0.getShortName(locale32, "seconds", "57");
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = property38.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plus(readableDuration46);
        int int48 = localDateTime47.getHourOfDay();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        timeZone52.setID("+00:00");
        timeZone52.setRawOffset(2);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        timeZone59.setID("+00:00");
        boolean boolean62 = timeZone52.hasSameRules(timeZone59);
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone52, locale63);
        timeZone52.setID("1970");
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.lang.String str68 = locale67.getDisplayName();
        java.lang.String str69 = locale67.getISO3Country();
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleAttributes();
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone52, locale67);
        java.lang.String str72 = localDateTime47.toString("27", locale67);
        java.lang.String str75 = nameProvider0.getName(locale67, "2022-02-21T14:55:48.000Z", "clockhourofhalfday");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar64", (calendar16.compareTo(calendar64) == 0) == calendar16.equals(calendar64));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setRawOffset(0);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean25 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime15);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = dateTime15.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        timeZone35.setID("+00:00");
        timeZone35.setRawOffset(2);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        timeZone42.setID("+00:00");
        boolean boolean45 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone35, locale46);
        java.lang.String str48 = locale46.getLanguage();
        java.lang.String str51 = nameProvider31.getName(locale46, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.lang.String str54 = locale53.getISO3Country();
        java.util.Locale locale55 = locale53.stripExtensions();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str58 = locale53.getUnicodeLocaleType("57");
        java.lang.String str61 = nameProvider31.getShortName(locale53, "49", "GMT");
        java.lang.String str62 = dateTimeZone27.getShortName((long) 32770, locale53);
        java.lang.String str63 = locale5.getDisplayCountry(locale53);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.util.TimeZone timeZone65 = calendar64.getTimeZone();
        java.lang.String str66 = timeZone65.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar64", (calendar47.compareTo(calendar64) == 0) == calendar47.equals(calendar64));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime dateTime9 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readableDuration14);
        boolean boolean16 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime11);
        boolean boolean17 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime7);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTime dateTime20 = dateTime7.withZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime.Property property24 = dateTime22.secondOfMinute();
        org.joda.time.DateTime dateTime26 = dateTime22.withCenturyOfEra((int) ' ');
        boolean boolean27 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        int int33 = dateTimeZone30.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 0, dateTimeZone30);
        int int35 = localTime34.size();
        org.joda.time.Chronology chronology36 = localTime34.getChronology();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) dateTime7, chronology36);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((java.lang.Object) "14:54:53.300", chronology36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime37", (dateTime2.compareTo(dateTime37) == 0) == dateTime2.equals(dateTime37));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.DateTime dateTime9 = instant0.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant0.minus(readableDuration10);
        org.joda.time.Instant instant13 = instant0.plus((long) 53777);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant0", (dateTime2.compareTo(instant0) == 0) == dateTime2.equals(instant0));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        int int7 = localDate4.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 53695160);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant9.withDurationAdded(readableDuration13, 53680354);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant15", (dateTime6.compareTo(instant15) == 0) == dateTime6.equals(instant15));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime.Property property30 = dateTime28.secondOfMinute();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear((int) (byte) 100);
        int int34 = localDate31.getDayOfWeek();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        int int39 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime40 = localDate31.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime28.toMutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = instant26.toDateTime(dateTimeZone36);
        org.joda.time.DateTime.Property property43 = dateTime42.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        java.lang.String str22 = dateTimeFieldType20.toString();
        int int23 = localDateTime18.indexOf(dateTimeFieldType20);
        int int24 = dateTime16.get(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType20.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        java.lang.String str29 = dateTimeFieldType27.toString();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.hourOfDay();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDurationAdded(readableDuration33, 7);
        org.joda.time.Chronology chronology36 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType27.getField(chronology36);
        org.joda.time.DurationField durationField38 = chronology36.seconds();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.dayOfWeek();
        org.joda.time.DurationField durationField42 = chronology36.months();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType26.getField(chronology36);
        boolean boolean44 = durationFieldType25.isSupported(chronology36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property15.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime20 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long25 = dateTimeZone21.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale.Builder builder30 = builder28.clear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getEra();
        org.joda.time.DateTime.Property property34 = dateTime32.secondOfMinute();
        java.lang.String str35 = property34.getAsString();
        org.joda.time.DateTime dateTime37 = property34.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime38 = property34.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime40 = dateTime38.minusSeconds(2922789);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale41.getISO3Country();
        java.util.Locale locale44 = locale41.stripExtensions();
        java.util.Calendar calendar45 = dateTime38.toCalendar(locale41);
        java.util.Locale.Builder builder46 = builder30.setLocale(locale41);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        timeZone49.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone49);
        int int54 = timeZone49.getOffset((long) 53626);
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone49, locale56);
        java.lang.String str58 = locale56.getCountry();
        java.lang.String str59 = locale41.getDisplayCountry(locale56);
        java.lang.String str60 = locale56.getISO3Country();
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone26, locale56);
        java.util.Set<java.lang.String> strSet62 = locale56.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar61", (calendar57.compareTo(calendar61) == 0) == calendar57.equals(calendar61));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded(readableDuration6, 53626975);
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 2922789, (int) (short) 100);
        int int12 = dateTime5.getMinuteOfDay();
        org.joda.time.DateTime dateTime14 = dateTime5.withMillis((long) 53625);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime.Property property19 = dateTime17.secondOfMinute();
        java.lang.String str20 = property19.getAsString();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        int int22 = instant15.get(dateTimeField21);
        org.joda.time.Chronology chronology23 = instant15.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime5.withChronology(chronology23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant15", (dateTime5.compareTo(instant15) == 0) == dateTime5.equals(instant15));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.year();
        org.joda.time.DurationField durationField13 = chronology9.eras();
        org.joda.time.DurationField durationField14 = chronology9.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField14, and durationField13", !(durationField13.compareTo(durationField14) == 0) || (Math.signum(durationField13.compareTo(durationField13)) == Math.signum(durationField14.compareTo(durationField13))));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime.Property property28 = dateTime26.secondOfMinute();
        java.lang.String str29 = property28.getAsString();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getEra();
        int int34 = dateTime32.getSecondOfDay();
        org.joda.time.DateTime dateTime36 = dateTime32.minusYears(12);
        org.joda.time.DateTime dateTime38 = dateTime32.minusMinutes((-1));
        long long39 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime42 = dateTime38.withDurationAdded((long) 53627827, 21);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.withCenturyOfEra(2);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        long long52 = chronology48.add(readablePeriod49, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = durationFieldType43.getField(chronology48);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology57 = chronology48.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = dateTime38.toDateTime(chronology57);
        boolean boolean59 = mutableDateTime24.isBefore((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = mutableDateTime24.isEqual(1645455386000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and dateTime58", (dateTime38.compareTo(dateTime58) == 0) == dateTime38.equals(dateTime58));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(12);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(localTime10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        java.lang.String str16 = dateTimeZone13.getShortName((long) 5);
        boolean boolean17 = localDate9.equals((java.lang.Object) str16);
        org.joda.time.LocalDate.Property property18 = localDate9.yearOfEra();
        org.joda.time.LocalDate localDate19 = property18.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate19.withPeriodAdded(readablePeriod20, 53);
        org.joda.time.LocalDate.Property property23 = localDate22.weekyear();
        org.joda.time.LocalDate localDate24 = property23.roundHalfCeilingCopy();
        int int25 = property23.getMinimumValue();
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        timeZone30.setID("+00:00");
        timeZone30.setRawOffset(2);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        timeZone37.setID("+00:00");
        boolean boolean40 = timeZone30.hasSameRules(timeZone37);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone30, locale41);
        java.lang.String str43 = locale41.getLanguage();
        java.lang.String str46 = nameProvider26.getName(locale41, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale48 = new java.util.Locale("hi!");
        java.lang.String str49 = locale48.getISO3Country();
        java.util.Locale locale50 = locale48.stripExtensions();
        java.lang.String str51 = locale48.getScript();
        java.lang.String str53 = locale48.getUnicodeLocaleType("57");
        java.lang.String str56 = nameProvider26.getShortName(locale48, "49", "GMT");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        java.util.Locale locale58 = java.util.Locale.UK;
        java.lang.String str61 = nameProvider26.getShortName(locale58, "seconds", "57");
        java.lang.String str62 = property23.getAsShortText(locale58);
        java.lang.String str64 = locale58.getExtension('x');
        org.joda.time.LocalDate localDate65 = property3.setCopy("6", locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar42", (calendar0.compareTo(calendar42) == 0) == calendar0.equals(calendar42));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.withMillis(0L);
        org.joda.time.MutableDateTime mutableDateTime15 = instant8.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long9 = chronology4.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DurationField durationField11 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField11", Math.signum(durationField5.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField5)));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        int int7 = property4.getMinimumValue();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        timeZone10.setID("+00:00");
        timeZone10.setRawOffset(2);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        timeZone17.setID("+00:00");
        boolean boolean20 = timeZone10.hasSameRules(timeZone17);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone10, locale21);
        java.lang.String str23 = property4.getAsText(locale21);
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale.Builder builder26 = builder25.clear();
        java.util.Locale.Builder builder27 = builder25.clear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        int int30 = dateTime29.getEra();
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        java.lang.String str32 = property31.getAsString();
        org.joda.time.DateTime dateTime34 = property31.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime35 = property31.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime37 = dateTime35.minusSeconds(2922789);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str40 = locale38.getISO3Country();
        java.util.Locale locale41 = locale38.stripExtensions();
        java.util.Calendar calendar42 = dateTime35.toCalendar(locale38);
        java.util.Locale.Builder builder43 = builder27.setLocale(locale38);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        timeZone46.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone46);
        int int51 = timeZone46.getOffset((long) 53626);
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone46, locale53);
        java.lang.String str55 = locale53.getCountry();
        java.lang.String str56 = locale38.getDisplayCountry(locale53);
        java.lang.String str57 = locale53.getISO3Country();
        int int58 = property4.getMaximumShortTextLength(locale53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar54", (calendar22.compareTo(calendar54) == 0) == calendar22.equals(calendar54));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant0.minus(readableDuration10);
        org.joda.time.Instant instant13 = instant0.plus((long) 53715);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant0", (dateTime2.compareTo(instant0) == 0) == dateTime2.equals(instant0));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant6 = instant0.withDurationAdded(readableDuration4, (-53622326));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 50);
        org.joda.time.DateTime dateTime10 = instant6.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime11 = instant6.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime10", (instant6.compareTo(dateTime10) == 0) == instant6.equals(dateTime10));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property14 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(53677);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(2);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology24.add(readablePeriod25, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.minuteOfHour();
        org.joda.time.DurationField durationField30 = durationFieldType19.getField(chronology24);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology33 = chronology24.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(737L, chronology33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime15.toMutableDateTime(chronology33);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and mutableDateTime35", (dateTime15.compareTo(mutableDateTime35) == 0) == dateTime15.equals(mutableDateTime35));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.DateTime dateTime5 = dateTime1.minusMillis(53626975);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        java.lang.String str10 = dateTimeFieldType8.toString();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDurationAdded(readableDuration14, 7);
        org.joda.time.Chronology chronology17 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType8.getField(chronology17);
        org.joda.time.DurationField durationField19 = chronology17.seconds();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.dayOfWeek();
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType7.getField(chronology17);
        org.joda.time.DateTime dateTime26 = dateTime6.withField(dateTimeFieldType7, 53695670);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime20", (dateTime1.compareTo(dateTime20) == 0) == dateTime1.equals(dateTime20));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DurationField durationField11 = chronology4.millis();
        org.joda.time.DurationField durationField12 = chronology4.eras();
        org.joda.time.DurationField durationField13 = chronology4.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField12", Math.signum(durationField11.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField11)));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfCentury((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime2.withLaterOffsetAtOverlap();
        java.lang.String[] strArray10 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean13 = strSet11.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList19);
        boolean boolean22 = strSet11.addAll((java.util.Collection<java.lang.String>) strList19);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getEra();
        org.joda.time.DateTime dateTime29 = localTime25.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = strSet11.equals((java.lang.Object) dateTime27);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        int int36 = dateTimeZone33.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 0, dateTimeZone33);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime27.toDateTime(dateTimeZone33);
        long long41 = dateTimeZone33.previousTransition((long) 4);
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        timeZone46.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone46);
        java.util.Locale locale51 = new java.util.Locale("2022-02-21T14:54:47.855Z");
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone46, locale51);
        java.lang.String str53 = locale43.getDisplayLanguage(locale51);
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.lang.String str56 = locale55.getDisplayName();
        java.lang.String str57 = locale55.getISO3Country();
        java.util.Locale.setDefault(category54, locale55);
        java.lang.String str59 = locale51.getDisplayName(locale55);
        java.lang.String str60 = dateTimeZone33.getName((long) 101, locale51);
        boolean boolean61 = dateTime5.equals((java.lang.Object) dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime27", (dateTime5.compareTo(dateTime27) == 0) == dateTime5.equals(dateTime27));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.plus((long) 53630);
        boolean boolean15 = instant8.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645455243000L);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.minus(readableDuration4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        java.lang.String str7 = dateTimeFieldType5.toString();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDurationAdded(readableDuration11, 7);
        org.joda.time.Chronology chronology14 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType5.getField(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DurationField durationField18 = chronology14.centuries();
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        int int21 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusYears((int) (byte) 0);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        int int30 = dateTimeZone27.getOffsetFromLocal((long) (short) -1);
        int int32 = dateTimeZone27.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime25.toMutableDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and mutableDateTime35", (dateTime23.compareTo(mutableDateTime35) == 0) == dateTime23.equals(mutableDateTime35));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getRangeDurationType();
        int int6 = instant0.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = instant0.toDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant0.minus(readableDuration8);
        long long10 = instant0.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant0", (dateTime7.compareTo(instant0) == 0) == dateTime7.equals(instant0));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.DateTime.Property property4 = dateTime1.millisOfDay();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        timeZone7.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone7);
        java.util.Locale locale12 = new java.util.Locale("2022-02-21T14:54:47.855Z");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone7, locale12);
        java.lang.String str14 = locale12.getDisplayLanguage();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime16.getFieldTypes();
        org.joda.time.Chronology chronology19 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField22 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.secondOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime27.getFieldTypes();
        org.joda.time.Chronology chronology30 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        boolean boolean36 = property35.isLeap();
        org.joda.time.LocalDateTime localDateTime37 = property35.withMinimumValue();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = property35.getAsText(locale38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale38);
        java.lang.String str41 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, locale38);
        java.lang.String str42 = locale12.getDisplayScript(locale38);
        int int43 = property4.getMaximumTextLength(locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar40", (calendar13.compareTo(calendar40) == 0) == calendar13.equals(calendar40));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.era();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.weekOfWeekyear();
        int int15 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int16 = localDateTime10.getEra();
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfDay(2);
        int int23 = property17.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime.Property property28 = dateTime26.secondOfMinute();
        java.lang.String str29 = property28.getAsString();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        int int31 = instant24.get(dateTimeField30);
        org.joda.time.Instant instant33 = instant24.minus((long) 53633152);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant24.minus(readableDuration34);
        org.joda.time.Instant instant37 = instant35.minus((-61779834276855L));
        long long38 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) instant37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime26", (instant24.compareTo(dateTime26) == 0) == instant24.equals(dateTime26));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant10 = instant0.plus((long) 53652018);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        long long10 = instant9.getMillis();
        org.joda.time.Instant instant13 = instant9.withDurationAdded((long) 1320, 558);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant9.minus(readableDuration14);
        org.joda.time.DateTime dateTime16 = instant15.toDateTimeISO();
        org.joda.time.Instant instant18 = instant15.withMillis((long) 86399999);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant15", (dateTime6.compareTo(instant15) == 0) == dateTime6.equals(instant15));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.Instant instant29 = instant26.minus(922L);
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime.Property property30 = dateTime28.secondOfMinute();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear((int) (byte) 100);
        int int34 = localDate31.getDayOfWeek();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        int int39 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime40 = localDate31.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime28.toMutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = instant26.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime44 = dateTime42.plusWeeks(53707354);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        org.joda.time.LocalDate.Property property4 = localDate2.yearOfCentury();
        org.joda.time.LocalDate.Property property5 = localDate2.centuryOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getEra();
        org.joda.time.DateTime dateTime12 = localTime8.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalTime localTime14 = localTime8.plusMillis((-1));
        org.joda.time.LocalTime localTime16 = localTime14.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime19 = localTime14.withPeriodAdded(readablePeriod17, (int) '4');
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.LocalTime localTime21 = property20.withMaximumValue();
        org.joda.time.tz.NameProvider nameProvider23 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        timeZone27.setID("+00:00");
        timeZone27.setRawOffset(2);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        timeZone34.setID("+00:00");
        boolean boolean37 = timeZone27.hasSameRules(timeZone34);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone27, locale38);
        java.lang.String str40 = locale38.getLanguage();
        java.lang.String str43 = nameProvider23.getName(locale38, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale45.getISO3Country();
        java.util.Locale.setDefault(category44, locale45);
        java.util.Locale locale49 = java.util.Locale.getDefault(category44);
        java.lang.String str50 = locale38.getDisplayLanguage(locale49);
        org.joda.time.LocalTime localTime51 = property20.setCopy("45", locale38);
        int int52 = property5.getMaximumTextLength(locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar39", (calendar0.compareTo(calendar39) == 0) == calendar0.equals(calendar39));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDurationAdded(readableDuration3, 7);
        int int6 = localDateTime1.getDayOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.year();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.secondOfMinute();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.DateTime dateTime14 = property11.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime15 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property16 = dateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime18.getFieldTypes();
        org.joda.time.Chronology chronology21 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.months();
        long long26 = chronology21.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime15.withChronology(chronology21);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int35 = dateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime30.isSupported(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime30.plusYears((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean40 = localDateTime30.isSupported(dateTimeFieldType39);
        int int41 = dateTime15.get(dateTimeFieldType39);
        boolean boolean42 = localDateTime1.isSupported(dateTimeFieldType39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime28", (dateTime15.compareTo(dateTime28) == 0) == dateTime15.equals(dateTime28));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.Instant instant29 = instant26.minus(922L);
        org.joda.time.Instant instant31 = instant26.withMillis((long) 57);
        org.joda.time.Instant instant33 = instant31.minus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.Instant instant29 = instant26.minus(922L);
        org.joda.time.Instant instant31 = instant26.withMillis((long) 57);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.withCenturyOfEra(2);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.minuteOfDay();
        java.lang.String str39 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekyear();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(1645455299000L, chronology37);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) instant31, chronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.plus(readableDuration13);
        int int15 = dateTime14.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime21.getFieldTypes();
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.dayOfWeek();
        org.joda.time.DurationField durationField30 = chronology24.minutes();
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusMillis((int) (byte) 10);
        int[] intArray38 = chronology24.get((org.joda.time.ReadablePartial) localDateTime33, (long) 54);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime14.toMutableDateTime(chronology24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.DateTime dateTime7 = dateTime1.minusMinutes((-1));
        org.joda.time.DateTime dateTime9 = dateTime1.withYear(366);
        org.joda.time.DateTime.Property property10 = dateTime1.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime13.getFieldTypes();
        org.joda.time.Chronology chronology16 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.dayOfWeek();
        org.joda.time.DurationField durationField22 = chronology16.minutes();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology16);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.now(chronology16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime23", (dateTime1.compareTo(dateTime23) == 0) == dateTime1.equals(dateTime23));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        org.joda.time.DateTime dateTime13 = dateTime7.minusMinutes((-1));
        long long14 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = dateTime13.withDurationAdded((long) 53627827, 21);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(2);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology23.add(readablePeriod24, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.minuteOfHour();
        org.joda.time.DurationField durationField29 = durationFieldType18.getField(chronology23);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology32 = chronology23.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime13.toDateTime(chronology32);
        org.joda.time.DurationField durationField34 = chronology32.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime33", (dateTime13.compareTo(dateTime33) == 0) == dateTime13.equals(dateTime33));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant0.minus(readableDuration10);
        long long12 = instant11.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime2", (instant11.compareTo(dateTime2) == 0) == instant11.equals(dateTime2));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant10 = instant0.plus((long) 53652018);
        org.joda.time.MutableDateTime mutableDateTime11 = instant0.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant0.withDurationAdded(readableDuration12, 147210);
        long long15 = instant14.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime2", (instant14.compareTo(dateTime2) == 0) == instant14.equals(dateTime2));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(53654002);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDateTime13.toDateTime(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra(12);
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(localTime26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        java.lang.String str32 = dateTimeZone29.getShortName((long) 5);
        boolean boolean33 = localDate25.equals((java.lang.Object) str32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int37 = dateTime35.get(dateTimeFieldType36);
        boolean boolean38 = localDate25.isSupported(dateTimeFieldType36);
        org.joda.time.LocalDate.Property property39 = localDate25.dayOfWeek();
        org.joda.time.LocalDate localDate40 = property39.roundHalfCeilingCopy();
        boolean boolean41 = dateTimeZone18.equals((java.lang.Object) localDate40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Chronology chronology12 = instant9.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology5);
        org.joda.time.DurationField durationField10 = chronology5.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField8, and durationField9", !(durationField10.compareTo(durationField8) == 0) || (Math.signum(durationField10.compareTo(durationField9)) == Math.signum(durationField8.compareTo(durationField9))));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 5);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded(readableDuration7, 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths(575);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime dateTime18 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant19 = dateTime16.toInstant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        boolean boolean21 = dateTime11.isEqual((org.joda.time.ReadableInstant) mutableDateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant19", (dateTime6.compareTo(instant19) == 0) == dateTime6.equals(instant19));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property14 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(53677);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(2);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology24.add(readablePeriod25, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.minuteOfHour();
        org.joda.time.DurationField durationField30 = durationFieldType19.getField(chronology24);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology33 = chronology24.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(737L, chronology33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime15.toMutableDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and mutableDateTime35", (dateTime15.compareTo(mutableDateTime35) == 0) == dateTime15.equals(mutableDateTime35));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.Instant instant29 = instant26.minus(922L);
        org.joda.time.Instant instant31 = instant26.withMillis((long) 57);
        org.joda.time.DateTime dateTime32 = instant31.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        int int21 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusYears((int) (byte) 0);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        int int30 = dateTimeZone27.getOffsetFromLocal((long) (short) -1);
        int int32 = dateTimeZone27.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime25.toMutableDateTime(chronology34);
        org.joda.time.DurationField durationField36 = chronology34.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and mutableDateTime35", (dateTime23.compareTo(mutableDateTime35) == 0) == dateTime23.equals(mutableDateTime35));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        int int7 = localDate4.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 53695160);
        long long13 = instant9.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DurationFieldType durationFieldType10 = durationField9.getType();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime12.getFieldTypes();
        org.joda.time.Chronology chronology15 = localDateTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.months();
        long long20 = chronology15.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DurationField durationField22 = chronology15.days();
        boolean boolean23 = durationFieldType10.isSupported(chronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime21", (dateTime4.compareTo(dateTime21) == 0) == dateTime4.equals(dateTime21));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTime dateTime5 = instant3.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(605139);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minus(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = localDateTime15.getFieldType(0);
        int int18 = dateTime5.get(dateTimeFieldType17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        org.joda.time.Chronology chronology6 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.months();
        boolean boolean8 = durationFieldType1.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withPeriodAdded(readablePeriod14, 53625);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime20 = property17.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfSecond(11);
        int[] intArray24 = chronology6.get((org.joda.time.ReadablePartial) localDateTime22, (long) 53642476);
        org.joda.time.DurationField durationField25 = chronology6.weeks();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology6);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str31 = dateTimeZone28.getShortName((long) 32772);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 128, dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime32", (dateTime26.compareTo(dateTime32) == 0) == dateTime26.equals(dateTime32));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis(53625);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfEra(53634);
        int int8 = localDateTime5.getDayOfWeek();
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime1.withChronology(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime21 = localTime15.plusMillis((-1));
        org.joda.time.LocalTime localTime23 = localTime21.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime26 = localTime21.withPeriodAdded(readablePeriod24, (int) '4');
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        int int30 = dateTime29.getEra();
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        java.lang.String str32 = property31.getAsString();
        org.joda.time.DateTime dateTime33 = property31.roundCeilingCopy();
        int int34 = property27.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalTime localTime35 = property27.withMinimumValue();
        org.joda.time.LocalTime localTime37 = property27.addCopy((long) 53626948);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int41 = dateTime39.get(dateTimeFieldType40);
        org.joda.time.LocalTime localTime43 = localTime37.withField(dateTimeFieldType40, 3);
        org.joda.time.LocalTime localTime45 = localTime43.minusHours(53646261);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getRangeDurationType();
        java.lang.String str48 = dateTimeFieldType46.toString();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType46.getRangeDurationType();
        boolean boolean50 = localTime43.isSupported(durationFieldType49);
        org.joda.time.DateTime dateTime52 = dateTime11.withFieldAdded(durationFieldType49, 53628014);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime12", (dateTime1.compareTo(dateTime12) == 0) == dateTime1.equals(dateTime12));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime5 = instant3.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(2922789);
        org.joda.time.Instant instant10 = dateTime7.toInstant();
        org.joda.time.DateTime.Property property11 = dateTime7.weekOfWeekyear();
        java.lang.String str12 = property11.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant10", (dateTime7.compareTo(instant10) == 0) == dateTime7.equals(instant10));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(53654002);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDateTime13.toDateTime(dateTimeZone18);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale locale23 = builder22.build();
        java.util.Locale.Builder builder25 = builder22.setScript("");
        java.util.Locale locale26 = builder22.build();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withPeriodAdded(readablePeriod31, 53625);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.year();
        org.joda.time.LocalDateTime localDateTime36 = property34.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime37 = property34.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = property34.roundHalfFloorCopy();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        int int41 = dateTime40.getEra();
        org.joda.time.DateTime.Property property42 = dateTime40.secondOfMinute();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        org.joda.time.DateTime dateTime45 = property42.setCopy("46", locale44);
        int int46 = property34.getMaximumShortTextLength(locale44);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale44);
        java.util.Locale.Builder builder48 = builder22.setLocale(locale44);
        java.lang.String str49 = dateTimeZone18.getShortName((long) 10799999, locale44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTime dateTime5 = instant3.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(53701200);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property9.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField13 = localTime11.getField(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        java.lang.String str16 = dateTimeFieldType14.toString();
        int int17 = localTime11.get(dateTimeFieldType14);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant21 = instant18.withDurationAdded(readableDuration19, 1970);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime dateTime23 = instant21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = localTime11.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant21", (dateTime4.compareTo(instant21) == 0) == dateTime4.equals(instant21));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.Instant instant6 = instant3.plus(169263668876125309L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DateTimeField dateTimeField24 = chronology5.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology5.halfdayOfDay();
        org.joda.time.DurationField durationField26 = chronology5.eras();
        org.joda.time.DurationField durationField27 = chronology5.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField26", Math.signum(durationField6.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField6)));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getDisplayName();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTimeISO();
        int int12 = dateTime8.getMillisOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getEra();
        int int16 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusYears(12);
        boolean boolean19 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.plusMillis(14);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalTime localTime34 = localTime28.plusMillis((-1));
        org.joda.time.LocalTime localTime36 = localTime34.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalTime localTime39 = localTime34.withPeriodAdded(readablePeriod37, (int) '4');
        org.joda.time.LocalTime.Property property40 = localTime39.millisOfSecond();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getEra();
        org.joda.time.DateTime.Property property44 = dateTime42.secondOfMinute();
        java.lang.String str45 = property44.getAsString();
        org.joda.time.DateTime dateTime46 = property44.roundCeilingCopy();
        int int47 = property40.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeField dateTimeField48 = property40.getField();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        int int54 = dateTimeZone51.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 0, dateTimeZone51);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime(dateTimeZone51);
        org.joda.time.LocalTime localTime58 = localTime56.minusSeconds((int) (byte) 1);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        timeZone61.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone61);
        int int66 = timeZone61.getOffset((long) 53626);
        java.util.Locale locale68 = new java.util.Locale("hi!");
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone61, locale68);
        java.lang.String str70 = dateTimeField48.getAsText((org.joda.time.ReadablePartial) localTime58, locale68);
        java.lang.String str71 = dateTime21.toString("37", locale68);
        java.lang.String str72 = locale68.getDisplayLanguage();
        java.lang.String str73 = locale5.getDisplayVariant(locale68);
        java.lang.String str74 = locale5.toLanguageTag();
        java.lang.String str75 = locale5.getDisplayScript();
        java.lang.String str76 = dateTimeZone1.getName((long) 53797383, locale5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime8", (dateTime2.compareTo(dateTime8) == 0) == dateTime2.equals(dateTime8));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        int int9 = dateTime7.compareTo((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant10 = instant8.toInstant();
        org.joda.time.Instant instant13 = instant8.withDurationAdded((long) 53729, 53687892);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime6.getFieldTypes();
        org.joda.time.Chronology chronology9 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DurationField durationField12 = chronology9.millis();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) instant0, chronology9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(8);
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime1.plusWeeks(53693876);
        boolean boolean10 = dateTime8.equals((java.lang.Object) "AD");
        org.joda.time.DateTime dateTime12 = dateTime8.minusMillis(357);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTimeISO();
        int int18 = dateTime14.getMillisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getEra();
        int int22 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears(12);
        boolean boolean25 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readableDuration26);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        java.lang.String str31 = dateTimeFieldType29.toString();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.hourOfDay();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDurationAdded(readableDuration35, 7);
        org.joda.time.Chronology chronology38 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType29.getField(chronology38);
        org.joda.time.DurationField durationField40 = chronology38.seconds();
        org.joda.time.DateTime dateTime41 = dateTime27.withChronology(chronology38);
        boolean boolean42 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime41", (dateTime27.compareTo(dateTime41) == 0) == dateTime27.equals(dateTime41));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setRawOffset(0);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean25 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime15);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = dateTime15.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        timeZone35.setID("+00:00");
        timeZone35.setRawOffset(2);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        timeZone42.setID("+00:00");
        boolean boolean45 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone35, locale46);
        java.lang.String str48 = locale46.getLanguage();
        java.lang.String str51 = nameProvider31.getName(locale46, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.lang.String str54 = locale53.getISO3Country();
        java.util.Locale locale55 = locale53.stripExtensions();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str58 = locale53.getUnicodeLocaleType("57");
        java.lang.String str61 = nameProvider31.getShortName(locale53, "49", "GMT");
        java.lang.String str62 = dateTimeZone27.getShortName((long) 32770, locale53);
        java.lang.String str63 = locale5.getDisplayCountry(locale53);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.util.TimeZone timeZone65 = calendar64.getTimeZone();
        java.util.Calendar.Builder builder66 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder71 = builder66.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar calendar72 = builder71.build();
        java.util.Calendar calendar73 = builder71.build();
        java.util.Calendar.Builder builder77 = builder71.setDate(605139, 14, 20);
        java.util.Calendar.Builder builder79 = builder77.setLenient(true);
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        java.util.TimeZone timeZone82 = dateTimeZone81.toTimeZone();
        timeZone82.setID("+00:00");
        timeZone82.setRawOffset(2);
        java.util.TimeZone timeZone87 = null;
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forTimeZone(timeZone87);
        java.util.TimeZone timeZone89 = dateTimeZone88.toTimeZone();
        timeZone89.setID("+00:00");
        boolean boolean92 = timeZone82.hasSameRules(timeZone89);
        java.util.Locale locale93 = java.util.Locale.CHINESE;
        java.util.Calendar calendar94 = java.util.Calendar.getInstance(timeZone82, locale93);
        java.util.TimeZone.setDefault(timeZone82);
        java.util.Calendar.Builder builder96 = builder77.setTimeZone(timeZone82);
        int int97 = timeZone82.getRawOffset();
        java.time.ZoneId zoneId98 = timeZone82.toZoneId();
        boolean boolean99 = timeZone65.hasSameRules(timeZone82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar64", (calendar47.compareTo(calendar64) == 0) == calendar47.equals(calendar64));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.DateTime dateTime9 = instant0.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant0.minus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, 53811033);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime2", (instant14.compareTo(dateTime2) == 0) == instant14.equals(dateTime2));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        int int13 = dateTime5.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        long long10 = instant9.getMillis();
        org.joda.time.Instant instant13 = instant9.withDurationAdded((long) 1320, 558);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant9.minus(readableDuration14);
        org.joda.time.Instant instant18 = instant15.withDurationAdded(261L, 53671);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant15", (dateTime6.compareTo(instant15) == 0) == dateTime6.equals(instant15));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        long long11 = dateTimeField9.roundCeiling((long) 53760410);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime14.getFieldTypes();
        org.joda.time.Chronology chronology17 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.months();
        boolean boolean19 = durationFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withPeriodAdded(readablePeriod25, 53625);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.year();
        org.joda.time.LocalDateTime localDateTime30 = property28.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfSecond(11);
        int[] intArray35 = chronology17.get((org.joda.time.ReadablePartial) localDateTime33, (long) 53642476);
        org.joda.time.DateTimeField dateTimeField36 = chronology17.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusMonths(605139);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minus(readableDuration45);
        int int47 = dateTimeField36.getMinimumValue((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getDurationType();
        java.lang.String str50 = dateTimeFieldType48.toString();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.hourOfDay();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDurationAdded(readableDuration54, 7);
        org.joda.time.Chronology chronology57 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType48.getField(chronology57);
        org.joda.time.DurationField durationField59 = chronology57.seconds();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTimeField dateTimeField61 = chronology57.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.millisOfDay();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.withPeriodAdded(readablePeriod66, 53625);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.year();
        org.joda.time.LocalDateTime localDateTime71 = property69.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime72 = property69.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime73 = property69.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.UTC;
        boolean boolean76 = dateTimeZone74.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray81 = localDateTime79.getFieldTypes();
        org.joda.time.Chronology chronology82 = localDateTime79.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.weekOfWeekyear();
        org.joda.time.DurationField durationField85 = chronology82.days();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField87 = chronology82.dayOfWeek();
        org.joda.time.DurationField durationField88 = chronology82.minutes();
        org.joda.time.DateTime dateTime89 = dateTime77.toDateTime(chronology82);
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property92 = localDateTime91.hourOfDay();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime91.plusMillis((int) (byte) 10);
        int[] intArray96 = chronology82.get((org.joda.time.ReadablePartial) localDateTime91, (long) 54);
        chronology57.validate((org.joda.time.ReadablePartial) localDateTime73, intArray96);
        int int98 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime46, intArray96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime60", (dateTime1.compareTo(dateTime60) == 0) == dateTime1.equals(dateTime60));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        org.joda.time.DateTime dateTime13 = dateTime7.minusMinutes((-1));
        long long14 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = dateTime13.withDurationAdded((long) 53627827, 21);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(2);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology23.add(readablePeriod24, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.minuteOfHour();
        org.joda.time.DurationField durationField29 = durationFieldType18.getField(chronology23);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology32 = chronology23.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime13.toDateTime(chronology32);
        int int34 = dateTime33.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        boolean boolean37 = dateTime33.isSupported(dateTimeFieldType35);
        org.joda.time.DateTime.Property property38 = dateTime33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime33", (dateTime13.compareTo(dateTime33) == 0) == dateTime13.equals(dateTime33));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getRangeDurationType();
        int int6 = instant0.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = instant0.toDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant0.minus(readableDuration8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readableDuration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded(readableDuration16, 53626975);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.weekOfWeekyear();
        java.lang.Object obj23 = null;
        boolean boolean24 = localDateTime20.equals(obj23);
        int int25 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.withYearOfEra(53640590);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.withMillisOfDay(32769);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withPeriodAdded(readablePeriod34, 53625);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.year();
        java.lang.String str38 = property37.getAsShortText();
        org.joda.time.LocalDateTime localDateTime40 = property37.setCopy(99);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusDays(53642927);
        int int43 = localDateTime40.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.weekOfWeekyear();
        java.lang.Object obj48 = null;
        boolean boolean49 = localDateTime45.equals(obj48);
        int int50 = localDateTime45.getMillisOfSecond();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        boolean boolean52 = calendar51.isWeekDateSupported();
        int int54 = calendar51.getActualMinimum(15);
        calendar51.setLenient(true);
        boolean boolean57 = localDateTime45.equals((java.lang.Object) calendar51);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int59 = localDateTime45.get(dateTimeFieldType58);
        int int60 = localDateTime40.indexOf(dateTimeFieldType58);
        org.joda.time.LocalDateTime.Property property61 = localDateTime29.property(dateTimeFieldType58);
        org.joda.time.DateTime.Property property62 = dateTime15.property(dateTimeFieldType58);
        boolean boolean63 = instant9.isSupported(dateTimeFieldType58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime7", (instant9.compareTo(dateTime7) == 0) == instant9.equals(dateTime7));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.toMutableDateTime();
        int int6 = mutableDateTime5.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DurationField durationField11 = chronology4.millis();
        org.joda.time.DurationField durationField12 = chronology4.eras();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime14.getFieldTypes();
        org.joda.time.Chronology chronology17 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.months();
        long long22 = chronology17.add((-45001L), 53641L, 53652018);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime24.getFieldTypes();
        org.joda.time.Chronology chronology27 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology27.getZone();
        org.joda.time.Chronology chronology31 = chronology17.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField32 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology17.monthOfYear();
        org.joda.time.DurationField durationField34 = dateTimeField33.getRangeDurationField();
        long long37 = durationField34.add(54610L, 53692079);
        int int38 = durationField12.compareTo(durationField34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField11, and durationField18", !(durationField12.compareTo(durationField11) == 0) || (Math.signum(durationField12.compareTo(durationField18)) == Math.signum(durationField11.compareTo(durationField18))));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime1.withCenturyOfEra((int) ' ');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.minus(readableDuration6);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        int int13 = dateTimeZone10.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 0, dateTimeZone10);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = dateTimeZone10.getName(0L, locale16);
        org.joda.time.DateTime dateTime18 = dateTime1.withZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone19);
        java.util.TimeZone timeZone23 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime24 = dateTime1.withZone(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        boolean boolean19 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property20 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.withCenturyOfEra(4);
        org.joda.time.Instant instant23 = dateTime18.toInstant();
        org.joda.time.DateTime.Property property24 = dateTime18.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant23", (dateTime18.compareTo(instant23) == 0) == dateTime18.equals(instant23));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        int int7 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withZone(dateTimeZone9);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear((int) (byte) 100);
        int int14 = localDate11.getDayOfWeek();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime20 = localDate11.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.LocalDate localDate22 = localDate11.plusDays((int) '4');
        org.joda.time.Chronology chronology23 = localDate11.getChronology();
        org.joda.time.DateTime dateTime24 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology25 = localDate11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime10.toMutableDateTime(chronology25);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime26", (dateTime6.compareTo(mutableDateTime26) == 0) == dateTime6.equals(mutableDateTime26));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        java.lang.Object obj4 = null;
        boolean boolean5 = localDateTime1.equals(obj4);
        int int6 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withPeriodAdded(readablePeriod12, 53625);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.year();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.LocalDateTime localDateTime18 = property15.setCopy(99);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays(53642927);
        int int21 = localDateTime18.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.weekOfWeekyear();
        java.lang.Object obj26 = null;
        boolean boolean27 = localDateTime23.equals(obj26);
        int int28 = localDateTime23.getMillisOfSecond();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        boolean boolean30 = calendar29.isWeekDateSupported();
        int int32 = calendar29.getActualMinimum(15);
        calendar29.setLenient(true);
        boolean boolean35 = localDateTime23.equals((java.lang.Object) calendar29);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int37 = localDateTime23.get(dateTimeFieldType36);
        int int38 = localDateTime18.indexOf(dateTimeFieldType36);
        org.joda.time.LocalDateTime.Property property39 = localDateTime1.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.withCenturyOfEra(2);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = chronology44.add(readablePeriod45, (long) 53633152, 99);
        org.joda.time.DurationField durationField49 = chronology44.minutes();
        org.joda.time.DurationField durationField50 = chronology44.eras();
        boolean boolean51 = dateTimeFieldType36.isSupported(chronology44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField49 and durationField50", Math.signum(durationField49.compareTo(durationField50)) == -Math.signum(durationField50.compareTo(durationField49)));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        int int9 = mutableDateTime8.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 5);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime8 = dateTime6.withYear(53650);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime dateTime15 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear(32772);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        int int20 = dateTime18.getDayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int24 = dateTime22.get(dateTimeFieldType23);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime22.toMutableDateTimeISO();
        int int26 = dateTime22.getMillisOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getEra();
        int int30 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.minusYears(12);
        boolean boolean33 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime32.withWeekyear((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTimeISO();
        boolean boolean37 = dateTime18.equals((java.lang.Object) mutableDateTime36);
        boolean boolean38 = dateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getEra();
        org.joda.time.DateTime dateTime45 = localTime41.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalTime localTime47 = localTime41.plusMillis((-1));
        org.joda.time.LocalTime localTime49 = localTime47.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalTime localTime52 = localTime47.withPeriodAdded(readablePeriod50, (int) '4');
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfSecond();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        int int56 = dateTime55.getEra();
        org.joda.time.DateTime.Property property57 = dateTime55.secondOfMinute();
        java.lang.String str58 = property57.getAsString();
        org.joda.time.DateTime dateTime59 = property57.roundCeilingCopy();
        int int60 = property53.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime62 = dateTime59.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusYears((int) (byte) 0);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.lang.String str67 = dateTimeZone66.toString();
        int int69 = dateTimeZone66.getOffsetFromLocal((long) (short) -1);
        int int71 = dateTimeZone66.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime(dateTimeZone66);
        org.joda.time.Chronology chronology73 = localTime72.getChronology();
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime64.toMutableDateTime(chronology73);
        org.joda.time.DateTime dateTime75 = dateTime8.toDateTime(chronology73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime62 and mutableDateTime74", (dateTime62.compareTo(mutableDateTime74) == 0) == dateTime62.equals(mutableDateTime74));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology13);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime7.toGregorianCalendar();
        org.joda.time.tz.Provider provider22 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone24 = provider22.getZone("Etc/UTC");
        long long27 = dateTimeZone24.convertLocalToUTC(0L, true);
        boolean boolean28 = gregorianCalendar21.equals((java.lang.Object) true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        long long10 = instant9.getMillis();
        org.joda.time.Instant instant13 = instant9.withDurationAdded((long) 1320, 558);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant9.minus(readableDuration14);
        org.joda.time.DateTime dateTime16 = instant15.toDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours((-10976054));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getEra();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfMinute();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int11 = dateTimeField9.get((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField9.getType();
        int int13 = dateTimeField9.getMaximumValue();
        long long15 = dateTimeField9.roundHalfFloor((long) (-53637188));
        long long17 = dateTimeField9.roundHalfFloor((long) (short) 0);
        boolean boolean18 = dateTimeField9.isLenient();
        int int19 = instant3.get(dateTimeField9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime5", (instant0.compareTo(dateTime5) == 0) == instant0.equals(dateTime5));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DurationField durationField10 = chronology4.eras();
        org.joda.time.Chronology chronology11 = chronology4.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField10", Math.signum(durationField9.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField9)));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTimeISO();
        int int16 = dateTime12.getMillisOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusYears(12);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear((int) (byte) 100);
        int int27 = localDate24.getDayOfWeek();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        int int32 = dateTimeZone29.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime33 = localDate24.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime36 = dateTime12.minusDays(0);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfCentury(35);
        boolean boolean39 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime38.minus((long) (-53573));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        int int7 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withZone(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.joda.time.Instant instant14 = instant12.minus((long) 31);
        org.joda.time.Instant instant16 = instant14.withMillis((long) 53754183);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant12", (dateTime6.compareTo(instant12) == 0) == dateTime6.equals(instant12));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(53654002);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDateTime13.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime.Property property24 = dateTime22.secondOfMinute();
        java.lang.String str25 = property24.getAsString();
        org.joda.time.DateTime dateTime27 = property24.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime28 = property24.withMinimumValue();
        org.joda.time.DateTime dateTime30 = property24.addToCopy((long) 53647);
        boolean boolean31 = localDateTime13.equals((java.lang.Object) dateTime30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology13);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime7.toGregorianCalendar();
        java.util.TimeZone timeZone22 = gregorianCalendar21.getTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant9 = instant0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone10 = instant0.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant0", (dateTime2.compareTo(instant0) == 0) == dateTime2.equals(instant0));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        java.lang.String str7 = dateTimeFieldType5.toString();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDurationAdded(readableDuration11, 7);
        org.joda.time.Chronology chronology14 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType5.getField(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DurationField durationField18 = chronology14.centuries();
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime(chronology14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime.Property property24 = dateTime22.secondOfMinute();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear((int) (byte) 100);
        int int28 = localDate25.getDayOfWeek();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        int int33 = dateTimeZone30.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime34 = localDate25.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime22.toMutableDateTime(dateTimeZone30);
        int int37 = dateTimeZone30.getOffsetFromLocal((long) 53626975);
        java.lang.String str38 = dateTimeZone30.toString();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-61779834366119L), dateTimeZone30);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType40.getRangeDurationType();
        org.joda.time.DateTime.Property property43 = dateTime39.property(dateTimeFieldType40);
        org.joda.time.DateTime dateTime45 = dateTime4.withField(dateTimeFieldType40, 365);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime22", (instant0.compareTo(dateTime22) == 0) == instant0.equals(dateTime22));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate5 = localDate3.minusYears(53761880);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime.Property property9 = dateTime7.secondOfMinute();
        java.lang.String str10 = property9.getAsString();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        int int15 = dateTime13.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime13.minusYears(12);
        org.joda.time.DateTime dateTime19 = dateTime13.minusMinutes((-1));
        long long20 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime23 = dateTime19.withDurationAdded((long) 53627827, 21);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.withCenturyOfEra(2);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = chronology29.add(readablePeriod30, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.minuteOfHour();
        org.joda.time.DurationField durationField35 = durationFieldType24.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology38 = chronology29.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = dateTime19.toDateTime(chronology38);
        int int40 = dateTime39.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getRangeDurationType();
        boolean boolean43 = dateTime39.isSupported(dateTimeFieldType41);
        org.joda.time.LocalDate.Property property44 = localDate3.property(dateTimeFieldType41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime39", (dateTime19.compareTo(dateTime39) == 0) == dateTime19.equals(dateTime39));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645455243000L);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        int int4 = dateTime3.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 53634900);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName((long) 32772);
        long long9 = dateTimeZone3.adjustOffset((long) (byte) 10, true);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone3);
        org.joda.time.DateTime dateTime11 = localDate1.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTime dateTime13 = dateTime11.plusWeeks(605139);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        int int21 = instant14.get(dateTimeField20);
        org.joda.time.Instant instant23 = instant14.minus((long) 53633152);
        org.joda.time.Instant instant25 = instant14.minus((long) 21);
        long long26 = instant14.getMillis();
        int int27 = dateTime13.compareTo((org.joda.time.ReadableInstant) instant14);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime13.minus(readablePeriod28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime16", (instant14.compareTo(dateTime16) == 0) == instant14.equals(dateTime16));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology13);
        org.joda.time.DateTime dateTime22 = dateTime7.withMinuteOfHour(4);
        org.joda.time.DateTime dateTime23 = dateTime7.toDateTimeISO();
        org.joda.time.Chronology chronology24 = dateTime7.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime7", (dateTime20.compareTo(dateTime7) == 0) == dateTime20.equals(dateTime7));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTime dateTime5 = instant3.toDateTimeISO();
        long long6 = dateTime5.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTime();
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime.Property property8 = dateTime6.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setRawOffset(0);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean25 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime15);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = dateTime15.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        timeZone35.setID("+00:00");
        timeZone35.setRawOffset(2);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        timeZone42.setID("+00:00");
        boolean boolean45 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone35, locale46);
        java.lang.String str48 = locale46.getLanguage();
        java.lang.String str51 = nameProvider31.getName(locale46, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.lang.String str54 = locale53.getISO3Country();
        java.util.Locale locale55 = locale53.stripExtensions();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str58 = locale53.getUnicodeLocaleType("57");
        java.lang.String str61 = nameProvider31.getShortName(locale53, "49", "GMT");
        java.lang.String str62 = dateTimeZone27.getShortName((long) 32770, locale53);
        java.lang.String str63 = locale5.getDisplayCountry(locale53);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.util.TimeZone timeZone65 = calendar64.getTimeZone();
        java.lang.Object obj66 = timeZone65.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar64", (calendar47.compareTo(calendar64) == 0) == calendar47.equals(calendar64));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DurationField durationField11 = chronology4.millis();
        org.joda.time.DurationField durationField12 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology4.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField12", Math.signum(durationField11.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField11)));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.plusWeeks(19);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays(53663032);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        java.lang.String str13 = dateTimeFieldType11.toString();
        boolean boolean14 = dateTime6.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime dateTime16 = dateTime6.plusHours(53748);
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant17.withDurationAdded(readableDuration18, 1970);
        org.joda.time.MutableDateTime mutableDateTime21 = instant17.toMutableDateTime();
        boolean boolean22 = dateTime16.isBefore((org.joda.time.ReadableInstant) mutableDateTime21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant17", (dateTime4.compareTo(instant17) == 0) == dateTime4.equals(instant17));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDate2.getFieldTypes();
        org.joda.time.LocalDate localDate5 = localDate2.plusYears(14);
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime.Property property10 = dateTime8.secondOfMinute();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        int int13 = instant6.get(dateTimeField12);
        org.joda.time.Chronology chronology14 = instant6.getChronology();
        org.joda.time.DateTime dateTime15 = localDate5.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        int int19 = dateTime17.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.plus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime17.withYearOfEra(53632);
        boolean boolean24 = instant6.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableDateTime mutableDateTime25 = instant6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime25.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime8", (instant6.compareTo(dateTime8) == 0) == instant6.equals(dateTime8));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.setLenient(true);
        int int6 = calendar0.getWeeksInWeekYear();
        int int7 = calendar0.getWeekYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime18.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        boolean boolean23 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean24 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = dateTime14.withZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        int int30 = dateTime29.getEra();
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) ' ');
        boolean boolean34 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime29);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        int int40 = dateTimeZone37.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 0, dateTimeZone37);
        int int42 = localTime41.size();
        org.joda.time.Chronology chronology43 = localTime41.getChronology();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime14, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getEra();
        org.joda.time.DateTime.Property property48 = dateTime46.secondOfMinute();
        java.lang.String str49 = property48.getAsString();
        org.joda.time.DateTimeField dateTimeField50 = property48.getField();
        long long52 = dateTimeField50.remainder((long) 53650);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        int int59 = dateTime58.getEra();
        org.joda.time.DateTime dateTime60 = localTime56.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalTime localTime62 = localTime56.plusMillis((-1));
        org.joda.time.LocalTime.Property property63 = localTime62.millisOfSecond();
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("Fri Feb 08 23:01:00 GMT+00:00 1901");
        int int66 = property63.getMaximumShortTextLength(locale65);
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("46");
        java.lang.String str69 = locale65.getDisplayName(locale68);
        java.lang.String str70 = dateTimeField50.getAsShortText((-2174086740000L), locale65);
        int int71 = dateTime44.get(dateTimeField50);
        boolean boolean72 = calendar0.before((java.lang.Object) dateTimeField50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime44", (dateTime9.compareTo(dateTime44) == 0) == dateTime9.equals(dateTime44));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone2);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        int int13 = dateTimeZone10.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone10);
        int int15 = localDate14.size();
        int int16 = localDate14.getWeekOfWeekyear();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter8.withZone(dateTimeZone18);
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        timeZone26.setID("+00:00");
        timeZone26.setRawOffset(2);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        timeZone33.setID("+00:00");
        boolean boolean36 = timeZone26.hasSameRules(timeZone33);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone26, locale37);
        java.lang.String str39 = locale37.getLanguage();
        java.lang.String str42 = nameProvider22.getName(locale37, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale44 = new java.util.Locale("hi!");
        java.lang.String str45 = locale44.getISO3Country();
        java.util.Locale locale46 = locale44.stripExtensions();
        java.lang.String str47 = locale44.getScript();
        java.lang.String str49 = locale44.getUnicodeLocaleType("57");
        java.lang.String str52 = nameProvider22.getShortName(locale44, "49", "GMT");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter21.withLocale(locale44);
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale54.getDisplayName();
        java.util.Locale locale57 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str58 = locale54.getDisplayLanguage(locale57);
        java.lang.String str59 = locale44.getDisplayScript(locale57);
        java.util.Locale locale60 = locale44.stripExtensions();
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.lang.String str62 = locale61.toLanguageTag();
        java.lang.String str63 = locale44.getDisplayLanguage(locale61);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone2, locale61);
        java.lang.String str65 = locale61.getDisplayScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar64", (calendar38.compareTo(calendar64) == 0) == calendar38.equals(calendar64));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getEra();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime localTime9 = localTime3.plusMillis((-1));
        org.joda.time.LocalTime localTime11 = localTime9.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime14 = localTime9.withPeriodAdded(readablePeriod12, (int) '4');
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime.Property property19 = dateTime17.secondOfMinute();
        java.lang.String str20 = property19.getAsString();
        org.joda.time.DateTime dateTime21 = property19.roundCeilingCopy();
        int int22 = property15.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime21.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minusYears((int) (byte) 0);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        int int31 = dateTimeZone28.getOffsetFromLocal((long) (short) -1);
        int int33 = dateTimeZone28.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(dateTimeZone28);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime26.toMutableDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(1645455270185L, chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and mutableDateTime36", (dateTime24.compareTo(mutableDateTime36) == 0) == dateTime24.equals(mutableDateTime36));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withCenturyOfEra(2);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology6.add(readablePeriod7, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField12 = durationFieldType1.getField(chronology6);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology15 = chronology6.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(196L, chronology6);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(53726374);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(53753);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime22", (dateTime16.compareTo(dateTime22) == 0) == dateTime16.equals(dateTime22));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("-51606-02-21T14:55:03.940Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        java.lang.String str7 = dateTimeFieldType5.toString();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDurationAdded(readableDuration11, 7);
        org.joda.time.Chronology chronology14 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType5.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.year();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 34, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime3.withChronology(chronology14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant10 = instant0.minus(1000L);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant10.withDurationAdded(readableDuration11, 417);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getRangeDurationType();
        int int6 = instant0.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = instant0.toDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant0.minus(readableDuration8);
        org.joda.time.MutableDateTime mutableDateTime10 = instant0.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant0", (dateTime7.compareTo(instant0) == 0) == dateTime7.equals(instant0));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant0.minus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.plus(readableDuration12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime2", (instant13.compareTo(dateTime2) == 0) == instant13.equals(dateTime2));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology13);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withPeriodAdded(readablePeriod21, 53683509);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear((int) (byte) 100);
        int int27 = localDate24.getDayOfWeek();
        org.joda.time.LocalDate.Property property28 = localDate24.dayOfWeek();
        org.joda.time.LocalDate localDate29 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate31 = localDate29.plusDays((int) '#');
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        java.lang.String str35 = dateTimeZone33.getID();
        org.joda.time.DateTime dateTime36 = localDate29.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = dateTime20.toDateTime(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.millisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider15 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone17 = provider15.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime11.toMutableDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusMillis((int) (byte) 10);
        boolean boolean24 = dateTimeZone17.isLocalDateTimeGap(localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMinuteOfHour(52);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(53654002);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDateTime23.toDateTime(dateTimeZone28);
        int[] intArray32 = chronology5.get((org.joda.time.ReadablePartial) localDateTime23, 147944138971154000L);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime29", (dateTime11.compareTo(dateTime29) == 0) == dateTime11.equals(dateTime29));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime1.withCenturyOfEra((int) ' ');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.minus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime7.withYearOfEra(53634);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        int int16 = dateTimeZone13.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(dateTimeZone13);
        boolean boolean18 = dateTimeZone13.isFixed();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone13.getShortName((long) 54, locale20);
        org.joda.time.DateTime dateTime22 = dateTime7.withZoneRetainFields(dateTimeZone13);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) 53642);
        org.joda.time.DateMidnight dateMidnight31 = localDate27.toDateMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = dateTime32.minus((long) 53630);
        int int35 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime32", (dateTime1.compareTo(dateTime32) == 0) == dateTime1.equals(dateTime32));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getDurationType();
        int int11 = dateTime5.get(dateTimeFieldType8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime7", (dateTime3.compareTo(dateTime7) == 0) == dateTime3.equals(dateTime7));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.Instant instant4 = instant0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant0.toMutableDateTime();
        org.joda.time.DateTime dateTime6 = instant0.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime5", (instant0.compareTo(mutableDateTime5) == 0) == instant0.equals(mutableDateTime5));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        java.util.Date date3 = new java.util.Date(10, (int) (byte) -1, (-1));
        int int4 = date3.getTimezoneOffset();
        java.util.Date date10 = new java.util.Date(0, 0, 0, 9, (int) '#');
        boolean boolean11 = date3.before(date10);
        java.time.Instant instant12 = date10.toInstant();
        date10.setSeconds((int) (short) 0);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime.Property property19 = dateTime17.secondOfMinute();
        java.lang.String str20 = property19.getAsString();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        int int22 = instant15.get(dateTimeField21);
        org.joda.time.Chronology chronology23 = instant15.getChronology();
        org.joda.time.Instant instant25 = instant15.plus((long) 53652018);
        org.joda.time.MutableDateTime mutableDateTime26 = instant15.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant15.withDurationAdded(readableDuration27, 147210);
        boolean boolean30 = date10.equals((java.lang.Object) instant29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant29 and dateTime17", (instant29.compareTo(dateTime17) == 0) == instant29.equals(dateTime17));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(53633931);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minus((-2174086740000L));
        org.joda.time.DateTime dateTime12 = dateTime8.minusYears(53666);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.plus(readableDuration13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime.Property property19 = dateTime17.secondOfMinute();
        java.lang.String str20 = property19.getAsString();
        org.joda.time.DateTime dateTime22 = property19.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime23 = property19.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.weekyear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime26.getFieldTypes();
        org.joda.time.Chronology chronology29 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.months();
        long long34 = chronology29.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField35 = chronology29.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime23.withChronology(chronology29);
        org.joda.time.DateTime dateTime38 = dateTime23.withMinuteOfHour(4);
        boolean boolean39 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime36", (dateTime23.compareTo(dateTime36) == 0) == dateTime23.equals(dateTime36));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.plus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = dateTimeFieldType16.toString();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDurationAdded(readableDuration22, 7);
        org.joda.time.Chronology chronology25 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType16.getField(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.seconds();
        org.joda.time.DateTime dateTime28 = dateTime14.withChronology(chronology25);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology25.add(readablePeriod29, (long) '4', 53735858);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime28", (dateTime11.compareTo(dateTime28) == 0) == dateTime11.equals(dateTime28));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(32772);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTime.Property property18 = dateTime16.dayOfMonth();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        java.lang.String str23 = dateTimeZone20.getShortName((long) 5);
        java.lang.String str24 = dateTimeZone20.getID();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime(dateTimeZone20);
        boolean boolean27 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime29 = dateTime16.minusHours(3);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime16.toMutableDateTimeISO();
        org.joda.time.Instant instant31 = dateTime16.toInstant();
        org.joda.time.Instant instant34 = instant31.withDurationAdded(558L, 53767624);
        org.joda.time.Instant instant37 = instant34.withDurationAdded(490L, (int) (byte) 10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant31", (dateTime6.compareTo(instant31) == 0) == dateTime6.equals(instant31));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime.Property property13 = dateTime5.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.plus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = dateTimeFieldType16.toString();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDurationAdded(readableDuration22, 7);
        org.joda.time.Chronology chronology25 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType16.getField(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.seconds();
        org.joda.time.DateTime dateTime28 = dateTime14.withChronology(chronology25);
        org.joda.time.DateTime dateTime30 = dateTime14.withMillisOfDay(10799999);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime28", (dateTime14.compareTo(dateTime28) == 0) == dateTime14.equals(dateTime28));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.secondOfMinute();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.year();
        boolean boolean14 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime12);
        boolean boolean15 = dateTime12.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DurationField durationField11 = chronology4.millis();
        org.joda.time.DurationField durationField12 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology4.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField12", Math.signum(durationField11.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField11)));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getISO3Country();
        java.lang.String str11 = locale8.getDisplayLanguage();
        java.lang.String str12 = localDateTime6.toString("53635", locale8);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        boolean boolean15 = localDateTime6.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusSeconds(6);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusSeconds((int) (short) -1);
        int int26 = localDateTime23.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.minus(readablePeriod27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime23.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getRangeDurationType();
        java.lang.String str32 = dateTimeFieldType30.toString();
        int int33 = localDateTime23.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime6.withField(dateTimeFieldType30, 53674832);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property40.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.yearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = property43.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfEvenCopy();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder48.clear();
        java.util.Locale.Builder builder50 = builder49.clear();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.util.Locale.Builder builder52 = builder49.setLocale(locale51);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        timeZone55.setID("+00:00");
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone55, locale58);
        java.util.Locale.Builder builder60 = builder49.setLocale(locale58);
        org.joda.time.LocalDateTime localDateTime61 = property43.setCopy("46", locale58);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale58);
        java.lang.String str63 = locale58.getISO3Country();
        java.lang.String str64 = localDateTime35.toString("14:54:46.888", locale58);
        int int65 = localDateTime35.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar59 and calendar62", (calendar59.compareTo(calendar62) == 0) == calendar59.equals(calendar62));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DurationField durationField24 = chronology5.weeks();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology5);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName((long) 32772);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTime(dateTimeZone27);
        int int33 = dateTime25.getYearOfCentury();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("14");
        boolean boolean36 = timeZone35.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTime dateTime39 = dateTime25.toDateTime(dateTimeZone38);
        int int40 = dateTime39.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime39 and dateTime31", (dateTime39.compareTo(dateTime31) == 0) == dateTime39.equals(dateTime31));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate2.plus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.centuryOfEra();
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale8.getDisplayName();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTimeISO();
        int int15 = dateTime11.getMillisOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getEra();
        int int19 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusYears(12);
        boolean boolean22 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime21.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime24.plusMillis(14);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getEra();
        org.joda.time.DateTime dateTime35 = localTime31.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalTime localTime37 = localTime31.plusMillis((-1));
        org.joda.time.LocalTime localTime39 = localTime37.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime42 = localTime37.withPeriodAdded(readablePeriod40, (int) '4');
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getEra();
        org.joda.time.DateTime.Property property47 = dateTime45.secondOfMinute();
        java.lang.String str48 = property47.getAsString();
        org.joda.time.DateTime dateTime49 = property47.roundCeilingCopy();
        int int50 = property43.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeField dateTimeField51 = property43.getField();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        int int57 = dateTimeZone54.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 0, dateTimeZone54);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(dateTimeZone54);
        org.joda.time.LocalTime localTime61 = localTime59.minusSeconds((int) (byte) 1);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        java.util.TimeZone timeZone64 = dateTimeZone63.toTimeZone();
        timeZone64.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone64);
        int int69 = timeZone64.getOffset((long) 53626);
        java.util.Locale locale71 = new java.util.Locale("hi!");
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone64, locale71);
        java.lang.String str73 = dateTimeField51.getAsText((org.joda.time.ReadablePartial) localTime61, locale71);
        java.lang.String str74 = dateTime24.toString("37", locale71);
        java.lang.String str75 = locale71.getDisplayLanguage();
        java.lang.String str76 = locale8.getDisplayVariant(locale71);
        java.lang.String str77 = locale8.getISO3Language();
        java.lang.String str78 = locale8.getISO3Country();
        org.joda.time.LocalDate localDate79 = property6.setCopy("53", locale8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar72", (calendar0.compareTo(calendar72) == 0) == calendar0.equals(calendar72));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant7.withDurationAdded(readableDuration8, 1970);
        org.joda.time.DateTime dateTime11 = instant10.toDateTimeISO();
        int int12 = property4.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = property4.withMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime11", (instant7.compareTo(dateTime11) == 0) == instant7.equals(dateTime11));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis(53625);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfEra(53634);
        int int8 = localDateTime5.getDayOfWeek();
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime1.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime11", (dateTime1.compareTo(dateTime11) == 0) == dateTime1.equals(dateTime11));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime dateTime10 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        int int14 = dateTime12.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.plus(readableDuration15);
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime19 = dateTime8.minusMonths(53628014);
        int int20 = instant3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime12", (instant0.compareTo(dateTime12) == 0) == instant0.equals(dateTime12));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfEra(53634);
        int int4 = localDateTime1.getDayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getEra();
        int int8 = dateTime6.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.plus(readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, 53626975);
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) 2922789, (int) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours(53691674);
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withPeriodAdded(readablePeriod25, 53625);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.era();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.Instant instant32 = org.joda.time.Instant.now();
        org.joda.time.Instant instant35 = instant32.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        int int38 = instant32.get(dateTimeFieldType36);
        boolean boolean39 = localDateTime31.isSupported(dateTimeFieldType36);
        boolean boolean40 = dateTime20.isSupported(dateTimeFieldType36);
        int int41 = localDateTime1.get(dateTimeFieldType36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant32", (dateTime6.compareTo(instant32) == 0) == dateTime6.equals(instant32));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int6 = dateTime4.get(dateTimeFieldType5);
        int int7 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0, dateTimeZone2);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property9.withMinimumValue();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        int int14 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(53633931);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName((long) 32772);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) dateTime19, dateTimeZone21);
        org.joda.time.DateTime dateTime27 = localDate10.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        int int30 = dateTime29.getEra();
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        java.lang.String str32 = property31.getAsString();
        org.joda.time.DateTime dateTime34 = property31.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime35 = property31.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime37 = dateTime35.minusSeconds(2922789);
        org.joda.time.Instant instant38 = dateTime35.toInstant();
        org.joda.time.DateTime.Property property39 = dateTime35.weekOfWeekyear();
        org.joda.time.DateTime dateTime42 = dateTime35.withDurationAdded((long) 53674832, 53784566);
        boolean boolean43 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant38", (dateTime35.compareTo(instant38) == 0) == dateTime35.equals(instant38));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 10);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = instant1.isAfter(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.Instant instant7 = instant1.withDurationAdded((long) 53698730, 53684);
        boolean boolean8 = instant1.isAfterNow();
        org.joda.time.Instant instant10 = instant1.withMillis((long) 53835500);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant10.plus(readableDuration11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMonths((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime1.toMutableDateTimeISO();
        org.joda.time.Instant instant7 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime10 = dateTime1.withDurationAdded((long) 53691906, 53665550);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant7", (mutableDateTime6.compareTo(instant7) == 0) == mutableDateTime6.equals(instant7));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime4 = dateTime1.withWeekyear(53675285);
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime.Property property9 = dateTime7.secondOfMinute();
        java.lang.String str10 = property9.getAsString();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        int int12 = instant5.get(dateTimeField11);
        org.joda.time.Chronology chronology13 = instant5.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.halfdays();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime1.toMutableDateTime(chronology13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime7", (instant5.compareTo(dateTime7) == 0) == instant5.equals(dateTime7));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        java.lang.String str13 = dateTimeFieldType11.toString();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.hourOfDay();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDurationAdded(readableDuration17, 7);
        org.joda.time.Chronology chronology20 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType11.getField(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.seconds();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        long long29 = chronology20.add((long) 53868, (long) 53781856, 53759503);
        org.joda.time.DateTime dateTime30 = dateTime10.withChronology(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField24", (durationField9.compareTo(durationField24) == 0) == durationField9.equals(durationField24));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.plus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = dateTimeFieldType16.toString();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDurationAdded(readableDuration22, 7);
        org.joda.time.Chronology chronology25 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType16.getField(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.seconds();
        org.joda.time.DateTime dateTime28 = dateTime14.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime28", (dateTime11.compareTo(dateTime28) == 0) == dateTime11.equals(dateTime28));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology13);
        org.joda.time.DateTime dateTime22 = dateTime7.withMinuteOfHour(4);
        org.joda.time.DateTime dateTime23 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime7.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime7", (dateTime20.compareTo(dateTime7) == 0) == dateTime20.equals(dateTime7));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime4.getFieldTypes();
        org.joda.time.Chronology chronology7 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.months();
        boolean boolean9 = durationFieldType2.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withPeriodAdded(readablePeriod15, 53625);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.year();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime21 = property18.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond(11);
        int[] intArray25 = chronology7.get((org.joda.time.ReadablePartial) localDateTime23, (long) 53642476);
        org.joda.time.DateTimeField dateTimeField26 = chronology7.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology7.add(readablePeriod27, 424L, 53673303);
        org.joda.time.DurationField durationField31 = chronology7.eras();
        org.joda.time.DurationField durationField32 = durationFieldType0.getField(chronology7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField32", Math.signum(durationField8.compareTo(durationField32)) == -Math.signum(durationField32.compareTo(durationField8)));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        int int7 = localDate4.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 53695160);
        org.joda.time.Instant instant14 = instant12.plus(12L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant12", (dateTime6.compareTo(instant12) == 0) == dateTime6.equals(instant12));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) (byte) 100);
        int int8 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate localDate10 = localDate5.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths(53628);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime();
        int int14 = dateTime13.getWeekyear();
        boolean boolean15 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.withCenturyOfEra(2);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology21.add(readablePeriod22, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.minuteOfHour();
        org.joda.time.DurationField durationField27 = durationFieldType16.getField(chronology21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology30 = chronology21.withZone(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.withCenturyOfEra(2);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        long long41 = chronology37.add(readablePeriod38, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.minuteOfHour();
        org.joda.time.DurationField durationField43 = durationFieldType32.getField(chronology37);
        boolean boolean44 = localDateTime31.isSupported(durationFieldType32);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        java.lang.String str47 = dateTimeFieldType45.toString();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.hourOfDay();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDurationAdded(readableDuration51, 7);
        org.joda.time.Chronology chronology54 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType45.getField(chronology54);
        java.lang.String str56 = dateTimeFieldType45.getName();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = localDateTime58.getFieldTypes();
        org.joda.time.Chronology chronology61 = localDateTime58.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.months();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType45.getField(chronology61);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime67.withCenturyOfEra(2);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        long long74 = chronology70.add(readablePeriod71, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField75 = chronology70.minuteOfHour();
        org.joda.time.DurationField durationField76 = durationFieldType65.getField(chronology70);
        boolean boolean77 = dateTimeFieldType45.isSupported(chronology70);
        org.joda.time.LocalDateTime.Property property78 = localDateTime31.property(dateTimeFieldType45);
        int int79 = dateTime13.get(dateTimeFieldType45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getRangeDurationType();
        int int6 = instant0.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = instant0.toDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant0.minus(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime7", (instant9.compareTo(dateTime7) == 0) == instant9.equals(dateTime7));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("0012-04-10");
        org.joda.time.Instant instant3 = instant1.plus((long) 53793);
        org.joda.time.Instant instant5 = instant1.plus(0L);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 21);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        int int12 = dateTimeZone9.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtCurrentTime(dateTimeZone9);
        boolean boolean14 = dateTimeZone9.isFixed();
        long long17 = dateTimeZone9.adjustOffset((long) 53759233, false);
        org.joda.time.MutableDateTime mutableDateTime18 = instant5.toMutableDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone19 = instant5.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime18", (instant5.compareTo(mutableDateTime18) == 0) == instant5.equals(mutableDateTime18));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant10 = instant0.plus((long) 53652018);
        org.joda.time.MutableDateTime mutableDateTime11 = instant0.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant0.withDurationAdded(readableDuration12, 147210);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.hourOfDay();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDurationAdded(readableDuration18, 7);
        org.joda.time.Chronology chronology21 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.monthOfYear();
        java.lang.String str23 = property22.toString();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        boolean boolean25 = calendar24.isWeekDateSupported();
        int int27 = calendar24.getActualMinimum(15);
        calendar24.clear();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.fromCalendarFields(calendar24);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withPeriodAdded(readablePeriod34, 53625);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        java.lang.String str41 = dateTimeZone38.getShortName((long) 32772);
        long long44 = dateTimeZone38.adjustOffset((long) (byte) 10, true);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) readablePeriod34, dateTimeZone38);
        boolean boolean46 = localDateTime29.isAfter((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.secondOfMinute();
        org.joda.time.tz.NameProvider nameProvider49 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider49);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        timeZone53.setID("+00:00");
        timeZone53.setRawOffset(2);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        timeZone60.setID("+00:00");
        boolean boolean63 = timeZone53.hasSameRules(timeZone60);
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone53, locale64);
        java.lang.String str66 = locale64.getLanguage();
        java.lang.String str69 = nameProvider49.getName(locale64, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale71 = new java.util.Locale("hi!");
        java.lang.String str72 = locale71.getISO3Country();
        java.util.Locale locale73 = locale71.stripExtensions();
        java.lang.String str74 = locale71.getScript();
        java.lang.String str76 = locale71.getUnicodeLocaleType("57");
        java.lang.String str79 = nameProvider49.getShortName(locale71, "49", "GMT");
        java.util.Locale locale81 = new java.util.Locale("50");
        java.lang.String str84 = nameProvider49.getShortName(locale81, "clockhourofhalfday", "0");
        java.util.Locale locale85 = locale81.stripExtensions();
        org.joda.time.LocalDateTime localDateTime86 = property47.setCopy("5", locale81);
        java.lang.String str88 = locale81.getUnicodeLocaleType("46");
        int int89 = property22.getMaximumShortTextLength(locale81);
        boolean boolean90 = instant0.equals((java.lang.Object) property22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant0", (dateTime2.compareTo(instant0) == 0) == dateTime2.equals(instant0));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("0012-04-10");
        org.joda.time.Instant instant3 = instant1.plus((long) 53793);
        org.joda.time.Instant instant5 = instant1.plus(0L);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 21);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        int int12 = dateTimeZone9.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtCurrentTime(dateTimeZone9);
        boolean boolean14 = dateTimeZone9.isFixed();
        long long17 = dateTimeZone9.adjustOffset((long) 53759233, false);
        org.joda.time.MutableDateTime mutableDateTime18 = instant5.toMutableDateTime(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant5.minus(readableDuration19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and mutableDateTime18", (instant20.compareTo(mutableDateTime18) == 0) == instant20.equals(mutableDateTime18));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        java.lang.String[] strArray4 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.lang.Object[] objArray8 = strSet5.toArray();
        java.util.Set<java.lang.String> strSet9 = java.util.Calendar.getAvailableCalendarTypes();
        boolean boolean10 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("KOR");
        java.lang.String[] strArray17 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean20 = strSet18.isEmpty();
        java.lang.Object[] objArray21 = strSet18.toArray();
        java.lang.String str22 = java.util.Locale.lookupTag(languageRangeList12, (java.util.Collection<java.lang.String>) strSet18);
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.lang.String str24 = locale23.getDisplayName();
        java.lang.String str25 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet26 = locale23.getUnicodeLocaleAttributes();
        boolean boolean27 = strSet18.containsAll((java.util.Collection<java.lang.String>) strSet26);
        boolean boolean28 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet18);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = locale30.getISO3Country();
        java.util.Locale.setDefault(category29, locale30);
        java.util.Locale locale34 = java.util.Locale.getDefault(category29);
        boolean boolean35 = strSet18.contains((java.lang.Object) category29);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        int int41 = dateTime40.getEra();
        org.joda.time.DateTime dateTime42 = localTime38.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalTime localTime44 = localTime38.plusMillis((-1));
        org.joda.time.LocalTime localTime46 = localTime44.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalTime localTime49 = localTime44.withPeriodAdded(readablePeriod47, (int) '4');
        org.joda.time.LocalTime.Property property50 = localTime49.millisOfSecond();
        org.joda.time.LocalTime localTime51 = property50.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime53 = property50.addNoWrapToCopy((int) (short) 100);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.util.TimeZone timeZone56 = dateTimeZone55.toTimeZone();
        timeZone56.setID("+00:00");
        timeZone56.setRawOffset(2);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        timeZone63.setID("+00:00");
        boolean boolean66 = timeZone56.hasSameRules(timeZone63);
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone56, locale67);
        int int69 = property50.getMaximumShortTextLength(locale67);
        java.lang.String str70 = locale67.getCountry();
        java.util.Locale.setDefault(category29, locale67);
        java.util.Locale locale72 = java.util.Locale.getDefault(category29);
        java.util.Locale locale74 = new java.util.Locale("clockhourOfHalfday");
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleKeys();
        java.lang.String str76 = locale74.getDisplayVariant();
        java.util.Locale.setDefault(category29, locale74);
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder79 = builder78.clear();
        java.util.Locale.Builder builder80 = builder79.clear();
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        java.util.Locale.Builder builder82 = builder79.setLocale(locale81);
        java.util.TimeZone timeZone83 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forTimeZone(timeZone83);
        java.util.TimeZone timeZone85 = dateTimeZone84.toTimeZone();
        timeZone85.setID("+00:00");
        java.util.Locale locale88 = java.util.Locale.GERMAN;
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(timeZone85, locale88);
        java.util.Locale.Builder builder90 = builder79.setLocale(locale88);
        java.util.Locale.Builder builder91 = builder90.clearExtensions();
        java.util.Locale locale92 = builder91.build();
        java.util.Locale.setDefault(category29, locale92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar68 and calendar89", (calendar68.compareTo(calendar89) == 0) == calendar68.equals(calendar89));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withCenturyOfEra(2);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology6.add(readablePeriod7, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField12 = durationFieldType1.getField(chronology6);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology15 = chronology6.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(196L, chronology6);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(53726374);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(53753);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readableDuration23);
        org.joda.time.DateTime dateTime25 = dateTime22.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime25", (dateTime16.compareTo(dateTime25) == 0) == dateTime16.equals(dateTime25));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long9 = chronology4.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DurationField durationField11 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField11", Math.signum(durationField5.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField5)));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        org.joda.time.Instant instant10 = instant7.withMillis((long) 53731);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getEra();
        int int12 = dateTime10.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        boolean boolean15 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime10);
        boolean boolean16 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime6);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = dateTime6.withZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime.Property property23 = dateTime21.secondOfMinute();
        org.joda.time.DateTime dateTime25 = dateTime21.withCenturyOfEra((int) ' ');
        boolean boolean26 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime21);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        int int32 = dateTimeZone29.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 0, dateTimeZone29);
        int int34 = localTime33.size();
        org.joda.time.Chronology chronology35 = localTime33.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime6, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        long long40 = chronology35.add(readablePeriod37, (long) 24, 53810);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime36", (dateTime1.compareTo(dateTime36) == 0) == dateTime1.equals(dateTime36));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        boolean boolean19 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property20 = dateTime18.hourOfDay();
        org.joda.time.LocalTime localTime21 = dateTime18.toLocalTime();
        int int22 = dateTime18.getWeekyear();
        org.joda.time.Instant instant23 = dateTime18.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime18.plus(readableDuration24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant23", (dateTime1.compareTo(instant23) == 0) == dateTime1.equals(instant23));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("4");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant4 = instant1.withMillis((long) 536752);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) instant1);
        org.joda.time.Instant instant7 = instant1.plus((long) 53733548);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and dateTime5", (mutableDateTime2.compareTo(dateTime5) == 0) == mutableDateTime2.equals(dateTime5));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology13);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withPeriodAdded(readablePeriod21, 53683509);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getEra();
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        java.lang.String str28 = property27.getAsString();
        org.joda.time.DateTime dateTime30 = property27.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime31 = property27.withMinimumValue();
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths(32770);
        int int34 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime29.toMutableDateTimeISO();
        int int33 = dateTime29.getMillisOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getEra();
        int int37 = dateTime35.getSecondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusYears(12);
        boolean boolean40 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded(readableDuration43, 1);
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime42.toYearMonthDay();
        int int47 = dateTime42.getSecondOfDay();
        org.joda.time.DateTime.Property property48 = dateTime42.minuteOfHour();
        boolean boolean49 = instant26.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime42.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime4.minusMonths(53628014);
        org.joda.time.DateTime.Property property16 = dateTime4.yearOfCentury();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1645455243000L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime19.withChronology(chronology22);
        org.joda.time.Instant instant24 = dateTime19.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime23", (dateTime19.compareTo(dateTime23) == 0) == dateTime19.equals(dateTime23));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property14 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(53677);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(2);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology24.add(readablePeriod25, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.minuteOfHour();
        org.joda.time.DurationField durationField30 = durationFieldType19.getField(chronology24);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology33 = chronology24.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(737L, chronology33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime15.toMutableDateTime(chronology33);
        java.lang.String str36 = chronology33.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and mutableDateTime35", (dateTime15.compareTo(mutableDateTime35) == 0) == dateTime15.equals(mutableDateTime35));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime localTime9 = localTime6.withSecondOfMinute(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property11 = localTime9.property(dateTimeFieldType10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime dateTime18 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant19 = dateTime16.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int21 = dateTime16.get(dateTimeFieldType20);
        boolean boolean22 = localTime9.isSupported(dateTimeFieldType20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant19", (dateTime16.compareTo(instant19) == 0) == dateTime16.equals(instant19));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear(99);
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(53760293);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusYears(12);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime12.toMutableDateTime(chronology13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(53654002);
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime6.withZoneRetainFields(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime17", (dateTime12.compareTo(dateTime17) == 0) == dateTime12.equals(dateTime17));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        org.joda.time.DateTime dateTime13 = dateTime7.minusMinutes((-1));
        long long14 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = dateTime13.withDurationAdded((long) 53627827, 21);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(2);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology23.add(readablePeriod24, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.minuteOfHour();
        org.joda.time.DurationField durationField29 = durationFieldType18.getField(chronology23);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology32 = chronology23.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime13.toDateTime(chronology32);
        int int34 = dateTime33.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property35 = dateTime33.millisOfDay();
        org.joda.time.DateTime dateTime36 = property35.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime36", (dateTime13.compareTo(dateTime36) == 0) == dateTime13.equals(dateTime36));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        int int7 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withZone(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTimeISO();
        int int14 = mutableDateTime13.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant12", (dateTime6.compareTo(instant12) == 0) == dateTime6.equals(instant12));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.secondOfMinute();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.year();
        boolean boolean14 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.MutableDateTime mutableDateTime15 = instant0.toMutableDateTime();
        org.joda.time.Chronology chronology16 = mutableDateTime15.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int13 = dateTime11.get(dateTimeFieldType12);
        boolean boolean14 = dateTime6.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime.Property property15 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime16 = property15.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.minus(readablePeriod2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusWeeks(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(readableDuration8, 32770);
        org.joda.time.DateTime dateTime12 = dateTime7.minusMonths(53758);
        org.joda.time.DateTime dateTime14 = dateTime12.minusYears(53713023);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(2);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.secondOfMinute();
        org.joda.time.DurationField durationField27 = chronology20.millis();
        org.joda.time.DurationField durationField28 = chronology20.eras();
        org.joda.time.DateTime dateTime29 = dateTime15.withChronology(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField27 and durationField28", Math.signum(durationField27.compareTo(durationField28)) == -Math.signum(durationField28.compareTo(durationField27)));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        boolean boolean28 = instant26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = instant26.toDateTimeISO();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime dateTime36 = localTime32.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.LocalTime localTime38 = localTime32.plusMillis((-1));
        org.joda.time.LocalTime localTime40 = localTime38.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalTime localTime43 = localTime38.withPeriodAdded(readablePeriod41, (int) '4');
        org.joda.time.LocalTime.Property property44 = localTime43.millisOfSecond();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getEra();
        org.joda.time.DateTime.Property property48 = dateTime46.secondOfMinute();
        java.lang.String str49 = property48.getAsString();
        org.joda.time.DateTime dateTime50 = property48.roundCeilingCopy();
        int int51 = property44.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime50.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime55 = dateTime53.minusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime53.minusMinutes((int) (short) 10);
        boolean boolean58 = dateTime29.equals((java.lang.Object) (short) 10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.clear();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("clockhourofhalfday");
        calendar0.setTimeZone(timeZone7);
        java.util.Locale locale10 = new java.util.Locale("");
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone7, locale10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar13);
        calendar13.clear();
        java.util.TimeZone timeZone17 = calendar13.getTimeZone();
        java.lang.String str18 = timeZone17.getID();
        boolean boolean19 = timeZone7.hasSameRules(timeZone17);
        java.lang.Object obj20 = timeZone17.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar13", (calendar0.compareTo(calendar13) == 0) == calendar0.equals(calendar13));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.DateTime dateTime10 = instant7.toDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant7.withDurationAdded(readableDuration11, 53759);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime20 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalTime localTime22 = localTime16.plusMillis((-1));
        org.joda.time.LocalTime localTime24 = localTime22.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime22.withPeriodAdded(readablePeriod25, (int) '4');
        org.joda.time.LocalTime.Property property28 = localTime27.millisOfSecond();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime.Property property32 = dateTime30.secondOfMinute();
        java.lang.String str33 = property32.getAsString();
        org.joda.time.DateTime dateTime34 = property32.roundCeilingCopy();
        int int35 = property28.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime34.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime37.withCenturyOfEra(53725);
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        int int41 = dateTime39.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime39.toMutableDateTimeISO();
        boolean boolean43 = instant7.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.minus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime.Property property16 = dateTime14.secondOfMinute();
        long long17 = property16.remainder();
        org.joda.time.DateTime dateTime19 = property16.setCopy("47");
        org.joda.time.DateTime dateTime20 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime22 = property16.addWrapFieldToCopy(558);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.plusMinutes(53627);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime22.plus(readableDuration26);
        boolean boolean28 = instant9.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.DateTime dateTime10 = instant0.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        int int18 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime17.plusYears(53627);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes((-53637188));
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.DateTime dateTime26 = dateTime20.withFieldAdded(durationFieldType24, 53656028);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        java.lang.String str32 = dateTimeFieldType30.toString();
        int int33 = localDateTime28.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withYear(53641141);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime20.toDateTime(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMonths(53693);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime41.getFieldTypes();
        org.joda.time.Chronology chronology44 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.months();
        long long49 = chronology44.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime50.toMutableDateTime();
        boolean boolean53 = mutableDateTime51.isBefore(2880468115L);
        boolean boolean54 = dateTime37.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        boolean boolean55 = dateTime37.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime50", (dateTime1.compareTo(dateTime50) == 0) == dateTime1.equals(dateTime50));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 10);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = instant1.isAfter(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 53895196);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale3 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str4 = locale0.getDisplayLanguage(locale3);
        java.lang.String str5 = locale3.getDisplayName();
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale3.getDisplayCountry(locale6);
        java.lang.String str8 = locale3.toLanguageTag();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        timeZone11.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        int int22 = dateTimeZone19.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone19);
        int int24 = localDate23.size();
        int int25 = localDate23.getWeekOfWeekyear();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter17.withZone(dateTimeZone27);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        timeZone35.setID("+00:00");
        timeZone35.setRawOffset(2);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        timeZone42.setID("+00:00");
        boolean boolean45 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone35, locale46);
        java.lang.String str48 = locale46.getLanguage();
        java.lang.String str51 = nameProvider31.getName(locale46, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.lang.String str54 = locale53.getISO3Country();
        java.util.Locale locale55 = locale53.stripExtensions();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str58 = locale53.getUnicodeLocaleType("57");
        java.lang.String str61 = nameProvider31.getShortName(locale53, "49", "GMT");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter30.withLocale(locale53);
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.lang.String str64 = locale63.getDisplayName();
        java.util.Locale locale66 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str67 = locale63.getDisplayLanguage(locale66);
        java.lang.String str68 = locale53.getDisplayScript(locale66);
        java.util.Locale locale69 = locale53.stripExtensions();
        java.util.Locale locale70 = java.util.Locale.KOREA;
        java.lang.String str71 = locale70.toLanguageTag();
        java.lang.String str72 = locale53.getDisplayLanguage(locale70);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone11, locale70);
        java.lang.String str74 = locale3.getDisplayName(locale70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar73", (calendar47.compareTo(calendar73) == 0) == calendar47.equals(calendar73));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 53634900);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName((long) 32772);
        long long9 = dateTimeZone3.adjustOffset((long) (byte) 10, true);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone3);
        org.joda.time.DateTime dateTime11 = localDate1.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTime dateTime13 = dateTime11.plusWeeks(605139);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        int int21 = instant14.get(dateTimeField20);
        org.joda.time.Instant instant23 = instant14.minus((long) 53633152);
        org.joda.time.Instant instant25 = instant14.minus((long) 21);
        long long26 = instant14.getMillis();
        int int27 = dateTime13.compareTo((org.joda.time.ReadableInstant) instant14);
        org.joda.time.MutableDateTime mutableDateTime28 = instant14.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime28.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime16", (instant14.compareTo(dateTime16) == 0) == instant14.equals(dateTime16));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 10);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = instant1.isAfter(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.Instant instant7 = instant1.withDurationAdded((long) 53698730, 53684);
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        int int21 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusYears((int) (byte) 0);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        int int30 = dateTimeZone27.getOffsetFromLocal((long) (short) -1);
        int int32 = dateTimeZone27.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime25.toMutableDateTime(chronology34);
        org.joda.time.Chronology chronology36 = chronology34.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and mutableDateTime35", (dateTime23.compareTo(mutableDateTime35) == 0) == dateTime23.equals(mutableDateTime35));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.year();
        org.joda.time.DurationField durationField13 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField15 = chronology9.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField15, and durationField13", !(durationField13.compareTo(durationField15) == 0) || (Math.signum(durationField13.compareTo(durationField13)) == Math.signum(durationField15.compareTo(durationField13))));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.yearOfEra();
        int int9 = dateTimeField6.getDifference((long) (-53637188), 343L);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField6.getType();
        java.lang.String str11 = dateTimeFieldType10.toString();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withCenturyOfEra(2);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology17.add(readablePeriod18, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfHour();
        org.joda.time.DurationField durationField23 = durationFieldType12.getField(chronology17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology26 = chronology17.withZone(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusWeeks(9);
        java.util.Date date36 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant37 = date36.toInstant();
        boolean boolean38 = localDateTime32.equals((java.lang.Object) instant37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime32.plusHours(2022);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusYears(53638);
        int[] intArray44 = chronology17.get((org.joda.time.ReadablePartial) localDateTime42, (-536L));
        boolean boolean45 = dateTimeFieldType10.isSupported(chronology17);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType10.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        boolean boolean49 = dateTimeZone47.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = localDateTime52.getFieldTypes();
        org.joda.time.Chronology chronology55 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekOfWeekyear();
        org.joda.time.DurationField durationField58 = chronology55.days();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.dayOfWeek();
        org.joda.time.DurationField durationField61 = chronology55.minutes();
        org.joda.time.DateTime dateTime62 = dateTime50.toDateTime(chronology55);
        boolean boolean63 = dateTimeFieldType10.isSupported(chronology55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime50", (dateTime14.compareTo(dateTime50) == 0) == dateTime14.equals(dateTime50));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.monthOfYear();
        org.joda.time.DurationField durationField7 = chronology4.weekyears();
        org.joda.time.DurationField durationField8 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.weekyear();
        org.joda.time.DurationField durationField11 = chronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField5, and durationField7", !(durationField11.compareTo(durationField5) == 0) || (Math.signum(durationField11.compareTo(durationField7)) == Math.signum(durationField5.compareTo(durationField7))));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(53633931);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(53634);
        int int13 = localDateTime10.getDayOfWeek();
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime7.toDateTime(chronology14);
        int int17 = dateTime7.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime16", (dateTime7.compareTo(dateTime16) == 0) == dateTime7.equals(dateTime16));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        org.joda.time.Chronology chronology6 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.months();
        boolean boolean8 = durationFieldType1.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withPeriodAdded(readablePeriod14, 53625);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime20 = property17.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfSecond(11);
        int[] intArray24 = chronology6.get((org.joda.time.ReadablePartial) localDateTime22, (long) 53642476);
        org.joda.time.DateTimeField dateTimeField25 = chronology6.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = chronology6.add(readablePeriod26, 424L, 53673303);
        org.joda.time.DurationField durationField30 = chronology6.eras();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay(1645455243000L, chronology6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField30", Math.signum(durationField7.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField7)));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime.Property property6 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime8 = dateTime4.withCenturyOfEra((int) ' ');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.minus(readableDuration9);
        int int11 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        int int15 = dateTime13.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime13.minusYears(12);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime(chronology18);
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant23 = instant20.withDurationAdded(readableDuration21, 1970);
        boolean boolean24 = dateTime17.isEqual((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant26 = instant20.withMillis(0L);
        boolean boolean27 = dateTime4.isEqual((org.joda.time.ReadableInstant) instant20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant20", (dateTime1.compareTo(instant20) == 0) == dateTime1.equals(instant20));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology13);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withPeriodAdded(readablePeriod21, 53683509);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.withCenturyOfEra(2);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter26.withChronology(chronology31);
        org.joda.time.DurationField durationField33 = chronology31.centuries();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) readablePeriod21, chronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(32772);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTime();
        java.util.Date date10 = dateTime9.toDate();
        org.joda.time.DateTime.Property property11 = dateTime9.dayOfMonth();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        java.lang.String str16 = dateTimeZone13.getShortName((long) 5);
        java.lang.String str17 = dateTimeZone13.getID();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTime(dateTimeZone13);
        java.util.GregorianCalendar gregorianCalendar20 = dateTime9.toGregorianCalendar();
        org.joda.time.Instant instant21 = dateTime9.toInstant();
        int int22 = dateTime9.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant21", (dateTime9.compareTo(instant21) == 0) == dateTime9.equals(instant21));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime29.toMutableDateTimeISO();
        int int33 = dateTime29.getMillisOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getEra();
        int int37 = dateTime35.getSecondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusYears(12);
        boolean boolean40 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded(readableDuration43, 1);
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime42.toYearMonthDay();
        int int47 = dateTime42.getSecondOfDay();
        org.joda.time.DateTime.Property property48 = dateTime42.minuteOfHour();
        boolean boolean49 = instant26.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime42.plus(readablePeriod50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths(53628);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime();
        boolean boolean9 = dateTime8.isEqualNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis(51L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTimeISO();
        org.joda.time.Instant instant13 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant13.withDurationAdded(readableDuration14, 1970);
        org.joda.time.DateTime dateTime17 = instant16.toDateTimeISO();
        boolean boolean18 = mutableDateTime12.isBefore((org.joda.time.ReadableInstant) instant16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant16", (dateTime8.compareTo(instant16) == 0) == dateTime8.equals(instant16));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        int int6 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withSecondOfMinute(14);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(2);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter13.withChronology(chronology18);
        org.joda.time.DurationField durationField20 = chronology18.centuries();
        org.joda.time.DurationFieldType durationFieldType21 = durationField20.getType();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime23.getFieldTypes();
        org.joda.time.Chronology chronology26 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField31 = durationFieldType21.getField(chronology26);
        boolean boolean32 = localDateTime10.isSupported(durationFieldType21);
        java.lang.String str33 = durationFieldType21.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField20 and durationField31", (durationField20.compareTo(durationField31) == 0) == durationField20.equals(durationField31));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.monthOfYear();
        org.joda.time.DurationField durationField7 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone9.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime14.getFieldTypes();
        org.joda.time.Chronology chronology17 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.dayOfWeek();
        org.joda.time.DurationField durationField23 = chronology17.minutes();
        org.joda.time.DateTime dateTime24 = dateTime12.toDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusMillis((int) (byte) 10);
        int[] intArray31 = chronology17.get((org.joda.time.ReadablePartial) localDateTime26, (long) 54);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.lang.String str34 = localDateTime26.toString("\u4e2d\u6587", locale33);
        int int35 = dateTimeField8.getMaximumShortTextLength(locale33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getEra();
        org.joda.time.DateTime.Property property39 = dateTime37.secondOfMinute();
        java.lang.String str40 = property39.getAsString();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        int int44 = dateTimeField41.getDifference(606L, (long) 1970);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime.Property property49 = dateTime47.secondOfMinute();
        java.util.Locale locale51 = java.util.Locale.getDefault();
        org.joda.time.DateTime dateTime52 = property49.setCopy("46", locale51);
        java.lang.String str53 = dateTimeField41.getAsShortText(53642927, locale51);
        java.util.Set<java.lang.String> strSet54 = locale51.getUnicodeLocaleKeys();
        java.lang.String str55 = locale33.getDisplayVariant(locale51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime37", (dateTime12.compareTo(dateTime37) == 0) == dateTime12.equals(dateTime37));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("4");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant4 = instant1.withMillis((long) 536752);
        java.util.Date date5 = instant4.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        boolean boolean3 = property2.isLeap();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(53637);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(53662);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int12 = dateTime10.get(dateTimeFieldType11);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTimeISO();
        int int14 = dateTime10.getMillisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        int int18 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusYears(12);
        boolean boolean21 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property24.roundCeilingCopy();
        org.joda.time.DateTime dateTime26 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime28 = property24.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime29 = property24.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        long long34 = dateTimeZone30.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        org.joda.time.DateTime dateTime35 = localDateTime8.toDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime37.getFieldTypes();
        org.joda.time.Chronology chronology40 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.months();
        long long45 = chronology40.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DurationField durationField47 = chronology40.days();
        long long51 = chronology40.add((long) 53732556, 0L, 53805854);
        org.joda.time.DateTime dateTime52 = dateTime35.toDateTime(chronology40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime46", (dateTime10.compareTo(dateTime46) == 0) == dateTime10.equals(dateTime46));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.secondOfMinute();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.year();
        boolean boolean14 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.MutableDateTime mutableDateTime15 = instant0.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime21.getFieldTypes();
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.months();
        boolean boolean26 = durationFieldType19.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfDay();
        org.joda.time.DurationField durationField28 = durationFieldType18.getField(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        java.lang.String str31 = dateTimeFieldType29.toString();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.hourOfDay();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDurationAdded(readableDuration35, 7);
        org.joda.time.Chronology chronology38 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType29.getField(chronology38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.DurationField durationField41 = durationFieldType18.getField(chronology38);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((-457070L), chronology38);
        org.joda.time.DurationField durationField43 = chronology38.centuries();
        boolean boolean44 = dateTimeFieldType16.isSupported(chronology38);
        int int45 = mutableDateTime15.get(dateTimeFieldType16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.Instant instant4 = instant0.toInstant();
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant5.minus(readableDuration6);
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTimeISO();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getEra();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        java.lang.String str13 = property12.getAsString();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        int int16 = dateTimeField14.get((long) ' ');
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusSeconds(6);
        int int23 = localDateTime18.getYear();
        int[] intArray30 = new int[] { (short) 10, 6, 53629404, 3, '4', (short) 0 };
        int int31 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDateTime18, intArray30);
        java.lang.String str32 = dateTimeField14.getName();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy((long) 3);
        int[] intArray39 = new int[] { '#' };
        int int40 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDateTime37, intArray39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.withWeekyear(53632);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.hourOfDay();
        org.joda.time.Chronology chronology44 = localDateTime42.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime8.toMutableDateTime(chronology44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime10", (instant0.compareTo(dateTime10) == 0) == instant0.equals(dateTime10));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        timeZone2.setRawOffset(2);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        timeZone9.setID("+00:00");
        boolean boolean12 = timeZone2.hasSameRules(timeZone9);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone2, locale13);
        timeZone2.setID("2022-02-21T14:54:57.513Z");
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        timeZone21.setID("+00:00");
        timeZone21.setRawOffset(2);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        timeZone28.setID("+00:00");
        boolean boolean31 = timeZone21.hasSameRules(timeZone28);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone21, locale32);
        java.lang.String str34 = locale32.getLanguage();
        java.lang.String str37 = nameProvider17.getName(locale32, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale39 = new java.util.Locale("hi!");
        java.lang.String str40 = locale39.getISO3Country();
        java.util.Locale locale41 = locale39.stripExtensions();
        java.lang.String str42 = locale39.getScript();
        java.lang.String str44 = locale39.getUnicodeLocaleType("57");
        java.lang.String str47 = nameProvider17.getShortName(locale39, "49", "GMT");
        java.util.Locale locale49 = new java.util.Locale("50");
        java.lang.String str52 = nameProvider17.getShortName(locale49, "clockhourofhalfday", "0");
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("Fri Feb 08 23:01:00 GMT+00:00 1901");
        java.lang.String str55 = locale54.getCountry();
        java.util.Locale locale56 = locale54.stripExtensions();
        org.joda.time.format.DateTimePrinter dateTimePrinter57 = null;
        org.joda.time.format.DateTimeParser dateTimeParser58 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter57, dateTimeParser58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime61.withCenturyOfEra(2);
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter59.withChronology(chronology64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter59.withPivotYear((java.lang.Integer) 53642);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        java.util.TimeZone timeZone70 = dateTimeZone69.toTimeZone();
        int int72 = dateTimeZone69.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone69);
        java.lang.String str75 = dateTimeZone69.getNameKey((long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter59.withZone(dateTimeZone69);
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter59.withLocale(locale77);
        java.lang.String str79 = locale56.getDisplayCountry(locale77);
        java.lang.String str82 = nameProvider17.getName(locale77, "14:55:51.156", "2022-02-21T14:54:42.000Z");
        java.lang.String str83 = locale77.getScript();
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone2, locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar33", (calendar14.compareTo(calendar33) == 0) == calendar14.equals(calendar33));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.Instant instant29 = instant26.minus(922L);
        org.joda.time.Instant instant31 = instant26.withMillis((long) 57);
        org.joda.time.Instant instant32 = instant31.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfCentury((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime2.withPeriodAdded(readablePeriod5, 53682192);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime14 = localTime10.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalTime localTime16 = localTime10.plusMillis((-1));
        org.joda.time.LocalTime localTime18 = localTime16.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime21 = localTime16.withPeriodAdded(readablePeriod19, (int) '4');
        org.joda.time.LocalTime.Property property22 = localTime21.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getEra();
        org.joda.time.DateTime.Property property26 = dateTime24.secondOfMinute();
        java.lang.String str27 = property26.getAsString();
        org.joda.time.DateTime dateTime28 = property26.roundCeilingCopy();
        int int29 = property22.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime30 = property22.withMinimumValue();
        org.joda.time.LocalTime localTime32 = property22.addCopy((long) 53626948);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int36 = dateTime34.get(dateTimeFieldType35);
        org.joda.time.LocalTime localTime38 = localTime32.withField(dateTimeFieldType35, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int40 = localTime38.get(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType39.getDurationType();
        boolean boolean42 = dateTime7.isSupported(dateTimeFieldType39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime12", (dateTime7.compareTo(dateTime12) == 0) == dateTime7.equals(dateTime12));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.DateTime dateTime7 = dateTime1.minusMinutes((-1));
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.minusYears(53628);
        org.joda.time.DateTime.Property property11 = dateTime10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = dateTime10.plusSeconds((int) '4');
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra(12);
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(localTime19);
        long long21 = dateTime20.getMillis();
        int int22 = dateTime20.getYearOfEra();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int27 = dateTime25.get(dateTimeFieldType26);
        boolean boolean28 = dateTime20.isSupported(dateTimeFieldType26);
        int int29 = dateTime10.get(dateTimeFieldType26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant23", (dateTime20.compareTo(instant23) == 0) == dateTime20.equals(instant23));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.isStandardOffset((long) 53642);
        org.joda.time.DateMidnight dateMidnight8 = localDate4.toDateMidnight(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = dateTime9.minus((long) 53630);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTimeISO();
        int int17 = dateTime13.getMillisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusYears(12);
        boolean boolean24 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime23.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        boolean boolean31 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property32 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.withCenturyOfEra(4);
        org.joda.time.DateTime dateTime36 = dateTime30.withWeekyear(0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        int int41 = dateTimeZone38.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(dateTimeZone38);
        int int43 = localDate42.size();
        int int44 = localDate42.getWeekOfWeekyear();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime36.toDateTime(dateTimeZone46);
        long long53 = dateTimeZone46.convertLocalToUTC((long) 53705210, false, (long) 53688531);
        org.joda.time.DateTime dateTime54 = dateTime9.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay((int) (byte) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime13", (dateTime9.compareTo(dateTime13) == 0) == dateTime9.equals(dateTime13));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(2922789);
        org.joda.time.Instant instant10 = dateTime7.toInstant();
        org.joda.time.DateTime.Property property11 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant10", (dateTime7.compareTo(instant10) == 0) == dateTime7.equals(instant10));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        long long6 = dateTime5.getMillis();
        java.lang.String str7 = dateTime5.toString();
        org.joda.time.DateTime dateTime9 = dateTime5.minusHours(575);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(558);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra(12);
        org.joda.time.LocalTime localTime18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(localTime18);
        long long20 = dateTime19.getMillis();
        int int21 = dateTime19.getYearOfEra();
        org.joda.time.Instant instant22 = dateTime19.toInstant();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int26 = dateTime24.get(dateTimeFieldType25);
        boolean boolean27 = dateTime19.isSupported(dateTimeFieldType25);
        int int28 = dateTime9.get(dateTimeFieldType25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant22", (dateTime19.compareTo(instant22) == 0) == dateTime19.equals(instant22));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate7 = localDate5.plusDays((int) '#');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear(53666500);
        org.joda.time.LocalDate localDate11 = localDate7.withWeekyear(53626948);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear((int) (byte) 100);
        int int15 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate localDate17 = localDate12.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths(53628);
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property22 = localDate21.centuryOfEra();
        org.joda.time.LocalDate localDate23 = property22.roundHalfCeilingCopy();
        java.lang.Object obj24 = null;
        org.joda.time.tz.Provider provider25 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone27 = provider25.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj24, dateTimeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDate23.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight31 = localDate17.toDateMidnight(dateTimeZone27);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(dateTimeZone27);
        java.util.TimeZone timeZone33 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDate7.toDateTimeAtCurrentTime(dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime28", (dateTime20.compareTo(dateTime28) == 0) == dateTime20.equals(dateTime28));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(53633931);
        org.joda.time.DateTime.Property property8 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime dateTime10 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfSecond(13);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getEra();
        int int16 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(53633931);
        org.joda.time.TimeOfDay timeOfDay21 = dateTime20.toTimeOfDay();
        org.joda.time.Instant instant22 = dateTime20.toInstant();
        long long23 = instant22.getMillis();
        boolean boolean24 = dateTime12.isBefore((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTime.Property property25 = dateTime12.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant22", (dateTime7.compareTo(instant22) == 0) == dateTime7.equals(instant22));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        timeZone2.setRawOffset(2);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        timeZone9.setID("+00:00");
        boolean boolean12 = timeZone2.hasSameRules(timeZone9);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        timeZone15.setID("+00:00");
        timeZone15.setRawOffset(2);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        timeZone22.setID("+00:00");
        boolean boolean25 = timeZone15.hasSameRules(timeZone22);
        int int26 = timeZone15.getRawOffset();
        boolean boolean27 = timeZone15.observesDaylightTime();
        boolean boolean28 = timeZone15.observesDaylightTime();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone15);
        timeZone15.setID("2022-02-21T14:57:59.024Z");
        timeZone15.setRawOffset(53775237);
        boolean boolean34 = timeZone2.hasSameRules(timeZone15);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.lang.String str36 = timeZone35.getID();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        int int39 = dateTime38.getEra();
        int int40 = dateTime38.getSecondOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.minusYears(12);
        org.joda.time.DateTime dateTime44 = dateTime38.minusMinutes((-1));
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime.Property property46 = dateTime44.dayOfYear();
        int int47 = property46.getMaximumValueOverall();
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = property46.getAsShortText(locale48);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone35, locale48);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone("34");
        calendar50.setTimeZone(timeZone52);
        boolean boolean54 = timeZone15.hasSameRules(timeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar29 and calendar50", (calendar29.compareTo(calendar50) == 0) == calendar29.equals(calendar50));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        boolean boolean28 = instant26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = instant26.toDateTimeISO();
        org.joda.time.LocalDate localDate30 = dateTime29.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        int int7 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withZone(dateTimeZone9);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear((int) (byte) 100);
        int int14 = localDate11.getDayOfWeek();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime20 = localDate11.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.LocalDate localDate22 = localDate11.plusDays((int) '4');
        org.joda.time.Chronology chronology23 = localDate11.getChronology();
        org.joda.time.DateTime dateTime24 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology25 = localDate11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime10.toMutableDateTime(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime26", (dateTime6.compareTo(mutableDateTime26) == 0) == dateTime6.equals(mutableDateTime26));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime29.toMutableDateTimeISO();
        int int33 = dateTime29.getMillisOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getEra();
        int int37 = dateTime35.getSecondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusYears(12);
        boolean boolean40 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded(readableDuration43, 1);
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime42.toYearMonthDay();
        int int47 = dateTime42.getSecondOfDay();
        org.joda.time.DateTime.Property property48 = dateTime42.minuteOfHour();
        boolean boolean49 = instant26.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology50 = instant26.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTimeISO();
        int int16 = dateTime12.getMillisOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusYears(12);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear((int) (byte) 100);
        int int27 = localDate24.getDayOfWeek();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        int int32 = dateTimeZone29.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime33 = localDate24.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime36 = dateTime12.minusDays(0);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfCentury(35);
        boolean boolean39 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property41 = localDate40.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate.Property property43 = localDate40.property(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType42.getField(chronology44);
        org.joda.time.DateTime.Property property46 = dateTime6.property(dateTimeFieldType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        java.lang.String str49 = dateTimeFieldType47.toString();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType47.getRangeDurationType();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        int int53 = dateTime52.getEra();
        org.joda.time.DateTime.Property property54 = dateTime52.secondOfMinute();
        java.lang.String str55 = property54.getAsString();
        org.joda.time.DateTime dateTime57 = property54.addWrapFieldToCopy(53630);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        org.joda.time.DateTime dateTime61 = dateTime57.withFieldAdded(durationFieldType59, 53633152);
        boolean boolean62 = dateTime61.isBeforeNow();
        org.joda.time.Chronology chronology63 = dateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfEra();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.dayOfWeek();
        org.joda.time.DurationField durationField66 = chronology63.hours();
        boolean boolean67 = durationFieldType50.isSupported(chronology63);
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType42.getField(chronology63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DurationField durationField24 = chronology5.weeks();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology5);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName((long) 32772);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology33 = dateTime25.getChronology();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime31", (dateTime25.compareTo(dateTime31) == 0) == dateTime25.equals(dateTime31));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        org.joda.time.DateTime dateTime6 = property3.setCopy("46", locale5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.DateTime.Property property8 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime10 = property8.addToCopy(53663528);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(53753);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTimeISO();
        int int18 = dateTime14.getMillisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getEra();
        int int22 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears(12);
        boolean boolean25 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime28 = dateTime24.withDurationAdded(0L, (int) (byte) -1);
        org.joda.time.DateTime dateTime29 = dateTime24.withEarlierOffsetAtOverlap();
        int int30 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime29);
        java.lang.String str31 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime32 = dateTime10.withZone(dateTimeZone12);
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = null;
        org.joda.time.format.DateTimeParser dateTimeParser34 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter33, dateTimeParser34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.withCenturyOfEra(2);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter35.withChronology(chronology40);
        org.joda.time.Chronology chronology42 = dateTimeFormatter35.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter35.withPivotYear((java.lang.Integer) 0);
        boolean boolean45 = dateTimeFormatter44.isParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        java.lang.String str48 = dateTimeFieldType46.toString();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.hourOfDay();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDurationAdded(readableDuration52, 7);
        org.joda.time.Chronology chronology55 = localDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType46.getField(chronology55);
        org.joda.time.DurationField durationField57 = chronology55.seconds();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter44.withChronology(chronology55);
        org.joda.time.DurationField durationField60 = chronology55.halfdays();
        org.joda.time.DateTime dateTime61 = dateTime32.withChronology(chronology55);
        long long65 = chronology55.add((long) 3, 53827818L, 956);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime32", (dateTime10.compareTo(dateTime32) == 0) == dateTime10.equals(dateTime32));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        boolean boolean19 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property20 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.withCenturyOfEra(4);
        org.joda.time.Instant instant23 = dateTime18.toInstant();
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant23", (dateTime1.compareTo(instant23) == 0) == dateTime1.equals(instant23));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear(99);
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime7.getFieldTypes();
        org.joda.time.Chronology chronology10 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.months();
        long long15 = chronology10.add((-45001L), 53641L, 53652018);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime17.getFieldTypes();
        org.joda.time.Chronology chronology20 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology20.getZone();
        org.joda.time.Chronology chronology24 = chronology10.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology25 = chronology10.withUTC();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime2.toMutableDateTime(chronology10);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay(141311660140800000L, chronology10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime26", (dateTime2.compareTo(mutableDateTime26) == 0) == dateTime2.equals(mutableDateTime26));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property15.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime20 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long25 = dateTimeZone21.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale.Builder builder30 = builder28.clear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getEra();
        org.joda.time.DateTime.Property property34 = dateTime32.secondOfMinute();
        java.lang.String str35 = property34.getAsString();
        org.joda.time.DateTime dateTime37 = property34.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime38 = property34.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime40 = dateTime38.minusSeconds(2922789);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale41.getISO3Country();
        java.util.Locale locale44 = locale41.stripExtensions();
        java.util.Calendar calendar45 = dateTime38.toCalendar(locale41);
        java.util.Locale.Builder builder46 = builder30.setLocale(locale41);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        timeZone49.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone49);
        int int54 = timeZone49.getOffset((long) 53626);
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone49, locale56);
        java.lang.String str58 = locale56.getCountry();
        java.lang.String str59 = locale41.getDisplayCountry(locale56);
        java.lang.String str60 = locale56.getISO3Country();
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone26, locale56);
        java.lang.String str62 = locale56.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar61", (calendar57.compareTo(calendar61) == 0) == calendar57.equals(calendar61));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getEra();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        java.lang.String str6 = property5.getAsString();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = instant1.get(dateTimeField7);
        org.joda.time.Chronology chronology9 = instant1.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.halfdays();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(3599999L, chronology9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime3", (instant1.compareTo(dateTime3) == 0) == instant1.equals(dateTime3));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology7.add(readablePeriod8, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.DurationField durationField13 = durationFieldType2.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology16 = chronology7.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(196L, chronology7);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks(53726374);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(53753);
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 53654, dateTimeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime23", (dateTime17.compareTo(dateTime23) == 0) == dateTime17.equals(dateTime23));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant6 = instant0.withDurationAdded(readableDuration4, (-53622326));
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = instant6.toMutableDateTime();
        org.joda.time.Instant instant9 = instant6.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime8", (instant9.compareTo(mutableDateTime8) == 0) == instant9.equals(mutableDateTime8));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(32772);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTime.Property property18 = dateTime16.dayOfMonth();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        java.lang.String str23 = dateTimeZone20.getShortName((long) 5);
        java.lang.String str24 = dateTimeZone20.getID();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime(dateTimeZone20);
        boolean boolean27 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime29 = dateTime16.minusHours(3);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime16.toMutableDateTimeISO();
        org.joda.time.Instant instant31 = dateTime16.toInstant();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.plus(readableDuration34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant35", (dateTime6.compareTo(instant35) == 0) == dateTime6.equals(instant35));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTime.Property property5 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime7 = property5.setCopy("59");
        org.joda.time.DateTime dateTime8 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfDay(20);
        org.joda.time.DateTime.Property property11 = dateTime10.secondOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        int int19 = dateTimeZone16.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone16);
        int int21 = localDate20.size();
        int int22 = localDate20.getWeekOfWeekyear();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter14.withZone(dateTimeZone24);
        int int29 = dateTimeZone24.getOffsetFromLocal((long) 53665281);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now(dateTimeZone24);
        org.joda.time.DateTime dateTime31 = dateTime10.withZone(dateTimeZone24);
        org.joda.time.Instant instant32 = org.joda.time.Instant.now();
        org.joda.time.Instant instant35 = instant32.withDurationAdded((long) 53629, 53647);
        long long36 = instant32.getMillis();
        org.joda.time.Chronology chronology37 = instant32.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime31.withChronology(chronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant32", (dateTime1.compareTo(instant32) == 0) == dateTime1.equals(instant32));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(53633152);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime18 = property15.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime19 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime21 = property15.addToCopy((long) 53647);
        org.joda.time.DateTime dateTime22 = property15.roundHalfFloorCopy();
        org.joda.time.Interval interval23 = property15.toInterval();
        org.joda.time.DateTime dateTime24 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Instant instant26 = dateTime25.toInstant();
        org.joda.time.DateTime dateTime29 = dateTime25.withDurationAdded(424L, 53721681);
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and instant26", (dateTime25.compareTo(instant26) == 0) == dateTime25.equals(instant26));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(53654002);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDateTime13.toDateTime(dateTimeZone18);
        java.lang.String str22 = dateTimeZone18.getNameKey((long) 53927152);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        long long6 = dateTime5.getMillis();
        java.lang.String str7 = dateTime5.toString();
        org.joda.time.DateTime dateTime9 = dateTime5.minusHours(575);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        java.lang.String str12 = dateTimeFieldType10.toString();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDurationAdded(readableDuration16, 7);
        org.joda.time.Chronology chronology19 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType10.getField(chronology19);
        java.lang.String str21 = dateTimeFieldType10.getName();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime23.getFieldTypes();
        org.joda.time.Chronology chronology26 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType10.getField(chronology26);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(2);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology35.add(readablePeriod36, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.minuteOfHour();
        org.joda.time.DurationField durationField41 = durationFieldType30.getField(chronology35);
        boolean boolean42 = dateTimeFieldType10.isSupported(chronology35);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int46 = dateTime44.get(dateTimeFieldType45);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime44.toMutableDateTimeISO();
        int int48 = dateTime44.getMillisOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getEra();
        int int52 = dateTime50.getSecondOfDay();
        org.joda.time.DateTime dateTime54 = dateTime50.minusYears(12);
        boolean boolean55 = dateTime44.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime57 = dateTime54.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property58 = dateTime57.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime57.getZone();
        org.joda.time.Chronology chronology60 = chronology35.withZone(dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime5.toMutableDateTime(chronology60);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        int int67 = dateTimeZone64.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.millisOfDay();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.withPeriodAdded(readablePeriod73, 53625);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withPeriodAdded(readablePeriod76, (int) (byte) 0);
        boolean boolean79 = dateTimeZone64.equals((java.lang.Object) readablePeriod76);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) 53663, dateTimeZone64);
        org.joda.time.DateTime dateTime81 = dateTime5.withZoneRetainFields(dateTimeZone64);
        org.joda.time.DateTime dateTime82 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant83 = dateTime5.toInstant();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Instant instant86 = instant83.withDurationAdded(readableDuration84, 53789403);
        org.joda.time.DateTime dateTime87 = instant86.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant86", (dateTime5.compareTo(instant86) == 0) == dateTime5.equals(instant86));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime4.minusMonths(53628014);
        org.joda.time.DateTime.Property property16 = dateTime4.yearOfCentury();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1645455243000L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime19.withChronology(chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        java.lang.String str25 = dateTimeZone24.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime23", (dateTime4.compareTo(dateTime23) == 0) == dateTime4.equals(dateTime23));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(32772);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTime.Property property18 = dateTime16.dayOfMonth();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        java.lang.String str23 = dateTimeZone20.getShortName((long) 5);
        java.lang.String str24 = dateTimeZone20.getID();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime(dateTimeZone20);
        boolean boolean27 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime29 = dateTime16.minusHours(3);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime16.toMutableDateTimeISO();
        org.joda.time.Instant instant31 = dateTime16.toInstant();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant33", (dateTime6.compareTo(instant33) == 0) == dateTime6.equals(instant33));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DateTimeField dateTimeField24 = chronology5.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology5.add(readablePeriod25, 424L, 53673303);
        org.joda.time.DurationField durationField29 = chronology5.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology5.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField29", Math.signum(durationField6.compareTo(durationField29)) == -Math.signum(durationField29.compareTo(durationField6)));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime5.getFieldTypes();
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfWeek();
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusMillis((int) (byte) 10);
        int[] intArray22 = chronology8.get((org.joda.time.ReadablePartial) localDateTime17, (long) 54);
        org.joda.time.DurationField durationField23 = chronology8.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField11, and durationField14", !(durationField23.compareTo(durationField11) == 0) || (Math.signum(durationField23.compareTo(durationField14)) == Math.signum(durationField11.compareTo(durationField14))));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.Instant instant10 = instant7.toInstant();
        long long11 = instant7.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.isStandardOffset((long) 53642);
        org.joda.time.DateMidnight dateMidnight8 = localDate4.toDateMidnight(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = dateTime9.minus((long) 53630);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTimeISO();
        int int17 = dateTime13.getMillisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusYears(12);
        boolean boolean24 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime23.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        boolean boolean31 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property32 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.withCenturyOfEra(4);
        org.joda.time.DateTime dateTime36 = dateTime30.withWeekyear(0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        int int41 = dateTimeZone38.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(dateTimeZone38);
        int int43 = localDate42.size();
        int int44 = localDate42.getWeekOfWeekyear();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime36.toDateTime(dateTimeZone46);
        long long53 = dateTimeZone46.convertLocalToUTC((long) 53705210, false, (long) 53688531);
        org.joda.time.DateTime dateTime54 = dateTime9.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int58 = dateTime56.get(dateTimeFieldType57);
        org.joda.time.DateTime dateTime60 = dateTime56.withMillisOfDay(8);
        org.joda.time.DateTime dateTime61 = dateTime56.toDateTimeISO();
        org.joda.time.DateTime dateTime63 = dateTime56.plusWeeks(53693876);
        int int64 = dateTime56.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime56.plus(readableDuration65);
        boolean boolean67 = dateTimeZone46.equals((java.lang.Object) dateTime56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime13", (dateTime9.compareTo(dateTime13) == 0) == dateTime9.equals(dateTime13));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(12);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(localTime10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        java.lang.String str16 = dateTimeZone13.getShortName((long) 5);
        boolean boolean17 = localDate9.equals((java.lang.Object) str16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate19 = localDate9.minus(readablePeriod18);
        org.joda.time.LocalDate.Property property20 = localDate9.era();
        boolean boolean21 = mutableDateTime4.equals((java.lang.Object) localDate9);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getEra();
        int int25 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime23.minusYears(12);
        org.joda.time.DateTime dateTime29 = dateTime23.minusMinutes((-1));
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.minusYears(53628);
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        boolean boolean34 = mutableDateTime4.equals((java.lang.Object) property33);
        org.joda.time.DateTime dateTime36 = property33.addToCopy(13L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime6.toMutableDateTimeISO();
        int int10 = dateTime6.getMillisOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        int int14 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusYears(12);
        boolean boolean17 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withDurationAdded(readableDuration20, 1);
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime19.toYearMonthDay();
        org.joda.time.DateTime dateTime25 = dateTime19.withDayOfYear((int) 'x');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property27 = localDate26.centuryOfEra();
        org.joda.time.LocalDate localDate28 = property27.roundHalfCeilingCopy();
        java.lang.Object obj29 = null;
        org.joda.time.tz.Provider provider30 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone32 = provider30.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj29, dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate28.toDateTimeAtMidnight(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = dateTime25.toDateTime(dateTimeZone32);
        boolean boolean37 = dateTime25.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime25.getZone();
        boolean boolean39 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime6", (instant0.compareTo(dateTime6) == 0) == instant0.equals(dateTime6));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(53654002);
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        java.lang.String str22 = dateTimeFieldType20.toString();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.hourOfDay();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDurationAdded(readableDuration26, 7);
        org.joda.time.Chronology chronology29 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType20.getField(chronology29);
        java.lang.String str31 = dateTimeFieldType20.getName();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime33.getFieldTypes();
        org.joda.time.Chronology chronology36 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.months();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType20.getField(chronology36);
        boolean boolean40 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType20.getDurationType();
        org.joda.time.DateTime dateTime43 = dateTime5.withFieldAdded(durationFieldType41, 53952117);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and dateTime10", (mutableDateTime7.compareTo(dateTime10) == 0) == mutableDateTime7.equals(dateTime10));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        timeZone4.setID("+00:00");
        timeZone4.setRawOffset(2);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        timeZone11.setID("+00:00");
        boolean boolean14 = timeZone4.hasSameRules(timeZone11);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.lang.String str17 = locale15.getLanguage();
        java.lang.String str20 = nameProvider0.getName(locale15, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        timeZone23.setID("+00:00");
        timeZone23.setRawOffset(2);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        timeZone30.setID("+00:00");
        boolean boolean33 = timeZone23.hasSameRules(timeZone30);
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone23, locale34);
        java.lang.String str36 = locale34.getLanguage();
        java.lang.String str37 = locale34.getDisplayLanguage();
        java.lang.String str40 = nameProvider0.getShortName(locale34, "DateTimeField[clockhourOfHalfday]", "57");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale45 = new java.util.Locale("1970", "51", "hi!");
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale45);
        java.lang.String str49 = nameProvider0.getName(locale45, "29.11.1909 00:00:00", "53781856");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar46", (calendar16.compareTo(calendar46) == 0) == calendar16.equals(calendar46));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(32772);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTime.Property property18 = dateTime16.dayOfMonth();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        java.lang.String str23 = dateTimeZone20.getShortName((long) 5);
        java.lang.String str24 = dateTimeZone20.getID();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime(dateTimeZone20);
        boolean boolean27 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime29 = dateTime16.minusHours(3);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime16.toMutableDateTimeISO();
        org.joda.time.Instant instant31 = dateTime16.toInstant();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.joda.time.Instant instant36 = instant31.withDurationAdded((long) 897, 741);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant31", (dateTime6.compareTo(instant31) == 0) == dateTime6.equals(instant31));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        long long10 = instant9.getMillis();
        org.joda.time.Instant instant13 = instant9.withDurationAdded((long) 1320, 558);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant9.minus(readableDuration14);
        org.joda.time.Instant instant17 = instant9.minus(51L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant26.plus(readableDuration29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant30", (dateTime1.compareTo(instant30) == 0) == dateTime1.equals(instant30));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(12);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(localTime10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        java.lang.String str16 = dateTimeZone13.getShortName((long) 5);
        boolean boolean17 = localDate9.equals((java.lang.Object) str16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate19 = localDate9.minus(readablePeriod18);
        org.joda.time.LocalDate.Property property20 = localDate9.era();
        boolean boolean21 = mutableDateTime4.equals((java.lang.Object) localDate9);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime dateTime28 = localTime24.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getEra();
        org.joda.time.DateTime dateTime35 = localTime31.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear(32772);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        java.util.Date date39 = dateTime38.toDate();
        org.joda.time.DateTime.Property property40 = dateTime38.dayOfMonth();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        java.lang.String str45 = dateTimeZone42.getShortName((long) 5);
        java.lang.String str46 = dateTimeZone42.getID();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime48 = dateTime38.toDateTime(dateTimeZone42);
        boolean boolean49 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime51 = dateTime38.minusHours(3);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime54 = dateTime51.withPeriodAdded(readablePeriod52, 7);
        boolean boolean55 = localDate9.equals((java.lang.Object) dateTime51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        int int6 = timeZone2.getOffset((long) 365);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        timeZone9.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone9);
        java.util.Locale locale14 = new java.util.Locale("2022-02-21T14:54:47.855Z");
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone9, locale14);
        boolean boolean16 = timeZone2.hasSameRules(timeZone9);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone2);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        timeZone20.setID("+00:00");
        timeZone20.setRawOffset(2);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        timeZone27.setID("+00:00");
        boolean boolean30 = timeZone20.hasSameRules(timeZone27);
        int int32 = timeZone27.getOffset((long) (short) 10);
        java.time.ZoneId zoneId33 = timeZone27.toZoneId();
        calendar17.setTimeZone(timeZone27);
        timeZone27.setID("2022-02-21T14:57:49.000Z");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar17", (calendar15.compareTo(calendar17) == 0) == calendar15.equals(calendar17));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy(53629404);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime8.getFieldTypes();
        org.joda.time.Chronology chronology11 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.months();
        boolean boolean13 = durationFieldType6.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withPeriodAdded(readablePeriod19, 53625);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.year();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime25 = property22.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfSecond(11);
        int[] intArray29 = chronology11.get((org.joda.time.ReadablePartial) localDateTime27, (long) 53642476);
        org.joda.time.DurationField durationField30 = chronology11.weeks();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology11);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        java.lang.String str36 = dateTimeZone33.getShortName((long) 32772);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTime(dateTimeZone33);
        int int39 = dateTime31.getYearOfCentury();
        boolean boolean40 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime42 = dateTime31.minusMinutes(654);
        org.joda.time.DateTime.Property property43 = dateTime42.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime37", (dateTime31.compareTo(dateTime37) == 0) == dateTime31.equals(dateTime37));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        boolean boolean28 = instant26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = instant26.toDateTimeISO();
        org.joda.time.Instant instant31 = instant26.withMillis(3600000L);
        boolean boolean32 = instant31.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long9 = chronology4.add((-45001L), 53641L, 53652018);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.Chronology chronology14 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.Chronology chronology18 = chronology4.withZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = chronology4.withUTC();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField20", Math.signum(durationField5.compareTo(durationField20)) == -Math.signum(durationField20.compareTo(durationField5)));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(53633931);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds(10);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes((-826));
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime15.getFieldTypes();
        org.joda.time.Chronology chronology18 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.era();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology18.year();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField29 = chronology18.secondOfDay();
        org.joda.time.DateTime dateTime30 = dateTime13.toDateTime(chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime28", (dateTime1.compareTo(dateTime28) == 0) == dateTime1.equals(dateTime28));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.withMillis(0L);
        org.joda.time.Instant instant16 = instant14.withMillis((long) 101);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTime dateTime5 = instant3.toDateTimeISO();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        int int10 = dateTimeZone7.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone7);
        boolean boolean12 = dateTimeZone7.isFixed();
        int int14 = dateTimeZone7.getOffsetFromLocal(0L);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = dateTimeZone7.getName((long) 53648784, locale16);
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Calendar calendar19 = dateTime5.toCalendar(locale16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setRawOffset(0);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean25 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime15);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = dateTime15.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        timeZone35.setID("+00:00");
        timeZone35.setRawOffset(2);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        timeZone42.setID("+00:00");
        boolean boolean45 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone35, locale46);
        java.lang.String str48 = locale46.getLanguage();
        java.lang.String str51 = nameProvider31.getName(locale46, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.lang.String str54 = locale53.getISO3Country();
        java.util.Locale locale55 = locale53.stripExtensions();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str58 = locale53.getUnicodeLocaleType("57");
        java.lang.String str61 = nameProvider31.getShortName(locale53, "49", "GMT");
        java.lang.String str62 = dateTimeZone27.getShortName((long) 32770, locale53);
        java.lang.String str63 = locale5.getDisplayCountry(locale53);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.util.TimeZone.setDefault(timeZone1);
        int int66 = timeZone1.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar64", (calendar47.compareTo(calendar64) == 0) == calendar47.equals(calendar64));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DurationField durationField24 = chronology5.weeks();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology5);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName((long) 32772);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTime(dateTimeZone27);
        int int33 = dateTime25.getYearOfCentury();
        org.joda.time.DateTime dateTime35 = dateTime25.withCenturyOfEra(53753);
        org.joda.time.DateTime.Property property36 = dateTime35.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime32", (dateTime25.compareTo(dateTime32) == 0) == dateTime25.equals(dateTime32));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setRawOffset(0);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean25 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime15);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = dateTime15.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        timeZone35.setID("+00:00");
        timeZone35.setRawOffset(2);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        timeZone42.setID("+00:00");
        boolean boolean45 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone35, locale46);
        java.lang.String str48 = locale46.getLanguage();
        java.lang.String str51 = nameProvider31.getName(locale46, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.lang.String str54 = locale53.getISO3Country();
        java.util.Locale locale55 = locale53.stripExtensions();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str58 = locale53.getUnicodeLocaleType("57");
        java.lang.String str61 = nameProvider31.getShortName(locale53, "49", "GMT");
        java.lang.String str62 = dateTimeZone27.getShortName((long) 32770, locale53);
        java.lang.String str63 = locale5.getDisplayCountry(locale53);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.lang.String str65 = locale5.getISO3Country();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar64", (calendar47.compareTo(calendar64) == 0) == calendar47.equals(calendar64));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Instant instant28 = instant26.minus(1699955806475159000L);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((long) 53765, 53860733);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getActualMinimum(15);
        calendar0.clear();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("clockhourofhalfday");
        calendar0.setTimeZone(timeZone7);
        java.util.Locale locale10 = new java.util.Locale("");
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone7, locale10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar13);
        calendar13.clear();
        java.util.TimeZone timeZone17 = calendar13.getTimeZone();
        java.lang.String str18 = timeZone17.getID();
        boolean boolean19 = timeZone7.hasSameRules(timeZone17);
        boolean boolean20 = timeZone17.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar13", (calendar0.compareTo(calendar13) == 0) == calendar0.equals(calendar13));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.DateTime dateTime10 = instant7.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(53807);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.Instant instant10 = instant7.toInstant();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        int int14 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(53633931);
        java.lang.String str20 = dateTime18.toString("53635");
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTime();
        boolean boolean22 = instant10.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant10", (dateTime4.compareTo(instant10) == 0) == dateTime4.equals(instant10));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(0L, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime(dateTimeZone7);
        java.lang.Object obj11 = null;
        org.joda.time.tz.Provider provider12 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone14 = provider12.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj11, dateTimeZone14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        long long18 = dateTimeZone7.getMillisKeepLocal(dateTimeZone14, (long) 53702496);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime8", (dateTime2.compareTo(dateTime8) == 0) == dateTime2.equals(dateTime8));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant27", (dateTime1.compareTo(instant27) == 0) == dateTime1.equals(instant27));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis(605139);
        java.lang.Object obj11 = null;
        org.joda.time.tz.Provider provider12 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone14 = provider12.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj11, dateTimeZone14);
        int int17 = dateTimeZone14.getStandardOffset(1266764034698L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime10, dateTimeZone14);
        org.joda.time.Instant instant19 = dateTime10.toInstant();
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant19", (dateTime10.compareTo(instant19) == 0) == dateTime10.equals(instant19));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        int int4 = dateTime3.getYearOfEra();
        java.lang.Object obj5 = null;
        org.joda.time.tz.Provider provider6 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone8 = provider6.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj5, dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime3.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime12 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property13 = dateTime3.dayOfWeek();
        int int14 = dateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withMillisOfDay(2);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withYear((int) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        int int24 = localDateTime23.getDayOfYear();
        org.joda.time.Chronology chronology25 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime3.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime26", (dateTime3.compareTo(dateTime26) == 0) == dateTime3.equals(dateTime26));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("0012-04-10");
        org.joda.time.Instant instant3 = instant1.plus((long) 53793);
        org.joda.time.Instant instant5 = instant1.plus(0L);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 21);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        int int12 = dateTimeZone9.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtCurrentTime(dateTimeZone9);
        boolean boolean14 = dateTimeZone9.isFixed();
        long long17 = dateTimeZone9.adjustOffset((long) 53759233, false);
        org.joda.time.MutableDateTime mutableDateTime18 = instant5.toMutableDateTime(dateTimeZone9);
        org.joda.time.Instant instant19 = instant5.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime18", (instant19.compareTo(mutableDateTime18) == 0) == instant19.equals(mutableDateTime18));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(2);
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = chronology5.add(readablePeriod6, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology5.hours();
        org.joda.time.DurationField durationField12 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = chronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology5.yearOfCentury();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay(2878953934490L, chronology5);
        org.joda.time.DurationField durationField16 = chronology5.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField11, and durationField12", !(durationField16.compareTo(durationField11) == 0) || (Math.signum(durationField16.compareTo(durationField12)) == Math.signum(durationField11.compareTo(durationField12))));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = instant3.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology4.years();
        org.joda.time.DurationField durationField10 = chronology4.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField7 and durationField9", (durationField7.compareTo(durationField9) == 0) == durationField7.equals(durationField9));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTimeISO();
        int int16 = dateTime12.getMillisOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusYears(12);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear((int) (byte) 100);
        int int27 = localDate24.getDayOfWeek();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        int int32 = dateTimeZone29.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime33 = localDate24.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime36 = dateTime12.minusDays(0);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfCentury(35);
        boolean boolean39 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getEra();
        org.joda.time.DateTime.Property property44 = dateTime42.secondOfMinute();
        org.joda.time.DateTime dateTime46 = dateTime42.withCenturyOfEra((int) ' ');
        org.joda.time.Chronology chronology47 = dateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime42.getZone();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime40.toMutableDateTime(dateTimeZone48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and instant9", (dateTime40.compareTo(instant9) == 0) == dateTime40.equals(instant9));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        int int7 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withZone(dateTimeZone9);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear((int) (byte) 100);
        int int14 = localDate11.getDayOfWeek();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime20 = localDate11.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.LocalDate localDate22 = localDate11.plusDays((int) '4');
        org.joda.time.Chronology chronology23 = localDate11.getChronology();
        org.joda.time.DateTime dateTime24 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology25 = localDate11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime10.toMutableDateTime(chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime26", (dateTime6.compareTo(mutableDateTime26) == 0) == dateTime6.equals(mutableDateTime26));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DateTimeField dateTimeField24 = chronology5.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology5.halfdayOfDay();
        org.joda.time.DurationField durationField26 = chronology5.eras();
        org.joda.time.DateTimeField dateTimeField27 = chronology5.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField26", Math.signum(durationField6.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField6)));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime9.getFieldTypes();
        org.joda.time.Chronology chronology12 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        long long17 = chronology12.add((-45001L), 53641L, 53652018);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime19.getFieldTypes();
        org.joda.time.Chronology chronology22 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology22.getZone();
        org.joda.time.Chronology chronology26 = chronology12.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.hourOfDay();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDurationAdded(readableDuration31, 7);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusMinutes(53);
        int[] intArray36 = localDateTime35.getValues();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        int int39 = dateTime38.getEra();
        org.joda.time.DateTime.Property property40 = dateTime38.secondOfMinute();
        org.joda.time.DateTime dateTime42 = dateTime38.withCenturyOfEra((int) ' ');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime38.minus(readableDuration43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.era();
        int int46 = dateTime44.get(dateTimeFieldType45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int50 = dateTime48.get(dateTimeFieldType49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime48.toMutableDateTimeISO();
        int int52 = dateTime48.getMillisOfDay();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        int int55 = dateTime54.getEra();
        int int56 = dateTime54.getSecondOfDay();
        org.joda.time.DateTime dateTime58 = dateTime54.minusYears(12);
        boolean boolean59 = dateTime48.isBefore((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = dateTime58.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readablePeriod64);
        boolean boolean66 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology67 = dateTime65.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.millis();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.millisOfDay();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType45.getField(chronology67);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.millisOfDay();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime73.withPeriodAdded(readablePeriod76, 53625);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.year();
        org.joda.time.LocalDateTime localDateTime81 = property79.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime82 = property79.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime83 = property79.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.year();
        int[] intArray86 = chronology67.get((org.joda.time.ReadablePartial) localDateTime83, (long) 53764);
        chronology26.validate((org.joda.time.ReadablePartial) localDateTime35, intArray86);
        org.joda.time.DateTime dateTime88 = dateTime5.toDateTime(chronology26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime38", (dateTime3.compareTo(dateTime38) == 0) == dateTime3.equals(dateTime38));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTime.Property property5 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime7 = property5.setCopy("59");
        org.joda.time.DateTime dateTime9 = property5.addWrapFieldToCopy(53652018);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.minusMonths((int) (byte) 10);
        int int16 = dateTime15.getWeekyear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readableDuration17);
        boolean boolean19 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.TimeOfDay timeOfDay20 = dateTime9.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        java.lang.String str23 = dateTimeFieldType21.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.hourOfDay();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDurationAdded(readableDuration27, 7);
        org.joda.time.Chronology chronology30 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType21.getField(chronology30);
        org.joda.time.DurationField durationField32 = chronology30.seconds();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField34 = chronology30.weekyear();
        org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField34, 190, 53, 536999);
        int int39 = dateTime9.get(dateTimeField34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime33", (dateTime1.compareTo(dateTime33) == 0) == dateTime1.equals(dateTime33));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 10);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = instant1.isAfter(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime4);
        int int6 = localDateTime5.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.year();
        org.joda.time.DurationField durationField13 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField15 = chronology9.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField15, and durationField13", !(durationField13.compareTo(durationField15) == 0) || (Math.signum(durationField13.compareTo(durationField13)) == Math.signum(durationField15.compareTo(durationField13))));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        timeZone6.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone6);
        int int11 = timeZone6.getOffset((long) 53626);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone6, locale13);
        java.lang.String str15 = calendar14.getCalendarType();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 0, dateTimeZone18);
        org.joda.time.DateTime dateTime23 = localTime22.toDateTimeToday();
        org.joda.time.LocalTime localTime25 = localTime22.withSecondOfMinute(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property27 = localTime25.property(dateTimeFieldType26);
        boolean boolean28 = calendar14.before((java.lang.Object) property27);
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        org.joda.time.LocalTime localTime30 = property27.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime31 = localDate2.toLocalDateTime(localTime30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar14", (calendar0.compareTo(calendar14) == 0) == calendar0.equals(calendar14));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 10);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology4 = mutableDateTime3.getChronology();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime11 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalTime localTime13 = localTime7.plusMillis((-1));
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime16 = localTime7.withPeriodAdded(readablePeriod14, 350);
        long long18 = chronology4.set((org.joda.time.ReadablePartial) localTime7, (long) 53903095);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime3", (instant1.compareTo(mutableDateTime3) == 0) == instant1.equals(mutableDateTime3));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.isStandardOffset((long) 53642);
        org.joda.time.DateMidnight dateMidnight8 = localDate4.toDateMidnight(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = dateTime9.minus((long) 53630);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTimeISO();
        int int17 = dateTime13.getMillisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusYears(12);
        boolean boolean24 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime23.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        boolean boolean31 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property32 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.withCenturyOfEra(4);
        org.joda.time.DateTime dateTime36 = dateTime30.withWeekyear(0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        int int41 = dateTimeZone38.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(dateTimeZone38);
        int int43 = localDate42.size();
        int int44 = localDate42.getWeekOfWeekyear();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime36.toDateTime(dateTimeZone46);
        long long53 = dateTimeZone46.convertLocalToUTC((long) 53705210, false, (long) 53688531);
        org.joda.time.DateTime dateTime54 = dateTime9.toDateTime(dateTimeZone46);
        org.joda.time.YearMonthDay yearMonthDay55 = dateTime54.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime13", (dateTime9.compareTo(dateTime13) == 0) == dateTime9.equals(dateTime13));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime14.getZone();
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(0);
        int int19 = dateTime14.getWeekyear();
        org.joda.time.Instant instant20 = dateTime14.toInstant();
        org.joda.time.DateTime.Property property21 = dateTime14.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant20", (dateTime14.compareTo(instant20) == 0) == dateTime14.equals(instant20));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        long long4 = instant0.getMillis();
        org.joda.time.Chronology chronology5 = instant0.getChronology();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant0.withDurationAdded(readableDuration6, 86399);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology13.getZone();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.secondOfDay();
        org.joda.time.DurationField durationField22 = chronology13.minutes();
        org.joda.time.DateTime dateTime23 = instant0.toDateTime(chronology13);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        java.util.Date date25 = localDate24.toDate();
        org.joda.time.LocalDate.Property property26 = localDate24.dayOfYear();
        java.lang.String str27 = property26.toString();
        long long28 = property26.remainder();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime.Property property32 = dateTime30.secondOfMinute();
        java.lang.String str33 = property32.getAsString();
        org.joda.time.DateTime dateTime35 = property32.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime36 = property32.withMinimumValue();
        org.joda.time.DateTime dateTime38 = property32.addWrapFieldToCopy(53673303);
        org.joda.time.DateTime dateTime39 = property32.roundFloorCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfMinute();
        int int41 = property26.getDifference((org.joda.time.ReadableInstant) dateTime39);
        int int42 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime30", (instant0.compareTo(dateTime30) == 0) == instant0.equals(dateTime30));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        boolean boolean3 = property2.isLeap();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(53637);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(53662);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int12 = dateTime10.get(dateTimeFieldType11);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTimeISO();
        int int14 = dateTime10.getMillisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        int int18 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusYears(12);
        boolean boolean21 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property24.roundCeilingCopy();
        org.joda.time.DateTime dateTime26 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime28 = property24.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime29 = property24.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        long long34 = dateTimeZone30.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        org.joda.time.DateTime dateTime35 = localDateTime8.toDateTime(dateTimeZone30);
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.Instant instant37 = dateTime35.toInstant();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant39", (dateTime35.compareTo(instant39) == 0) == dateTime35.equals(instant39));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) 53642);
        org.joda.time.DateMidnight dateMidnight9 = localDate5.toDateMidnight(dateTimeZone6);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.minus((long) 53630);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTimeISO();
        int int18 = dateTime14.getMillisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getEra();
        int int22 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears(12);
        boolean boolean25 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readablePeriod30);
        boolean boolean32 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property33 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime31.withCenturyOfEra(4);
        org.joda.time.DateTime dateTime37 = dateTime31.withWeekyear(0);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        int int42 = dateTimeZone39.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(dateTimeZone39);
        int int44 = localDate43.size();
        int int45 = localDate43.getWeekOfWeekyear();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str48 = dateTimeZone47.toString();
        org.joda.time.DateTime dateTime49 = localDate43.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime37.toDateTime(dateTimeZone47);
        long long54 = dateTimeZone47.convertLocalToUTC((long) 53705210, false, (long) 53688531);
        org.joda.time.DateTime dateTime55 = dateTime10.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 53654, dateTimeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime14", (dateTime10.compareTo(dateTime14) == 0) == dateTime10.equals(dateTime14));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        int int3 = localDateTime1.getYear();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        int int9 = localDateTime7.getYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(53655);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        java.lang.String str16 = dateTimeFieldType14.toString();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.hourOfDay();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDurationAdded(readableDuration20, 7);
        org.joda.time.Chronology chronology23 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType14.getField(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.seconds();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withPeriodAdded(readablePeriod32, 53625);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.year();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime38 = property35.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = property35.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDateTime45.getFieldTypes();
        org.joda.time.Chronology chronology48 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.weekOfWeekyear();
        org.joda.time.DurationField durationField51 = chronology48.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.dayOfWeek();
        org.joda.time.DurationField durationField54 = chronology48.minutes();
        org.joda.time.DateTime dateTime55 = dateTime43.toDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusMillis((int) (byte) 10);
        int[] intArray62 = chronology48.get((org.joda.time.ReadablePartial) localDateTime57, (long) 54);
        chronology23.validate((org.joda.time.ReadablePartial) localDateTime39, intArray62);
        chronology4.validate((org.joda.time.ReadablePartial) localDateTime13, intArray62);
        org.joda.time.DurationField durationField65 = chronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField65, durationField25, and durationField51", !(durationField65.compareTo(durationField25) == 0) || (Math.signum(durationField65.compareTo(durationField51)) == Math.signum(durationField25.compareTo(durationField51))));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 10);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant5 = instant1.withDurationAdded(readableDuration3, 53627827);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.Instant instant8 = instant5.minus(406L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime6", (instant5.compareTo(dateTime6) == 0) == instant5.equals(dateTime6));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone2);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        int int13 = dateTimeZone10.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone10);
        int int15 = localDate14.size();
        int int16 = localDate14.getWeekOfWeekyear();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter8.withZone(dateTimeZone18);
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        timeZone26.setID("+00:00");
        timeZone26.setRawOffset(2);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        timeZone33.setID("+00:00");
        boolean boolean36 = timeZone26.hasSameRules(timeZone33);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone26, locale37);
        java.lang.String str39 = locale37.getLanguage();
        java.lang.String str42 = nameProvider22.getName(locale37, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale44 = new java.util.Locale("hi!");
        java.lang.String str45 = locale44.getISO3Country();
        java.util.Locale locale46 = locale44.stripExtensions();
        java.lang.String str47 = locale44.getScript();
        java.lang.String str49 = locale44.getUnicodeLocaleType("57");
        java.lang.String str52 = nameProvider22.getShortName(locale44, "49", "GMT");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter21.withLocale(locale44);
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale54.getDisplayName();
        java.util.Locale locale57 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str58 = locale54.getDisplayLanguage(locale57);
        java.lang.String str59 = locale44.getDisplayScript(locale57);
        java.util.Locale locale60 = locale44.stripExtensions();
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.lang.String str62 = locale61.toLanguageTag();
        java.lang.String str63 = locale44.getDisplayLanguage(locale61);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone2, locale61);
        java.lang.Object obj65 = timeZone2.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar64", (calendar38.compareTo(calendar64) == 0) == calendar38.equals(calendar64));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 10);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = instant1.isAfter(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.Instant instant7 = instant1.withDurationAdded((long) 53698730, 53684);
        boolean boolean8 = instant1.isAfterNow();
        org.joda.time.Instant instant10 = instant1.withMillis((long) 53835500);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime19 = localTime13.plusMillis((-1));
        org.joda.time.LocalTime localTime21 = localTime19.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalTime localTime24 = localTime19.withPeriodAdded(readablePeriod22, (int) '4');
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getEra();
        org.joda.time.DateTime.Property property29 = dateTime27.secondOfMinute();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.DateTime dateTime31 = property29.roundCeilingCopy();
        int int32 = property25.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime31.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime36 = dateTime34.minusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes((int) (short) 10);
        boolean boolean39 = instant10.equals((java.lang.Object) dateTime34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(32772);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTime();
        java.util.Date date10 = dateTime9.toDate();
        org.joda.time.DateTime.Property property11 = dateTime9.dayOfMonth();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        java.lang.String str16 = dateTimeZone13.getShortName((long) 5);
        java.lang.String str17 = dateTimeZone13.getID();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTime(dateTimeZone13);
        java.util.GregorianCalendar gregorianCalendar20 = dateTime9.toGregorianCalendar();
        org.joda.time.Instant instant21 = dateTime9.toInstant();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime9.plus(readablePeriod22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant21", (dateTime23.compareTo(instant21) == 0) == dateTime23.equals(instant21));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 356);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.minus(readableDuration2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = instant5.isAfter(readableInstant6);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTime();
        boolean boolean9 = instant1.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime10 = instant5.toMutableDateTimeISO();
        boolean boolean11 = mutableDateTime10.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime8", (instant5.compareTo(mutableDateTime8) == 0) == instant5.equals(mutableDateTime8));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(2922789);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime12 = dateTime9.withFieldAdded(durationFieldType10, 53655);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime14.getFieldTypes();
        org.joda.time.Chronology chronology17 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DurationField durationField20 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.year();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfDay(53739776);
        boolean boolean30 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime27", (dateTime1.compareTo(dateTime27) == 0) == dateTime1.equals(dateTime27));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int6 = localDate5.size();
        int int7 = localDate5.getWeekOfWeekyear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime11 = localDate5.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        java.lang.String str14 = dateTime11.toString("-1");
        java.util.GregorianCalendar gregorianCalendar15 = dateTime11.toGregorianCalendar();
        gregorianCalendar15.setMinimalDaysInFirstWeek(821634);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant12", (dateTime11.compareTo(instant12) == 0) == dateTime11.equals(instant12));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        int int9 = dateTime7.compareTo((org.joda.time.ReadableInstant) instant8);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property11 = localDate10.centuryOfEra();
        org.joda.time.LocalDate localDate12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDate12.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        int int15 = localDate12.get(dateTimeFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getDurationType();
        boolean boolean17 = instant8.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType14.getField(chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime7 = property3.withMinimumValue();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.DateTime dateTime10 = dateTime7.withYear(2005);
        org.joda.time.DateTime dateTime12 = dateTime7.minusHours(53668);
        org.joda.time.Instant instant13 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime.Property property17 = dateTime15.secondOfMinute();
        java.lang.String str18 = property17.getAsString();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        int int20 = instant13.get(dateTimeField19);
        org.joda.time.Chronology chronology21 = instant13.getChronology();
        org.joda.time.DateTime dateTime22 = instant13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant13.minus(readableDuration23);
        int int25 = dateTime12.compareTo((org.joda.time.ReadableInstant) instant24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant24", (dateTime1.compareTo(instant24) == 0) == dateTime1.equals(instant24));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        int int5 = localDateTime4.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withCenturyOfEra(366);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withYearOfEra(52);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.Chronology chronology14 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.yearOfEra();
        int int19 = dateTimeField16.getDifference((long) (-53637188), 343L);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField16.getType();
        java.lang.String str21 = dateTimeFieldType20.toString();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(2);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology27.add(readablePeriod28, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.minuteOfHour();
        org.joda.time.DurationField durationField33 = durationFieldType22.getField(chronology27);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology36 = chronology27.withZone(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusWeeks(9);
        java.util.Date date46 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant47 = date46.toInstant();
        boolean boolean48 = localDateTime42.equals((java.lang.Object) instant47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime42.plusHours(2022);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusYears(53638);
        int[] intArray54 = chronology27.get((org.joda.time.ReadablePartial) localDateTime52, (-536L));
        boolean boolean55 = dateTimeFieldType20.isSupported(chronology27);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType20.getDurationType();
        boolean boolean57 = localDateTime4.isSupported(durationFieldType56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMillis(53625);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withYearOfEra(53634);
        int int66 = localDateTime63.getDayOfWeek();
        org.joda.time.Chronology chronology67 = localDateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.hourOfHalfday();
        org.joda.time.DateTime dateTime69 = dateTime59.withChronology(chronology67);
        int int70 = dateTime59.getCenturyOfEra();
        org.joda.time.DateTime dateTime71 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime69", (dateTime24.compareTo(dateTime69) == 0) == dateTime24.equals(dateTime69));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        long long9 = chronology4.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DurationField durationField10 = chronology4.millis();
        org.joda.time.DurationField durationField11 = chronology4.hours();
        org.joda.time.DurationField durationField12 = chronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField5, and durationField10", !(durationField12.compareTo(durationField5) == 0) || (Math.signum(durationField12.compareTo(durationField10)) == Math.signum(durationField5.compareTo(durationField10))));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTimeISO();
        int int16 = dateTime12.getMillisOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusYears(12);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear((int) (byte) 100);
        int int27 = localDate24.getDayOfWeek();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        int int32 = dateTimeZone29.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime33 = localDate24.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime36 = dateTime12.minusDays(0);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfCentury(35);
        boolean boolean39 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = dateTime6.withLaterOffsetAtOverlap();
        int int41 = dateTime6.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime6", (instant9.compareTo(dateTime6) == 0) == instant9.equals(dateTime6));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getRangeDurationType();
        int int6 = instant0.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = instant0.toDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime14 = localTime10.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str16 = dateTime14.toString("+00:00");
        org.joda.time.DateTime dateTime17 = dateTime14.withTimeAtStartOfDay();
        int int18 = dateTime14.getMinuteOfDay();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        timeZone22.setID("+00:00");
        timeZone22.setRawOffset(2);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        timeZone29.setID("+00:00");
        boolean boolean32 = timeZone22.hasSameRules(timeZone29);
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone22, locale33);
        java.lang.String str35 = locale33.getLanguage();
        java.lang.String str36 = locale33.getDisplayLanguage();
        java.lang.String str37 = locale33.getCountry();
        java.lang.String str38 = dateTime14.toString("2022", locale33);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime14.getZone();
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 21);
        org.joda.time.DateTime dateTime42 = dateTime7.withZoneRetainFields(dateTimeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime12", (instant0.compareTo(dateTime12) == 0) == instant0.equals(dateTime12));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        int int18 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime17.plusYears(53627);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime.Property property22 = dateTime17.property(dateTimeFieldType21);
        java.lang.Object obj23 = null;
        org.joda.time.tz.Provider provider24 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone26 = provider24.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj23, dateTimeZone26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        int int30 = dateTime29.getEra();
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        java.lang.String str32 = property31.getAsString();
        org.joda.time.DateTime dateTime34 = property31.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime35 = property31.getDateTime();
        int int36 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property37 = dateTime35.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 0);
        org.joda.time.DateTime dateTime41 = dateTime35.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime17.toDateTime(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime41", (dateTime1.compareTo(dateTime41) == 0) == dateTime1.equals(dateTime41));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DurationField durationField24 = chronology5.weeks();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology5);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName((long) 32772);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology33 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime31", (dateTime25.compareTo(dateTime31) == 0) == dateTime25.equals(dateTime31));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, 53625);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(53633152);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime18 = property15.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime19 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime21 = property15.addToCopy((long) 53647);
        org.joda.time.DateTime dateTime22 = property15.roundHalfFloorCopy();
        org.joda.time.Interval interval23 = property15.toInterval();
        org.joda.time.DateTime dateTime24 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Instant instant26 = dateTime25.toInstant();
        org.joda.time.DateTime dateTime29 = dateTime25.withDurationAdded(424L, 53721681);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and instant26", (dateTime25.compareTo(instant26) == 0) == dateTime25.equals(instant26));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plus(readableDuration10);
        int int12 = localDateTime11.getHourOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        timeZone16.setID("+00:00");
        timeZone16.setRawOffset(2);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        timeZone23.setID("+00:00");
        boolean boolean26 = timeZone16.hasSameRules(timeZone23);
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone16, locale27);
        timeZone16.setID("1970");
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = locale31.getDisplayName();
        java.lang.String str33 = locale31.getISO3Country();
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleAttributes();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone16, locale31);
        java.lang.String str36 = localDateTime11.toString("27", locale31);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.weekOfWeekyear();
        java.lang.Object obj41 = null;
        boolean boolean42 = localDateTime38.equals(obj41);
        int int43 = localDateTime38.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property44 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.withPeriodAdded(readablePeriod49, 53625);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.year();
        java.lang.String str53 = property52.getAsShortText();
        org.joda.time.LocalDateTime localDateTime55 = property52.setCopy(99);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusDays(53642927);
        int int58 = localDateTime55.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.millisOfDay();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.weekOfWeekyear();
        java.lang.Object obj63 = null;
        boolean boolean64 = localDateTime60.equals(obj63);
        int int65 = localDateTime60.getMillisOfSecond();
        java.util.Calendar calendar66 = java.util.Calendar.getInstance();
        boolean boolean67 = calendar66.isWeekDateSupported();
        int int69 = calendar66.getActualMinimum(15);
        calendar66.setLenient(true);
        boolean boolean72 = localDateTime60.equals((java.lang.Object) calendar66);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int74 = localDateTime60.get(dateTimeFieldType73);
        int int75 = localDateTime55.indexOf(dateTimeFieldType73);
        org.joda.time.LocalDateTime.Property property76 = localDateTime38.property(dateTimeFieldType73);
        org.joda.time.LocalDateTime.Property property77 = localDateTime11.property(dateTimeFieldType73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar28 and calendar66", (calendar28.compareTo(calendar66) == 0) == calendar28.equals(calendar66));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("0012-04-10");
        org.joda.time.Instant instant3 = instant1.plus((long) 53793);
        org.joda.time.Instant instant5 = instant1.plus(0L);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 21);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        int int12 = dateTimeZone9.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtCurrentTime(dateTimeZone9);
        boolean boolean14 = dateTimeZone9.isFixed();
        long long17 = dateTimeZone9.adjustOffset((long) 53759233, false);
        org.joda.time.MutableDateTime mutableDateTime18 = instant5.toMutableDateTime(dateTimeZone9);
        org.joda.time.Instant instant21 = instant5.withDurationAdded((long) 53964, 53992805);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime18", (instant5.compareTo(mutableDateTime18) == 0) == instant5.equals(mutableDateTime18));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("-1");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getEra();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(0);
        org.joda.time.DateTime dateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getEra();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        java.lang.String str13 = property12.getAsString();
        org.joda.time.DateTime dateTime15 = property12.addWrapFieldToCopy(53630);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        org.joda.time.DateTime dateTime19 = dateTime15.withFieldAdded(durationFieldType17, 53633152);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.plusMinutes(53724);
        org.joda.time.Instant instant23 = dateTime19.toInstant();
        long long24 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) instant23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) instant23);
        org.joda.time.LocalDate localDate26 = localDate1.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant23", (dateTime19.compareTo(instant23) == 0) == dateTime19.equals(instant23));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.plus(readableDuration4);
        org.joda.time.DateTime dateTime7 = dateTime1.withYearOfEra(53632);
        org.joda.time.Chronology chronology8 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfYear();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 1);
        org.joda.time.LocalTime.Property property13 = localTime12.hourOfDay();
        java.lang.String str14 = property13.getAsText();
        java.lang.String str15 = property13.getAsShortText();
        org.joda.time.LocalTime localTime16 = property13.roundHalfFloorCopy();
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.Instant instant20 = instant17.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getRangeDurationType();
        int int23 = instant17.get(dateTimeFieldType21);
        boolean boolean24 = localTime16.isSupported(dateTimeFieldType21);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        int int32 = dateTimeZone29.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(dateTimeZone29);
        int int34 = localDate33.size();
        int int35 = localDate33.getWeekOfWeekyear();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str38 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime39 = localDate33.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter27.withZone(dateTimeZone37);
        int int42 = dateTimeZone37.getOffsetFromLocal((long) 53665281);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(dateTimeZone37);
        org.joda.time.DateTime dateTime44 = localDate10.toDateTime(localTime16, dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant17", (dateTime1.compareTo(instant17) == 0) == dateTime1.equals(instant17));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDate2.getFieldTypes();
        org.joda.time.LocalDate localDate5 = localDate2.plusYears(14);
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime.Property property10 = dateTime8.secondOfMinute();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        int int13 = instant6.get(dateTimeField12);
        org.joda.time.Chronology chronology14 = instant6.getChronology();
        org.joda.time.DateTime dateTime15 = localDate5.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(53811);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime8", (instant6.compareTo(dateTime8) == 0) == instant6.equals(dateTime8));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property3 = localDate1.monthOfYear();
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone10.isStandardOffset((long) 53642);
        org.joda.time.DateMidnight dateMidnight13 = localDate9.toDateMidnight(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.minus((long) 53630);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTimeISO();
        int int22 = dateTime18.getMillisOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getEra();
        int int26 = dateTime24.getSecondOfDay();
        org.joda.time.DateTime dateTime28 = dateTime24.minusYears(12);
        boolean boolean29 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime28.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readablePeriod34);
        boolean boolean36 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.withCenturyOfEra(4);
        org.joda.time.DateTime dateTime41 = dateTime35.withWeekyear(0);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.util.TimeZone timeZone44 = dateTimeZone43.toTimeZone();
        int int46 = dateTimeZone43.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now(dateTimeZone43);
        int int48 = localDate47.size();
        int int49 = localDate47.getWeekOfWeekyear();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate47.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime41.toDateTime(dateTimeZone51);
        long long58 = dateTimeZone51.convertLocalToUTC((long) 53705210, false, (long) 53688531);
        org.joda.time.DateTime dateTime59 = dateTime14.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime60 = localDate1.toDateTimeAtStartOfDay(dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime18", (dateTime14.compareTo(dateTime18) == 0) == dateTime14.equals(dateTime18));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getRangeDurationType();
        int int6 = instant0.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = instant0.toDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant0.minus(readableDuration8);
        org.joda.time.Instant instant11 = instant9.plus(977L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime7", (instant9.compareTo(dateTime7) == 0) == instant9.equals(dateTime7));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test385");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = dateTimeZone2.toString();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) (short) -1);
        int int7 = dateTimeZone2.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(262L, dateTimeZone2);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        java.lang.String str19 = dateTime17.toString("+00:00");
        org.joda.time.DateTime dateTime20 = dateTime17.withTimeAtStartOfDay();
        int int21 = dateTime17.getMinuteOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        timeZone25.setID("+00:00");
        timeZone25.setRawOffset(2);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        timeZone32.setID("+00:00");
        boolean boolean35 = timeZone25.hasSameRules(timeZone32);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone25, locale36);
        java.lang.String str38 = locale36.getLanguage();
        java.lang.String str39 = locale36.getDisplayLanguage();
        java.lang.String str40 = locale36.getCountry();
        java.lang.String str41 = dateTime17.toString("2022", locale36);
        java.lang.String str42 = dateTimeZone2.getShortName(0L, locale36);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder43.clear();
        java.util.Locale.Builder builder45 = builder44.clear();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Locale.Builder builder47 = builder44.setLocale(locale46);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        timeZone50.setID("+00:00");
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone50, locale53);
        java.util.Locale.Builder builder55 = builder44.setLocale(locale53);
        java.util.Locale.Builder builder56 = builder55.clearExtensions();
        java.util.Locale locale57 = builder56.build();
        java.lang.String str58 = locale57.toLanguageTag();
        java.lang.String str59 = locale36.getDisplayVariant(locale57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar37 and calendar54", (calendar37.compareTo(calendar54) == 0) == calendar37.equals(calendar54));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test386");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.DateTime dateTime5 = instant3.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test387");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DurationField durationField24 = chronology5.weeks();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology5);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName((long) 32772);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property33 = dateTime25.dayOfMonth();
        boolean boolean34 = property33.isLeap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime31", (dateTime25.compareTo(dateTime31) == 0) == dateTime25.equals(dateTime31));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test388");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.Instant instant11 = instant7.withMillis(0L);
        org.joda.time.DateTime dateTime12 = instant11.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test389");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        long long6 = dateTime5.getMillis();
        java.lang.String str7 = dateTime5.toString();
        org.joda.time.DateTime dateTime9 = dateTime5.minusHours(575);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        java.lang.String str12 = dateTimeFieldType10.toString();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDurationAdded(readableDuration16, 7);
        org.joda.time.Chronology chronology19 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType10.getField(chronology19);
        java.lang.String str21 = dateTimeFieldType10.getName();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime23.getFieldTypes();
        org.joda.time.Chronology chronology26 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType10.getField(chronology26);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(2);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology35.add(readablePeriod36, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.minuteOfHour();
        org.joda.time.DurationField durationField41 = durationFieldType30.getField(chronology35);
        boolean boolean42 = dateTimeFieldType10.isSupported(chronology35);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int46 = dateTime44.get(dateTimeFieldType45);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime44.toMutableDateTimeISO();
        int int48 = dateTime44.getMillisOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getEra();
        int int52 = dateTime50.getSecondOfDay();
        org.joda.time.DateTime dateTime54 = dateTime50.minusYears(12);
        boolean boolean55 = dateTime44.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime57 = dateTime54.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property58 = dateTime57.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime57.getZone();
        org.joda.time.Chronology chronology60 = chronology35.withZone(dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime5.toMutableDateTime(chronology60);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        int int67 = dateTimeZone64.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.millisOfDay();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.withPeriodAdded(readablePeriod73, 53625);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withPeriodAdded(readablePeriod76, (int) (byte) 0);
        boolean boolean79 = dateTimeZone64.equals((java.lang.Object) readablePeriod76);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) 53663, dateTimeZone64);
        org.joda.time.DateTime dateTime81 = dateTime5.withZoneRetainFields(dateTimeZone64);
        org.joda.time.DateTime dateTime82 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant83 = dateTime5.toInstant();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Instant instant86 = instant83.withDurationAdded(readableDuration84, 53789403);
        org.joda.time.Instant instant88 = instant86.plus((long) 53944731);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant86", (dateTime5.compareTo(instant86) == 0) == dateTime5.equals(instant86));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test390");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.DateTime dateTime7 = dateTime1.minusMinutes((-1));
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.minusYears(53628);
        org.joda.time.DateTime.Property property11 = dateTime10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = dateTime10.plusSeconds(53629404);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime17.getFieldTypes();
        org.joda.time.Chronology chronology20 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.months();
        boolean boolean22 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfDay();
        org.joda.time.DurationField durationField24 = durationFieldType14.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.hourOfDay();
        org.joda.time.DurationField durationField26 = chronology20.centuries();
        org.joda.time.DateTime dateTime27 = dateTime10.withChronology(chronology20);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getEra();
        org.joda.time.DateTime dateTime37 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getEra();
        int int41 = dateTime39.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.plus(readableDuration42);
        boolean boolean44 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean45 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime35);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateTime dateTime48 = dateTime35.withZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getEra();
        org.joda.time.DateTime.Property property52 = dateTime50.secondOfMinute();
        org.joda.time.DateTime dateTime54 = dateTime50.withCenturyOfEra((int) ' ');
        boolean boolean55 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime50);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        int int61 = dateTimeZone58.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) 0, dateTimeZone58);
        int int63 = localTime62.size();
        org.joda.time.Chronology chronology64 = localTime62.getChronology();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((java.lang.Object) dateTime35, chronology64);
        boolean boolean66 = dateTime27.equals((java.lang.Object) chronology64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime65", (dateTime1.compareTo(dateTime65) == 0) == dateTime1.equals(dateTime65));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test391");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks(9);
        java.util.Date date8 = new java.util.Date(10, (int) (byte) -1, (-1));
        java.time.Instant instant9 = date8.toInstant();
        boolean boolean10 = localDateTime4.equals((java.lang.Object) instant9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusHours(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(101);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDurationAdded(readableDuration16, 53707);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusYears(53638);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        int int25 = dateTimeZone22.getOffsetFromLocal((long) 12);
        long long27 = dateTimeZone22.nextTransition((long) 53753947);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime.Property property32 = dateTime30.secondOfMinute();
        java.lang.String str33 = property32.getAsString();
        org.joda.time.DateTime dateTime35 = property32.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime36 = property32.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property37 = dateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime39.getFieldTypes();
        org.joda.time.Chronology chronology42 = localDateTime39.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.months();
        long long47 = chronology42.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField48 = chronology42.minuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime36.withChronology(chronology42);
        java.util.GregorianCalendar gregorianCalendar50 = dateTime36.toGregorianCalendar();
        int int51 = dateTime36.getWeekOfWeekyear();
        boolean boolean52 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((java.lang.Object) dateTime36);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant53.plus(readableDuration54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime49", (dateTime36.compareTo(dateTime49) == 0) == dateTime36.equals(dateTime49));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test392");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        org.joda.time.DateTime dateTime13 = dateTime7.minusMinutes((-1));
        long long14 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = dateTime13.withDurationAdded((long) 53627827, 21);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(2);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology23.add(readablePeriod24, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.minuteOfHour();
        org.joda.time.DurationField durationField29 = durationFieldType18.getField(chronology23);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology32 = chronology23.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime13.toDateTime(chronology32);
        int int34 = dateTime33.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        boolean boolean37 = dateTime33.isSupported(dateTimeFieldType35);
        org.joda.time.DateTime.Property property38 = dateTime33.yearOfCentury();
        org.joda.time.DateTime dateTime39 = property38.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime33", (dateTime13.compareTo(dateTime33) == 0) == dateTime13.equals(dateTime33));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test393");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setRawOffset(0);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean25 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime15);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = dateTime15.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        timeZone35.setID("+00:00");
        timeZone35.setRawOffset(2);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        timeZone42.setID("+00:00");
        boolean boolean45 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone35, locale46);
        java.lang.String str48 = locale46.getLanguage();
        java.lang.String str51 = nameProvider31.getName(locale46, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.lang.String str54 = locale53.getISO3Country();
        java.util.Locale locale55 = locale53.stripExtensions();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str58 = locale53.getUnicodeLocaleType("57");
        java.lang.String str61 = nameProvider31.getShortName(locale53, "49", "GMT");
        java.lang.String str62 = dateTimeZone27.getShortName((long) 32770, locale53);
        java.lang.String str63 = locale5.getDisplayCountry(locale53);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.util.Set<java.lang.String> strSet65 = locale5.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar64", (calendar47.compareTo(calendar64) == 0) == calendar47.equals(calendar64));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test394");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime.Property property30 = dateTime28.secondOfMinute();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear((int) (byte) 100);
        int int34 = localDate31.getDayOfWeek();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        int int39 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime40 = localDate31.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime28.toMutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = instant26.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime43 = instant26.toDateTime();
        org.joda.time.Instant instant45 = instant26.minus((long) 53869353);
        org.joda.time.Instant instant46 = instant45.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test395");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(2);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        java.lang.Integer int9 = dateTimeFormatter2.getPivotYear();
        boolean boolean10 = dateTimeFormatter2.isParser();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property12 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate13 = property12.roundHalfCeilingCopy();
        java.lang.Object obj14 = null;
        org.joda.time.tz.Provider provider15 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone17 = provider15.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj14, dateTimeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate13.toDateTimeAtMidnight(dateTimeZone17);
        long long22 = dateTimeZone17.previousTransition((-61839450330000L));
        long long25 = dateTimeZone17.adjustOffset((long) 53721681, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withZone(dateTimeZone17);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        int int31 = dateTimeZone28.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(dateTimeZone28);
        int int33 = localDate32.size();
        int int34 = localDate32.getWeekOfWeekyear();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime38 = localDate32.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.Instant instant39 = dateTime38.toInstant();
        org.joda.time.Instant instant41 = instant39.withMillis((long) 53762);
        org.joda.time.Instant instant43 = instant39.plus((long) 53675);
        org.joda.time.Instant instant46 = instant39.withDurationAdded(1645455367000L, 53749);
        boolean boolean47 = dateTimeZone17.equals((java.lang.Object) 1645455367000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant39", (dateTime4.compareTo(instant39) == 0) == dateTime4.equals(instant39));
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test396");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, 1);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime20.getFieldTypes();
        org.joda.time.Chronology chronology23 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.months();
        boolean boolean25 = durationFieldType18.isSupported(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime26", (dateTime14.compareTo(dateTime26) == 0) == dateTime14.equals(dateTime26));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test397");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(196L);
        org.joda.time.LocalDate localDate3 = localDate1.withWeekyear(53650);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        int int5 = localDate3.getWeekOfWeekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTimeISO();
        int int11 = dateTime7.getMillisOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        int int15 = dateTime13.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime13.minusYears(12);
        boolean boolean18 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime22 = property21.roundCeilingCopy();
        org.joda.time.DateTime dateTime23 = property21.withMaximumValue();
        org.joda.time.DateTime dateTime25 = property21.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime26 = property21.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        long long31 = dateTimeZone27.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        java.util.TimeZone timeZone32 = dateTimeZone27.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        timeZone37.setID("+00:00");
        timeZone37.setRawOffset(2);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.util.TimeZone timeZone44 = dateTimeZone43.toTimeZone();
        timeZone44.setID("+00:00");
        boolean boolean47 = timeZone37.hasSameRules(timeZone44);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone37, locale48);
        java.lang.String str50 = locale48.getLanguage();
        java.lang.String str53 = nameProvider33.getName(locale48, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale55 = new java.util.Locale("hi!");
        java.lang.String str56 = locale55.getISO3Country();
        java.util.Locale locale57 = locale55.stripExtensions();
        java.lang.String str58 = locale55.getScript();
        java.lang.String str60 = locale55.getUnicodeLocaleType("57");
        java.lang.String str63 = nameProvider33.getShortName(locale55, "49", "GMT");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider33);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTime dateTime68 = dateTime66.withCenturyOfEra(2);
        org.joda.time.Chronology chronology69 = dateTime68.getChronology();
        org.joda.time.DateTime.Property property70 = dateTime68.dayOfYear();
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = locale71.getDisplayName();
        java.lang.String str73 = locale71.getISO3Country();
        java.util.Locale locale74 = locale71.stripExtensions();
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.lang.String str76 = locale74.getDisplayVariant(locale75);
        java.lang.String str77 = locale74.getISO3Language();
        java.util.Locale locale78 = java.util.Locale.KOREA;
        java.lang.String str79 = locale78.getDisplayName();
        java.lang.String str80 = locale78.getISO3Country();
        java.util.Locale locale81 = locale78.stripExtensions();
        java.lang.String str82 = locale74.getDisplayLanguage(locale78);
        java.util.Calendar calendar83 = dateTime68.toCalendar(locale74);
        java.lang.String str86 = nameProvider33.getShortName(locale74, "Property[millisOfSecond]", "Property[dayOfWeek]");
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone32, locale74);
        boolean boolean88 = org.joda.time.field.FieldUtils.equals((java.lang.Object) int5, (java.lang.Object) timeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar49 and calendar87", (calendar49.compareTo(calendar87) == 0) == calendar49.equals(calendar87));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test398");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(12);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(localTime10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        java.lang.String str16 = dateTimeZone13.getShortName((long) 5);
        boolean boolean17 = localDate9.equals((java.lang.Object) str16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate19 = localDate9.minus(readablePeriod18);
        org.joda.time.LocalDate.Property property20 = localDate9.era();
        boolean boolean21 = mutableDateTime4.equals((java.lang.Object) localDate9);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getEra();
        int int25 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime23.minusYears(12);
        org.joda.time.DateTime dateTime29 = dateTime23.minusMinutes((-1));
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.minusYears(53628);
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        boolean boolean34 = mutableDateTime4.equals((java.lang.Object) property33);
        org.joda.time.DateTime dateTime36 = property33.addToCopy(53734);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime4", (instant0.compareTo(mutableDateTime4) == 0) == instant0.equals(mutableDateTime4));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test399");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(53633931);
        java.lang.String str9 = dateTime7.toString("53635");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        java.lang.String str12 = dateTimeFieldType10.toString();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDurationAdded(readableDuration16, 7);
        org.joda.time.Chronology chronology19 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType10.getField(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.seconds();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.clockhourOfDay();
        org.joda.time.DurationField durationField26 = chronology19.seconds();
        org.joda.time.DateTime dateTime27 = dateTime7.toDateTime(chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test400");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime.Property property30 = dateTime28.secondOfMinute();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear((int) (byte) 100);
        int int34 = localDate31.getDayOfWeek();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        int int39 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime40 = localDate31.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime28.toMutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = instant26.toDateTime(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant26.minus(readableDuration43);
        org.joda.time.DateTime dateTime45 = instant26.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test401");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        timeZone4.setID("+00:00");
        timeZone4.setRawOffset(2);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        timeZone11.setID("+00:00");
        boolean boolean14 = timeZone4.hasSameRules(timeZone11);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.lang.String str17 = locale15.getLanguage();
        java.lang.String str20 = nameProvider0.getName(locale15, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getISO3Country();
        java.util.Locale locale24 = locale22.stripExtensions();
        java.lang.String str25 = locale22.getScript();
        java.lang.String str27 = locale22.getUnicodeLocaleType("57");
        java.lang.String str30 = nameProvider0.getShortName(locale22, "49", "GMT");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        timeZone36.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone36);
        java.util.Locale locale41 = new java.util.Locale("2022-02-21T14:54:47.855Z");
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone36, locale41);
        java.lang.String str43 = locale33.getDisplayLanguage(locale41);
        java.lang.String str46 = nameProvider0.getName(locale33, "14:56:35.028", "GMT+14:54");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar42", (calendar16.compareTo(calendar42) == 0) == calendar16.equals(calendar42));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test402");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar calendar6 = builder5.build();
        java.util.Calendar calendar7 = builder5.build();
        java.util.Calendar.Builder builder11 = builder5.setDate(605139, 14, 20);
        java.util.Calendar.Builder builder13 = builder11.setLenient(true);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        timeZone16.setID("+00:00");
        timeZone16.setRawOffset(2);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        timeZone23.setID("+00:00");
        boolean boolean26 = timeZone16.hasSameRules(timeZone23);
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone16, locale27);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.Calendar.Builder builder30 = builder11.setTimeZone(timeZone16);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        timeZone33.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone33);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        int int44 = dateTimeZone41.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now(dateTimeZone41);
        int int46 = localDate45.size();
        int int47 = localDate45.getWeekOfWeekyear();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str50 = dateTimeZone49.toString();
        org.joda.time.DateTime dateTime51 = localDate45.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter39.withZone(dateTimeZone49);
        org.joda.time.tz.NameProvider nameProvider53 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider53);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        timeZone57.setID("+00:00");
        timeZone57.setRawOffset(2);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        java.util.TimeZone timeZone64 = dateTimeZone63.toTimeZone();
        timeZone64.setID("+00:00");
        boolean boolean67 = timeZone57.hasSameRules(timeZone64);
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone57, locale68);
        java.lang.String str70 = locale68.getLanguage();
        java.lang.String str73 = nameProvider53.getName(locale68, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale75 = new java.util.Locale("hi!");
        java.lang.String str76 = locale75.getISO3Country();
        java.util.Locale locale77 = locale75.stripExtensions();
        java.lang.String str78 = locale75.getScript();
        java.lang.String str80 = locale75.getUnicodeLocaleType("57");
        java.lang.String str83 = nameProvider53.getShortName(locale75, "49", "GMT");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter52.withLocale(locale75);
        java.util.Locale locale85 = java.util.Locale.KOREA;
        java.lang.String str86 = locale85.getDisplayName();
        java.util.Locale locale88 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str89 = locale85.getDisplayLanguage(locale88);
        java.lang.String str90 = locale75.getDisplayScript(locale88);
        java.util.Locale locale91 = locale75.stripExtensions();
        java.util.Locale locale92 = java.util.Locale.KOREA;
        java.lang.String str93 = locale92.toLanguageTag();
        java.lang.String str94 = locale75.getDisplayLanguage(locale92);
        java.util.Calendar calendar95 = java.util.Calendar.getInstance(timeZone33, locale92);
        java.util.Calendar.Builder builder96 = builder30.setLocale(locale92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar28 and calendar95", (calendar28.compareTo(calendar95) == 0) == calendar28.equals(calendar95));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test403");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.Instant instant11 = instant0.minus((long) 21);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime dateTime18 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant19 = dateTime16.toInstant();
        org.joda.time.Instant instant21 = instant19.minus((long) 53629878);
        org.joda.time.DateTime dateTime22 = instant19.toDateTime();
        int int23 = instant0.compareTo((org.joda.time.ReadableInstant) instant19);
        java.lang.String str24 = instant0.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant19", (dateTime2.compareTo(instant19) == 0) == dateTime2.equals(instant19));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test404");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone2);
        int int7 = timeZone2.getOffset((long) 53626);
        timeZone2.setRawOffset(53641);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        timeZone12.setID("+00:00");
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone12, locale15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        timeZone19.setID("+00:00");
        int int23 = timeZone19.getOffset((long) 365);
        java.lang.String str24 = timeZone19.getID();
        int int26 = timeZone19.getOffset((long) '#');
        boolean boolean27 = timeZone12.hasSameRules(timeZone19);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone12);
        boolean boolean29 = timeZone2.hasSameRules(timeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar28", (calendar16.compareTo(calendar28) == 0) == calendar16.equals(calendar28));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test405");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime18 = property15.getDateTime();
        org.joda.time.DateTime dateTime19 = property15.withMaximumValue();
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime25.getFieldTypes();
        org.joda.time.Chronology chronology28 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        boolean boolean30 = durationFieldType23.isSupported(chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfDay();
        org.joda.time.DurationField durationField32 = durationFieldType22.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.dayOfYear();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DurationField durationField35 = chronology28.months();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 53721, chronology28);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(53778);
        boolean boolean39 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime34", (dateTime1.compareTo(dateTime34) == 0) == dateTime1.equals(dateTime34));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test406");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant6 = instant0.withDurationAdded(readableDuration4, (-53622326));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 50);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalTime.Property property17 = localTime12.hourOfDay();
        int int18 = localTime12.getSecondOfMinute();
        org.joda.time.LocalTime localTime20 = localTime12.withMinuteOfHour(19);
        org.joda.time.LocalTime localTime22 = localTime20.plusMillis(53628);
        org.joda.time.LocalTime.Property property23 = localTime22.hourOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getEra();
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        org.joda.time.DateTime dateTime29 = dateTime25.withCenturyOfEra((int) ' ');
        int int30 = property23.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.minusYears(53655035);
        boolean boolean33 = instant9.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Instant instant35 = instant9.minus((long) 53825654);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime14", (instant9.compareTo(dateTime14) == 0) == instant9.equals(dateTime14));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test407");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra(2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology4.add(readablePeriod5, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DurationField durationField11 = chronology4.millis();
        org.joda.time.DurationField durationField12 = chronology4.eras();
        org.joda.time.DurationField durationField13 = chronology4.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField12", Math.signum(durationField11.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField11)));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test408");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology13);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withPeriodAdded(readablePeriod21, 53683509);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime23", (dateTime7.compareTo(dateTime23) == 0) == dateTime7.equals(dateTime23));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test409");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 356);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.minus(readableDuration2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = instant5.isAfter(readableInstant6);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTime();
        boolean boolean9 = instant1.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant1.plus(readableDuration10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime8", (instant5.compareTo(mutableDateTime8) == 0) == instant5.equals(mutableDateTime8));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test410");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        int int7 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withZone(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.joda.time.Instant instant14 = instant12.minus((long) 31);
        org.joda.time.DateTime dateTime15 = instant14.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant12", (dateTime6.compareTo(instant12) == 0) == dateTime6.equals(instant12));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test411");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(32772);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTime.Property property18 = dateTime16.dayOfMonth();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        java.lang.String str23 = dateTimeZone20.getShortName((long) 5);
        java.lang.String str24 = dateTimeZone20.getID();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime(dateTimeZone20);
        boolean boolean27 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime29 = dateTime16.minusHours(3);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime16.toMutableDateTimeISO();
        org.joda.time.Instant instant31 = dateTime16.toInstant();
        org.joda.time.Instant instant34 = instant31.withDurationAdded(558L, 53767624);
        org.joda.time.MutableDateTime mutableDateTime35 = instant31.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime36 = instant31.toMutableDateTime();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((java.lang.Object) mutableDateTime36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant31", (dateTime6.compareTo(instant31) == 0) == dateTime6.equals(instant31));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test412");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.LocalDate localDate5 = property3.withMinimumValue();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) 53642);
        org.joda.time.DateMidnight dateMidnight14 = localDate10.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.minus((long) 53630);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime19.toMutableDateTimeISO();
        int int23 = dateTime19.getMillisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getEra();
        int int27 = dateTime25.getSecondOfDay();
        org.joda.time.DateTime dateTime29 = dateTime25.minusYears(12);
        boolean boolean30 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readablePeriod35);
        boolean boolean37 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property38 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime36.withCenturyOfEra(4);
        org.joda.time.DateTime dateTime42 = dateTime36.withWeekyear(0);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        int int47 = dateTimeZone44.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(dateTimeZone44);
        int int49 = localDate48.size();
        int int50 = localDate48.getWeekOfWeekyear();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        java.lang.String str53 = dateTimeZone52.toString();
        org.joda.time.DateTime dateTime54 = localDate48.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime42.toDateTime(dateTimeZone52);
        long long59 = dateTimeZone52.convertLocalToUTC((long) 53705210, false, (long) 53688531);
        org.joda.time.DateTime dateTime60 = dateTime15.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime61 = localDate5.toDateTimeAtCurrentTime(dateTimeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime19", (dateTime15.compareTo(dateTime19) == 0) == dateTime15.equals(dateTime19));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test413");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology9.years();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.hourOfDay();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDurationAdded(readableDuration18, 7);
        int int21 = localDateTime16.getDayOfYear();
        java.lang.String str22 = localDateTime16.toString();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(2);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology28.add(readablePeriod29, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.minuteOfHour();
        org.joda.time.DurationField durationField34 = durationFieldType23.getField(chronology28);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology37 = chronology28.withZone(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology28);
        java.lang.String str39 = chronology28.toString();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMinutes(53);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime41.minusWeeks((int) '4');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime41.plus(readableDuration50);
        int[] intArray53 = chronology28.get((org.joda.time.ReadablePartial) localDateTime51, (-16454553480000L));
        chronology9.validate((org.joda.time.ReadablePartial) localDateTime16, intArray53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime25", (dateTime13.compareTo(dateTime25) == 0) == dateTime13.equals(dateTime25));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test414");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.plusWeeks(15);
        org.joda.time.DateTime dateTime10 = dateTime6.minusHours(21);
        org.joda.time.Instant instant11 = dateTime6.toInstant();
        org.joda.time.Instant instant13 = instant11.plus(8640000000L);
        org.joda.time.Instant instant16 = instant11.withDurationAdded(0L, 53705);
        org.joda.time.Instant instant18 = instant11.minus(1645455579156L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant11", (dateTime6.compareTo(instant11) == 0) == dateTime6.equals(instant11));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test415");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        int int9 = dateTime7.getMinuteOfDay();
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime.Property property14 = dateTime12.secondOfMinute();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        int int17 = instant10.get(dateTimeField16);
        org.joda.time.Chronology chronology18 = instant10.getChronology();
        org.joda.time.DateTime dateTime19 = instant10.toDateTimeISO();
        int int20 = dateTime7.compareTo((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Instant instant22 = instant10.minus((long) 53660);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant10", (dateTime1.compareTo(instant10) == 0) == dateTime1.equals(instant10));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test416");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 1970);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.plus((long) 53630);
        org.joda.time.Instant instant17 = instant8.withDurationAdded((long) 53845916, 53848417);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test417");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(8);
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTimeISO();
        org.joda.time.Instant instant7 = dateTime1.toInstant();
        org.joda.time.Instant instant9 = instant7.withMillis(1645455488657L);
        long long10 = instant9.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant7", (dateTime1.compareTo(instant7) == 0) == dateTime1.equals(instant7));
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test418");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property15.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime20 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long25 = dateTimeZone21.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale.Builder builder30 = builder28.clear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getEra();
        org.joda.time.DateTime.Property property34 = dateTime32.secondOfMinute();
        java.lang.String str35 = property34.getAsString();
        org.joda.time.DateTime dateTime37 = property34.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime38 = property34.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime40 = dateTime38.minusSeconds(2922789);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale41.getISO3Country();
        java.util.Locale locale44 = locale41.stripExtensions();
        java.util.Calendar calendar45 = dateTime38.toCalendar(locale41);
        java.util.Locale.Builder builder46 = builder30.setLocale(locale41);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        timeZone49.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone49);
        int int54 = timeZone49.getOffset((long) 53626);
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone49, locale56);
        java.lang.String str58 = locale56.getCountry();
        java.lang.String str59 = locale41.getDisplayCountry(locale56);
        java.lang.String str60 = locale56.getISO3Country();
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone26, locale56);
        java.util.Locale locale62 = locale56.stripExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar61", (calendar57.compareTo(calendar61) == 0) == calendar57.equals(calendar61));
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test419");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.isStandardOffset((long) 53642);
        org.joda.time.DateMidnight dateMidnight8 = localDate4.toDateMidnight(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = dateTime9.minus((long) 53630);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTimeISO();
        int int17 = dateTime13.getMillisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusYears(12);
        boolean boolean24 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime23.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        boolean boolean31 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property32 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.withCenturyOfEra(4);
        org.joda.time.DateTime dateTime36 = dateTime30.withWeekyear(0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        int int41 = dateTimeZone38.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(dateTimeZone38);
        int int43 = localDate42.size();
        int int44 = localDate42.getWeekOfWeekyear();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime36.toDateTime(dateTimeZone46);
        long long53 = dateTimeZone46.convertLocalToUTC((long) 53705210, false, (long) 53688531);
        org.joda.time.DateTime dateTime54 = dateTime9.toDateTime(dateTimeZone46);
        long long57 = dateTimeZone46.adjustOffset((-21157527193L), false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime13", (dateTime9.compareTo(dateTime13) == 0) == dateTime9.equals(dateTime13));
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test420");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        boolean boolean13 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime4.minusMonths(53628014);
        int int16 = dateTime4.getSecondOfMinute();
        long long17 = dateTime4.getMillis();
        org.joda.time.Instant instant18 = dateTime4.toInstant();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime4.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant18", (dateTime8.compareTo(instant18) == 0) == dateTime8.equals(instant18));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test421");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        boolean boolean28 = instant26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = instant26.toDateTimeISO();
        org.joda.time.Instant instant31 = instant26.withMillis(3600000L);
        org.joda.time.Instant instant34 = instant26.withDurationAdded(0L, 576);
        org.joda.time.Instant instant36 = instant26.plus((long) 53964412);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test422");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.plus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = dateTimeFieldType16.toString();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDurationAdded(readableDuration22, 7);
        org.joda.time.Chronology chronology25 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType16.getField(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.seconds();
        org.joda.time.DateTime dateTime28 = dateTime14.withChronology(chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getEra();
        int int32 = dateTime30.getSecondOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.minusYears(12);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int38 = dateTime36.get(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime36.toMutableDateTimeISO();
        int int40 = dateTime36.getMillisOfDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getEra();
        int int44 = dateTime42.getSecondOfDay();
        org.joda.time.DateTime dateTime46 = dateTime42.minusYears(12);
        boolean boolean47 = dateTime36.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate50 = localDate48.withDayOfYear((int) (byte) 100);
        int int51 = localDate48.getDayOfWeek();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str54 = dateTimeZone53.toString();
        int int56 = dateTimeZone53.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime57 = localDate48.toDateTimeAtMidnight(dateTimeZone53);
        org.joda.time.DateTime dateTime58 = dateTime36.toDateTime(dateTimeZone53);
        boolean boolean59 = dateTime58.isEqualNow();
        int int60 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = dateTime30.plusDays(0);
        boolean boolean63 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime28", (dateTime14.compareTo(dateTime28) == 0) == dateTime14.equals(dateTime28));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test423");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant10 = instant0.plus((long) 53652018);
        org.joda.time.MutableDateTime mutableDateTime11 = instant0.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant0.plus(readableDuration12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant0.plus(readableDuration14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant15", (dateTime2.compareTo(instant15) == 0) == dateTime2.equals(instant15));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test424");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getEra();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime9 = dateTime7.plusWeeks(15);
        org.joda.time.DateTime dateTime11 = dateTime7.minusHours(21);
        org.joda.time.Instant instant12 = dateTime7.toInstant();
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 906, chronology13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant12", (dateTime7.compareTo(instant12) == 0) == dateTime7.equals(instant12));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test425");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        boolean boolean7 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 53625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(11);
        int[] intArray23 = chronology5.get((org.joda.time.ReadablePartial) localDateTime21, (long) 53642476);
        org.joda.time.DurationField durationField24 = chronology5.weeks();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology5);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName((long) 32772);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTime(dateTimeZone27);
        int int33 = dateTime25.getYearOfCentury();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("14");
        boolean boolean36 = timeZone35.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTime dateTime39 = dateTime25.toDateTime(dateTimeZone38);
        org.joda.time.DateTime.Property property40 = dateTime25.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime25", (dateTime31.compareTo(dateTime25) == 0) == dateTime31.equals(dateTime25));
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test426");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(53630);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.minus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) '4');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        int int14 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(53633931);
        org.joda.time.TimeOfDay timeOfDay19 = dateTime18.toTimeOfDay();
        org.joda.time.Instant instant20 = dateTime18.toInstant();
        int int21 = dateTime10.compareTo((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant22 = instant20.toInstant();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant20.plus(readableDuration23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant24", (dateTime18.compareTo(instant24) == 0) == dateTime18.equals(instant24));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test427");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy(53629404);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime8.getFieldTypes();
        org.joda.time.Chronology chronology11 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.months();
        boolean boolean13 = durationFieldType6.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withPeriodAdded(readablePeriod19, 53625);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.year();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime25 = property22.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfSecond(11);
        int[] intArray29 = chronology11.get((org.joda.time.ReadablePartial) localDateTime27, (long) 53642476);
        org.joda.time.DurationField durationField30 = chronology11.weeks();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology11);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        java.lang.String str36 = dateTimeZone33.getShortName((long) 32772);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTime(dateTimeZone33);
        int int39 = dateTime31.getYearOfCentury();
        boolean boolean40 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.withCenturyOfEra(2);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.minuteOfDay();
        java.lang.String str48 = chronology46.toString();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.weekyear();
        boolean boolean50 = dateTimeFieldType41.isSupported(chronology46);
        org.joda.time.DateTimeField dateTimeField51 = chronology46.centuryOfEra();
        boolean boolean52 = dateTime5.equals((java.lang.Object) dateTimeField51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime31", (dateTime1.compareTo(dateTime31) == 0) == dateTime1.equals(dateTime31));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test428");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime4.getFieldTypes();
        org.joda.time.Chronology chronology7 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.millisOfSecond();
        org.joda.time.DateTime dateTime12 = dateTime1.toDateTime(chronology7);
        org.joda.time.DurationField durationField13 = chronology7.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime12", (dateTime1.compareTo(dateTime12) == 0) == dateTime1.equals(dateTime12));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test429");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getEra();
        int int12 = dateTime10.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        boolean boolean15 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime10);
        boolean boolean16 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime6);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = dateTime6.withZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime.Property property23 = dateTime21.secondOfMinute();
        org.joda.time.DateTime dateTime25 = dateTime21.withCenturyOfEra((int) ' ');
        boolean boolean26 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime21);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        int int32 = dateTimeZone29.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 0, dateTimeZone29);
        int int34 = localTime33.size();
        org.joda.time.Chronology chronology35 = localTime33.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime6, chronology35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime36", (dateTime1.compareTo(dateTime36) == 0) == dateTime1.equals(dateTime36));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test430");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(2922789);
        org.joda.time.Instant instant10 = dateTime7.toInstant();
        org.joda.time.DateTime.Property property11 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime7.withDurationAdded((long) 53674832, 53784566);
        org.joda.time.DateTime.Property property15 = dateTime14.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant10", (dateTime7.compareTo(instant10) == 0) == dateTime7.equals(instant10));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test431");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime5 = property3.addToCopy(0);
        org.joda.time.DateTime dateTime6 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime.Property property10 = dateTime8.secondOfMinute();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.DateTime dateTime13 = property10.addWrapFieldToCopy(53630);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DateTime dateTime17 = dateTime13.withFieldAdded(durationFieldType15, 53633152);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.plusMinutes(53724);
        org.joda.time.Instant instant21 = dateTime17.toInstant();
        long long22 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) instant21);
        org.joda.time.DateTime dateTime23 = property3.getDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant21", (dateTime17.compareTo(instant21) == 0) == dateTime17.equals(instant21));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test432");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("0012-04-10");
        org.joda.time.Instant instant3 = instant1.plus((long) 53793);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra(12);
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(localTime9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getShortName((long) 5);
        boolean boolean16 = localDate8.equals((java.lang.Object) str15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int20 = dateTime18.get(dateTimeFieldType19);
        boolean boolean21 = localDate8.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property22 = localDate8.dayOfWeek();
        org.joda.time.DateTime dateTime23 = localDate8.toDateTimeAtMidnight();
        org.joda.time.tz.Provider provider25 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone27 = provider25.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(15778476000L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = localDate8.toDateMidnight(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = instant1.toDateTime(dateTimeZone27);
        long long34 = dateTimeZone27.adjustOffset(3471292800000L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime23", (instant1.compareTo(dateTime23) == 0) == instant1.equals(dateTime23));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test433");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(32772);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays(53631);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded(readableDuration12, 53649);
        org.joda.time.DateTime.Property property15 = dateTime8.secondOfMinute();
        java.lang.String str16 = property15.toString();
        org.joda.time.DateTime dateTime17 = property15.roundCeilingCopy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime dateTime24 = localTime20.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Instant instant25 = dateTime22.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int27 = dateTime22.get(dateTimeFieldType26);
        org.joda.time.DateTime.Property property28 = dateTime17.property(dateTimeFieldType26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant25", (dateTime22.compareTo(instant25) == 0) == dateTime22.equals(instant25));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test434");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis((-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, (int) '4');
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        int int21 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withEra((int) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusYears((int) (byte) 0);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        int int30 = dateTimeZone27.getOffsetFromLocal((long) (short) -1);
        int int32 = dateTimeZone27.getStandardOffset((long) 13);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime25.toMutableDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and mutableDateTime35", (dateTime23.compareTo(mutableDateTime35) == 0) == dateTime23.equals(mutableDateTime35));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test435");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.Instant instant10 = instant0.plus((long) 53652018);
        org.joda.time.MutableDateTime mutableDateTime11 = instant0.toMutableDateTime();
        java.lang.String str12 = mutableDateTime11.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test436");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) 53629878);
        org.joda.time.Instant instant11 = instant9.minus((long) 54007);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test437");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime5.getFieldTypes();
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.months();
        boolean boolean10 = durationFieldType3.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DurationField durationField12 = durationFieldType2.getField(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        java.lang.String str15 = dateTimeFieldType13.toString();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDurationAdded(readableDuration19, 7);
        org.joda.time.Chronology chronology22 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType13.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.DurationField durationField25 = durationFieldType2.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((-457070L), chronology22);
        org.joda.time.DurationField durationField27 = chronology22.centuries();
        boolean boolean28 = dateTimeFieldType0.isSupported(chronology22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider34 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone36 = provider34.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime30.toMutableDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusMillis((int) (byte) 10);
        boolean boolean43 = dateTimeZone36.isLocalDateTimeGap(localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMinuteOfHour(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int47 = localDateTime42.get(dateTimeFieldType46);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        int int52 = dateTimeZone49.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone49);
        java.lang.String str55 = dateTimeZone49.getNameKey((long) 10);
        org.joda.time.DateTime dateTime56 = localDateTime42.toDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.Chronology chronology58 = chronology22.withZone(dateTimeZone49);
        org.joda.time.DurationField durationField59 = chronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField12 and durationField59", (durationField12.compareTo(durationField59) == 0) == durationField12.equals(durationField59));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test438");
        java.lang.Object obj0 = null;
        org.joda.time.tz.Provider provider1 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone3 = provider1.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfMinute();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.DateTime dateTime11 = property8.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime12 = property8.getDateTime();
        int int13 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 0);
        org.joda.time.DateTime dateTime18 = dateTime12.withZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(2);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear((int) (byte) 100);
        int int27 = localDate24.getDayOfWeek();
        org.joda.time.LocalDate localDate29 = localDate24.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths(53628);
        org.joda.time.LocalDate localDate33 = localDate31.minusDays(53630);
        org.joda.time.LocalDate localDate35 = localDate31.minusYears(53698333);
        int int36 = localDate35.size();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate38 = localDate35.plus(readablePeriod37);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime22, chronology39);
        boolean boolean41 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime18", (dateTime4.compareTo(dateTime18) == 0) == dateTime4.equals(dateTime18));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test439");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        int int9 = dateTime7.compareTo((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant10 = instant8.toInstant();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra(12);
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(localTime16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        java.lang.String str22 = dateTimeZone19.getShortName((long) 5);
        boolean boolean23 = localDate15.equals((java.lang.Object) str22);
        org.joda.time.LocalDate.Property property24 = localDate15.yearOfEra();
        org.joda.time.LocalDate localDate26 = localDate15.withCenturyOfEra((int) 'a');
        org.joda.time.tz.Provider provider27 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone29 = provider27.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate15.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        int int33 = instant8.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant8", (dateTime1.compareTo(instant8) == 0) == dateTime1.equals(instant8));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test440");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime2.getFieldTypes();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        long long10 = chronology5.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DurationField durationField12 = chronology5.eras();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(1645455578621L, chronology5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField12", Math.signum(durationField6.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField6)));
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test441");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology9.years();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfWeek();
        boolean boolean15 = dateTimeField14.isSupported();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime.Property property20 = dateTime18.secondOfMinute();
        java.lang.String str21 = property20.getAsString();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        int int25 = dateTimeField22.getDifference(606L, (long) 1970);
        long long27 = dateTimeField22.remainder((long) (short) 1);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField22.getAsShortText(53635, locale29);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale35 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str36 = locale32.getDisplayLanguage(locale35);
        java.lang.String str37 = dateTimeField22.getAsShortText((int) (byte) -1, locale35);
        java.lang.String str38 = dateTimeField14.getAsShortText((long) 145, locale35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime18", (dateTime13.compareTo(dateTime18) == 0) == dateTime13.equals(dateTime18));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test442");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int6 = localDate5.size();
        int int7 = localDate5.getWeekOfWeekyear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime11 = localDate5.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.Instant instant14 = instant12.withMillis((long) 53762);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant12", (dateTime11.compareTo(instant12) == 0) == dateTime11.equals(instant12));
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test443");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(53630);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.minus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) '4');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        int int14 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(53633931);
        org.joda.time.TimeOfDay timeOfDay19 = dateTime18.toTimeOfDay();
        org.joda.time.Instant instant20 = dateTime18.toInstant();
        int int21 = dateTime10.compareTo((org.joda.time.ReadableInstant) instant20);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime10.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant20", (dateTime18.compareTo(instant20) == 0) == dateTime18.equals(instant20));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test444");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant0.minus(readableDuration10);
        org.joda.time.Instant instant13 = instant11.minus((-61779834276855L));
        org.joda.time.Instant instant16 = instant11.withDurationAdded((long) 53788330, 53686663);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime2", (instant11.compareTo(dateTime2) == 0) == instant11.equals(dateTime2));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test445");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime dateTime26 = dateTime23.plus((long) 17);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-53622326));
        org.joda.time.Instant instant29 = dateTime26.toInstant();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property32 = localDate31.centuryOfEra();
        org.joda.time.LocalDate localDate33 = property32.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale37.getDisplayName();
        java.lang.String str39 = locale37.getISO3Country();
        long long40 = dateTimeField34.set((long) 53635206, "55", locale37);
        java.lang.String str41 = dateTime26.toString("53903", locale37);
        boolean boolean42 = locale37.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and instant29", (dateTime26.compareTo(instant29) == 0) == dateTime26.equals(instant29));
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test446");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTime dateTime5 = instant3.toDateTimeISO();
        int int6 = dateTime5.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test447");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime25 = dateTime1.minusDays(0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) dateTime1);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        boolean boolean30 = instant28.isBefore((long) 53800);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant28", (dateTime1.compareTo(instant28) == 0) == dateTime1.equals(instant28));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test448");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((-61779834366119L), dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.isStandardOffset((long) 53642);
        org.joda.time.DateMidnight dateMidnight8 = localDate4.toDateMidnight(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTimeISO();
        int int17 = dateTime13.getMillisOfSecond();
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTime();
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) dateTime9, chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant19", (dateTime13.compareTo(instant19) == 0) == dateTime13.equals(instant19));
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test449");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(12);
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(localTime5);
        long long7 = dateTime6.getMillis();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        long long10 = instant9.getMillis();
        org.joda.time.Instant instant13 = instant9.withDurationAdded((long) 1320, 558);
        java.lang.Object obj14 = null;
        org.joda.time.tz.Provider provider15 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone17 = provider15.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj14, dateTimeZone17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getEra();
        org.joda.time.DateTime.Property property22 = dateTime20.secondOfMinute();
        java.lang.String str23 = property22.getAsString();
        org.joda.time.DateTime dateTime25 = property22.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime26 = property22.getDateTime();
        int int27 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property28 = dateTime26.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 0);
        org.joda.time.DateTime dateTime32 = dateTime26.withZone(dateTimeZone31);
        boolean boolean33 = instant9.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean35 = dateTime32.isSupported(dateTimeFieldType34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test450");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        boolean boolean3 = property2.isLeap();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(53637);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(53662);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int12 = dateTime10.get(dateTimeFieldType11);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTimeISO();
        int int14 = dateTime10.getMillisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getEra();
        int int18 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusYears(12);
        boolean boolean21 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property24.roundCeilingCopy();
        org.joda.time.DateTime dateTime26 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime28 = property24.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime29 = property24.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        long long34 = dateTimeZone30.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        org.joda.time.DateTime dateTime35 = localDateTime8.toDateTime(dateTimeZone30);
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.Instant instant37 = dateTime35.toInstant();
        org.joda.time.Instant instant40 = instant37.withDurationAdded(1L, 53642476);
        org.joda.time.Instant instant42 = instant40.minus((long) 53893);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant37", (dateTime35.compareTo(instant37) == 0) == dateTime35.equals(instant37));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test451");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getISO3Country();
        long long13 = dateTimeField7.set((long) 53635206, "55", locale10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField7.getType();
        org.joda.time.DateTime dateTime16 = dateTime1.withField(dateTimeFieldType14, 894);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(53655035);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime16.toGregorianCalendar();
        org.joda.time.Instant instant20 = dateTime16.toInstant();
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant20.plus(readableDuration22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant25", (dateTime16.compareTo(instant25) == 0) == dateTime16.equals(instant25));
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test452");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime5.getFieldTypes();
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfWeek();
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime(chronology8);
        org.joda.time.DurationField durationField16 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.clockhourOfHalfday();
        java.lang.String str18 = dateTimeField17.toString();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear((int) (byte) 100);
        int int22 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate localDate24 = localDate19.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths(53628);
        org.joda.time.LocalDate localDate28 = localDate24.withWeekyear(53663);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = locale30.getISO3Country();
        java.util.Locale locale33 = locale30.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale37.getDisplayName();
        java.lang.String str39 = locale37.getISO3Country();
        java.util.Locale locale40 = locale37.stripExtensions();
        java.lang.String str41 = locale33.getDisplayLanguage(locale37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getEra();
        org.joda.time.DateTime.Property property45 = dateTime43.secondOfMinute();
        java.lang.String str46 = property45.getAsString();
        org.joda.time.DateTimeField dateTimeField47 = property45.getField();
        int int49 = dateTimeField47.get((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField47.getType();
        int int51 = dateTimeField47.getMaximumValue();
        int int53 = dateTimeField47.getLeapAmount((long) 53627827);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.withCenturyOfEra(2);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        long long63 = chronology59.add(readablePeriod60, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField64 = chronology59.minuteOfHour();
        org.joda.time.DurationField durationField65 = durationFieldType54.getField(chronology59);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology68 = chronology59.withZone(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology59);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.millisOfDay();
        org.joda.time.LocalDateTime localDateTime74 = property73.withMinimumValue();
        java.util.Locale locale76 = new java.util.Locale("2022-02-21T14:54:47.855Z");
        java.lang.String str77 = property73.getAsText(locale76);
        java.lang.String str78 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDateTime69, 0, locale76);
        java.lang.String str79 = locale76.getDisplayVariant();
        java.lang.String str80 = locale33.getDisplayScript(locale76);
        java.lang.String str81 = locale33.getCountry();
        java.lang.String str82 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDate28, 53680649, locale33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime43", (dateTime3.compareTo(dateTime43) == 0) == dateTime3.equals(dateTime43));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test453");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone2);
        int int7 = timeZone2.getOffset((long) 53626);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone2, locale9);
        timeZone2.setID("Property[secondOfMinute]");
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        timeZone17.setID("+00:00");
        timeZone17.setRawOffset(2);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        timeZone24.setID("+00:00");
        boolean boolean27 = timeZone17.hasSameRules(timeZone24);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone17, locale28);
        java.lang.String str30 = locale28.getLanguage();
        java.lang.String str33 = nameProvider13.getName(locale28, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        timeZone36.setID("+00:00");
        timeZone36.setRawOffset(2);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        timeZone43.setID("+00:00");
        boolean boolean46 = timeZone36.hasSameRules(timeZone43);
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone36, locale47);
        java.lang.String str49 = locale47.getLanguage();
        java.lang.String str50 = locale47.getDisplayLanguage();
        java.lang.String str53 = nameProvider13.getShortName(locale47, "DateTimeField[clockhourOfHalfday]", "57");
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str58 = nameProvider13.getName(locale54, "DateTimeField[secondOfMinute]", "Korean");
        java.util.Locale locale59 = null;
        java.lang.String str62 = nameProvider13.getShortName(locale59, "GMT+00:00", "10");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        org.joda.time.LocalDate localDate66 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate68 = localDate66.withDayOfYear((int) (byte) 100);
        int int69 = localDate66.getDayOfWeek();
        org.joda.time.LocalDate localDate71 = localDate66.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths(53628);
        org.joda.time.LocalDate.Property property74 = localDate71.yearOfEra();
        java.util.Locale locale77 = new java.util.Locale("2022-02-21T14:55:41.830Z", "und");
        java.lang.String str78 = property74.getAsShortText(locale77);
        java.lang.String str81 = nameProvider13.getName(locale77, "millisOfDay", "2022-02-21T14:56:48.000Z");
        java.lang.String str82 = timeZone2.getDisplayName(locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar29", (calendar10.compareTo(calendar29) == 0) == calendar10.equals(calendar29));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test454");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int18 = localDateTime13.get(dateTimeFieldType17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        int int23 = dateTimeZone20.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone20);
        java.lang.String str26 = dateTimeZone20.getNameKey((long) 10);
        org.joda.time.DateTime dateTime27 = localDateTime13.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withPeriodAdded(readablePeriod33, 53625);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withPeriodAdded(readablePeriod36, (int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime38.getFieldTypes();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minus(readableDuration40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.millis();
        boolean boolean43 = localDateTime41.isSupported(durationFieldType42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime28.withFieldAdded(durationFieldType42, 746);
        org.joda.time.LocalDateTime.Property property46 = localDateTime28.minuteOfHour();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) localDateTime28, chronology47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime8", (dateTime1.compareTo(mutableDateTime8) == 0) == dateTime1.equals(mutableDateTime8));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test455");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis(605139);
        java.lang.Object obj11 = null;
        org.joda.time.tz.Provider provider12 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone14 = provider12.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj11, dateTimeZone14);
        int int17 = dateTimeZone14.getStandardOffset(1266764034698L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime10, dateTimeZone14);
        org.joda.time.Instant instant19 = dateTime10.toInstant();
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime23.getFieldTypes();
        org.joda.time.Chronology chronology26 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        boolean boolean31 = durationFieldType21.isSupported(chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.weekyear();
        long long36 = dateTimeField33.set(0L, 53699154);
        int int37 = instant19.get(dateTimeField33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime15", (dateTime1.compareTo(dateTime15) == 0) == dateTime1.equals(dateTime15));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test456");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str4 = dateTimeZone1.getShortName((long) 5);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTime();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("KOR");
        java.lang.String[] strArray14 = new java.lang.String[] { "Nov 29, 1909 12:00:00 AM", "Etc/UTC", "47", "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.lang.Object[] objArray18 = strSet15.toArray();
        java.lang.String str19 = java.util.Locale.lookupTag(languageRangeList9, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap20);
        boolean boolean22 = mutableDateTime7.equals((java.lang.Object) strMap20);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property24 = localDate23.centuryOfEra();
        org.joda.time.LocalDate localDate25 = property24.roundHalfCeilingCopy();
        java.lang.Object obj26 = null;
        org.joda.time.tz.Provider provider27 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone29 = provider27.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(obj26, dateTimeZone29);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate25.toDateTimeAtMidnight(dateTimeZone29);
        int int34 = dateTimeZone29.getOffset(911L);
        org.joda.time.DateTime dateTime35 = mutableDateTime7.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        int int38 = dateTime35.get(dateTimeFieldType36);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localDateTime40.getFieldTypes();
        org.joda.time.Chronology chronology43 = localDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology43);
        boolean boolean46 = dateTimeFieldType36.isSupported(chronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime30", (dateTime6.compareTo(dateTime30) == 0) == dateTime6.equals(dateTime30));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test457");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime6.toMutableDateTimeISO();
        int int10 = dateTime6.getMillisOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getEra();
        int int14 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusYears(12);
        boolean boolean17 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withDurationAdded(readableDuration20, 1);
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime19.toYearMonthDay();
        org.joda.time.DateTime dateTime25 = dateTime19.withDayOfYear((int) 'x');
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears(365);
        int int28 = property4.getDifference((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getEra();
        boolean boolean32 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Instant instant33 = dateTime30.toInstant();
        int int34 = dateTime30.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant33", (dateTime6.compareTo(instant33) == 0) == dateTime6.equals(instant33));
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test458");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        boolean boolean19 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property20 = dateTime18.hourOfDay();
        org.joda.time.LocalTime localTime21 = dateTime18.toLocalTime();
        int int22 = dateTime18.getWeekyear();
        org.joda.time.Instant instant23 = dateTime18.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime18.minusDays(53910974);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant23", (dateTime1.compareTo(instant23) == 0) == dateTime1.equals(instant23));
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test459");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DurationField durationField11 = chronology9.seconds();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withPeriodAdded(readablePeriod18, 53625);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.year();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime24 = property21.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = property21.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime31.getFieldTypes();
        org.joda.time.Chronology chronology34 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekOfWeekyear();
        org.joda.time.DurationField durationField37 = chronology34.days();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfWeek();
        org.joda.time.DurationField durationField40 = chronology34.minutes();
        org.joda.time.DateTime dateTime41 = dateTime29.toDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusMillis((int) (byte) 10);
        int[] intArray48 = chronology34.get((org.joda.time.ReadablePartial) localDateTime43, (long) 54);
        chronology9.validate((org.joda.time.ReadablePartial) localDateTime25, intArray48);
        org.joda.time.DateTimeField dateTimeField50 = chronology9.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.withCenturyOfEra(2);
        org.joda.time.Chronology chronology56 = dateTime55.getChronology();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        long long60 = chronology56.add(readablePeriod57, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField61 = chronology56.minuteOfHour();
        org.joda.time.DurationField durationField62 = durationFieldType51.getField(chronology56);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology65 = chronology56.withZone(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(chronology56);
        java.lang.String str67 = chronology56.toString();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.millisOfDay();
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime69.plusMinutes(53);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime69.minusWeeks((int) '4');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime69.plus(readableDuration78);
        int[] intArray81 = chronology56.get((org.joda.time.ReadablePartial) localDateTime79, (-16454553480000L));
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.withWeekyear(53685476);
        java.util.Locale locale88 = new java.util.Locale("2022-02-21T14:56:48.000Z", "1970-01-01T00:00:00.057", "305");
        java.lang.String str89 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime83, 53672807, locale88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField62", (durationField11.compareTo(durationField62) == 0) == durationField11.equals(durationField62));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test460");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusSeconds((int) (short) -1);
        int int10 = localDateTime7.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        java.lang.String str16 = dateTimeFieldType14.toString();
        int int17 = localDateTime7.indexOf(dateTimeFieldType14);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.withCenturyOfEra(2);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter20.withChronology(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.years();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType14.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forID("Etc/UTC");
        org.joda.time.Chronology chronology32 = chronology25.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) 53642);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone33);
        java.util.TimeZone timeZone37 = dateTimeZone33.toTimeZone();
        org.joda.time.Chronology chronology38 = chronology32.withZone(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime36", (dateTime22.compareTo(dateTime36) == 0) == dateTime22.equals(dateTime36));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test461");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear((int) (byte) 100);
        int int16 = localDate13.getDayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        int int21 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime dateTime26 = dateTime23.plus((long) 17);
        org.joda.time.DateTime dateTime29 = dateTime26.withDurationAdded((long) 53716013, 32769);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.withCenturyOfEra(2);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = chronology34.add(readablePeriod35, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.secondOfDay();
        org.joda.time.DateTime dateTime40 = dateTime29.toDateTime(chronology34);
        org.joda.time.DateTime.Property property41 = dateTime29.yearOfCentury();
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear((int) (byte) 100);
        int int45 = localDate42.getDayOfWeek();
        org.joda.time.LocalDate localDate47 = localDate42.minusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate49 = localDate42.minusWeeks(12);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate51 = localDate42.minus(readablePeriod50);
        org.joda.time.LocalDate localDate53 = localDate51.plusMonths(101);
        org.joda.time.DateTime dateTime54 = localDate51.toDateTimeAtMidnight();
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.plus(readableDuration56);
        org.joda.time.DateTime dateTime59 = dateTime54.minusHours(53804127);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        java.lang.String str64 = dateTimeZone61.getShortName((long) 5);
        java.lang.String str65 = dateTimeZone61.getID();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime67 = dateTime59.toDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime68 = dateTime29.toDateTime(dateTimeZone61);
        org.joda.time.Instant instant69 = new org.joda.time.Instant((java.lang.Object) dateTime68);
        long long70 = dateTime68.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime68 and instant69", (dateTime68.compareTo(instant69) == 0) == dateTime68.equals(instant69));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test462");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getISO3Country();
        long long13 = dateTimeField7.set((long) 53635206, "55", locale10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField7.getType();
        org.joda.time.DateTime dateTime16 = dateTime1.withField(dateTimeFieldType14, 894);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(53655035);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime16.toGregorianCalendar();
        org.joda.time.Instant instant20 = dateTime16.toInstant();
        org.joda.time.Instant instant22 = instant20.minus(935L);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant20", (dateTime16.compareTo(instant20) == 0) == dateTime16.equals(instant20));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test463");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone2, locale5);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        int int8 = localDate7.getEra();
        org.joda.time.LocalDate localDate10 = localDate7.withYear(53699);
        org.joda.time.LocalDate localDate12 = localDate7.minusWeeks(53857056);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        int int16 = calendar13.getActualMinimum(15);
        int int18 = calendar13.getGreatestMinimum(12);
        long long19 = calendar13.getTimeInMillis();
        org.joda.time.tz.Provider provider20 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone22 = provider20.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        boolean boolean24 = calendar13.after((java.lang.Object) dateTimeZone22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.withCenturyOfEra(2);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate33 = localDate31.plusYears(10);
        org.joda.time.DateMidnight dateMidnight34 = localDate33.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight35 = localDate33.toDateMidnight();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.withCenturyOfEra(2);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTime.Property property41 = dateTime39.dayOfYear();
        org.joda.time.DateTime dateTime43 = property41.setCopy("59");
        org.joda.time.DateTime dateTime45 = property41.setCopy("46");
        org.joda.time.DateTime dateTime46 = property41.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.withCenturyOfEra(2);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.minuteOfDay();
        java.lang.String str54 = chronology52.toString();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekyear();
        boolean boolean56 = dateTimeFieldType47.isSupported(chronology52);
        int int57 = dateTime46.get(dateTimeFieldType47);
        boolean boolean58 = dateMidnight35.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int59 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime60 = localDate7.toDateTimeAtStartOfDay(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar13", (calendar6.compareTo(calendar13) == 0) == calendar6.equals(calendar13));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test464");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.minus(readablePeriod2);
        org.joda.time.Instant instant4 = dateTime1.toInstant();
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.Instant instant8 = instant5.withDurationAdded((long) 53629, 53647);
        org.joda.time.Instant instant9 = instant5.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant10.withDurationAdded(readableDuration11, 53690381);
        boolean boolean14 = instant4.isEqual((org.joda.time.ReadableInstant) instant13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant13", (dateTime1.compareTo(instant13) == 0) == dateTime1.equals(instant13));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test465");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getEra();
        int int12 = dateTime10.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        boolean boolean15 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime10);
        boolean boolean16 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime6);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = dateTime6.withZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime.Property property23 = dateTime21.secondOfMinute();
        org.joda.time.DateTime dateTime25 = dateTime21.withCenturyOfEra((int) ' ');
        boolean boolean26 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime21);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        int int32 = dateTimeZone29.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 0, dateTimeZone29);
        int int34 = localTime33.size();
        org.joda.time.Chronology chronology35 = localTime33.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime6, chronology35);
        org.joda.time.DateTime dateTime38 = dateTime6.minusDays(746);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime36", (dateTime1.compareTo(dateTime36) == 0) == dateTime1.equals(dateTime36));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test466");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusYears(12);
        int int6 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withPeriodAdded(readablePeriod12, 53625);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.era();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.Instant instant19 = org.joda.time.Instant.now();
        org.joda.time.Instant instant22 = instant19.withDurationAdded((long) 53629, 53647);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getRangeDurationType();
        int int25 = instant19.get(dateTimeFieldType23);
        boolean boolean26 = localDateTime18.isSupported(dateTimeFieldType23);
        int int27 = dateTime5.get(dateTimeFieldType23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant19", (dateTime1.compareTo(instant19) == 0) == dateTime1.equals(instant19));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test467");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Chronology chronology8 = instant0.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test468");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        java.lang.String str22 = dateTimeFieldType20.toString();
        int int23 = localDateTime18.indexOf(dateTimeFieldType20);
        int int24 = dateTime16.get(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType20.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        java.lang.String str29 = dateTimeFieldType27.toString();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.hourOfDay();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDurationAdded(readableDuration33, 7);
        org.joda.time.Chronology chronology36 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType27.getField(chronology36);
        org.joda.time.DurationField durationField38 = chronology36.seconds();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.millisOfSecond();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(553L, chronology36);
        org.joda.time.DateTimeZone dateTimeZone42 = chronology36.getZone();
        org.joda.time.DurationField durationField43 = durationFieldType25.getField(chronology36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test469");
        java.lang.Object obj0 = null;
        org.joda.time.tz.Provider provider1 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone3 = provider1.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfMinute();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.DateTime dateTime11 = property8.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime12 = property8.getDateTime();
        int int13 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 0);
        org.joda.time.DateTime dateTime18 = dateTime12.withZone(dateTimeZone17);
        long long22 = dateTimeZone17.convertLocalToUTC(20995200000L, false, 141472527084126000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime18", (dateTime4.compareTo(dateTime18) == 0) == dateTime4.equals(dateTime18));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test470");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.DateTime dateTime6 = property3.setCopy("47");
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = property3.addWrapFieldToCopy(558);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime9.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.DateTime dateTime14 = property11.addWrapFieldToCopy(53878);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime17.getFieldTypes();
        org.joda.time.Chronology chronology20 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.months();
        boolean boolean22 = durationFieldType15.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withPeriodAdded(readablePeriod28, 53625);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.year();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime34 = property31.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMillisOfSecond(11);
        int[] intArray38 = chronology20.get((org.joda.time.ReadablePartial) localDateTime36, (long) 53642476);
        org.joda.time.DurationField durationField39 = chronology20.weeks();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology20);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        java.lang.String str45 = dateTimeZone42.getShortName((long) 32772);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = dateTime40.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime48 = dateTime14.withZone(dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime40", (dateTime1.compareTo(dateTime40) == 0) == dateTime1.equals(dateTime40));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test471");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:52.912Z");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setRawOffset(0);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean25 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime15);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = dateTime15.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        timeZone35.setID("+00:00");
        timeZone35.setRawOffset(2);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        timeZone42.setID("+00:00");
        boolean boolean45 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone35, locale46);
        java.lang.String str48 = locale46.getLanguage();
        java.lang.String str51 = nameProvider31.getName(locale46, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.lang.String str54 = locale53.getISO3Country();
        java.util.Locale locale55 = locale53.stripExtensions();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str58 = locale53.getUnicodeLocaleType("57");
        java.lang.String str61 = nameProvider31.getShortName(locale53, "49", "GMT");
        java.lang.String str62 = dateTimeZone27.getShortName((long) 32770, locale53);
        java.lang.String str63 = locale5.getDisplayCountry(locale53);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.util.TimeZone timeZone65 = calendar64.getTimeZone();
        boolean boolean66 = timeZone65.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar64", (calendar47.compareTo(calendar64) == 0) == calendar47.equals(calendar64));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test472");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTimeISO();
        int int6 = dateTime2.getMillisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getEra();
        int int10 = dateTime8.getSecondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusYears(12);
        boolean boolean13 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear((int) (byte) 100);
        int int17 = localDate14.getDayOfWeek();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        int int22 = dateTimeZone19.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime23 = localDate14.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime2.minusDays(0);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((java.lang.Object) dateTime2);
        org.joda.time.DateTime dateTime28 = instant27.toDateTimeISO();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTimeISO();
        int int34 = dateTime30.getMillisOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getEra();
        int int38 = dateTime36.getSecondOfDay();
        org.joda.time.DateTime dateTime40 = dateTime36.minusYears(12);
        boolean boolean41 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime40.withWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded(readableDuration44, 1);
        org.joda.time.YearMonthDay yearMonthDay47 = dateTime43.toYearMonthDay();
        int int48 = dateTime43.getSecondOfDay();
        org.joda.time.DateTime.Property property49 = dateTime43.minuteOfHour();
        boolean boolean50 = instant27.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology51 = instant27.getChronology();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromMillisOfDay((long) 53864099, chronology51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant27", (dateTime2.compareTo(instant27) == 0) == dateTime2.equals(instant27));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test473");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.DateTime dateTime9 = property3.addToCopy(101);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime9.dayOfYear();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        timeZone14.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone14);
        java.util.Locale locale19 = new java.util.Locale("2022-02-21T14:54:47.855Z");
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone14, locale19);
        java.lang.String str21 = locale19.getDisplayLanguage();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime23.getFieldTypes();
        org.joda.time.Chronology chronology26 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.secondOfDay();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDateTime34.getFieldTypes();
        org.joda.time.Chronology chronology37 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        boolean boolean43 = property42.isLeap();
        org.joda.time.LocalDateTime localDateTime44 = property42.withMinimumValue();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = property42.getAsText(locale45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale45);
        java.lang.String str48 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, locale45);
        java.lang.String str49 = locale19.getDisplayScript(locale45);
        java.lang.String str50 = property11.getAsText(locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar47", (calendar20.compareTo(calendar47) == 0) == calendar20.equals(calendar47));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test474");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 7);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology9.years();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        boolean boolean18 = property17.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property17.addToCopy(53637);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusWeeks(53662);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        int int25 = localDateTime23.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getEra();
        org.joda.time.DateTime.Property property29 = dateTime27.secondOfMinute();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        int int33 = dateTimeField31.get((long) ' ');
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.plusSeconds(6);
        int int40 = localDateTime35.getYear();
        int[] intArray47 = new int[] { (short) 10, 6, 53629404, 3, '4', (short) 0 };
        int int48 = dateTimeField31.getMaximumValue((org.joda.time.ReadablePartial) localDateTime35, intArray47);
        int int49 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDateTime23, intArray47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime27", (dateTime13.compareTo(dateTime27) == 0) == dateTime13.equals(dateTime27));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test475");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.Instant instant11 = instant0.minus((long) 21);
        org.joda.time.Instant instant14 = instant0.withDurationAdded((long) 53663, 53991017);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(53663);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(0L, dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = instant14.toMutableDateTime(dateTimeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test476");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property15.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime20 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long25 = dateTimeZone21.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        timeZone31.setID("+00:00");
        timeZone31.setRawOffset(2);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        timeZone38.setID("+00:00");
        boolean boolean41 = timeZone31.hasSameRules(timeZone38);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone31, locale42);
        java.lang.String str44 = locale42.getLanguage();
        java.lang.String str47 = nameProvider27.getName(locale42, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale49 = new java.util.Locale("hi!");
        java.lang.String str50 = locale49.getISO3Country();
        java.util.Locale locale51 = locale49.stripExtensions();
        java.lang.String str52 = locale49.getScript();
        java.lang.String str54 = locale49.getUnicodeLocaleType("57");
        java.lang.String str57 = nameProvider27.getShortName(locale49, "49", "GMT");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTime dateTime62 = dateTime60.withCenturyOfEra(2);
        org.joda.time.Chronology chronology63 = dateTime62.getChronology();
        org.joda.time.DateTime.Property property64 = dateTime62.dayOfYear();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.lang.String str66 = locale65.getDisplayName();
        java.lang.String str67 = locale65.getISO3Country();
        java.util.Locale locale68 = locale65.stripExtensions();
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale68.getISO3Language();
        java.util.Locale locale72 = java.util.Locale.KOREA;
        java.lang.String str73 = locale72.getDisplayName();
        java.lang.String str74 = locale72.getISO3Country();
        java.util.Locale locale75 = locale72.stripExtensions();
        java.lang.String str76 = locale68.getDisplayLanguage(locale72);
        java.util.Calendar calendar77 = dateTime62.toCalendar(locale68);
        java.lang.String str80 = nameProvider27.getShortName(locale68, "Property[millisOfSecond]", "Property[dayOfWeek]");
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone26, locale68);
        boolean boolean82 = timeZone26.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar43 and calendar81", (calendar43.compareTo(calendar81) == 0) == calendar43.equals(calendar81));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test477");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay(2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, 1970);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, 53675);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime15.getFieldTypes();
        org.joda.time.Chronology chronology18 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.weekyears();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime13.toMutableDateTime(chronology18);
        org.joda.time.Chronology chronology23 = chronology18.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime22", (dateTime13.compareTo(mutableDateTime22) == 0) == dateTime13.equals(mutableDateTime22));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test478");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 1970);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant6 = instant0.withDurationAdded(readableDuration4, (-53622326));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 50);
        org.joda.time.Instant instant11 = instant6.withMillis((long) 53648);
        org.joda.time.Instant instant13 = instant6.plus((long) 53688289);
        org.joda.time.MutableDateTime mutableDateTime14 = instant6.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant6.minus(readableDuration15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime14", (instant16.compareTo(mutableDateTime14) == 0) == instant16.equals(mutableDateTime14));
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test479");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 53757554);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getEra();
        int int12 = dateTime10.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        boolean boolean15 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = dateTime6.minusMonths(53628014);
        org.joda.time.DateTime.Property property18 = dateTime6.yearOfCentury();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = dateTime6.toDateTime(dateTimeZone20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(1645455243000L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime21.withChronology(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        org.joda.time.DateTime dateTime27 = dateTime1.withZone(dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime25", (dateTime6.compareTo(dateTime25) == 0) == dateTime6.equals(dateTime25));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test480");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime5 = property3.addToCopy(0);
        org.joda.time.DateTime dateTime6 = property3.roundHalfCeilingCopy();
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test481");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        java.lang.String str11 = dateTimeFieldType9.toString();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDurationAdded(readableDuration15, 7);
        org.joda.time.Chronology chronology18 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType9.getField(chronology18);
        java.lang.String str20 = dateTimeFieldType9.getName();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime22.getFieldTypes();
        org.joda.time.Chronology chronology25 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.months();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType9.getField(chronology25);
        boolean boolean29 = localDateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime8.plusMillis(10277);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withDurationAdded(readableDuration32, 53825654);
        java.lang.String str36 = localDateTime34.toString("20");
        org.joda.time.Instant instant37 = org.joda.time.Instant.now();
        org.joda.time.Instant instant40 = instant37.withDurationAdded((long) 53629, 53647);
        org.joda.time.Instant instant41 = instant37.toInstant();
        org.joda.time.MutableDateTime mutableDateTime42 = instant37.toMutableDateTime();
        org.joda.time.DateTime dateTime43 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) instant37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and mutableDateTime42", (instant37.compareTo(mutableDateTime42) == 0) == instant37.equals(mutableDateTime42));
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test482");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate2 = property1.roundHalfCeilingCopy();
        java.lang.Object obj3 = null;
        org.joda.time.tz.Provider provider4 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone6 = provider4.getZone("Etc/UTC");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj3, dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra(12);
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(localTime15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        java.lang.String str21 = dateTimeZone18.getShortName((long) 5);
        boolean boolean22 = localDate14.equals((java.lang.Object) str21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int26 = dateTime24.get(dateTimeFieldType25);
        boolean boolean27 = localDate14.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDate.Property property28 = localDate14.dayOfWeek();
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtMidnight();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        int int34 = dateTimeZone31.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone31);
        int int36 = localDate35.size();
        int int37 = localDate35.getWeekOfWeekyear();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime29.toMutableDateTime(dateTimeZone39);
        org.joda.time.Instant instant43 = dateTime29.toInstant();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant43.plus(readableDuration44);
        int int46 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) instant45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and instant45", (dateTime29.compareTo(instant45) == 0) == dateTime29.equals(instant45));
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test483");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int6 = localDate5.size();
        int int7 = localDate5.getWeekOfWeekyear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime11 = localDate5.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        java.lang.String str14 = dateTime11.toString("-1");
        java.util.GregorianCalendar gregorianCalendar15 = dateTime11.toGregorianCalendar();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        int int23 = dateTimeZone20.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone20);
        int int25 = localDate24.size();
        int int26 = localDate24.getWeekOfWeekyear();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDate24.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter18.withZone(dateTimeZone28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.withCenturyOfEra(2);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        long long40 = chronology36.add(readablePeriod37, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter31.withChronology(chronology36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter31.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter43.withPivotYear((java.lang.Integer) 53677);
        boolean boolean46 = dateTimeFormatter43.isPrinter();
        org.joda.time.Chronology chronology47 = dateTimeFormatter43.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser48 = dateTimeFormatter43.getParser();
        java.lang.Integer int49 = dateTimeFormatter43.getPivotYear();
        boolean boolean50 = dateTimeFormatter43.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeFormatter43.getZone();
        boolean boolean52 = gregorianCalendar15.equals((java.lang.Object) dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant12", (dateTime11.compareTo(instant12) == 0) == dateTime11.equals(instant12));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test484");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 53629, 53647);
        org.joda.time.Instant instant5 = instant0.plus(1645455305079L);
        org.joda.time.Instant instant7 = instant5.plus((long) 2922789);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime.Property property11 = dateTime9.secondOfMinute();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.DateTime dateTime13 = property11.roundCeilingCopy();
        long long14 = dateTime13.getMillis();
        java.lang.String str15 = dateTime13.toString();
        org.joda.time.DateTime dateTime17 = dateTime13.minusHours(575);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getEra();
        org.joda.time.DateTime.Property property21 = dateTime19.secondOfMinute();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear((int) (byte) 100);
        int int25 = localDate22.getDayOfWeek();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        int int30 = dateTimeZone27.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime31 = localDate22.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime19.toMutableDateTime(dateTimeZone27);
        long long34 = dateTimeZone27.convertUTCToLocal((long) (-1));
        org.joda.time.DateTime dateTime35 = dateTime17.toDateTime(dateTimeZone27);
        int int36 = dateTime17.getMinuteOfDay();
        org.joda.time.DateTime dateTime38 = dateTime17.minusMillis(22);
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillis((long) 53777327);
        int int42 = instant5.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime9", (instant0.compareTo(dateTime9) == 0) == instant0.equals(dateTime9));
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test485");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property15.addWrapFieldToCopy(53627827);
        org.joda.time.DateTime dateTime20 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long25 = dateTimeZone21.convertLocalToUTC((long) 53689, true, (long) (byte) 1);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        timeZone31.setID("+00:00");
        timeZone31.setRawOffset(2);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        timeZone38.setID("+00:00");
        boolean boolean41 = timeZone31.hasSameRules(timeZone38);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone31, locale42);
        java.lang.String str44 = locale42.getLanguage();
        java.lang.String str47 = nameProvider27.getName(locale42, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale49 = new java.util.Locale("hi!");
        java.lang.String str50 = locale49.getISO3Country();
        java.util.Locale locale51 = locale49.stripExtensions();
        java.lang.String str52 = locale49.getScript();
        java.lang.String str54 = locale49.getUnicodeLocaleType("57");
        java.lang.String str57 = nameProvider27.getShortName(locale49, "49", "GMT");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTime dateTime62 = dateTime60.withCenturyOfEra(2);
        org.joda.time.Chronology chronology63 = dateTime62.getChronology();
        org.joda.time.DateTime.Property property64 = dateTime62.dayOfYear();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.lang.String str66 = locale65.getDisplayName();
        java.lang.String str67 = locale65.getISO3Country();
        java.util.Locale locale68 = locale65.stripExtensions();
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale68.getISO3Language();
        java.util.Locale locale72 = java.util.Locale.KOREA;
        java.lang.String str73 = locale72.getDisplayName();
        java.lang.String str74 = locale72.getISO3Country();
        java.util.Locale locale75 = locale72.stripExtensions();
        java.lang.String str76 = locale68.getDisplayLanguage(locale72);
        java.util.Calendar calendar77 = dateTime62.toCalendar(locale68);
        java.lang.String str80 = nameProvider27.getShortName(locale68, "Property[millisOfSecond]", "Property[dayOfWeek]");
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone26, locale68);
        java.util.TimeZone timeZone83 = java.util.TimeZone.getTimeZone("clockhourofhalfday");
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone83);
        calendar81.setTimeZone(timeZone83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar43 and calendar84", (calendar43.compareTo(calendar84) == 0) == calendar43.equals(calendar84));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test486");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 50);
        int int2 = dateTime1.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.plus(readableDuration3);
        org.joda.time.Instant instant5 = dateTime1.toInstant();
        int int6 = dateTime1.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test487");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getEra();
        int int9 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(12);
        org.joda.time.DateTime dateTime13 = dateTime7.minusMinutes((-1));
        long long14 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = dateTime13.withDurationAdded((long) 53627827, 21);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(2);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology23.add(readablePeriod24, (long) 53633152, 99);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.minuteOfHour();
        org.joda.time.DurationField durationField29 = durationFieldType18.getField(chronology23);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology32 = chronology23.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime13.toDateTime(chronology32);
        int int34 = dateTime33.getWeekOfWeekyear();
        org.joda.time.Instant instant35 = dateTime33.toInstant();
        org.joda.time.DateTime dateTime36 = dateTime33.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant35", (dateTime13.compareTo(instant35) == 0) == dateTime13.equals(instant35));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test488");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime10.getFieldTypes();
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        long long18 = chronology13.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology13);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withPeriodAdded(readablePeriod21, 53683509);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-53626948));
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test489");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("+00:00");
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayName();
        java.util.Locale locale5 = new java.util.Locale("clockhourOfHalfday");
        java.lang.String str6 = locale2.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getDisplayName();
        java.lang.String str8 = locale5.getVariant();
        java.lang.String str9 = locale1.getDisplayName(locale5);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        int int17 = dateTimeZone14.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone14);
        int int19 = localDate18.size();
        int int20 = localDate18.getWeekOfWeekyear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter12.withZone(dateTimeZone22);
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        timeZone30.setID("+00:00");
        timeZone30.setRawOffset(2);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        timeZone37.setID("+00:00");
        boolean boolean40 = timeZone30.hasSameRules(timeZone37);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone30, locale41);
        java.lang.String str43 = locale41.getLanguage();
        java.lang.String str46 = nameProvider26.getName(locale41, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.Locale locale48 = new java.util.Locale("hi!");
        java.lang.String str49 = locale48.getISO3Country();
        java.util.Locale locale50 = locale48.stripExtensions();
        java.lang.String str51 = locale48.getScript();
        java.lang.String str53 = locale48.getUnicodeLocaleType("57");
        java.lang.String str56 = nameProvider26.getShortName(locale48, "49", "GMT");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter25.withLocale(locale48);
        java.lang.String str58 = locale48.getVariant();
        java.lang.String str59 = locale5.getDisplayLanguage(locale48);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.lang.String str61 = timeZone60.getID();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        int int64 = dateTime63.getEra();
        int int65 = dateTime63.getSecondOfDay();
        org.joda.time.DateTime dateTime67 = dateTime63.minusYears(12);
        org.joda.time.DateTime dateTime69 = dateTime63.minusMinutes((-1));
        java.lang.String str70 = dateTime69.toString();
        org.joda.time.DateTime.Property property71 = dateTime69.dayOfYear();
        int int72 = property71.getMaximumValueOverall();
        java.util.Locale locale73 = java.util.Locale.UK;
        java.lang.String str74 = property71.getAsShortText(locale73);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone60, locale73);
        java.lang.String str76 = locale5.getDisplayLanguage(locale73);
        java.lang.String str77 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(locale5);
        java.lang.String str79 = locale5.getDisplayScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar42 and calendar75", (calendar42.compareTo(calendar75) == 0) == calendar42.equals(calendar75));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test490");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        int int6 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withSecondOfMinute(14);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(2);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter13.withChronology(chronology18);
        org.joda.time.DurationField durationField20 = chronology18.centuries();
        org.joda.time.DurationFieldType durationFieldType21 = durationField20.getType();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime23.getFieldTypes();
        org.joda.time.Chronology chronology26 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField31 = durationFieldType21.getField(chronology26);
        boolean boolean32 = localDateTime10.isSupported(durationFieldType21);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = localDateTime10.getFields();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField20 and durationField31", (durationField20.compareTo(durationField31) == 0) == durationField20.equals(durationField31));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test491");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone7.toTimeZone();
        long long11 = dateTimeZone7.previousTransition((long) 53786589);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime18 = property15.addWrapFieldToCopy(53630);
        org.joda.time.DateTime dateTime19 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime21 = property15.addToCopy((long) 53647);
        org.joda.time.DateTime dateTime22 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = property15.addWrapFieldToCopy(53660);
        int int25 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        java.lang.String str30 = dateTimeZone27.getShortName((long) 5);
        java.lang.String str31 = dateTimeZone27.getID();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTime();
        org.joda.time.DateTime.Property property34 = dateTime32.weekyear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        int int42 = dateTime41.getEra();
        org.joda.time.DateTime dateTime43 = localTime39.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getEra();
        int int47 = dateTime45.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.plus(readableDuration48);
        boolean boolean50 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean51 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime41);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.DateTime dateTime54 = dateTime41.withZone(dateTimeZone53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        int int57 = dateTime56.getEra();
        org.joda.time.DateTime.Property property58 = dateTime56.secondOfMinute();
        org.joda.time.DateTime dateTime60 = dateTime56.withCenturyOfEra((int) ' ');
        boolean boolean61 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime56);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        int int67 = dateTimeZone64.getOffsetFromLocal((long) 12);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) 0, dateTimeZone64);
        int int69 = localTime68.size();
        org.joda.time.Chronology chronology70 = localTime68.getChronology();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((java.lang.Object) dateTime41, chronology70);
        org.joda.time.DateTime.Property property72 = dateTime71.centuryOfEra();
        boolean boolean73 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime71", (dateTime1.compareTo(dateTime71) == 0) == dateTime1.equals(dateTime71));
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test492");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime.Property property13 = dateTime11.secondOfMinute();
        org.joda.time.DateTime dateTime15 = dateTime11.withCenturyOfEra((int) ' ');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime11.minus(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime21 = dateTime17.withYearOfEra(53634);
        boolean boolean22 = instant9.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int23 = dateTime17.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test493");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus((long) 53633152);
        org.joda.time.Instant instant11 = instant0.minus((long) 21);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.minus(readableDuration12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test494");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("+00:00");
        java.util.TimeZone.setDefault(timeZone2);
        int int7 = timeZone2.getOffset((long) 53626);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone2, locale9);
        java.lang.String str11 = calendar10.getCalendarType();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromCalendarFields(calendar10);
        java.util.TimeZone timeZone13 = calendar10.getTimeZone();
        java.util.TimeZone.setDefault(timeZone13);
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Date date17 = new java.util.Date(66L);
        java.lang.String str18 = date17.toGMTString();
        java.util.Calendar.Builder builder19 = builder15.setInstant(date17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getEra();
        org.joda.time.DateTime dateTime26 = localTime22.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear(32772);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        java.util.Date date30 = dateTime29.toDate();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromDateFields(date30);
        java.util.Calendar.Builder builder32 = builder19.setInstant(date30);
        java.util.Calendar.Builder builder36 = builder19.setWeekDate(53669267, 6, 53659);
        java.util.Calendar.Builder builder41 = builder36.setTimeOfDay(0, 0, 161021698, (-10976054));
        java.util.Calendar.Builder builder45 = builder41.setDate(0, 53775643, 53825917);
        java.util.Calendar.Builder builder50 = builder41.setTimeOfDay((-53698479), 53815715, 53785, 53829);
        java.util.Calendar.Builder builder54 = builder41.setDate(53838277, 53805706, 53633931);
        java.util.Calendar.Builder builder55 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder60 = builder55.setTimeOfDay(14, (int) (short) 10, 22, 99);
        java.util.Calendar.Builder builder65 = builder55.setTimeOfDay((int) (short) -1, 53629404, 53629, 0);
        java.util.Calendar calendar66 = builder65.build();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(53753);
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone69);
        java.util.Calendar.Builder builder71 = builder65.setTimeZone(timeZone69);
        java.util.Calendar.Builder builder72 = builder41.setTimeZone(timeZone69);
        boolean boolean73 = timeZone13.hasSameRules(timeZone69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar70", (calendar10.compareTo(calendar70) == 0) == calendar10.equals(calendar70));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test495");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime.Property property4 = dateTime2.secondOfMinute();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) (byte) 100);
        int int8 = localDate5.getDayOfWeek();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.toString();
        int int13 = dateTimeZone10.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime2.toMutableDateTime(dateTimeZone10);
        int int17 = dateTimeZone10.getOffsetFromLocal((long) 53626975);
        java.lang.String str18 = dateTimeZone10.toString();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-61779834366119L), dateTimeZone10);
        java.util.TimeZone timeZone20 = dateTimeZone10.toTimeZone();
        java.util.TimeZone timeZone21 = dateTimeZone10.toTimeZone();
        org.joda.time.Instant instant22 = org.joda.time.Instant.now();
        org.joda.time.Instant instant25 = instant22.withDurationAdded((long) 53629, 53647);
        long long26 = instant22.getMillis();
        org.joda.time.Chronology chronology27 = instant22.getChronology();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant22.withDurationAdded(readableDuration28, 86399);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime32.getFieldTypes();
        org.joda.time.Chronology chronology35 = localDateTime32.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.months();
        long long40 = chronology35.add(1692412209208486000L, (long) 53634698, 53628014);
        org.joda.time.DateTimeField dateTimeField41 = chronology35.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology35.getZone();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.secondOfDay();
        org.joda.time.DurationField durationField44 = chronology35.minutes();
        org.joda.time.DateTime dateTime45 = instant22.toDateTime(chronology35);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant22.minus(readableDuration46);
        int int48 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) instant22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant22", (dateTime2.compareTo(instant22) == 0) == dateTime2.equals(instant22));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test496");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(100L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(32772);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime6.plusYears(2);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime.Property property16 = dateTime14.secondOfMinute();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        org.joda.time.DateTime dateTime19 = property16.setCopy("46", locale18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime23 = property21.addToCopy(53663528);
        int int24 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getEra();
        org.joda.time.DateTime.Property property29 = dateTime27.secondOfMinute();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        int int32 = instant25.get(dateTimeField31);
        org.joda.time.Instant instant34 = instant25.minus((long) 53633152);
        org.joda.time.Instant instant36 = instant25.minus((long) 21);
        long long37 = instant25.getMillis();
        int int38 = dateTime23.compareTo((org.joda.time.ReadableInstant) instant25);
        java.lang.Class<?> wildcardClass39 = dateTime23.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant25", (dateTime4.compareTo(instant25) == 0) == dateTime4.equals(instant25));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test497");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        timeZone4.setID("+00:00");
        timeZone4.setRawOffset(2);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        timeZone11.setID("+00:00");
        boolean boolean14 = timeZone4.hasSameRules(timeZone11);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.lang.String str17 = locale15.getLanguage();
        java.lang.String str20 = nameProvider0.getName(locale15, "2022-02-21T14:54:52.912Z", "clockhourofhalfday");
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        timeZone23.setID("+00:00");
        timeZone23.setRawOffset(2);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        timeZone30.setID("+00:00");
        boolean boolean33 = timeZone23.hasSameRules(timeZone30);
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone23, locale34);
        java.lang.String str36 = locale34.getLanguage();
        java.lang.String str37 = locale34.getDisplayLanguage();
        java.lang.String str40 = nameProvider0.getShortName(locale34, "DateTimeField[clockhourOfHalfday]", "57");
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale41.toLanguageTag();
        java.lang.String str45 = nameProvider0.getName(locale41, "DateTimeField[secondOfMinute]", "Korean");
        java.util.Locale locale46 = null;
        java.lang.String str49 = nameProvider0.getShortName(locale46, "GMT+00:00", "10");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.lang.String str52 = locale51.getDisplayName();
        java.lang.String str53 = locale51.getISO3Country();
        java.util.Locale locale54 = locale51.stripExtensions();
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale54.getISO3Language();
        java.lang.String str60 = nameProvider0.getShortName(locale54, "53781673", "14:54:32.502");
        java.util.Calendar.Builder builder61 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder63 = builder61.setLenient(false);
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = java.util.Locale.getDefault(category64);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder67 = builder66.clear();
        java.util.Locale.Builder builder68 = builder67.clear();
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.util.Locale.Builder builder70 = builder67.setLocale(locale69);
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        timeZone73.setID("+00:00");
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone73, locale76);
        java.util.Locale.Builder builder78 = builder67.setLocale(locale76);
        java.lang.String str79 = locale65.getDisplayName(locale76);
        java.util.Calendar.Builder builder80 = builder61.setLocale(locale76);
        java.lang.String str81 = locale54.getDisplayScript(locale76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar77", (calendar16.compareTo(calendar77) == 0) == calendar16.equals(calendar77));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test498");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime5.getFieldTypes();
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.months();
        boolean boolean10 = durationFieldType3.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DurationField durationField12 = durationFieldType2.getField(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        java.lang.String str15 = dateTimeFieldType13.toString();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDurationAdded(readableDuration19, 7);
        org.joda.time.Chronology chronology22 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType13.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.DurationField durationField25 = durationFieldType2.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((-457070L), chronology22);
        org.joda.time.DurationField durationField27 = chronology22.centuries();
        boolean boolean28 = dateTimeFieldType0.isSupported(chronology22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider34 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone36 = provider34.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime30.toMutableDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusMillis((int) (byte) 10);
        boolean boolean43 = dateTimeZone36.isLocalDateTimeGap(localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMinuteOfHour(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int47 = localDateTime42.get(dateTimeFieldType46);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        int int52 = dateTimeZone49.getOffsetFromLocal((long) 12);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone49);
        java.lang.String str55 = dateTimeZone49.getNameKey((long) 10);
        org.joda.time.DateTime dateTime56 = localDateTime42.toDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.Chronology chronology58 = chronology22.withZone(dateTimeZone49);
        org.joda.time.DurationField durationField59 = chronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField12 and durationField59", (durationField12.compareTo(durationField59) == 0) == durationField12.equals(durationField59));
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test499");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int3 = dateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTimeISO();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = provider5.getZone("Etc/UTC");
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone7.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(53654002);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDateTime13.toDateTime(dateTimeZone18);
        int int22 = dateTimeZone18.getOffset(20953900800000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test500");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear((int) (byte) 100);
        int int3 = localDate0.getDayOfWeek();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str6 = dateTimeZone5.toString();
        int int8 = dateTimeZone5.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime9 = localDate0.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.LocalDate localDate11 = localDate0.plusDays((int) '4');
        org.joda.time.LocalDate localDate13 = localDate11.withCenturyOfEra(53638);
        org.joda.time.LocalDate localDate15 = localDate13.minusDays(9);
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        int int24 = dateTimeZone21.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone21);
        int int26 = localDate25.size();
        int int27 = localDate25.getWeekOfWeekyear();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter19.withZone(dateTimeZone29);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) 53665281);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone29);
        long long38 = dateTimeZone29.adjustOffset(53662L, true);
        org.joda.time.DateTime dateTime39 = localDate15.toDateTimeAtCurrentTime(dateTimeZone29);
        int int40 = localDate15.getEra();
        org.joda.time.LocalDate.Property property41 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate42 = property41.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        java.lang.String str47 = dateTimeZone44.getShortName((long) 2021);
        org.joda.time.DateMidnight dateMidnight48 = localDate42.toDateMidnight(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime45", (dateTime31.compareTo(dateTime45) == 0) == dateTime31.equals(dateTime45));
    }
}


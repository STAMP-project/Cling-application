import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name2 = null;
        functionNode0.setFunctionName(name2);
        boolean boolean4 = functionNode0.requiresActivation();
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump8.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump12 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump8, 0);
        com.google.javascript.rhino.head.ast.Jump jump16 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump16.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump20 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump16, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        functionNode21.setEncodedSource("");
        functionNode21.flattenSymbolTable(false);
        jump8.addChildAfter((com.google.javascript.rhino.head.Node) jump16, (com.google.javascript.rhino.head.Node) functionNode21);
        com.google.javascript.rhino.head.Node node28 = functionNode21.target;
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode21);
        int int30 = functionNode21.getEncodedSourceStart();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList31 = functionNode21.getFunctions();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int34 = functionNode33.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = functionNode33.getTop();
        boolean boolean36 = functionNode33.hasSideEffects();
        java.lang.String str37 = functionNode33.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode33.getTop();
        int int39 = functionNode33.getAbsolutePosition();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = functionNodeList31.set(7, functionNode33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(scriptNode35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "109" + "'", str37, "109");
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        functionNode5.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int12 = functionNode5.addFunction(functionNode11);
        java.lang.Object obj13 = functionNode5.getCompilerData();
        functionNode5.setIsGenerator();
        boolean boolean15 = functionNode5.isExpressionClosure();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) -1, name1);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode2.visit(nodeVisitor3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode3.getTop();
        functionNode3.setParens((int) (byte) 1, (int) (short) 1);
        functionNode3.setEncodedSourceStart((-1));
        functionNode3.setFunctionIsGetter();
        scope2.addChildToFront((com.google.javascript.rhino.head.Node) functionNode3);
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode3);
        functionNode0.setFunctionIsSetter();
        boolean boolean14 = functionNode0.isExpressionClosure();
        functionNode0.putIntProp(7, (int) (byte) 0);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = functionNode20.getTop();
        functionNode20.setParens((int) (byte) 1, (int) (short) 1);
        functionNode20.setEncodedSourceStart((-1));
        functionNode20.setFunctionIsGetter();
        scope19.addChildToFront((com.google.javascript.rhino.head.Node) functionNode20);
        functionNode20.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int33 = scriptNode32.getEndLineno();
        int int34 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump37 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int40 = scriptNode39.getEndLineno();
        int int41 = scriptNode39.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList42 = scriptNode39.getChildScopes();
        jump37.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode39);
        java.lang.String str44 = scriptNode39.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode32, (com.google.javascript.rhino.head.ast.Scope) scriptNode39);
        com.google.javascript.rhino.head.ast.Scope scope46 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode39.target = scope46;
        java.lang.String str48 = functionNode20.toStringTree(scriptNode39);
        java.lang.String str50 = scriptNode39.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap51 = scriptNode39.getSymbolTable();
        int int52 = strMap51.size();
        java.util.Collection<com.google.javascript.rhino.head.ast.Symbol> symbolCollection53 = strMap51.values();
        com.google.javascript.rhino.head.ast.Symbol symbol55 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.Node node56 = symbol55.getNode();
        symbol55.setIndex(4);
        com.google.javascript.rhino.head.ast.Scope scope59 = symbol55.getContainingTable();
        int int60 = symbol55.getDeclType();
        com.google.javascript.rhino.head.Node node61 = symbol55.getNode();
        com.google.javascript.rhino.head.ast.Scope scope62 = symbol55.getContainingTable();
        int int63 = symbol55.getDeclType();
        com.google.javascript.rhino.head.ast.Symbol symbol64 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol64.setIndex(6);
        java.lang.String str67 = symbol64.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope68 = symbol64.getContainingTable();
        boolean boolean69 = strMap51.replace("                                            /null/", symbol55, symbol64);
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.putSymbol(symbol55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null symbol name");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(scriptNode21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(scopeList42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str44, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "                    {\n                    }\n" + "'", str50, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(symbolCollection53);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(scope59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(scope62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "EOF" + "'", str67, "EOF");
        org.junit.Assert.assertNull(scope68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int4 = functionNode3.getEncodedSourceStart();
        int int5 = functionNode3.getFunctionCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        functionNode6.setParens((int) (byte) 1, (int) (short) 1);
        int int11 = functionNode6.getRp();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(17, (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) functionNode6, (int) (short) 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int16 = scriptNode15.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int19 = scriptNode18.getEndLineno();
        scriptNode15.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode18);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode21.getTop();
        boolean boolean24 = functionNode21.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int27 = scriptNode26.getEndLineno();
        int int28 = scriptNode26.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int34 = scriptNode33.getEndLineno();
        int int35 = scriptNode33.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList36 = scriptNode33.getChildScopes();
        jump31.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode33);
        java.lang.String str38 = scriptNode33.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode26, (com.google.javascript.rhino.head.ast.Scope) scriptNode33);
        com.google.javascript.rhino.head.ast.Scope scope40 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode33.target = scope40;
        functionNode21.addChildScope(scope40);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode18, (com.google.javascript.rhino.head.ast.Scope) functionNode21);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(8, (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) scriptNode18, (int) 'a');
        com.google.javascript.rhino.head.ast.AstNode astNode46 = functionNode3.getMemberExprNode();
        java.lang.String str47 = functionNode3.getName();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(scopeList36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str38, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(astNode46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(18, "RegExpLiteral");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        functionNode0.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList7 = functionNode0.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope9 = functionNode0.getDefiningScope("hi!");
        boolean boolean10 = functionNode0.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode11.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode14 = functionNode11.getBody();
        int int15 = functionNode11.getLength();
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        int int22 = scriptNode20.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode20.getChildScopes();
        jump18.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode20);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        functionNode26.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        functionNode30.setEncodedSource("");
        functionNode30.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode26, (com.google.javascript.rhino.head.Node) functionNode30, (com.google.javascript.rhino.head.Node) functionNode36, (int) '#');
        jump18.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode26);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList41 = functionNode26.getStatements();
        functionNode11.setParams(astNodeList41);
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode11);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor44 = functionNode0.iterator();
        int int45 = functionNode0.getAbsolutePosition();
        functionNode0.setSourceName("/null/52");
        com.google.javascript.rhino.head.ast.Scope scope50 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = functionNode51.getTop();
        functionNode51.setParens((int) (byte) 1, (int) (short) 1);
        functionNode51.setEncodedSourceStart((-1));
        functionNode51.setFunctionIsGetter();
        scope50.addChildToFront((com.google.javascript.rhino.head.Node) functionNode51);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) (byte) 100, (com.google.javascript.rhino.head.Node) functionNode51, 19);
        node61.putIntProp((int) (short) 1, 12);
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.setContinue(node61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNull(nodeList7);
        org.junit.Assert.assertNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertNull(astNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(astNodeList41);
        org.junit.Assert.assertNotNull(nodeItor44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(scriptNode52);
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral(6, 26);
        java.lang.String str4 = regExpLiteral2.toSource(22);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            regExpLiteral2.visit(nodeVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "                                            /null/" + "'", str4, "                                            /null/");
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode8.setParens((int) (byte) 1, (int) (short) 1);
        functionNode8.setEncodedSourceStart((-1));
        functionNode8.setFunctionIsGetter();
        scope7.addChildToFront((com.google.javascript.rhino.head.Node) functionNode8);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode5.setFunctionIsSetter();
        int int19 = functionNode0.addFunction(functionNode5);
        boolean boolean20 = functionNode5.isGenerator();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList21 = functionNode5.getFunctions();
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump26.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump30 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump26, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int33 = scriptNode32.getEndLineno();
        int int34 = scriptNode32.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode32.getChildScopes();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump26, (com.google.javascript.rhino.head.Node) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList37 = scriptNode32.getFunctions();
        int int38 = functionNodeList37.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator39 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList37.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator39);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator41 = positionComparator39.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator42 = astNodeComparator41.reversed();
        functionNodeList21.sort(astNodeComparator42);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator44 = astNodeComparator42.reversed();
        com.google.javascript.rhino.head.ast.Jump jump49 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump49.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump53 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump49, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int56 = scriptNode55.getEndLineno();
        int int57 = scriptNode55.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList58 = scriptNode55.getChildScopes();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump49, (com.google.javascript.rhino.head.Node) scriptNode55);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList60 = scriptNode55.getFunctions();
        int int61 = functionNodeList60.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator62 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList60.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator62);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator64 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.Jump jump69 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump69.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump73 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump69, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int76 = scriptNode75.getEndLineno();
        int int77 = scriptNode75.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList78 = scriptNode75.getChildScopes();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump69, (com.google.javascript.rhino.head.Node) scriptNode75);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList80 = scriptNode75.getFunctions();
        int int81 = functionNodeList80.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator82 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList80.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator82);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator84 = positionComparator82.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator85 = astNodeComparator84.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator86 = positionComparator64.thenComparing(astNodeComparator84);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator87 = positionComparator62.thenComparing(astNodeComparator86);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator88 = positionComparator62.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator89 = astNodeComparator42.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator62);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator90 = astNodeComparator89.reversed();
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(functionNodeList21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertNotNull(functionNodeList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator41);
        org.junit.Assert.assertNotNull(astNodeComparator42);
        org.junit.Assert.assertNotNull(astNodeComparator44);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(scopeList58);
        org.junit.Assert.assertNotNull(functionNodeList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNull(scopeList78);
        org.junit.Assert.assertNotNull(functionNodeList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator84);
        org.junit.Assert.assertNotNull(astNodeComparator85);
        org.junit.Assert.assertNotNull(astNodeComparator86);
        org.junit.Assert.assertNotNull(astNodeComparator87);
        org.junit.Assert.assertNotNull(astNodeComparator88);
        org.junit.Assert.assertNotNull(astNodeComparator89);
        org.junit.Assert.assertNotNull(astNodeComparator90);
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor18 = functionNodeList15.iterator();
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        int int35 = functionNodeList34.size();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode47.getFunctions();
        functionNodeList52.clear();
        com.google.javascript.rhino.head.ast.Jump jump58 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump58.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump62 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump58, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int65 = scriptNode64.getEndLineno();
        int int66 = scriptNode64.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList67 = scriptNode64.getChildScopes();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump58, (com.google.javascript.rhino.head.Node) scriptNode64);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList69 = scriptNode64.getFunctions();
        boolean boolean70 = functionNodeList52.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList69);
        boolean boolean71 = functionNodeList34.addAll(0, (java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList52);
        com.google.javascript.rhino.head.ast.Jump jump76 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump76.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump80 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump76, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int83 = scriptNode82.getEndLineno();
        int int84 = scriptNode82.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList85 = scriptNode82.getChildScopes();
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump76, (com.google.javascript.rhino.head.Node) scriptNode82);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList87 = scriptNode82.getFunctions();
        int int88 = functionNodeList87.size();
        functionNodeList87.clear();
        int int91 = functionNodeList87.indexOf((java.lang.Object) 10L);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor92 = functionNodeList87.iterator();
        boolean boolean93 = functionNodeList34.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList87);
        boolean boolean94 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList87);
        boolean boolean95 = functionNodeList15.isEmpty();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNotNull(functionNodeItor18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(scopeList67);
        org.junit.Assert.assertNotNull(functionNodeList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNull(scopeList85);
        org.junit.Assert.assertNotNull(functionNodeList87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(functionNodeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = functionNode1.getEnclosingFunction();
        com.google.javascript.rhino.head.Node node3 = functionNode1.target;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray4 = functionNode1.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(functionNode2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        int int6 = scriptNode4.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode4.getChildScopes();
        jump2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator9 = scriptNode4.spliterator();
        java.lang.String str10 = scriptNode4.getNextTempName();
        int int11 = scriptNode4.getRegexpCount();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$0" + "'", str10, "$0");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        com.google.javascript.rhino.head.ast.Jump jump1 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode2.getTop();
        com.google.javascript.rhino.head.ast.Name name5 = null;
        functionNode2.setFunctionName(name5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode7.getTop();
        functionNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode7);
        functionNode7.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int14 = functionNode7.addFunction(functionNode13);
        int int15 = jump1.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        functionNodeList34.clear();
        com.google.javascript.rhino.head.ast.Jump jump40 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump40.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump44 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump40, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int47 = scriptNode46.getEndLineno();
        int int48 = scriptNode46.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode46.getChildScopes();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump40, (com.google.javascript.rhino.head.Node) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList51 = scriptNode46.getFunctions();
        boolean boolean52 = functionNodeList34.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList51);
        functionNode17.putProp(20, (java.lang.Object) functionNodeList34);
        int int54 = functionNode13.addFunction(functionNode17);
        boolean boolean55 = functionNode17.isGenerator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int58 = functionNode57.getBaseLineno();
        boolean boolean59 = functionNode57.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral61 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral61.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str64 = regExpLiteral61.getValue();
        regExpLiteral61.setFlags("52");
        functionNode57.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral61);
        functionNode17.addRegExp(regExpLiteral61);
        int int69 = functionNode17.getEncodedSourceStart();
        // The following exception was thrown during execution in test generation
        try {
            functionNode17.setDouble((double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertNotNull(functionNodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString("                {\n                }\n");
        com.google.javascript.rhino.head.ast.Jump jump5 = new com.google.javascript.rhino.head.ast.Jump(3, 13);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(136, node2, (com.google.javascript.rhino.head.Node) jump5);
        com.google.javascript.rhino.head.Node node8 = node6.setType((-1262414679));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode8.setParens((int) (byte) 1, (int) (short) 1);
        functionNode8.setEncodedSourceStart((-1));
        functionNode8.setFunctionIsGetter();
        scope7.addChildToFront((com.google.javascript.rhino.head.Node) functionNode8);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode5.setFunctionIsSetter();
        int int19 = functionNode0.addFunction(functionNode5);
        java.lang.String str20 = functionNode0.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int23 = scriptNode22.getEndLineno();
        int int24 = scriptNode22.getBaseLineno();
        scriptNode22.removeProp(0);
        scriptNode22.setEncodedSourceEnd(19);
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode22);
        boolean boolean30 = functionNode0.isExpressionClosure();
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$0" + "'", str20, "$0");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 2);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        java.lang.String str3 = scriptNode2.getJsDoc();
        com.google.javascript.rhino.head.Node node5 = scriptNode2.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str10 = functionNode6.toStringTree(scriptNode9);
        com.google.javascript.rhino.head.ast.Scope scope12 = scriptNode9.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(25, node5, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode14);
        boolean boolean18 = scriptNode14.hasConsistentReturnUsage();
        java.lang.String str19 = scriptNode14.getNextTempName();
        java.lang.String str20 = scriptNode14.shortName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int23 = scriptNode22.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol24 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str25 = symbol24.getName();
        com.google.javascript.rhino.head.Node node26 = symbol24.getNode();
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump((int) ' ');
        symbol24.setNode((com.google.javascript.rhino.head.Node) jump28);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int32 = functionNode31.getBaseLineno();
        functionNode31.setSourceName("                                                                                                                                                                                                        /null/");
        symbol24.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode31);
        int int36 = functionNode31.getLp();
        int int37 = functionNode31.getType();
        java.lang.String str38 = scriptNode22.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode31);
        com.google.javascript.rhino.head.ast.AstNode astNode39 = functionNode31.getBody();
        java.lang.String str40 = functionNode31.getSourceName();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode14.setJumpStatement((com.google.javascript.rhino.head.ast.Jump) functionNode31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(scope12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$0" + "'", str19, "$0");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ScriptNode" + "'", str20, "ScriptNode");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 109 + "'", int37 == 109);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(astNode39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "                                                                                                                                                                                                        /null/" + "'", str40, "                                                                                                                                                                                                        /null/");
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump6.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump6, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump6, (com.google.javascript.rhino.head.Node) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList17 = scriptNode12.getFunctions();
        int int18 = scriptNode12.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode12.getChildScopes();
        int int20 = scriptNode12.getEncodedSourceEnd();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList21 = scriptNode12.getSymbols();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        functionNode22.setEncodedSource("");
        functionNode22.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral29 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str31 = regExpLiteral29.toSource((int) (byte) 10);
        regExpLiteral29.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral29.removeProp(8);
        java.lang.String str36 = regExpLiteral29.getValue();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(7, (com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) functionNode22, (com.google.javascript.rhino.head.Node) regExpLiteral29);
        functionNode22.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.Jump jump40 = new com.google.javascript.rhino.head.ast.Jump(16, (com.google.javascript.rhino.head.Node) functionNode22);
        int int41 = functionNode22.getParamCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int43 = functionNode42.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str46 = functionNode42.toStringTree(scriptNode45);
        int int47 = scriptNode45.getRegexpCount();
        com.google.javascript.rhino.head.Node node48 = scriptNode45.getLastSibling();
        int int49 = scriptNode45.getRegexpCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        int int51 = scriptNode50.getLineno();
        scriptNode45.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode50);
        // The following exception was thrown during execution in test generation
        try {
            functionNode22.setContinue((com.google.javascript.rhino.head.Node) scriptNode50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertNotNull(functionNodeList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(symbolList21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                    /null/" + "'", str31, "                    /null/");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(15, name1);
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode2.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.AstNode astNode5 = functionNode2.getMemberExprNode();
        int int6 = functionNode2.getEndLineno();
        org.junit.Assert.assertNull(astNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name4 = null;
        functionNode1.setFunctionName(name4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode6);
        functionNode6.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int13 = functionNode6.addFunction(functionNode12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode15.getTop();
        java.lang.String str17 = scriptNode16.getJsDoc();
        com.google.javascript.rhino.head.Node node19 = scriptNode16.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        com.google.javascript.rhino.head.ast.Scope scope26 = scriptNode23.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(25, node19, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) scriptNode28);
        int int32 = functionNode12.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral34 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral34.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral34.setFlags("/null/-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode39.getTop();
        com.google.javascript.rhino.head.ast.Name name42 = null;
        functionNode39.setFunctionName(name42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        functionNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode44);
        int int47 = functionNode44.getRp();
        int int48 = functionNode44.getFunctionType();
        boolean boolean49 = functionNode44.requiresActivation();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(26, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) regExpLiteral34, (com.google.javascript.rhino.head.Node) functionNode44);
        com.google.javascript.rhino.head.ast.Name name51 = null;
        functionNode44.setFunctionName(name51);
        com.google.javascript.rhino.head.ast.Comment comment53 = functionNode44.getJsDocNode();
        java.lang.Object obj54 = functionNode44.getCompilerData();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode44.visit(nodeVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(comment53);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        int int6 = scriptNode4.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode4.getChildScopes();
        jump2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray9 = scriptNode4.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList7);
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType2, "109");
        java.lang.String str6 = comment4.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        int int8 = comment4.getLength();
        org.junit.Assert.assertTrue("'" + commentType2 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType2.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "                    109" + "'", str6, "                    109");
        org.junit.Assert.assertTrue("'" + commentType7 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType7.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.ast.Scope scope15 = functionNode9.getEnclosingScope();
        functionNode9.putProp((-1110578805), (java.lang.Object) "                                /null/");
        functionNode9.setEndLineno(14);
        java.lang.String str21 = functionNode9.getName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        boolean boolean4 = functionNode1.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int7 = scriptNode6.getEndLineno();
        int int8 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode13.getChildScopes();
        jump11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str18 = scriptNode13.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode6, (com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode13.target = scope20;
        functionNode1.addChildScope(scope20);
        boolean boolean23 = functionNode1.hasConsistentReturnUsage();
        java.lang.String str24 = functionNode1.getNextTempName();
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) (short) -1, (com.google.javascript.rhino.head.Node) functionNode1);
        boolean boolean26 = functionNode1.isExpressionClosure();
        functionNode1.putIntProp(1, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        functionNode30.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int42 = functionNode39.getRp();
        int int43 = functionNode39.getFunctionType();
        functionNode30.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        com.google.javascript.rhino.head.ast.Scope scope45 = functionNode39.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstNode astNode46 = scope45.getParent();
        com.google.javascript.rhino.head.Node node47 = scope45.getLastSibling();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int49 = functionNode48.getLp();
        functionNode48.setIsExpressionClosure(false);
        int int52 = functionNode48.getLineno();
        functionNode1.addChildAfter(node47, (com.google.javascript.rhino.head.Node) functionNode48);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int56 = functionNode55.getLp();
        functionNode55.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode59 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int60 = functionNode59.getLp();
        functionNode59.setEncodedSource("");
        functionNode59.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode65 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int66 = functionNode65.getLp();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode55, (com.google.javascript.rhino.head.Node) functionNode59, (com.google.javascript.rhino.head.Node) functionNode65, (int) '#');
        boolean boolean69 = functionNode65.isGenerator();
        int int70 = functionNode65.getFunctionType();
        com.google.javascript.rhino.head.Node node71 = functionNode65.getNext();
        int int72 = functionNode1.addFunction(functionNode65);
        java.lang.Object obj74 = functionNode1.getProp(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str18, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$0" + "'", str24, "$0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNull(astNode46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (byte) -1);
        scope1.setBounds((-330954035), 32);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node5 = scope1.getFinally();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Scope scope36 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode37.setParens((int) (byte) 1, (int) (short) 1);
        functionNode37.setEncodedSourceStart((-1));
        functionNode37.setFunctionIsGetter();
        scope36.addChildToFront((com.google.javascript.rhino.head.Node) functionNode37);
        functionNode37.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int57 = scriptNode56.getEndLineno();
        int int58 = scriptNode56.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode56.getChildScopes();
        jump54.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode56);
        java.lang.String str61 = scriptNode56.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode49, (com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode56.target = scope63;
        java.lang.String str65 = functionNode37.toStringTree(scriptNode56);
        java.lang.String str67 = scriptNode56.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap68 = scriptNode56.getSymbolTable();
        strMap33.putAll(strMap68);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet70 = strMap68.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet71 = strMap68.entrySet();
        com.google.javascript.rhino.head.ast.Symbol symbol73 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.ast.Jump jump78 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump78.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump82 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump78, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode84 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int85 = scriptNode84.getEndLineno();
        int int86 = scriptNode84.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList87 = scriptNode84.getChildScopes();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump78, (com.google.javascript.rhino.head.Node) scriptNode84);
        symbol73.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode84);
        com.google.javascript.rhino.head.ast.Symbol symbol90 = strMap68.put("RegExpLiteral", symbol73);
        java.lang.Object obj91 = null;
        com.google.javascript.rhino.head.ast.Symbol symbol92 = strMap68.get(obj91);
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str61, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "                    {\n                    }\n" + "'", str67, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strEntrySet70);
        org.junit.Assert.assertNotNull(strEntrySet71);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(scopeList87);
        org.junit.Assert.assertNull(symbol90);
        org.junit.Assert.assertNull(symbol92);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump(24, 12);
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        boolean boolean4 = functionNode1.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int7 = scriptNode6.getEndLineno();
        int int8 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode13.getChildScopes();
        jump11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str18 = scriptNode13.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode6, (com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode13.target = scope20;
        functionNode1.addChildScope(scope20);
        boolean boolean23 = functionNode1.hasConsistentReturnUsage();
        java.lang.String str24 = functionNode1.getNextTempName();
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) (short) -1, (com.google.javascript.rhino.head.Node) functionNode1);
        boolean boolean26 = functionNode1.isExpressionClosure();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral28 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral28.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral28.setValue("hi!");
        functionNode1.addRegExp(regExpLiteral28);
        regExpLiteral28.setFlags("/null/-1\tSCRIPT -1 1\n");
        regExpLiteral28.setValue("                                                                                                                                                                                                        ");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str18, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$0" + "'", str24, "$0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        java.lang.Object obj35 = null;
        java.lang.Object obj36 = null;
        boolean boolean37 = strMap33.remove(obj35, obj36);
        com.google.javascript.rhino.head.ast.Symbol symbol39 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str40 = symbol39.getDeclTypeName();
        int int41 = symbol39.getDeclType();
        com.google.javascript.rhino.head.ast.Symbol symbol42 = strMap33.putIfAbsent("                    /null/-1\tSCRIPT -1 1\n", symbol39);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = symbol42.getDeclType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "EOF" + "'", str40, "EOF");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(symbol42);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType2, "109");
        java.lang.String str6 = comment4.toSource(19);
        java.lang.String str7 = comment4.getValue();
        java.lang.String str8 = comment4.getValue();
        comment4.setLength((-1044852625));
        com.google.javascript.rhino.head.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment4.addChildrenToBack(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + commentType2 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType2.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "                                      109" + "'", str6, "                                      109");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "109" + "'", str7, "109");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "109" + "'", str8, "109");
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope6 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode7.getTop();
        functionNode7.setParens((int) (byte) 1, (int) (short) 1);
        functionNode7.setEncodedSourceStart((-1));
        functionNode7.setFunctionIsGetter();
        scope6.addChildToFront((com.google.javascript.rhino.head.Node) functionNode7);
        functionNode4.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode7);
        int int17 = functionNode0.addFunction(functionNode4);
        com.google.javascript.rhino.head.Node node18 = functionNode4.target;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = functionNode19.getTop();
        boolean boolean22 = functionNode19.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int25 = scriptNode24.getEndLineno();
        int int26 = scriptNode24.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump29 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int32 = scriptNode31.getEndLineno();
        int int33 = scriptNode31.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode31.getChildScopes();
        jump29.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode31);
        java.lang.String str36 = scriptNode31.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode24, (com.google.javascript.rhino.head.ast.Scope) scriptNode31);
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode31.target = scope38;
        functionNode19.addChildScope(scope38);
        boolean boolean41 = functionNode19.hasConsistentReturnUsage();
        boolean boolean42 = functionNode19.hasSideEffects();
        int int43 = functionNode4.addFunction(functionNode19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int45 = functionNode44.getLp();
        functionNode44.setIsExpressionClosure(false);
        com.google.javascript.rhino.head.ast.Scope scope48 = functionNode44.getParentScope();
        int int49 = functionNode44.getFunctionType();
        functionNode44.removeChildren();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = functionNode51.getTop();
        com.google.javascript.rhino.head.ast.Name name53 = null;
        functionNode51.setFunctionName(name53);
        int int55 = functionNode51.getLength();
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope((int) '4');
        functionNode51.putProp(6, (java.lang.Object) scope58);
        functionNode51.setEncodedSourceStart(9);
        com.google.javascript.rhino.head.ast.Scope scope62 = functionNode51.getParentScope();
        functionNode44.replaceWith((com.google.javascript.rhino.head.ast.Scope) functionNode51);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) functionNode4, (com.google.javascript.rhino.head.ast.Scope) functionNode44);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(scriptNode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str36, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(scope48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(scriptNode52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(scope62);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor18 = functionNodeList15.iterator();
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        int int35 = functionNodeList34.size();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode47.getFunctions();
        functionNodeList52.clear();
        com.google.javascript.rhino.head.ast.Jump jump58 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump58.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump62 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump58, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int65 = scriptNode64.getEndLineno();
        int int66 = scriptNode64.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList67 = scriptNode64.getChildScopes();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump58, (com.google.javascript.rhino.head.Node) scriptNode64);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList69 = scriptNode64.getFunctions();
        boolean boolean70 = functionNodeList52.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList69);
        boolean boolean71 = functionNodeList34.addAll(0, (java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList52);
        com.google.javascript.rhino.head.ast.Jump jump76 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump76.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump80 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump76, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int83 = scriptNode82.getEndLineno();
        int int84 = scriptNode82.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList85 = scriptNode82.getChildScopes();
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump76, (com.google.javascript.rhino.head.Node) scriptNode82);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList87 = scriptNode82.getFunctions();
        int int88 = functionNodeList87.size();
        functionNodeList87.clear();
        int int91 = functionNodeList87.indexOf((java.lang.Object) 10L);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor92 = functionNodeList87.iterator();
        boolean boolean93 = functionNodeList34.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList87);
        boolean boolean94 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList87);
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor95 = functionNodeList87.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode97 = functionNodeList87.remove((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNotNull(functionNodeItor18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(scopeList67);
        org.junit.Assert.assertNotNull(functionNodeList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNull(scopeList85);
        org.junit.Assert.assertNotNull(functionNodeList87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(functionNodeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(functionNodeItor95);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = functionNode0.getSymbols();
        functionNode0.setRp(5);
        com.google.javascript.rhino.head.ast.Scope scope7 = functionNode0.getEnclosingScope();
        functionNode0.setLineno((int) (short) -1);
        com.google.javascript.rhino.head.ast.Symbol symbol10 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str11 = symbol10.getName();
        com.google.javascript.rhino.head.Node node12 = symbol10.getNode();
        com.google.javascript.rhino.head.ast.Jump jump14 = new com.google.javascript.rhino.head.ast.Jump((int) ' ');
        symbol10.setNode((com.google.javascript.rhino.head.Node) jump14);
        java.lang.String str16 = symbol10.getDeclTypeName();
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.putSymbol(symbol10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null symbol name");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertNull(scope7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "EOF" + "'", str16, "EOF");
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = scriptNode1.new NodeIterator();
        com.google.javascript.rhino.head.Node node8 = nodeIterator7.next();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int10 = functionNode9.getLp();
        functionNode9.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode13.getTop();
        com.google.javascript.rhino.head.ast.Name name16 = null;
        functionNode13.setFunctionName(name16);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = functionNode18.getTop();
        functionNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode18);
        int int21 = functionNode18.getRp();
        int int22 = functionNode18.getFunctionType();
        functionNode9.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode18);
        boolean boolean24 = functionNode9.isGetterOrSetter();
        functionNode9.clearParentScope();
        // The following exception was thrown during execution in test generation
        try {
            node8.setScope((com.google.javascript.rhino.head.ast.Scope) functionNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertNotNull(scriptNode19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.ast.Scope scope15 = functionNode9.getEnclosingScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int18 = scriptNode17.getEndLineno();
        int int19 = scriptNode17.getBaseLineno();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        functionNode20.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode26 = functionNode20.getBody();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList27 = functionNode20.getParams();
        scriptNode17.replaceWith((com.google.javascript.rhino.head.ast.Scope) functionNode20);
        scope15.setTop((com.google.javascript.rhino.head.ast.ScriptNode) functionNode20);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        functionNode30.setIsExpressionClosure(false);
        com.google.javascript.rhino.head.ast.Scope scope34 = functionNode30.getParentScope();
        int int35 = functionNode30.getFunctionType();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode47.getFunctions();
        functionNodeList52.clear();
        functionNodeList52.clear();
        com.google.javascript.rhino.head.ast.Jump jump59 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump59.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump63 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump59, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int66 = scriptNode65.getEndLineno();
        int int67 = scriptNode65.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList68 = scriptNode65.getChildScopes();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump59, (com.google.javascript.rhino.head.Node) scriptNode65);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList70 = scriptNode65.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator71 = functionNodeList70.spliterator();
        int int73 = functionNodeList70.indexOf((java.lang.Object) (byte) 10);
        boolean boolean74 = functionNodeList52.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList70);
        boolean boolean75 = functionNodeList52.isEmpty();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int78 = scriptNode77.getEndLineno();
        int int79 = scriptNode77.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump82 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode84 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int85 = scriptNode84.getEndLineno();
        int int86 = scriptNode84.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList87 = scriptNode84.getChildScopes();
        jump82.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode84);
        java.lang.String str89 = scriptNode84.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode77, (com.google.javascript.rhino.head.ast.Scope) scriptNode84);
        int int91 = scriptNode77.getBaseLineno();
        boolean boolean92 = functionNodeList52.equals((java.lang.Object) int91);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor93 = functionNodeList52.iterator();
        functionNodeList52.clear();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator95 = functionNodeList52.spliterator();
        functionNode30.putProp((int) (short) 0, (java.lang.Object) functionNodeList52);
        // The following exception was thrown during execution in test generation
        try {
            functionNode20.removeChild((com.google.javascript.rhino.head.Node) functionNode30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(astNode26);
        org.junit.Assert.assertNotNull(astNodeList27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scope34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNull(scopeList68);
        org.junit.Assert.assertNotNull(functionNodeList70);
        org.junit.Assert.assertNotNull(functionNodeSpliterator71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(scopeList87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str89, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(functionNodeItor93);
        org.junit.Assert.assertNotNull(functionNodeSpliterator95);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getName();
        com.google.javascript.rhino.head.Node node2 = symbol0.getNode();
        java.lang.String str3 = symbol0.toString();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str8 = functionNode4.toStringTree(scriptNode7);
        functionNode4.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode10 = functionNode4.getBody();
        functionNode4.setParens(21, (int) '#');
        int int14 = functionNode4.getLineno();
        functionNode4.setRp(9);
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode4);
        com.google.javascript.rhino.head.Node node18 = symbol0.getNode();
        java.lang.String str19 = symbol0.getDeclTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Symbol (EOF) name=null" + "'", str3, "Symbol (EOF) name=null");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(astNode10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EOF" + "'", str19, "EOF");
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(4, name1);
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump7.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump7, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode13.getChildScopes();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump7, (com.google.javascript.rhino.head.Node) scriptNode13);
        com.google.javascript.rhino.head.Node node19 = scriptNode13.setType(0);
        functionNode2.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        scriptNode13.setBaseLineno(1579347477);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("EOF");
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = node1.new NodeIterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode3.getTop();
        functionNode3.setParens((int) (byte) 1, (int) (short) 1);
        functionNode3.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList10 = functionNode3.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope12 = functionNode3.getDefiningScope("hi!");
        boolean boolean13 = functionNode3.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int16 = scriptNode15.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol18 = scriptNode15.getSymbol("hi!");
        scriptNode15.putIntProp(3, 0);
        functionNode3.addResumptionPoint((com.google.javascript.rhino.head.Node) scriptNode15);
        java.lang.String str23 = node1.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = functionNode24.getTop();
        com.google.javascript.rhino.head.ast.Name name27 = null;
        functionNode24.setFunctionName(name27);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode29.getTop();
        functionNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode29);
        java.lang.String str32 = functionNode24.getNextTempName();
        java.lang.String str33 = functionNode24.getEncodedSource();
        java.lang.String str34 = functionNode24.getNextTempName();
        int int35 = functionNode3.addFunction(functionNode24);
        // The following exception was thrown during execution in test generation
        try {
            functionNode24.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertNull(nodeList10);
        org.junit.Assert.assertNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(symbol18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "$0" + "'", str32, "$0");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "$1" + "'", str34, "$1");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 24);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        int int18 = functionNodeList15.lastIndexOf((java.lang.Object) (-1L));
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump24 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump24.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump24, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        int int32 = scriptNode30.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode30.getChildScopes();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump24, (com.google.javascript.rhino.head.Node) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode30.getFunctions();
        int int36 = functionNodeList35.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator37 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList35.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator37);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator39 = positionComparator37.reversed();
        functionNodeList15.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator37);
        com.google.javascript.rhino.head.ast.Symbol symbol41 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str42 = symbol41.getName();
        com.google.javascript.rhino.head.Node node43 = symbol41.getNode();
        symbol41.setIndex(1);
        symbol41.setIndex(109);
        boolean boolean48 = functionNodeList15.equals((java.lang.Object) symbol41);
        java.util.function.UnaryOperator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeUnaryOperator49 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNodeList15.replaceAll(functionNodeUnaryOperator49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor18 = functionNodeList15.iterator();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode21.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode24 = functionNode21.getBody();
        int int25 = functionNode21.getLength();
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        int int32 = scriptNode30.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode30.getChildScopes();
        jump28.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode30);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        functionNode36.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        functionNode40.setEncodedSource("");
        functionNode40.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int47 = functionNode46.getLp();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode36, (com.google.javascript.rhino.head.Node) functionNode40, (com.google.javascript.rhino.head.Node) functionNode46, (int) '#');
        jump28.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode36);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList51 = functionNode36.getStatements();
        functionNode21.setParams(astNodeList51);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int54 = functionNode53.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = functionNode53.getTop();
        com.google.javascript.rhino.head.Node node56 = functionNode53.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList57 = functionNode53.getParams();
        functionNode21.setParams(astNodeList57);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode59 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode59.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int63 = functionNode62.getLp();
        functionNode62.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode66 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int67 = functionNode66.getLp();
        functionNode66.setEncodedSource("");
        functionNode66.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode72 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int73 = functionNode72.getLp();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode62, (com.google.javascript.rhino.head.Node) functionNode66, (com.google.javascript.rhino.head.Node) functionNode72, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode76 = functionNode62.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode77 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int78 = functionNode77.getLp();
        functionNode77.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode81 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int82 = functionNode81.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode83 = functionNode81.getTop();
        com.google.javascript.rhino.head.ast.Name name84 = null;
        functionNode81.setFunctionName(name84);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode86 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = functionNode86.getTop();
        functionNode81.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode86);
        int int89 = functionNode86.getRp();
        int int90 = functionNode86.getFunctionType();
        functionNode77.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode86);
        com.google.javascript.rhino.head.ast.Scope scope92 = functionNode86.getEnclosingScope();
        functionNode62.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode86);
        int int94 = functionNode59.addFunction(functionNode62);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList95 = functionNode59.getResumptionPoints();
        functionNode21.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode59);
        java.lang.Object obj98 = functionNode59.getProp(1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode99 = functionNodeList15.set((-3285918), functionNode59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNotNull(functionNodeItor18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertNull(astNode24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(astNodeList51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(scriptNode55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(astNodeList57);
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNull(astNode76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(scriptNode83);
        org.junit.Assert.assertNotNull(scriptNode87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(scope92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNull(nodeList95);
        org.junit.Assert.assertNull(obj98);
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name4 = null;
        functionNode1.setFunctionName(name4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode6);
        functionNode6.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int13 = functionNode6.addFunction(functionNode12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode15.getTop();
        java.lang.String str17 = scriptNode16.getJsDoc();
        com.google.javascript.rhino.head.Node node19 = scriptNode16.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        com.google.javascript.rhino.head.ast.Scope scope26 = scriptNode23.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(25, node19, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) scriptNode28);
        int int32 = functionNode12.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral34 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral34.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral34.setFlags("/null/-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode39.getTop();
        com.google.javascript.rhino.head.ast.Name name42 = null;
        functionNode39.setFunctionName(name42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        functionNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode44);
        int int47 = functionNode44.getRp();
        int int48 = functionNode44.getFunctionType();
        boolean boolean49 = functionNode44.requiresActivation();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(26, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) regExpLiteral34, (com.google.javascript.rhino.head.Node) functionNode44);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList51 = functionNode44.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator52 = functionNodeList51.spliterator();
        functionNodeList51.clear();
        com.google.javascript.rhino.head.ast.Jump jump58 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump58.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump62 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump58, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int65 = scriptNode64.getEndLineno();
        int int66 = scriptNode64.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList67 = scriptNode64.getChildScopes();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump58, (com.google.javascript.rhino.head.Node) scriptNode64);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList69 = scriptNode64.getFunctions();
        functionNodeList69.clear();
        com.google.javascript.rhino.head.ast.Jump jump75 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump75.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump79 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump75, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode81 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int82 = scriptNode81.getEndLineno();
        int int83 = scriptNode81.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList84 = scriptNode81.getChildScopes();
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump75, (com.google.javascript.rhino.head.Node) scriptNode81);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList86 = scriptNode81.getFunctions();
        boolean boolean87 = functionNodeList69.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList86);
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator88 = functionNodeList69.spliterator();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream89 = functionNodeList69.stream();
        boolean boolean90 = functionNodeList51.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList69);
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream91 = functionNodeList51.parallelStream();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(functionNodeList51);
        org.junit.Assert.assertNotNull(functionNodeSpliterator52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(scopeList67);
        org.junit.Assert.assertNotNull(functionNodeList69);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNull(scopeList84);
        org.junit.Assert.assertNotNull(functionNodeList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(functionNodeSpliterator88);
        org.junit.Assert.assertNotNull(functionNodeStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(functionNodeStream91);
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(17, name1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str7 = functionNode3.toStringTree(scriptNode6);
        int int8 = scriptNode6.getRegexpCount();
        java.lang.Object obj9 = scriptNode6.getCompilerData();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList10 = scriptNode6.getStatements();
        java.lang.String str11 = functionNode2.toStringTree(scriptNode6);
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode14.getTop();
        functionNode14.setParens((int) (byte) 1, (int) (short) 1);
        functionNode14.setEncodedSourceStart((-1));
        functionNode14.setFunctionIsGetter();
        scope13.addChildToFront((com.google.javascript.rhino.head.Node) functionNode14);
        functionNode14.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int27 = scriptNode26.getEndLineno();
        int int28 = scriptNode26.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int34 = scriptNode33.getEndLineno();
        int int35 = scriptNode33.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList36 = scriptNode33.getChildScopes();
        jump31.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode33);
        java.lang.String str38 = scriptNode33.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode26, (com.google.javascript.rhino.head.ast.Scope) scriptNode33);
        com.google.javascript.rhino.head.ast.Scope scope40 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode33.target = scope40;
        java.lang.String str42 = functionNode14.toStringTree(scriptNode33);
        java.lang.String str44 = scriptNode33.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap45 = scriptNode33.getSymbolTable();
        int int46 = strMap45.size();
        com.google.javascript.rhino.head.ast.Jump jump51 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump51.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump55 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump51, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int58 = scriptNode57.getEndLineno();
        int int59 = scriptNode57.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList60 = scriptNode57.getChildScopes();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump51, (com.google.javascript.rhino.head.Node) scriptNode57);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList62 = scriptNode57.getFunctions();
        functionNodeList62.clear();
        functionNodeList62.clear();
        com.google.javascript.rhino.head.ast.Jump jump69 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump69.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump73 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump69, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int76 = scriptNode75.getEndLineno();
        int int77 = scriptNode75.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList78 = scriptNode75.getChildScopes();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump69, (com.google.javascript.rhino.head.Node) scriptNode75);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList80 = scriptNode75.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator81 = functionNodeList80.spliterator();
        int int83 = functionNodeList80.indexOf((java.lang.Object) (byte) 10);
        boolean boolean84 = functionNodeList62.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList80);
        boolean boolean85 = strMap45.containsKey((java.lang.Object) functionNodeList62);
        boolean boolean86 = strMap45.isEmpty();
        java.util.Set<java.lang.String> strSet87 = strMap45.keySet();
        boolean boolean89 = strMap45.equals((java.lang.Object) (byte) 0);
        java.util.Set<java.lang.String> strSet90 = strMap45.keySet();
        com.google.javascript.rhino.head.ast.Symbol symbol92 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol92.setIndex(6);
        java.lang.String str95 = symbol92.getDeclTypeName();
        int int96 = symbol92.getDeclType();
        com.google.javascript.rhino.head.ast.Symbol symbol97 = strMap45.replace("/=", symbol92);
        java.util.Set<java.lang.String> strSet98 = strMap45.keySet();
        functionNode2.setSymbolTable(strMap45);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(astNodeList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(scopeList36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str38, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "                    {\n                    }\n" + "'", str44, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(scopeList60);
        org.junit.Assert.assertNotNull(functionNodeList62);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNull(scopeList78);
        org.junit.Assert.assertNotNull(functionNodeList80);
        org.junit.Assert.assertNotNull(functionNodeSpliterator81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "EOF" + "'", str95, "EOF");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNull(symbol97);
        org.junit.Assert.assertNotNull(strSet98);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        boolean boolean15 = functionNode11.isGenerator();
        int int16 = functionNode11.getFunctionType();
        com.google.javascript.rhino.head.Node node17 = functionNode11.getNext();
        functionNode11.setFunctionIsSetter();
        com.google.javascript.rhino.head.ast.Scope scope20 = functionNode11.getDefiningScope("-1\tSCRIPT -1 1\n");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot21 = scope20.getAstRoot();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(scope20);
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = scriptNode10.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode10.getChildScopes();
        scriptNode10.flattenSymbolTable(false);
        java.lang.String str21 = scriptNode10.toSource((int) ' ');
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                {\n                                                                }\n" + "'", str21, "                                                                {\n                                                                }\n");
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Symbol symbol2 = new com.google.javascript.rhino.head.ast.Symbol(23, "Symbol (EOF) name=                                      109");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: 23");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((-1110578805));
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope2 = symbol0.getContainingTable();
        symbol0.setIndex(10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int7 = scriptNode6.getEndLineno();
        int int8 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode13.getChildScopes();
        jump11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str18 = scriptNode13.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode6, (com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        com.google.javascript.rhino.head.ast.AstNode astNode20 = scriptNode6.getParent();
        int int21 = scriptNode6.getType();
        com.google.javascript.rhino.head.ast.Symbol symbol23 = scriptNode6.getSymbol("109");
        java.lang.String str24 = scriptNode6.toSource();
        int int25 = scriptNode6.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode26.getTop();
        functionNode26.setParens((int) (byte) 1, (int) (short) 1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor31 = functionNode26.iterator();
        functionNode26.setLp(136);
        int int34 = functionNode26.getFunctionType();
        scriptNode6.addChildrenToBack((com.google.javascript.rhino.head.Node) functionNode26);
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = null;
        java.lang.String str38 = scriptNode6.toStringTree(scriptNode37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode(9);
        com.google.javascript.rhino.head.Node node41 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode6.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode40, node41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "EOF" + "'", str1, "EOF");
        org.junit.Assert.assertNull(scope2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str18, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(astNode20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 136 + "'", int21 == 136);
        org.junit.Assert.assertNull(symbol23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n}\n" + "'", str24, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertNotNull(nodeItor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.Node node3 = functionNode0.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList4 = functionNode0.getParams();
        com.google.javascript.rhino.head.ast.Symbol symbol5 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str6 = symbol5.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope7 = symbol5.getContainingTable();
        symbol5.setIndex(21);
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.putSymbol(symbol5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null symbol name");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(astNodeList4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EOF" + "'", str6, "EOF");
        org.junit.Assert.assertNull(scope7);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode7.getTop();
        boolean boolean10 = functionNode7.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int20 = scriptNode19.getEndLineno();
        int int21 = scriptNode19.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode19.getChildScopes();
        jump17.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode19);
        java.lang.String str24 = scriptNode19.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode12, (com.google.javascript.rhino.head.ast.Scope) scriptNode19);
        com.google.javascript.rhino.head.ast.Scope scope26 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode19.target = scope26;
        functionNode7.addChildScope(scope26);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode4, (com.google.javascript.rhino.head.ast.Scope) functionNode7);
        int int30 = functionNode7.getFunctionCount();
        com.google.javascript.rhino.head.ast.Scope scope31 = functionNode7.getEnclosingScope();
        int int32 = functionNode7.getLp();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope33 = functionNode7.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str24, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(scope31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.Jump jump5 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump5.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump5, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int12 = scriptNode11.getEndLineno();
        int int13 = scriptNode11.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump5, (com.google.javascript.rhino.head.Node) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode11.getFunctions();
        int int17 = scriptNode11.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode11.getChildScopes();
        java.lang.String str19 = scriptNode11.getSourceName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        functionNode21.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        functionNode25.setEncodedSource("");
        functionNode25.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int32 = functionNode31.getLp();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode21, (com.google.javascript.rhino.head.Node) functionNode25, (com.google.javascript.rhino.head.Node) functionNode31, (int) '#');
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap35 = functionNode25.getSymbolTable();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump47.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump51 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump47, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int53 = functionNode52.getLp();
        functionNode52.setEncodedSource("");
        functionNode52.flattenSymbolTable(false);
        jump39.addChildAfter((com.google.javascript.rhino.head.Node) jump47, (com.google.javascript.rhino.head.Node) functionNode52);
        functionNode25.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode52);
        int int60 = positionComparator0.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode11, (com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        com.google.javascript.rhino.head.Node node61 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode25.setDefault(node61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(strMap35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        int int6 = scriptNode4.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode4.getChildScopes();
        jump2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = scriptNode4.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode11.getTop();
        com.google.javascript.rhino.head.ast.Name name14 = null;
        functionNode11.setFunctionName(name14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode16.getTop();
        functionNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode16);
        functionNode16.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int23 = functionNode16.addFunction(functionNode22);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = functionNode25.getTop();
        java.lang.String str27 = scriptNode26.getJsDoc();
        com.google.javascript.rhino.head.Node node29 = scriptNode26.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str34 = functionNode30.toStringTree(scriptNode33);
        com.google.javascript.rhino.head.ast.Scope scope36 = scriptNode33.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int39 = scriptNode38.getEndLineno();
        int int40 = scriptNode38.getBaseLineno();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(25, node29, (com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scriptNode38);
        int int42 = functionNode22.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral44 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral44.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral44.setValue("hi!");
        com.google.javascript.rhino.head.ast.Jump jump52 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump52.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump56 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump52, 0);
        java.lang.String str57 = jump52.toString();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) regExpLiteral44, (com.google.javascript.rhino.head.Node) jump52);
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        functionNode60.setEncodedSource("");
        functionNode60.flattenSymbolTable(false);
        boolean boolean66 = functionNode60.requiresActivation();
        java.lang.String str67 = functionNode60.getEncodedSource();
        com.google.javascript.rhino.head.Node node69 = functionNode60.setType(19);
        functionNode60.setRp(0);
        scriptNode4.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = functionNode60.getParamOrVarName(774094395);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 774094395");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(scope36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "52" + "'", str57, "52");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor18 = functionNodeList15.iterator();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral20 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str22 = regExpLiteral20.toSource((int) (byte) 10);
        regExpLiteral20.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral20.removeProp(8);
        java.lang.String str27 = regExpLiteral20.getValue();
        regExpLiteral20.setLineno(10);
        regExpLiteral20.removeChildren();
        boolean boolean31 = functionNodeList15.equals((java.lang.Object) regExpLiteral20);
        regExpLiteral20.setFlags("");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNotNull(functionNodeItor18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                    /null/" + "'", str22, "                    /null/");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(35, name1);
        com.google.javascript.rhino.head.ast.Name name3 = functionNode2.getFunctionName();
        org.junit.Assert.assertNull(name3);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator17 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList15.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator17);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        boolean boolean21 = functionNode20.hasChildren();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str31 = functionNode27.toStringTree(scriptNode30);
        functionNode27.setFunctionIsGetter();
        int int33 = functionNode22.addFunction(functionNode27);
        boolean boolean34 = functionNode27.hasSideEffects();
        int int35 = functionNode27.getFunctionCount();
        int int36 = positionComparator17.compare((com.google.javascript.rhino.head.ast.AstNode) functionNode20, (com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        functionNode20.setLength((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            functionNode20.labelId((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral3 = new com.google.javascript.rhino.head.ast.RegExpLiteral((-146877426), 14);
        com.google.javascript.rhino.head.ast.Symbol symbol4 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol4.setIndex(6);
        java.lang.String str7 = symbol4.toString();
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump19.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump19, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        functionNode24.setEncodedSource("");
        functionNode24.flattenSymbolTable(false);
        jump11.addChildAfter((com.google.javascript.rhino.head.Node) jump19, (com.google.javascript.rhino.head.Node) functionNode24);
        com.google.javascript.rhino.head.Node node31 = functionNode24.target;
        boolean boolean32 = functionNode24.hasConsistentReturnUsage();
        symbol4.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode24);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(97, (com.google.javascript.rhino.head.Node) regExpLiteral3, (com.google.javascript.rhino.head.Node) functionNode24, (int) (short) 1);
        boolean boolean36 = node35.hasChildren();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Symbol (EOF) name=null" + "'", str7, "Symbol (EOF) name=null");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral1 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str3 = regExpLiteral1.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = regExpLiteral1.new NodeIterator();
        regExpLiteral1.setFlags("$0");
        int int7 = regExpLiteral1.getLineno();
        java.lang.String str9 = regExpLiteral1.toSource(6);
        regExpLiteral1.setBounds((-18802601), 11);
        // The following exception was thrown during execution in test generation
        try {
            regExpLiteral1.setString("                                                                /null/-1\tSCRIPT -1 1\n");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.RegExpLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                    /null/" + "'", str3, "                    /null/");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "            /null/$0" + "'", str9, "            /null/$0");
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode((-1262414679));
        functionNode1.setRp((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = functionNode1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getName();
        com.google.javascript.rhino.head.Node node2 = symbol0.getNode();
        symbol0.setIndex(1);
        com.google.javascript.rhino.head.ast.Scope scope5 = symbol0.getContainingTable();
        com.google.javascript.rhino.head.ast.Symbol symbol6 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol6.setIndex(6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        scriptNode10.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode13);
        com.google.javascript.rhino.head.ast.Comment comment16 = null;
        scriptNode10.setJsDocNode(comment16);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList18 = scriptNode10.getSymbols();
        symbol6.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode10);
        com.google.javascript.rhino.head.ast.Scope scope20 = symbol6.getContainingTable();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str25 = functionNode21.toStringTree(scriptNode24);
        com.google.javascript.rhino.head.ast.Scope scope27 = scriptNode24.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = scriptNode24.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        int int32 = scriptNode30.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode24, (com.google.javascript.rhino.head.ast.Scope) scriptNode30);
        symbol6.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode30);
        symbol0.setNode((com.google.javascript.rhino.head.Node) scriptNode30);
        boolean boolean36 = scriptNode30.hasConsistentReturnUsage();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(scope5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(symbolList18);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(scope27);
        org.junit.Assert.assertNotNull(symbolList28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope2 = symbol0.getContainingTable();
        symbol0.setIndex(21);
        java.lang.String str5 = symbol0.getName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode6.getTop();
        com.google.javascript.rhino.head.ast.Name name9 = null;
        functionNode6.setFunctionName(name9);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = functionNode11.getTop();
        functionNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode11);
        int int14 = functionNode11.getRp();
        java.lang.String str15 = functionNode11.getSourceName();
        functionNode11.setParens(14, (int) '#');
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = functionNode19.getTop();
        int int21 = functionNode19.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = functionNode19.getEnclosingFunction();
        functionNode19.setBaseLineno(0);
        functionNode11.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode19);
        symbol0.setNode((com.google.javascript.rhino.head.Node) functionNode19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        java.lang.String str30 = scriptNode28.getNextTempName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode31.getTop();
        functionNode31.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode39.setParens((int) (byte) 1, (int) (short) 1);
        functionNode39.setEncodedSourceStart((-1));
        functionNode39.setFunctionIsGetter();
        scope38.addChildToFront((com.google.javascript.rhino.head.Node) functionNode39);
        functionNode36.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        functionNode36.setFunctionIsSetter();
        int int50 = functionNode31.addFunction(functionNode36);
        int int51 = scriptNode28.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode31);
        int int52 = scriptNode28.getPosition();
        functionNode19.addParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        int int54 = functionNode19.getEncodedSourceStart();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = functionNode19.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "EOF" + "'", str1, "EOF");
        org.junit.Assert.assertNull(scope2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertNotNull(scriptNode12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(scriptNode20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(functionNode22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "$0" + "'", str30, "$0");
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1717341994) + "'", int51 == (-1717341994));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump21.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump21, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode27.getChildScopes();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump21, (com.google.javascript.rhino.head.Node) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode27.getFunctions();
        boolean boolean33 = functionNodeList15.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList32);
        functionNodeList15.clear();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream35 = functionNodeList15.parallelStream();
        com.google.javascript.rhino.head.ast.Jump jump40 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump40.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump44 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump40, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int47 = scriptNode46.getEndLineno();
        int int48 = scriptNode46.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode46.getChildScopes();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump40, (com.google.javascript.rhino.head.Node) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList51 = scriptNode46.getFunctions();
        functionNodeList51.clear();
        functionNodeList51.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor54 = functionNodeList51.iterator();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral56 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str58 = regExpLiteral56.toSource((int) (byte) 10);
        regExpLiteral56.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral56.removeProp(8);
        java.lang.String str63 = regExpLiteral56.getValue();
        regExpLiteral56.setLineno(10);
        regExpLiteral56.removeChildren();
        boolean boolean67 = functionNodeList51.equals((java.lang.Object) regExpLiteral56);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode68 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int69 = functionNode68.getLp();
        functionNode68.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode72 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope74 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = functionNode75.getTop();
        functionNode75.setParens((int) (byte) 1, (int) (short) 1);
        functionNode75.setEncodedSourceStart((-1));
        functionNode75.setFunctionIsGetter();
        scope74.addChildToFront((com.google.javascript.rhino.head.Node) functionNode75);
        functionNode72.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode75);
        int int85 = functionNode68.addFunction(functionNode72);
        com.google.javascript.rhino.head.ast.Symbol symbol87 = functionNode68.getSymbol("-1\tBLOCK -1 1\n");
        com.google.javascript.rhino.head.Node[] nodeArray88 = new com.google.javascript.rhino.head.Node[] { functionNode68 };
        com.google.javascript.rhino.head.Node[] nodeArray89 = functionNodeList51.toArray(nodeArray88);
        boolean boolean90 = functionNodeList15.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList51);
        boolean boolean91 = functionNodeList15.isEmpty();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(functionNodeStream35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertNotNull(functionNodeList51);
        org.junit.Assert.assertNotNull(functionNodeItor54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "                    /null/" + "'", str58, "                    /null/");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(scriptNode76);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(symbol87);
        org.junit.Assert.assertNotNull(nodeArray88);
        org.junit.Assert.assertNotNull(nodeArray89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        functionNode1.setSourceName("                                                                                                                                                                                                        /null/");
        functionNode1.setRequiresActivation();
        functionNode1.removeProp(0);
        boolean boolean8 = functionNode1.isSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int10 = functionNode9.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode9.getTop();
        boolean boolean12 = functionNode9.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        functionNode9.addChildScope(scope28);
        boolean boolean31 = functionNode9.hasConsistentReturnUsage();
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap32 = functionNode9.getLiveLocals();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int35 = functionNode34.getEncodedSourceStart();
        functionNode9.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode34);
        int int37 = functionNode34.depth();
        // The following exception was thrown during execution in test generation
        try {
            functionNode1.setJumpStatement((com.google.javascript.rhino.head.ast.Jump) functionNode34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(nodeMap32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        functionNode4.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        functionNode8.setEncodedSource("");
        functionNode8.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode4, (com.google.javascript.rhino.head.Node) functionNode8, (com.google.javascript.rhino.head.Node) functionNode14, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode18 = functionNode4.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int24 = functionNode23.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode23.getTop();
        com.google.javascript.rhino.head.ast.Name name26 = null;
        functionNode23.setFunctionName(name26);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = functionNode28.getTop();
        functionNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        int int31 = functionNode28.getRp();
        int int32 = functionNode28.getFunctionType();
        functionNode19.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        com.google.javascript.rhino.head.ast.Scope scope34 = functionNode28.getEnclosingScope();
        functionNode4.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        int int36 = functionNode1.addFunction(functionNode4);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList37 = functionNode1.getResumptionPoints();
        functionNode1.setLineno(14);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(109, (com.google.javascript.rhino.head.Node) functionNode1, 830992929);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int44 = functionNode43.getLp();
        functionNode43.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        functionNode47.setEncodedSource("");
        functionNode47.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int54 = functionNode53.getLp();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode43, (com.google.javascript.rhino.head.Node) functionNode47, (com.google.javascript.rhino.head.Node) functionNode53, (int) '#');
        boolean boolean57 = functionNode53.isGenerator();
        int int58 = functionNode53.getFunctionType();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        functionNode60.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode64 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int65 = functionNode64.getLp();
        functionNode64.setEncodedSource("");
        functionNode64.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode70 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int71 = functionNode70.getLp();
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode60, (com.google.javascript.rhino.head.Node) functionNode64, (com.google.javascript.rhino.head.Node) functionNode70, (int) '#');
        boolean boolean74 = functionNode70.isGenerator();
        int int75 = functionNode70.getFunctionType();
        com.google.javascript.rhino.head.Node node76 = functionNode70.getFirstChild();
        boolean boolean77 = functionNode70.isGetterOrSetter();
        functionNode53.setParentScope((com.google.javascript.rhino.head.ast.Scope) functionNode70);
        com.google.javascript.rhino.head.ast.Scope scope79 = functionNode53.getParentScope();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode53.visit(nodeVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(astNode18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertNotNull(scriptNode29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(nodeList37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(scope79);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode3.getTop();
        functionNode3.setParens((int) (byte) 1, (int) (short) 1);
        functionNode3.setEncodedSourceStart((-1));
        functionNode3.setFunctionIsGetter();
        scope2.addChildToFront((com.google.javascript.rhino.head.Node) functionNode3);
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode3);
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int18 = scriptNode17.getEndLineno();
        int int19 = scriptNode17.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode17.getChildScopes();
        jump15.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode17);
        boolean boolean22 = functionNode3.isParam((com.google.javascript.rhino.head.ast.AstNode) jump15);
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap23 = functionNode3.getLiveLocals();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = functionNode3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(nodeMap23);
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        int int18 = functionNodeList15.lastIndexOf((java.lang.Object) (-1L));
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        functionNodeList34.clear();
        int int37 = functionNodeList34.lastIndexOf((java.lang.Object) (-1L));
        boolean boolean38 = functionNodeList15.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList34);
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump43.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump43, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode49.getChildScopes();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump43, (com.google.javascript.rhino.head.Node) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode49.getFunctions();
        int int55 = functionNodeList15.indexOf((java.lang.Object) scriptNode49);
        java.lang.Object obj56 = null;
        boolean boolean57 = functionNodeList15.contains(obj56);
        java.lang.String[] strArray63 = new java.lang.String[] { "                            ", "ScriptNode", "109", "                    {\n                    }\n", "-1\tBLOCK -1 1\n" };
        java.lang.String[] strArray64 = functionNodeList15.toArray(strArray63);
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator65 = functionNodeList15.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator66 = functionNodeList15.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList69 = functionNodeList15.subList(1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(functionNodeSpliterator65);
        org.junit.Assert.assertNotNull(functionNodeSpliterator66);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump21.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump21, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode27.getChildScopes();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump21, (com.google.javascript.rhino.head.Node) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode27.getFunctions();
        functionNodeList32.clear();
        boolean boolean34 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList32);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode35.getTop();
        boolean boolean37 = functionNodeList15.contains((java.lang.Object) scriptNode36);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope38 = com.google.javascript.rhino.head.ast.Scope.splitScope((com.google.javascript.rhino.head.ast.Scope) scriptNode36);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.ScriptNode");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(17, name1);
        java.lang.Object obj3 = functionNode2.getCompilerData();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        functionNode4.setFunctionIsGetter();
        functionNode4.setFunctionType(7);
        // The following exception was thrown during execution in test generation
        try {
            functionNode2.setDefault((com.google.javascript.rhino.head.Node) functionNode4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int3 = functionNode2.getEncodedSourceStart();
        int int4 = functionNode2.getFunctionCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode5.setParens((int) (byte) 1, (int) (short) 1);
        int int10 = functionNode5.getRp();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(17, (com.google.javascript.rhino.head.Node) functionNode2, (com.google.javascript.rhino.head.Node) functionNode5, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Symbol symbol14 = functionNode5.getSymbol("$0");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        functionNode15.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope21 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode22.getTop();
        functionNode22.setParens((int) (byte) 1, (int) (short) 1);
        functionNode22.setEncodedSourceStart((-1));
        functionNode22.setFunctionIsGetter();
        scope21.addChildToFront((com.google.javascript.rhino.head.Node) functionNode22);
        functionNode19.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode22);
        int int32 = functionNode15.addFunction(functionNode19);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode15);
        int int34 = functionNode15.getFunctionCount();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node35 = functionNode15.getDefault();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(symbol14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList33 = scriptNode28.getFunctions();
        functionNodeList33.clear();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        boolean boolean51 = functionNodeList33.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList50);
        boolean boolean52 = functionNodeList15.addAll(0, (java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList33);
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList68 = scriptNode63.getFunctions();
        int int69 = functionNodeList68.size();
        functionNodeList68.clear();
        int int72 = functionNodeList68.indexOf((java.lang.Object) 10L);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor73 = functionNodeList68.iterator();
        boolean boolean74 = functionNodeList15.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList68);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int78 = scriptNode77.getEndLineno();
        int int79 = scriptNode77.getBaseLineno();
        com.google.javascript.rhino.head.Node node81 = new com.google.javascript.rhino.head.Node((int) (byte) 1, (com.google.javascript.rhino.head.Node) scriptNode77, (int) (byte) 0);
        int int82 = functionNodeList68.indexOf((java.lang.Object) (byte) 1);
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor83 = functionNodeList68.listIterator();
        java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeCollection84 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = functionNodeList68.removeAll(functionNodeCollection84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertNotNull(functionNodeList33);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertNotNull(functionNodeList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(functionNodeItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(functionNodeItor83);
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((-592978996));
        boolean boolean2 = node1.hasConsistentReturnUsage();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str9 = functionNode5.toStringTree(scriptNode8);
        functionNode5.setFunctionIsGetter();
        int int11 = functionNode0.addFunction(functionNode5);
        boolean boolean12 = functionNode5.hasSideEffects();
        com.google.javascript.rhino.head.Node node13 = functionNode5.getLastChild();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str18 = functionNode14.toStringTree(scriptNode17);
        functionNode14.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode20 = functionNode14.getBody();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList21 = functionNode14.getParams();
        functionNode5.setParams(astNodeList21);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        boolean boolean25 = functionNode24.hasChildren();
        boolean boolean26 = functionNode24.isGenerator();
        functionNode5.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode24);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump28 = functionNode24.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(astNode20);
        org.junit.Assert.assertNotNull(astNodeList21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        functionNode1.setSourceName("                                                                                                                                                                                                        /null/");
        functionNode1.setRequiresActivation();
        com.google.javascript.rhino.head.Node node6 = functionNode1.target;
        functionNode1.setParens((int) '#', (int) (byte) 0);
        java.lang.String str10 = functionNode1.getJsDoc();
        // The following exception was thrown during execution in test generation
        try {
            functionNode1.setString("                      ");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = scope1.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node3 = nodeIterator2.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(15, name1);
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode2.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.Symbol symbol5 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode2.putSymbol(symbol5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((-2), (int) (byte) 10);
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump21.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump21, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode27.getChildScopes();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump21, (com.google.javascript.rhino.head.Node) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode27.getFunctions();
        functionNodeList32.clear();
        boolean boolean34 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList32);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode35.getTop();
        boolean boolean37 = functionNodeList15.contains((java.lang.Object) scriptNode36);
        com.google.javascript.rhino.head.ast.Jump jump42 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump42.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump46 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump42, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int49 = scriptNode48.getEndLineno();
        int int50 = scriptNode48.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode48.getChildScopes();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump42, (com.google.javascript.rhino.head.Node) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList53 = scriptNode48.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator54 = functionNodeList53.spliterator();
        int int56 = functionNodeList53.indexOf((java.lang.Object) (byte) 10);
        boolean boolean57 = functionNodeList15.containsAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList53);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode(5);
        boolean boolean60 = functionNodeList53.remove((java.lang.Object) scriptNode59);
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream61 = functionNodeList53.stream();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int63 = functionNode62.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = functionNode62.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode65 = functionNode62.getBody();
        int int66 = functionNode62.getLength();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap67 = null;
        functionNode62.setSymbolTable(strMap67);
        functionNode62.setIsGenerator();
        boolean boolean70 = functionNodeList53.contains((java.lang.Object) functionNode62);
        com.google.javascript.rhino.head.ast.Scope scope73 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 1, 3);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor74 = scope73.iterator();
        functionNode62.addParam((com.google.javascript.rhino.head.ast.AstNode) scope73);
        // The following exception was thrown during execution in test generation
        try {
            functionNode62.setString("Symbol (EOF) name=                                      109");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertNotNull(functionNodeList53);
        org.junit.Assert.assertNotNull(functionNodeSpliterator54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(functionNodeStream61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(scriptNode64);
        org.junit.Assert.assertNull(astNode65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeItor74);
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((-22), 25);
        com.google.javascript.rhino.head.Node node3 = jump2.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope4 = jump2.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Jump cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        functionNode0.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList7 = functionNode0.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope9 = functionNode0.getDefiningScope("hi!");
        boolean boolean10 = functionNode0.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.Scope scope12 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        int[] intArray19 = new int[] { 25, 17, (short) 0, 20, 19, (byte) 1 };
        functionNode0.addLiveLocals((com.google.javascript.rhino.head.Node) scope12, intArray19);
        com.google.javascript.rhino.head.Node node22 = functionNode0.setType(100);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList23 = functionNode0.getFunctions();
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump27.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump27, 0);
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump35.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump35, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        functionNode40.setEncodedSource("");
        functionNode40.flattenSymbolTable(false);
        jump27.addChildAfter((com.google.javascript.rhino.head.Node) jump35, (com.google.javascript.rhino.head.Node) functionNode40);
        int int47 = functionNode40.getLength();
        com.google.javascript.rhino.head.Node node49 = functionNode40.setType(21);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode50 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = functionNode50.getTop();
        com.google.javascript.rhino.head.ast.Name name52 = null;
        functionNode50.setFunctionName(name52);
        int int54 = functionNode50.getLength();
        functionNode50.setFunctionType(19);
        functionNode40.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode50);
        functionNode40.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        functionNode60.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode64 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int65 = functionNode64.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = functionNode64.getTop();
        com.google.javascript.rhino.head.ast.Name name67 = null;
        functionNode64.setFunctionName(name67);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode69 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = functionNode69.getTop();
        functionNode64.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode69);
        int int72 = functionNode69.getRp();
        int int73 = functionNode69.getFunctionType();
        functionNode60.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode69);
        com.google.javascript.rhino.head.Node node75 = functionNode60.getLastSibling();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode76 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int77 = functionNode76.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = functionNode76.getTop();
        com.google.javascript.rhino.head.ast.Name name79 = null;
        functionNode76.setFunctionName(name79);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode81 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = functionNode81.getTop();
        functionNode76.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode81);
        int int84 = functionNode81.getRp();
        int int85 = functionNode81.getFunctionType();
        boolean boolean86 = functionNode81.requiresActivation();
        functionNode81.setParens((int) ' ', 9);
        functionNode40.addChildAfter(node75, (com.google.javascript.rhino.head.Node) functionNode81);
        com.google.javascript.rhino.head.Node node91 = functionNode81.target;
        boolean boolean92 = functionNodeList23.remove((java.lang.Object) functionNode81);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode81.visit(nodeVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNull(nodeList7);
        org.junit.Assert.assertNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[25, 17, 0, 20, 19, 1]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(functionNodeList23);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(scriptNode51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(scriptNode66);
        org.junit.Assert.assertNotNull(scriptNode70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(scriptNode78);
        org.junit.Assert.assertNotNull(scriptNode82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        functionNode1.setSourceName("                                                                                                                                                                                                        /null/");
        functionNode1.setRequiresActivation();
        functionNode1.removeProp(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode8.getTop();
        com.google.javascript.rhino.head.Node node11 = functionNode8.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList12 = functionNode8.getParams();
        functionNode1.setParams(astNodeList12);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode1.visit(nodeVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(astNodeList12);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode3.getTop();
        functionNode3.setParens((int) (byte) 1, (int) (short) 1);
        functionNode3.setEncodedSourceStart((-1));
        functionNode3.setFunctionIsGetter();
        scope2.addChildToFront((com.google.javascript.rhino.head.Node) functionNode3);
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        functionNode13.setParens((int) (byte) 1, (int) (short) 1);
        functionNode13.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList20 = functionNode13.getResumptionPoints();
        int int21 = functionNode13.getLp();
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node23 = functionNode0.getDefault();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNull(nodeList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int6 = scriptNode5.getEndLineno();
        int int7 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        jump10.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode12);
        java.lang.String str17 = scriptNode12.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode5, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode12.target = scope19;
        functionNode0.addChildScope(scope19);
        com.google.javascript.rhino.head.ast.Symbol symbol23 = scope19.getSymbol("hi!");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode24.getTop();
        functionNode24.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope31 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = functionNode32.getTop();
        functionNode32.setParens((int) (byte) 1, (int) (short) 1);
        functionNode32.setEncodedSourceStart((-1));
        functionNode32.setFunctionIsGetter();
        scope31.addChildToFront((com.google.javascript.rhino.head.Node) functionNode32);
        functionNode29.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode32);
        functionNode29.setFunctionIsSetter();
        int int43 = functionNode24.addFunction(functionNode29);
        java.lang.String str44 = functionNode24.getNextTempName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int47 = functionNode46.getBaseLineno();
        functionNode46.setSourceName("                                                                                                                                                                                                        /null/");
        functionNode46.setRequiresActivation();
        functionNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode46);
        functionNode46.setEncodedSourceEnd((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = functionNode46.getTop();
        // The following exception was thrown during execution in test generation
        try {
            scope19.setFinally((com.google.javascript.rhino.head.Node) scriptNode54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str17, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(symbol23);
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertNotNull(scriptNode33);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "$0" + "'", str44, "$0");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(scriptNode54);
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = functionNode1.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int18 = scriptNode17.getEndLineno();
        int int19 = scriptNode17.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode17.getChildScopes();
        functionNode1.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        functionNode1.setEncodedSourceEnd((int) (short) 100);
        java.lang.String str24 = functionNode1.getJsDoc();
        java.lang.Object obj25 = functionNode1.getCompilerData();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) -1, name1);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList3 = functionNode2.getResumptionPoints();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        functionNode4.setEncodedSource("");
        functionNode4.flattenSymbolTable(false);
        java.lang.String str10 = functionNode4.getName();
        functionNode4.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int13 = functionNode12.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode12.getTop();
        com.google.javascript.rhino.head.Node node15 = functionNode12.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList16 = functionNode12.getParams();
        functionNode4.setParams(astNodeList16);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setLp((int) (short) 1);
        int int24 = functionNode18.getIntProp(4, 26);
        functionNode18.flattenSymbolTable(true);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList27 = functionNode18.getParams();
        functionNode4.setParams(astNodeList27);
        functionNode4.setEndLineno(12);
        com.google.javascript.rhino.head.Token.CommentType commentType33 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType33, "109");
        java.lang.String str37 = comment35.toSource(0);
        java.lang.String str38 = comment35.getValue();
        functionNode4.setJsDocNode(comment35);
        functionNode2.addParam((com.google.javascript.rhino.head.ast.AstNode) comment35);
        boolean boolean41 = functionNode2.isGetter();
        org.junit.Assert.assertNull(nodeList3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(astNodeList16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26 + "'", int24 == 26);
        org.junit.Assert.assertNotNull(astNodeList27);
        org.junit.Assert.assertTrue("'" + commentType33 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType33.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "109" + "'", str37, "109");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "109" + "'", str38, "109");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        functionNodeList50.clear();
        functionNodeList50.clear();
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList68 = scriptNode63.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator69 = functionNodeList68.spliterator();
        int int71 = functionNodeList68.indexOf((java.lang.Object) (byte) 10);
        boolean boolean72 = functionNodeList50.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList68);
        boolean boolean73 = strMap33.containsKey((java.lang.Object) functionNodeList50);
        boolean boolean75 = strMap33.containsKey((java.lang.Object) 1579347477);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode76 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int77 = functionNode76.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str80 = functionNode76.toStringTree(scriptNode79);
        functionNode76.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode82 = functionNode76.getBody();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList83 = functionNode76.getParams();
        boolean boolean84 = strMap33.containsKey((java.lang.Object) astNodeList83);
        strMap33.clear();
        com.google.javascript.rhino.head.ast.Symbol symbol86 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str87 = symbol86.getName();
        com.google.javascript.rhino.head.Node node88 = symbol86.getNode();
        symbol86.setIndex(1);
        com.google.javascript.rhino.head.ast.Scope scope91 = symbol86.getContainingTable();
        java.lang.String str92 = symbol86.getName();
        boolean boolean93 = strMap33.containsValue((java.lang.Object) str92);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet94 = strMap33.entrySet();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertNotNull(functionNodeList68);
        org.junit.Assert.assertNotNull(functionNodeSpliterator69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(astNode82);
        org.junit.Assert.assertNotNull(astNodeList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertNull(scope91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strEntrySet94);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        com.google.javascript.rhino.head.ast.Comment comment15 = functionNode11.getJsDocNode();
        int int16 = functionNode11.getFunctionCount();
        int int17 = functionNode11.getLp();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = functionNode11.getParamOrVarName(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode0.replaceWith(scope10);
        functionNode0.setBaseLineno((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = functionNode0.debugPrint();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        com.google.javascript.rhino.head.ast.Jump jump1 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode2.getTop();
        com.google.javascript.rhino.head.ast.Name name5 = null;
        functionNode2.setFunctionName(name5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode7.getTop();
        functionNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode7);
        functionNode7.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int14 = functionNode7.addFunction(functionNode13);
        int int15 = jump1.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        functionNodeList34.clear();
        com.google.javascript.rhino.head.ast.Jump jump40 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump40.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump44 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump40, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int47 = scriptNode46.getEndLineno();
        int int48 = scriptNode46.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode46.getChildScopes();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump40, (com.google.javascript.rhino.head.Node) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList51 = scriptNode46.getFunctions();
        boolean boolean52 = functionNodeList34.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList51);
        functionNode17.putProp(20, (java.lang.Object) functionNodeList34);
        int int54 = functionNode13.addFunction(functionNode17);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int56 = functionNode55.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = functionNode55.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode58 = functionNode55.getBody();
        com.google.javascript.rhino.head.ast.Jump jump64 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump64.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump68 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump64, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int71 = scriptNode70.getEndLineno();
        int int72 = scriptNode70.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode70.getChildScopes();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump64, (com.google.javascript.rhino.head.Node) scriptNode70);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList75 = scriptNode70.getChildScopes();
        com.google.javascript.rhino.head.ast.Jump jump76 = new com.google.javascript.rhino.head.ast.Jump(11, (com.google.javascript.rhino.head.Node) scriptNode70);
        functionNode55.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode70);
        functionNode13.setCompilerData((java.lang.Object) scriptNode70);
        scriptNode70.setEncodedSource("EOF");
        java.lang.String str82 = scriptNode70.toSource((int) '4');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertNotNull(functionNodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(scriptNode57);
        org.junit.Assert.assertNull(astNode58);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertNull(scopeList75);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str82, "                                                                                                        {\n                                                                                                        }\n");
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = functionNode1.getEnclosingFunction();
        com.google.javascript.rhino.head.Node node3 = functionNode1.target;
        functionNode1.setLineno((int) (byte) -1);
        com.google.javascript.rhino.head.ast.Name name6 = functionNode1.getFunctionName();
        org.junit.Assert.assertNull(functionNode2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(name6);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.Jump jump5 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump5.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump5, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int12 = scriptNode11.getEndLineno();
        int int13 = scriptNode11.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump5, (com.google.javascript.rhino.head.Node) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode11.getFunctions();
        int int17 = scriptNode11.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode11.getChildScopes();
        java.lang.String str19 = scriptNode11.getSourceName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        functionNode21.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        functionNode25.setEncodedSource("");
        functionNode25.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int32 = functionNode31.getLp();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode21, (com.google.javascript.rhino.head.Node) functionNode25, (com.google.javascript.rhino.head.Node) functionNode31, (int) '#');
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap35 = functionNode25.getSymbolTable();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump47.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump51 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump47, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int53 = functionNode52.getLp();
        functionNode52.setEncodedSource("");
        functionNode52.flattenSymbolTable(false);
        jump39.addChildAfter((com.google.javascript.rhino.head.Node) jump47, (com.google.javascript.rhino.head.Node) functionNode52);
        functionNode25.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode52);
        int int60 = positionComparator0.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode11, (com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        functionNode25.setFunctionType(4);
        com.google.javascript.rhino.head.ast.AstNode astNode63 = functionNode25.getMemberExprNode();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor64 = functionNode25.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode25.visit(nodeVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(strMap35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(astNode63);
        org.junit.Assert.assertNotNull(nodeItor64);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        java.lang.String str8 = functionNode0.getNextTempName();
        java.lang.String str9 = functionNode0.getEncodedSource();
        functionNode0.setIsGenerator();
        functionNode0.setBaseLineno(48);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        functionNode14.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        functionNode18.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode14, (com.google.javascript.rhino.head.Node) functionNode18, (com.google.javascript.rhino.head.Node) functionNode24, (int) '#');
        functionNode24.setEncodedSourceStart(25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode31.getTop();
        functionNode31.setParens((int) (byte) 1, (int) (short) 1);
        int int36 = functionNode31.getRp();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString((int) (byte) 100, "");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str44 = functionNode40.toStringTree(scriptNode43);
        com.google.javascript.rhino.head.ast.Scope scope46 = scriptNode43.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList47 = scriptNode43.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode43, (com.google.javascript.rhino.head.ast.Scope) scriptNode49);
        java.lang.String str53 = scriptNode49.getEncodedSource();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) functionNode31, node39, (com.google.javascript.rhino.head.Node) scriptNode49, (int) (short) 0);
        functionNode24.setParent((com.google.javascript.rhino.head.ast.AstNode) functionNode31);
        functionNode0.target = functionNode24;
        int int58 = functionNode24.getRp();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$0" + "'", str8, "$0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(scope46);
        org.junit.Assert.assertNotNull(symbolList47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.ast.Jump jump5 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump5.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump5, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int12 = scriptNode11.getEndLineno();
        int int13 = scriptNode11.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump5, (com.google.javascript.rhino.head.Node) scriptNode11);
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode11);
        com.google.javascript.rhino.head.ast.Scope scope17 = symbol0.getContainingTable();
        symbol0.setName("                    /null/");
        com.google.javascript.rhino.head.ast.Scope scope20 = symbol0.getContainingTable();
        // The following exception was thrown during execution in test generation
        try {
            symbol0.setDeclType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope20);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        com.google.javascript.rhino.head.Node node23 = functionNode16.target;
        boolean boolean24 = functionNode16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Name name25 = functionNode16.getFunctionName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode29.getTop();
        functionNode29.setParens((int) (byte) 1, (int) (short) 1);
        functionNode29.setEncodedSourceStart((-1));
        functionNode29.setFunctionIsGetter();
        scope28.addChildToFront((com.google.javascript.rhino.head.Node) functionNode29);
        functionNode26.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode29);
        functionNode29.setRelative(0);
        functionNode16.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode29);
        functionNode16.setEncodedSourceStart((int) (byte) 0);
        int int44 = functionNode16.getBaseLineno();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(name25);
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        functionNodeList50.clear();
        functionNodeList50.clear();
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList68 = scriptNode63.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator69 = functionNodeList68.spliterator();
        int int71 = functionNodeList68.indexOf((java.lang.Object) (byte) 10);
        boolean boolean72 = functionNodeList50.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList68);
        boolean boolean73 = strMap33.containsKey((java.lang.Object) functionNodeList50);
        boolean boolean74 = strMap33.isEmpty();
        com.google.javascript.rhino.head.ast.Symbol symbol75 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str76 = symbol75.getName();
        symbol75.setIndex((int) '#');
        boolean boolean79 = strMap33.containsKey((java.lang.Object) symbol75);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet80 = strMap33.entrySet();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral83 = new com.google.javascript.rhino.head.ast.RegExpLiteral((-1), 3);
        java.lang.String str84 = regExpLiteral83.getFlags();
        java.lang.String str86 = regExpLiteral83.toSource(16);
        com.google.javascript.rhino.head.ast.Symbol symbol87 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str88 = symbol87.getDeclTypeName();
        int int89 = symbol87.getDeclType();
        com.google.javascript.rhino.head.ast.Scope scope90 = symbol87.getContainingTable();
        java.lang.String str91 = symbol87.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Symbol symbol92 = strMap33.getOrDefault((java.lang.Object) 16, symbol87);
        java.lang.String str93 = symbol92.getDeclTypeName();
        // The following exception was thrown during execution in test generation
        try {
            symbol92.setDeclType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertNotNull(functionNodeList68);
        org.junit.Assert.assertNotNull(functionNodeSpliterator69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strEntrySet80);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "                                /null/" + "'", str86, "                                /null/");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "EOF" + "'", str88, "EOF");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(scope90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "EOF" + "'", str91, "EOF");
        org.junit.Assert.assertNotNull(symbol92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "EOF" + "'", str93, "EOF");
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode2.getTop();
        boolean boolean5 = functionNode2.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int8 = scriptNode7.getEndLineno();
        int int9 = scriptNode7.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump12 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode14.getChildScopes();
        jump12.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.String str19 = scriptNode14.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode7, (com.google.javascript.rhino.head.ast.Scope) scriptNode14);
        com.google.javascript.rhino.head.ast.Scope scope21 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode14.target = scope21;
        functionNode2.addChildScope(scope21);
        boolean boolean24 = functionNode2.hasConsistentReturnUsage();
        java.lang.String str25 = functionNode2.getNextTempName();
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) (short) -1, (com.google.javascript.rhino.head.Node) functionNode2);
        boolean boolean27 = functionNode2.isExpressionClosure();
        functionNode2.putIntProp(1, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int32 = functionNode31.getLp();
        functionNode31.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int36 = functionNode35.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = functionNode35.getTop();
        com.google.javascript.rhino.head.ast.Name name38 = null;
        functionNode35.setFunctionName(name38);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode40.getTop();
        functionNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode40);
        int int43 = functionNode40.getRp();
        int int44 = functionNode40.getFunctionType();
        functionNode31.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode40);
        com.google.javascript.rhino.head.ast.Scope scope46 = functionNode40.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstNode astNode47 = scope46.getParent();
        com.google.javascript.rhino.head.Node node48 = scope46.getLastSibling();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode49 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int50 = functionNode49.getLp();
        functionNode49.setIsExpressionClosure(false);
        int int53 = functionNode49.getLineno();
        functionNode2.addChildAfter(node48, (com.google.javascript.rhino.head.Node) functionNode49);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode56 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int57 = functionNode56.getLp();
        functionNode56.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        functionNode60.setEncodedSource("");
        functionNode60.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode66 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int67 = functionNode66.getLp();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode56, (com.google.javascript.rhino.head.Node) functionNode60, (com.google.javascript.rhino.head.Node) functionNode66, (int) '#');
        boolean boolean70 = functionNode66.isGenerator();
        int int71 = functionNode66.getFunctionType();
        com.google.javascript.rhino.head.Node node72 = functionNode66.getNext();
        int int73 = functionNode2.addFunction(functionNode66);
        com.google.javascript.rhino.head.ast.Jump jump74 = new com.google.javascript.rhino.head.ast.Jump((-1), (com.google.javascript.rhino.head.Node) functionNode2);
        int int75 = functionNode2.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        int int77 = scriptNode76.getEncodedSourceEnd();
        int int78 = scriptNode76.getFunctionCount();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) functionNode2, (com.google.javascript.rhino.head.ast.Scope) scriptNode76);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str19, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$0" + "'", str25, "$0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(scriptNode37);
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNull(astNode47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((-3285918));
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str4 = functionNode0.toStringTree(scriptNode3);
        int int5 = scriptNode3.getRegexpCount();
        com.google.javascript.rhino.head.Node node6 = scriptNode3.getLastSibling();
        boolean boolean7 = scriptNode3.hasSideEffects();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = scriptNode3.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node9 = nodeIterator8.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int9 = scriptNode8.getEndLineno();
        int int10 = scriptNode8.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode8.getChildScopes();
        jump6.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode8);
        java.lang.String str13 = scriptNode8.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode8);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode15.getTop();
        com.google.javascript.rhino.head.ast.Name name18 = null;
        functionNode15.setFunctionName(name18);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        functionNode20.setFunctionIsGetter();
        int int26 = functionNode15.addFunction(functionNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = functionNode15.getSymbols();
        scriptNode8.setSymbols(symbolList27);
        scriptNode8.setEncodedSourceStart((int) (short) -1);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode8.visit(nodeVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str13, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(symbolList27);
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType6, "109");
        com.google.javascript.rhino.head.ast.Comment comment10 = new com.google.javascript.rhino.head.ast.Comment(136, 15, commentType6, "-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment(0, 17, commentType6, "$1");
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment12.visit(nodeVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + commentType6 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType6.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(32);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump21.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump21, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode27.getChildScopes();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump21, (com.google.javascript.rhino.head.Node) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode27.getFunctions();
        functionNodeList32.clear();
        boolean boolean34 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList32);
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor36 = functionNodeList32.listIterator(0);
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor37 = functionNodeList32.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList40 = functionNodeList32.subList(7, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(functionNodeItor36);
        org.junit.Assert.assertNotNull(functionNodeItor37);
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        java.lang.String str3 = scriptNode2.getJsDoc();
        com.google.javascript.rhino.head.Node node5 = scriptNode2.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str10 = functionNode6.toStringTree(scriptNode9);
        com.google.javascript.rhino.head.ast.Scope scope12 = scriptNode9.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(25, node5, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode14);
        boolean boolean18 = scriptNode14.hasConsistentReturnUsage();
        java.lang.String str19 = scriptNode14.getNextTempName();
        java.lang.String str20 = scriptNode14.shortName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode21.getTop();
        boolean boolean24 = functionNode21.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList25 = functionNode21.getSymbols();
        scriptNode14.setSymbols(symbolList25);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList27 = scriptNode14.getStatements();
        com.google.javascript.rhino.head.Node node28 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode14.addChildrenToBack(node28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(scope12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$0" + "'", str19, "$0");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ScriptNode" + "'", str20, "ScriptNode");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(symbolList25);
        org.junit.Assert.assertNotNull(astNodeList27);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        int int8 = functionNode5.getRp();
        int int9 = functionNode5.getFunctionType();
        boolean boolean10 = functionNode5.requiresActivation();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = functionNode5.getChildScopes();
        functionNode5.setFunctionType(100);
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump18.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump18, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int25 = scriptNode24.getEndLineno();
        int int26 = scriptNode24.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList27 = scriptNode24.getChildScopes();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump18, (com.google.javascript.rhino.head.Node) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList29 = scriptNode24.getFunctions();
        boolean boolean30 = functionNodeList29.isEmpty();
        int int31 = functionNodeList29.size();
        com.google.javascript.rhino.head.ast.Jump jump34 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int37 = scriptNode36.getEndLineno();
        int int38 = scriptNode36.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode36.getChildScopes();
        jump34.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode36);
        java.lang.String str41 = scriptNode36.debugPrint();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList42 = scriptNode36.getSymbols();
        boolean boolean43 = functionNodeList29.contains((java.lang.Object) symbolList42);
        functionNode5.setSymbols(symbolList42);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(scopeList27);
        org.junit.Assert.assertNotNull(functionNodeList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str41, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNotNull(symbolList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        int int1 = scriptNode0.getEncodedSourceEnd();
        java.lang.String str3 = scriptNode0.toSource((int) (byte) 10);
        scriptNode0.setEncodedSourceEnd((int) (short) -1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode0.getFunctions();
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int18 = scriptNode17.getEndLineno();
        int int19 = scriptNode17.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode17.getChildScopes();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) scriptNode17);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList22 = scriptNode17.getFunctions();
        int int23 = functionNodeList22.size();
        functionNodeList22.clear();
        int int26 = functionNodeList22.indexOf((java.lang.Object) 10L);
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump31.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump31, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int38 = scriptNode37.getEndLineno();
        int int39 = scriptNode37.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scriptNode37.getChildScopes();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump31, (com.google.javascript.rhino.head.Node) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode37.getFunctions();
        functionNodeList42.clear();
        functionNodeList42.clear();
        com.google.javascript.rhino.head.ast.Jump jump49 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump49.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump53 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump49, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int56 = scriptNode55.getEndLineno();
        int int57 = scriptNode55.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList58 = scriptNode55.getChildScopes();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump49, (com.google.javascript.rhino.head.Node) scriptNode55);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList60 = scriptNode55.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator61 = functionNodeList60.spliterator();
        int int63 = functionNodeList60.indexOf((java.lang.Object) (byte) 10);
        boolean boolean64 = functionNodeList42.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList60);
        boolean boolean65 = functionNodeList22.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList42);
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor66 = functionNodeList42.listIterator();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream67 = functionNodeList42.stream();
        boolean boolean68 = functionNodeList6.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList42);
        boolean boolean69 = functionNodeList6.isEmpty();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream70 = functionNodeList6.stream();
        java.lang.Object[] objArray71 = functionNodeList6.toArray();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                    {\n                    }\n" + "'", str3, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertNotNull(functionNodeList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(scopeList40);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(scopeList58);
        org.junit.Assert.assertNotNull(functionNodeList60);
        org.junit.Assert.assertNotNull(functionNodeSpliterator61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(functionNodeItor66);
        org.junit.Assert.assertNotNull(functionNodeStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(functionNodeStream70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((int) (byte) 1, "Scope");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        int int6 = scriptNode4.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode4.getChildScopes();
        jump2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = scriptNode4.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int11 = functionNode10.getLp();
        functionNode10.setEncodedSource("");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode4, (com.google.javascript.rhino.head.ast.Scope) functionNode10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode15.getTop();
        functionNode15.setParens((int) (byte) 1, (int) (short) 1);
        functionNode15.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList22 = functionNode15.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope24 = functionNode15.getDefiningScope("hi!");
        boolean boolean25 = functionNode15.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode26.getTop();
        com.google.javascript.rhino.head.ast.Name name29 = null;
        functionNode26.setFunctionName(name29);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode31.getTop();
        functionNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode31);
        int int34 = functionNode31.getRp();
        int int35 = functionNode31.getFunctionType();
        int int36 = functionNode15.addFunction(functionNode31);
        functionNode10.setCompilerData((java.lang.Object) functionNode31);
        functionNode10.setFunctionType(136);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = functionNode41.getEnclosingFunction();
        com.google.javascript.rhino.head.Node node43 = functionNode41.target;
        functionNode41.setLineno((int) (byte) -1);
        functionNode10.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode41);
        functionNode41.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstRoot astRoot48 = functionNode41.getAstRoot();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNull(nodeList22);
        org.junit.Assert.assertNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(functionNode42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(astRoot48);
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        boolean boolean15 = functionNode11.isGenerator();
        int int16 = functionNode11.getFunctionType();
        com.google.javascript.rhino.head.Node node17 = functionNode11.getFirstChild();
        boolean boolean18 = functionNode11.isGetterOrSetter();
        functionNode11.flattenSymbolTable(false);
        functionNode11.setEncodedSourceBounds((-1262414679), (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump24 = functionNode11.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor18 = functionNodeList15.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setLp((int) (short) 1);
        int int25 = functionNode19.getIntProp(4, 26);
        functionNode19.flattenSymbolTable(true);
        boolean boolean28 = functionNodeList15.equals((java.lang.Object) functionNode19);
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor29 = functionNodeList15.listIterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = functionNode32.getTop();
        com.google.javascript.rhino.head.ast.Name name34 = null;
        functionNode32.setFunctionName(name34);
        boolean boolean36 = functionNode32.requiresActivation();
        com.google.javascript.rhino.head.ast.Jump jump40 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump40.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump44 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump40, 0);
        com.google.javascript.rhino.head.ast.Jump jump48 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump48.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump52 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump48, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int54 = functionNode53.getLp();
        functionNode53.setEncodedSource("");
        functionNode53.flattenSymbolTable(false);
        jump40.addChildAfter((com.google.javascript.rhino.head.Node) jump48, (com.google.javascript.rhino.head.Node) functionNode53);
        com.google.javascript.rhino.head.Node node60 = functionNode53.target;
        functionNode32.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(10, (com.google.javascript.rhino.head.Node) functionNode53, 10);
        boolean boolean64 = functionNode53.isExpressionClosure();
        com.google.javascript.rhino.head.ast.Jump jump66 = new com.google.javascript.rhino.head.ast.Jump((-1), (com.google.javascript.rhino.head.Node) functionNode53, 21);
        functionNode53.putProp((int) '4', (java.lang.Object) "                    /null/-1\tSCRIPT -1 1\n");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = functionNodeList15.add(functionNode53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNotNull(functionNodeItor18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26 + "'", int25 == 26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(functionNodeItor29);
        org.junit.Assert.assertNotNull(scriptNode33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Symbol symbol2 = new com.google.javascript.rhino.head.ast.Symbol((-592978996), "/null//null/-1\tSCRIPT -1 1\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: -592978996");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral((-1), 3);
        java.lang.String str3 = regExpLiteral2.getFlags();
        java.lang.String str5 = regExpLiteral2.toSource(16);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode6.getTop();
        com.google.javascript.rhino.head.ast.Jump jump14 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump14.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump14, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        int int22 = scriptNode20.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode20.getChildScopes();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump14, (com.google.javascript.rhino.head.Node) scriptNode20);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int27 = scriptNode26.getEndLineno();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral29 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str31 = regExpLiteral29.toSource((int) (byte) 10);
        regExpLiteral29.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral29.removeProp(8);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(10, node24, (com.google.javascript.rhino.head.Node) scriptNode26, (com.google.javascript.rhino.head.Node) regExpLiteral29, 3);
        java.lang.String str39 = regExpLiteral29.makeIndent((int) (short) 100);
        int int40 = regExpLiteral29.getType();
        functionNode6.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) regExpLiteral29);
        // The following exception was thrown during execution in test generation
        try {
            regExpLiteral2.setScope((com.google.javascript.rhino.head.ast.Scope) functionNode6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                                /null/" + "'", str5, "                                /null/");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                    /null/" + "'", str31, "                    /null/");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "                                                                                                                                                                                                        " + "'", str39, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getName();
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump6.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump6, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump6, (com.google.javascript.rhino.head.Node) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode12.getChildScopes();
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = functionNode19.getTop();
        com.google.javascript.rhino.head.ast.Name name22 = null;
        functionNode19.setFunctionName(name22);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode24.getTop();
        functionNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode24);
        functionNode24.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int31 = functionNode24.addFunction(functionNode30);
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode24);
        functionNode24.setFunctionType((int) (short) 1);
        functionNode24.setLength(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int38 = functionNode37.getLp();
        functionNode37.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int42 = functionNode41.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = functionNode41.getTop();
        com.google.javascript.rhino.head.ast.Name name44 = null;
        functionNode41.setFunctionName(name44);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = functionNode46.getTop();
        functionNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode46);
        int int49 = functionNode46.getRp();
        int int50 = functionNode46.getFunctionType();
        functionNode37.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode46);
        com.google.javascript.rhino.head.ast.Scope scope52 = functionNode46.getEnclosingScope();
        functionNode46.putProp((-1110578805), (java.lang.Object) "                                /null/");
        functionNode46.setEndLineno(14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int59 = functionNode58.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode58.getTop();
        boolean boolean61 = functionNode58.hasSideEffects();
        boolean boolean62 = functionNode58.isGetter();
        // The following exception was thrown during execution in test generation
        try {
            functionNode24.replaceChild((com.google.javascript.rhino.head.Node) functionNode46, (com.google.javascript.rhino.head.Node) functionNode58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(scriptNode21);
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(scriptNode43);
        org.junit.Assert.assertNotNull(scriptNode47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(2, "                            ");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        java.lang.String str4 = functionNode0.toString();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode6.getTop();
        boolean boolean9 = functionNode6.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int12 = scriptNode11.getEndLineno();
        int int13 = scriptNode11.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump16 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int19 = scriptNode18.getEndLineno();
        int int20 = scriptNode18.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode18.getChildScopes();
        jump16.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode18);
        java.lang.String str23 = scriptNode18.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode11, (com.google.javascript.rhino.head.ast.Scope) scriptNode18);
        com.google.javascript.rhino.head.ast.Scope scope25 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode18.target = scope25;
        functionNode6.addChildScope(scope25);
        boolean boolean28 = functionNode6.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode29.getTop();
        functionNode29.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope36 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode37.setParens((int) (byte) 1, (int) (short) 1);
        functionNode37.setEncodedSourceStart((-1));
        functionNode37.setFunctionIsGetter();
        scope36.addChildToFront((com.google.javascript.rhino.head.Node) functionNode37);
        functionNode34.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode37);
        functionNode34.setFunctionIsSetter();
        int int48 = functionNode29.addFunction(functionNode34);
        java.lang.String str49 = functionNode29.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int52 = scriptNode51.getEndLineno();
        int int53 = scriptNode51.getBaseLineno();
        scriptNode51.removeProp(0);
        scriptNode51.setEncodedSourceEnd(19);
        functionNode29.addParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        functionNode6.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode51);
        functionNode0.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode6);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode6.visit(nodeVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "109" + "'", str4, "109");
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str23, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "$0" + "'", str49, "$0");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(0, 5);
        java.lang.String str3 = node2.getJsDoc();
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList33 = scriptNode28.getFunctions();
        functionNodeList33.clear();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        boolean boolean51 = functionNodeList33.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList50);
        boolean boolean52 = functionNodeList15.addAll(0, (java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList33);
        int int53 = functionNodeList15.size();
        com.google.javascript.rhino.head.ast.Jump jump56 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump56.removeProp((int) 'a');
        com.google.javascript.rhino.head.Node node59 = jump56.getFirstChild();
        boolean boolean60 = functionNodeList15.remove((java.lang.Object) node59);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int63 = scriptNode62.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int66 = scriptNode65.getEndLineno();
        scriptNode62.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode65);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = scriptNode62.new NodeIterator();
        int int69 = functionNodeList15.indexOf((java.lang.Object) scriptNode62);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode71 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int72 = functionNode71.getLp();
        functionNode71.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int76 = functionNode75.getLp();
        functionNode75.setEncodedSource("");
        functionNode75.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode81 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int82 = functionNode81.getLp();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode71, (com.google.javascript.rhino.head.Node) functionNode75, (com.google.javascript.rhino.head.Node) functionNode81, (int) '#');
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList85 = functionNode71.getChildScopes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = functionNodeList15.add(functionNode71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertNotNull(functionNodeList33);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNull(scopeList85);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name4 = null;
        functionNode1.setFunctionName(name4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode6);
        com.google.javascript.rhino.head.ast.Scope scope11 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode1.replaceWith(scope11);
        java.lang.String str14 = scope11.makeIndent(13);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        com.google.javascript.rhino.head.ast.Comment comment17 = scriptNode16.getJsDocNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = functionNode18.getTop();
        boolean boolean21 = functionNode18.hasSideEffects();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int24 = functionNode23.getLp();
        functionNode23.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        functionNode27.setEncodedSource("");
        functionNode27.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int34 = functionNode33.getLp();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode23, (com.google.javascript.rhino.head.Node) functionNode27, (com.google.javascript.rhino.head.Node) functionNode33, (int) '#');
        boolean boolean37 = functionNode33.isGenerator();
        int int38 = functionNode33.getFunctionType();
        com.google.javascript.rhino.head.Node node39 = functionNode33.getNext();
        functionNode33.setFunctionIsSetter();
        functionNode33.clearParentScope();
        functionNode18.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode33);
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(6, (com.google.javascript.rhino.head.Node) scope11, (com.google.javascript.rhino.head.Node) scriptNode16, (com.google.javascript.rhino.head.Node) functionNode33, 101);
        com.google.javascript.rhino.head.ast.Name name45 = functionNode33.getFunctionName();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "                          " + "'", str14, "                          ");
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(scriptNode20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(name45);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        com.google.javascript.rhino.head.ast.Jump jump1 = new com.google.javascript.rhino.head.ast.Jump(0);
        jump1.setPosition(5);
        int int4 = jump1.getAbsolutePosition();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(15, (int) (byte) 0);
        com.google.javascript.rhino.head.ast.Symbol symbol4 = scope2.getSymbol("");
        com.google.javascript.rhino.head.ast.Name name6 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode(1, name6);
        boolean boolean8 = functionNode7.isGetterOrSetter();
        int int9 = functionNode7.getEncodedSourceEnd();
        scope2.addChildrenToBack((com.google.javascript.rhino.head.Node) functionNode7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = functionNode7.getRegexpFlags(12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(symbol4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode3 = functionNode0.getBody();
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump9.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump13 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump9, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int16 = scriptNode15.getEndLineno();
        int int17 = scriptNode15.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode15.getChildScopes();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump9, (com.google.javascript.rhino.head.Node) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode15.getChildScopes();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump(11, (com.google.javascript.rhino.head.Node) scriptNode15);
        functionNode0.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        java.lang.Class<?> wildcardClass23 = scriptNode15.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(astNode3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        strMap33.clear();
        com.google.javascript.rhino.head.ast.Symbol symbol37 = null;
        com.google.javascript.rhino.head.ast.Symbol symbol38 = strMap33.replace("Symbol (EOF) name=null", symbol37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int44 = scriptNode43.getEndLineno();
        scriptNode40.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int47 = functionNode46.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = functionNode46.getTop();
        boolean boolean49 = functionNode46.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int52 = scriptNode51.getEndLineno();
        int int53 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump56 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int59 = scriptNode58.getEndLineno();
        int int60 = scriptNode58.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList61 = scriptNode58.getChildScopes();
        jump56.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode58);
        java.lang.String str63 = scriptNode58.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode51, (com.google.javascript.rhino.head.ast.Scope) scriptNode58);
        com.google.javascript.rhino.head.ast.Scope scope65 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode58.target = scope65;
        functionNode46.addChildScope(scope65);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode43, (com.google.javascript.rhino.head.ast.Scope) functionNode46);
        int int69 = functionNode46.getFunctionCount();
        int int70 = functionNode46.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot71 = functionNode46.getAstRoot();
        functionNode46.setParens(10, 17);
        com.google.javascript.rhino.head.ast.Symbol symbol75 = strMap33.get((java.lang.Object) functionNode46);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray76 = functionNode46.getParamAndVarConst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(symbol38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(scriptNode48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(scopeList61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str63, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(astRoot71);
        org.junit.Assert.assertNull(symbol75);
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getName();
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump6.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump6, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump6, (com.google.javascript.rhino.head.Node) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode12.getChildScopes();
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int24 = functionNode23.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode23.getTop();
        com.google.javascript.rhino.head.ast.Name name26 = null;
        functionNode23.setFunctionName(name26);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = functionNode28.getTop();
        functionNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        int int31 = functionNode28.getRp();
        int int32 = functionNode28.getFunctionType();
        functionNode19.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator34 = functionNode28.new NodeIterator();
        int int35 = functionNode28.getLineno();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int54 = scriptNode53.getEndLineno();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral56 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str58 = regExpLiteral56.toSource((int) (byte) 10);
        regExpLiteral56.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral56.removeProp(8);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(10, node51, (com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) regExpLiteral56, 3);
        com.google.javascript.rhino.head.ast.Jump jump67 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int70 = scriptNode69.getEndLineno();
        int int71 = scriptNode69.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList72 = scriptNode69.getChildScopes();
        jump67.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode69);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int76 = functionNode75.getLp();
        functionNode75.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode79 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int80 = functionNode79.getLp();
        functionNode79.setEncodedSource("");
        functionNode79.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode85 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int86 = functionNode85.getLp();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode75, (com.google.javascript.rhino.head.Node) functionNode79, (com.google.javascript.rhino.head.Node) functionNode85, (int) '#');
        jump67.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode75);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList90 = functionNode75.getStatements();
        functionNode28.replaceChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) functionNode75);
        com.google.javascript.rhino.head.ast.Scope scope92 = null;
        functionNode75.setParentScope(scope92);
        functionNode75.clearParentScope();
        boolean boolean95 = functionNode75.isGenerator();
        functionNode75.putIntProp((int) (short) 0, (int) (short) 1);
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode75);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertNotNull(scriptNode29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "                    /null/" + "'", str58, "                    /null/");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(scopeList72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(astNodeList90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        boolean boolean3 = functionNode1.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral5 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral5.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str8 = regExpLiteral5.getValue();
        regExpLiteral5.setFlags("52");
        functionNode1.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral5);
        boolean boolean12 = functionNode1.isGetterOrSetter();
        functionNode1.setBaseLineno((int) (byte) 100);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode1.visit(nodeVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator17 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList15.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator17);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator19 = positionComparator17.reversed();
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump31.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump31, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        functionNode36.setEncodedSource("");
        functionNode36.flattenSymbolTable(false);
        jump23.addChildAfter((com.google.javascript.rhino.head.Node) jump31, (com.google.javascript.rhino.head.Node) functionNode36);
        int int43 = functionNode36.getPosition();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        boolean boolean46 = functionNode45.isExpressionClosure();
        int int47 = positionComparator17.compare((com.google.javascript.rhino.head.ast.AstNode) functionNode36, (com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        java.lang.String str48 = functionNode45.getSourceName();
        int int49 = functionNode45.getRp();
        int int50 = functionNode45.getLength();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = functionNode51.getTop();
        functionNode51.setParens((int) (byte) 1, (int) (short) 1);
        functionNode51.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList58 = functionNode51.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope60 = functionNode51.getDefiningScope("hi!");
        boolean boolean61 = functionNode51.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int63 = functionNode62.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = functionNode62.getTop();
        com.google.javascript.rhino.head.ast.Name name65 = null;
        functionNode62.setFunctionName(name65);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode67 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = functionNode67.getTop();
        functionNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode67);
        int int70 = functionNode67.getRp();
        int int71 = functionNode67.getFunctionType();
        int int72 = functionNode51.addFunction(functionNode67);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode74 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int75 = functionNode74.getLp();
        functionNode74.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode78 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int79 = functionNode78.getLp();
        functionNode78.setEncodedSource("");
        functionNode78.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode84 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int85 = functionNode84.getLp();
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode74, (com.google.javascript.rhino.head.Node) functionNode78, (com.google.javascript.rhino.head.Node) functionNode84, (int) '#');
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap88 = functionNode78.getSymbolTable();
        functionNode67.setCompilerData((java.lang.Object) functionNode78);
        com.google.javascript.rhino.head.ast.Scope scope91 = functionNode78.getDefiningScope("                                /null/");
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap92 = functionNode78.getSymbolTable();
        // The following exception was thrown during execution in test generation
        try {
            functionNode45.setFinally((com.google.javascript.rhino.head.Node) functionNode78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator19);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(scriptNode52);
        org.junit.Assert.assertNull(nodeList58);
        org.junit.Assert.assertNull(scope60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(scriptNode64);
        org.junit.Assert.assertNotNull(scriptNode68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(strMap88);
        org.junit.Assert.assertNull(scope91);
        org.junit.Assert.assertNull(strMap92);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode0.replaceWith(scope10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int13 = functionNode12.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode12.getTop();
        com.google.javascript.rhino.head.ast.Name name15 = null;
        functionNode12.setFunctionName(name15);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode17.getTop();
        functionNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode17);
        int int20 = functionNode0.addFunction(functionNode12);
        functionNode0.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump27.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump27, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int34 = scriptNode33.getEndLineno();
        int int35 = scriptNode33.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList36 = scriptNode33.getChildScopes();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump27, (com.google.javascript.rhino.head.Node) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList38 = scriptNode33.getFunctions();
        functionNodeList38.clear();
        functionNodeList38.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor41 = functionNodeList38.iterator();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral43 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str45 = regExpLiteral43.toSource((int) (byte) 10);
        regExpLiteral43.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral43.removeProp(8);
        java.lang.String str50 = regExpLiteral43.getValue();
        regExpLiteral43.setLineno(10);
        regExpLiteral43.removeChildren();
        boolean boolean54 = functionNodeList38.equals((java.lang.Object) regExpLiteral43);
        java.lang.String str56 = regExpLiteral43.toSource(26);
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) regExpLiteral43);
        java.lang.String str59 = regExpLiteral43.toSource((-860972433));
        regExpLiteral43.setFlags("                              {\n                              }\n");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(scopeList36);
        org.junit.Assert.assertNotNull(functionNodeList38);
        org.junit.Assert.assertNotNull(functionNodeItor41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                    /null/" + "'", str45, "                    /null/");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "                                                    /null/-1\tSCRIPT -1 1\n" + "'", str56, "                                                    /null/-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "/null/-1\tSCRIPT -1 1\n" + "'", str59, "/null/-1\tSCRIPT -1 1\n");
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        strMap33.clear();
        com.google.javascript.rhino.head.ast.Symbol symbol37 = null;
        com.google.javascript.rhino.head.ast.Symbol symbol38 = strMap33.replace("Symbol (EOF) name=null", symbol37);
        com.google.javascript.rhino.head.ast.Symbol symbol40 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str41 = symbol40.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope42 = symbol40.getContainingTable();
        com.google.javascript.rhino.head.ast.Scope scope43 = symbol40.getContainingTable();
        com.google.javascript.rhino.head.ast.Symbol symbol44 = strMap33.putIfAbsent("/=", symbol40);
        com.google.javascript.rhino.head.ast.Jump jump46 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode47.getTop();
        com.google.javascript.rhino.head.ast.Name name50 = null;
        functionNode47.setFunctionName(name50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = functionNode52.getTop();
        functionNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode52);
        functionNode52.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int59 = functionNode52.addFunction(functionNode58);
        int int60 = jump46.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode58);
        functionNode58.setEncodedSourceStart((int) '4');
        functionNode58.setLength(48);
        functionNode58.setFunctionType(19);
        boolean boolean67 = strMap33.equals((java.lang.Object) 19);
        strMap33.clear();
        com.google.javascript.rhino.head.ast.Symbol symbol70 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.Node node71 = symbol70.getNode();
        symbol70.setIndex(4);
        java.lang.String str74 = symbol70.getDeclTypeName();
        java.lang.String str75 = symbol70.toString();
        symbol70.setIndex(25);
        com.google.javascript.rhino.head.Node node78 = symbol70.getNode();
        java.lang.String str79 = symbol70.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Symbol symbol80 = strMap33.replace("    109", symbol70);
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(symbol38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EOF" + "'", str41, "EOF");
        org.junit.Assert.assertNull(scope42);
        org.junit.Assert.assertNull(scope43);
        org.junit.Assert.assertNull(symbol44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertNotNull(scriptNode53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "EOF" + "'", str74, "EOF");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Symbol (EOF) name=null" + "'", str75, "Symbol (EOF) name=null");
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "EOF" + "'", str79, "EOF");
        org.junit.Assert.assertNull(symbol80);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode8.setParens((int) (byte) 1, (int) (short) 1);
        functionNode8.setEncodedSourceStart((-1));
        functionNode8.setFunctionIsGetter();
        scope7.addChildToFront((com.google.javascript.rhino.head.Node) functionNode8);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode5.setFunctionIsSetter();
        int int19 = functionNode0.addFunction(functionNode5);
        boolean boolean20 = functionNode5.isGenerator();
        functionNode5.setParens(0, 3);
        boolean boolean24 = functionNode5.isSetter();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode5.visit(nodeVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope15 = com.google.javascript.rhino.head.ast.Scope.splitScope((com.google.javascript.rhino.head.ast.Scope) functionNode1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.ScriptNode");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor18 = functionNodeList15.iterator();
        java.util.function.UnaryOperator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeUnaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNodeList15.replaceAll(functionNodeUnaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNotNull(functionNodeItor18);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        functionNode0.setEncodedSourceStart((-1));
        functionNode0.setParens(5, (int) (short) 100);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        functionNode11.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        functionNode15.setEncodedSource("");
        functionNode15.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode11, (com.google.javascript.rhino.head.Node) functionNode15, (com.google.javascript.rhino.head.Node) functionNode21, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode25 = functionNode11.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        functionNode26.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode30.getTop();
        com.google.javascript.rhino.head.ast.Name name33 = null;
        functionNode30.setFunctionName(name33);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode35.getTop();
        functionNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode35);
        int int38 = functionNode35.getRp();
        int int39 = functionNode35.getFunctionType();
        functionNode26.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode35);
        com.google.javascript.rhino.head.ast.Scope scope41 = functionNode35.getEnclosingScope();
        functionNode11.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode35);
        functionNode35.setLp(26);
        functionNode0.target = functionNode35;
        com.google.javascript.rhino.head.ast.Symbol symbol47 = functionNode35.getSymbol("136");
        int int48 = functionNode35.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node49 = functionNode35.getDefault();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(astNode25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNull(symbol47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump9.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump13 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump9, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int16 = scriptNode15.getEndLineno();
        int int17 = scriptNode15.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode15.getChildScopes();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump9, (com.google.javascript.rhino.head.Node) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList20 = scriptNode15.getFunctions();
        functionNodeList20.clear();
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump26.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump30 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump26, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int33 = scriptNode32.getEndLineno();
        int int34 = scriptNode32.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode32.getChildScopes();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump26, (com.google.javascript.rhino.head.Node) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList37 = scriptNode32.getFunctions();
        boolean boolean38 = functionNodeList20.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList37);
        functionNode3.putProp(20, (java.lang.Object) functionNodeList20);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str44 = functionNode40.toStringTree(scriptNode43);
        int int45 = functionNode3.addFunction(functionNode40);
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap46 = functionNode3.getLiveLocals();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode47.getTop();
        com.google.javascript.rhino.head.ast.Name name50 = null;
        functionNode47.setFunctionName(name50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = functionNode52.getTop();
        functionNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode52);
        int int55 = functionNode52.getRp();
        functionNode52.setParens(11, 2);
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        jump61.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode63);
        boolean boolean68 = jump61.hasChildren();
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(26, (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) functionNode52, (com.google.javascript.rhino.head.Node) jump61, (int) ' ');
        functionNode52.setEncodedSourceBounds((-440310255), 23);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) functionNode52, 12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertNotNull(functionNodeList20);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertNotNull(functionNodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(nodeMap46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertNotNull(scriptNode53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        functionNode5.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int12 = functionNode5.addFunction(functionNode11);
        com.google.javascript.rhino.head.ast.Name name13 = null;
        functionNode5.setFunctionName(name13);
        com.google.javascript.rhino.head.Node node15 = functionNode5.getLastSibling();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int18 = functionNode17.getBaseLineno();
        boolean boolean19 = functionNode17.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral21 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral21.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str24 = regExpLiteral21.getValue();
        regExpLiteral21.setFlags("52");
        functionNode17.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral21);
        boolean boolean28 = functionNode17.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode29.getTop();
        int int31 = functionNode29.getRegexpCount();
        int int32 = functionNode29.getParamCount();
        com.google.javascript.rhino.head.ast.AstNode astNode33 = functionNode29.getBody();
        int int34 = functionNode17.addFunction(functionNode29);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int36 = functionNode35.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = functionNode35.getTop();
        boolean boolean38 = functionNode35.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList39 = functionNode35.getSymbols();
        int int40 = functionNode35.getLength();
        boolean boolean41 = functionNode35.isGetterOrSetter();
        functionNode29.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode35);
        boolean boolean43 = functionNode35.isGenerator();
        boolean boolean44 = functionNode35.isGetterOrSetter();
        functionNode5.addChildToFront((com.google.javascript.rhino.head.Node) functionNode35);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int47 = functionNode46.getLp();
        functionNode46.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode50 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int51 = functionNode50.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = functionNode50.getTop();
        com.google.javascript.rhino.head.ast.Name name53 = null;
        functionNode50.setFunctionName(name53);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = functionNode55.getTop();
        functionNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode55);
        int int58 = functionNode55.getRp();
        int int59 = functionNode55.getFunctionType();
        functionNode46.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode55);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator61 = functionNode55.new NodeIterator();
        int int62 = functionNode55.getLineno();
        functionNode55.setRequiresActivation();
        // The following exception was thrown during execution in test generation
        try {
            functionNode35.setContinue((com.google.javascript.rhino.head.Node) functionNode55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(astNode33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(scriptNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(symbolList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(scriptNode52);
        org.junit.Assert.assertNotNull(scriptNode56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        boolean boolean4 = functionNode1.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int7 = scriptNode6.getEndLineno();
        int int8 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode13.getChildScopes();
        jump11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str18 = scriptNode13.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode6, (com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode13.target = scope20;
        functionNode1.addChildScope(scope20);
        boolean boolean23 = functionNode1.hasConsistentReturnUsage();
        java.lang.String str24 = functionNode1.getNextTempName();
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) (short) -1, (com.google.javascript.rhino.head.Node) functionNode1);
        boolean boolean26 = functionNode1.isExpressionClosure();
        functionNode1.putIntProp(1, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int32 = scriptNode31.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int35 = scriptNode34.getEndLineno();
        scriptNode31.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode34);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int38 = functionNode37.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = functionNode37.getTop();
        boolean boolean40 = functionNode37.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int43 = scriptNode42.getEndLineno();
        int int44 = scriptNode42.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode49.getChildScopes();
        jump47.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode49);
        java.lang.String str54 = scriptNode49.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode42, (com.google.javascript.rhino.head.ast.Scope) scriptNode49);
        com.google.javascript.rhino.head.ast.Scope scope56 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode49.target = scope56;
        functionNode37.addChildScope(scope56);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode34, (com.google.javascript.rhino.head.ast.Scope) functionNode37);
        int int60 = functionNode1.addFunction(functionNode37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int63 = functionNode62.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = functionNode62.getTop();
        boolean boolean65 = functionNode62.hasSideEffects();
        java.lang.String str66 = functionNode62.toString();
        functionNode62.setParens((int) (short) 10, 8);
        com.google.javascript.rhino.head.ast.Jump jump71 = new com.google.javascript.rhino.head.ast.Jump(22, (com.google.javascript.rhino.head.Node) functionNode62, 12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode73 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int74 = functionNode73.getLp();
        functionNode73.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode77 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int78 = functionNode77.getLp();
        functionNode77.setEncodedSource("");
        functionNode77.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode83 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int84 = functionNode83.getLp();
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode73, (com.google.javascript.rhino.head.Node) functionNode77, (com.google.javascript.rhino.head.Node) functionNode83, (int) '#');
        boolean boolean87 = functionNode83.isGenerator();
        int int88 = functionNode83.getFunctionType();
        com.google.javascript.rhino.head.Node node89 = functionNode83.getFirstChild();
        boolean boolean90 = functionNode83.isGetterOrSetter();
        functionNode83.flattenSymbolTable(false);
        functionNode62.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode83);
        // The following exception was thrown during execution in test generation
        try {
            functionNode1.setContinue((com.google.javascript.rhino.head.Node) functionNode83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str18, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$0" + "'", str24, "$0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(scriptNode39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str54, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(scriptNode64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "109" + "'", str66, "109");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        functionNode1.flattenSymbolTable(false);
        java.lang.String str7 = functionNode1.getName();
        functionNode1.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int10 = functionNode9.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode9.getTop();
        boolean boolean12 = functionNode9.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList13 = functionNode9.getSymbols();
        functionNode9.setRp(5);
        com.google.javascript.rhino.head.ast.Scope scope16 = functionNode9.getEnclosingScope();
        functionNode9.setLineno(5);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode9, 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode21.getTop();
        functionNode21.setParens((int) (byte) 1, (int) (short) 1);
        functionNode21.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList28 = functionNode21.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope30 = functionNode21.getDefiningScope("hi!");
        boolean boolean31 = functionNode21.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int33 = functionNode32.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = functionNode32.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode35 = functionNode32.getBody();
        int int36 = functionNode32.getLength();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int42 = scriptNode41.getEndLineno();
        int int43 = scriptNode41.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList44 = scriptNode41.getChildScopes();
        jump39.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode41);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        functionNode47.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int52 = functionNode51.getLp();
        functionNode51.setEncodedSource("");
        functionNode51.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int58 = functionNode57.getLp();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode47, (com.google.javascript.rhino.head.Node) functionNode51, (com.google.javascript.rhino.head.Node) functionNode57, (int) '#');
        jump39.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode47);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList62 = functionNode47.getStatements();
        functionNode32.setParams(astNodeList62);
        functionNode21.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode32);
        functionNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode32);
        com.google.javascript.rhino.head.Node node66 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode32.setFinally(node66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(symbolList13);
        org.junit.Assert.assertNull(scope16);
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertNull(nodeList28);
        org.junit.Assert.assertNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(scriptNode34);
        org.junit.Assert.assertNull(astNode35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(scopeList44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(astNodeList62);
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int6 = scriptNode5.getEndLineno();
        int int7 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        jump10.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode12);
        java.lang.String str17 = scriptNode12.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode5, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode12.target = scope19;
        functionNode0.addChildScope(scope19);
        boolean boolean22 = functionNode0.hasConsistentReturnUsage();
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap23 = functionNode0.getLiveLocals();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode25.getTop();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode25);
        functionNode0.target = node28;
        int int32 = node28.getIntProp(21, 26);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str17, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(nodeMap23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 26 + "'", int32 == 26);
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        com.google.javascript.rhino.head.ast.Jump jump1 = new com.google.javascript.rhino.head.ast.Jump((-22));
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode3.getTop();
        boolean boolean6 = functionNode3.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int9 = scriptNode8.getEndLineno();
        int int10 = scriptNode8.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump13 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int16 = scriptNode15.getEndLineno();
        int int17 = scriptNode15.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode15.getChildScopes();
        jump13.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode15);
        java.lang.String str20 = scriptNode15.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode8, (com.google.javascript.rhino.head.ast.Scope) scriptNode15);
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode15.target = scope22;
        functionNode3.addChildScope(scope22);
        boolean boolean25 = functionNode3.hasConsistentReturnUsage();
        java.lang.String str26 = functionNode3.getNextTempName();
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) (short) -1, (com.google.javascript.rhino.head.Node) functionNode3);
        boolean boolean28 = functionNode3.isExpressionClosure();
        com.google.javascript.rhino.head.ast.Jump jump30 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int32 = functionNode31.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = functionNode31.getTop();
        com.google.javascript.rhino.head.ast.Name name34 = null;
        functionNode31.setFunctionName(name34);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = functionNode36.getTop();
        functionNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode36);
        functionNode36.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int43 = functionNode36.addFunction(functionNode42);
        int int44 = jump30.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump52 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump52.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump56 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump52, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int59 = scriptNode58.getEndLineno();
        int int60 = scriptNode58.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList61 = scriptNode58.getChildScopes();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump52, (com.google.javascript.rhino.head.Node) scriptNode58);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList63 = scriptNode58.getFunctions();
        functionNodeList63.clear();
        com.google.javascript.rhino.head.ast.Jump jump69 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump69.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump73 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump69, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int76 = scriptNode75.getEndLineno();
        int int77 = scriptNode75.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList78 = scriptNode75.getChildScopes();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump69, (com.google.javascript.rhino.head.Node) scriptNode75);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList80 = scriptNode75.getFunctions();
        boolean boolean81 = functionNodeList63.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList80);
        functionNode46.putProp(20, (java.lang.Object) functionNodeList63);
        int int83 = functionNode42.addFunction(functionNode46);
        boolean boolean84 = functionNode46.isGenerator();
        functionNode3.setTop((com.google.javascript.rhino.head.ast.ScriptNode) functionNode46);
        int int88 = functionNode46.getIntProp((int) (byte) 0, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            jump1.setScope((com.google.javascript.rhino.head.ast.Scope) functionNode46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str20, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "$0" + "'", str26, "$0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(scriptNode33);
        org.junit.Assert.assertNotNull(scriptNode37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(scopeList61);
        org.junit.Assert.assertNotNull(functionNodeList63);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNull(scopeList78);
        org.junit.Assert.assertNotNull(functionNodeList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode7.getTop();
        boolean boolean10 = functionNode7.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int20 = scriptNode19.getEndLineno();
        int int21 = scriptNode19.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode19.getChildScopes();
        jump17.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode19);
        java.lang.String str24 = scriptNode19.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode12, (com.google.javascript.rhino.head.ast.Scope) scriptNode19);
        com.google.javascript.rhino.head.ast.Scope scope26 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode19.target = scope26;
        functionNode7.addChildScope(scope26);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode4, (com.google.javascript.rhino.head.ast.Scope) functionNode7);
        int int30 = functionNode7.getFunctionCount();
        com.google.javascript.rhino.head.ast.Scope scope31 = functionNode7.getEnclosingScope();
        int int32 = functionNode7.getLp();
        com.google.javascript.rhino.head.Node node33 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode7.setDefault(node33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str24, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(scope31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((-440310255), 365513504);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        boolean boolean15 = functionNode11.isGenerator();
        int int16 = functionNode11.getFunctionType();
        com.google.javascript.rhino.head.Node node17 = functionNode11.getNext();
        functionNode11.setBounds(2, 17);
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump27.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump27, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int34 = scriptNode33.getEndLineno();
        int int35 = scriptNode33.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList36 = scriptNode33.getChildScopes();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump27, (com.google.javascript.rhino.head.Node) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList38 = scriptNode33.getFunctions();
        int int39 = scriptNode33.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scriptNode33.getChildScopes();
        int int41 = scriptNode33.getEncodedSourceEnd();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList42 = scriptNode33.getSymbols();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int44 = functionNode43.getLp();
        functionNode43.setEncodedSource("");
        functionNode43.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral50 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str52 = regExpLiteral50.toSource((int) (byte) 10);
        regExpLiteral50.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral50.removeProp(8);
        java.lang.String str57 = regExpLiteral50.getValue();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(7, (com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) functionNode43, (com.google.javascript.rhino.head.Node) regExpLiteral50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode59 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode59.getTop();
        functionNode59.setParens((int) (byte) 1, (int) (short) 1);
        functionNode59.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList66 = functionNode59.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope68 = functionNode59.getDefiningScope("hi!");
        boolean boolean69 = functionNode59.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode70 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int71 = functionNode70.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = functionNode70.getTop();
        com.google.javascript.rhino.head.ast.Name name73 = null;
        functionNode70.setFunctionName(name73);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = functionNode75.getTop();
        functionNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode75);
        int int78 = functionNode75.getRp();
        int int79 = functionNode75.getFunctionType();
        int int80 = functionNode59.addFunction(functionNode75);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (byte) 100, (com.google.javascript.rhino.head.Node) regExpLiteral50, (com.google.javascript.rhino.head.Node) functionNode75, 0);
        functionNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode75);
        functionNode11.setBaseLineno(350469479);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(scopeList36);
        org.junit.Assert.assertNotNull(functionNodeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(scopeList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(symbolList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                    /null/" + "'", str52, "                    /null/");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertNull(nodeList66);
        org.junit.Assert.assertNull(scope68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(scriptNode72);
        org.junit.Assert.assertNotNull(scriptNode76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Scope scope36 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode37.setParens((int) (byte) 1, (int) (short) 1);
        functionNode37.setEncodedSourceStart((-1));
        functionNode37.setFunctionIsGetter();
        scope36.addChildToFront((com.google.javascript.rhino.head.Node) functionNode37);
        functionNode37.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int57 = scriptNode56.getEndLineno();
        int int58 = scriptNode56.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode56.getChildScopes();
        jump54.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode56);
        java.lang.String str61 = scriptNode56.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode49, (com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode56.target = scope63;
        java.lang.String str65 = functionNode37.toStringTree(scriptNode56);
        java.lang.String str67 = scriptNode56.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap68 = scriptNode56.getSymbolTable();
        strMap33.putAll(strMap68);
        boolean boolean70 = strMap33.isEmpty();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str61, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "                    {\n                    }\n" + "'", str67, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = scriptNode1.new NodeIterator();
        boolean boolean8 = nodeIterator7.hasNext();
        boolean boolean9 = nodeIterator7.hasNext();
        com.google.javascript.rhino.head.Node node10 = nodeIterator7.next();
        boolean boolean11 = nodeIterator7.hasNext();
        boolean boolean12 = nodeIterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node13 = nodeIterator7.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode8.setParens((int) (byte) 1, (int) (short) 1);
        functionNode8.setEncodedSourceStart((-1));
        functionNode8.setFunctionIsGetter();
        scope7.addChildToFront((com.google.javascript.rhino.head.Node) functionNode8);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode5.setFunctionIsSetter();
        int int19 = functionNode0.addFunction(functionNode5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode21.getTop();
        com.google.javascript.rhino.head.ast.Name name23 = null;
        functionNode21.setFunctionName(name23);
        boolean boolean25 = functionNode21.requiresActivation();
        com.google.javascript.rhino.head.ast.Jump jump29 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump29.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump33 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump29, 0);
        com.google.javascript.rhino.head.ast.Jump jump37 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump37.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump37, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int43 = functionNode42.getLp();
        functionNode42.setEncodedSource("");
        functionNode42.flattenSymbolTable(false);
        jump29.addChildAfter((com.google.javascript.rhino.head.Node) jump37, (com.google.javascript.rhino.head.Node) functionNode42);
        com.google.javascript.rhino.head.Node node49 = functionNode42.target;
        functionNode21.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(10, (com.google.javascript.rhino.head.Node) functionNode42, 10);
        functionNode42.setFunctionIsSetter();
        functionNode42.setPosition((int) (byte) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode56 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int57 = functionNode56.getLp();
        functionNode56.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = functionNode60.getTop();
        com.google.javascript.rhino.head.ast.Name name63 = null;
        functionNode60.setFunctionName(name63);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode65 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = functionNode65.getTop();
        functionNode60.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode65);
        int int68 = functionNode65.getRp();
        int int69 = functionNode65.getFunctionType();
        functionNode56.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode65);
        com.google.javascript.rhino.head.ast.Name name71 = functionNode56.getFunctionName();
        functionNode56.setFunctionType(7);
        boolean boolean74 = functionNode56.isGetter();
        int int75 = functionNode42.addFunction(functionNode56);
        int int76 = functionNode5.addFunction(functionNode42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = functionNode42.debugPrint();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(scriptNode62);
        org.junit.Assert.assertNotNull(scriptNode66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(name71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node4 = scriptNode1.getNext();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getFirstChild();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode1.getFunctions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor8 = functionNodeList6.listIterator(19);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 19, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList6);
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        int int1 = symbol0.getIndex();
        symbol0.setIndex(35);
        com.google.javascript.rhino.head.ast.Scope scope4 = symbol0.getContainingTable();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(scope4);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.Node node2 = scriptNode1.getFirstChild();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        functionNode4.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        functionNode8.setEncodedSource("");
        functionNode8.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode4, (com.google.javascript.rhino.head.Node) functionNode8, (com.google.javascript.rhino.head.Node) functionNode14, (int) '#');
        boolean boolean18 = functionNode14.isGenerator();
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scope20.setBounds(0, 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode24.getTop();
        int int26 = functionNode24.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = functionNode24.getEnclosingFunction();
        java.lang.String str28 = scope20.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode24);
        functionNode14.putProp(1, (java.lang.Object) functionNode24);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode30.getTop();
        com.google.javascript.rhino.head.ast.Name name33 = null;
        functionNode30.setFunctionName(name33);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode35.getTop();
        functionNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode35);
        functionNode35.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int42 = functionNode35.addFunction(functionNode41);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        java.lang.String str46 = scriptNode45.getJsDoc();
        com.google.javascript.rhino.head.Node node48 = scriptNode45.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode49 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int50 = functionNode49.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str53 = functionNode49.toStringTree(scriptNode52);
        com.google.javascript.rhino.head.ast.Scope scope55 = scriptNode52.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int58 = scriptNode57.getEndLineno();
        int int59 = scriptNode57.getBaseLineno();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(25, node48, (com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scriptNode57);
        int int61 = functionNode41.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        functionNode24.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode52);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode52);
        com.google.javascript.rhino.head.ast.Scope scope64 = scriptNode1.getEnclosingScope();
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(functionNode27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(scope55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNull(scope64);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        com.google.javascript.rhino.head.ast.Jump jump5 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump5.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump5, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int12 = scriptNode11.getEndLineno();
        int int13 = scriptNode11.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump5, (com.google.javascript.rhino.head.Node) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump(11, (com.google.javascript.rhino.head.Node) scriptNode11);
        jump17.removeProp((int) '#');
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertNull(scopeList16);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        int int8 = functionNode5.getRp();
        functionNode5.setParens(11, 2);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode((-1));
        int int14 = functionNode5.addFunction(functionNode13);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int17 = scriptNode16.getEndLineno();
        int int18 = scriptNode16.getBaseLineno();
        scriptNode16.removeProp(0);
        scriptNode16.setEncodedSourceEnd(19);
        java.lang.String str23 = scriptNode16.toString();
        int[] intArray25 = new int[] { 26 };
        functionNode5.addLiveLocals((com.google.javascript.rhino.head.Node) scriptNode16, intArray25);
        com.google.javascript.rhino.head.Node node28 = scriptNode16.setType((int) (short) 0);
        java.lang.String str30 = scriptNode16.toSource(15);
        scriptNode16.setRelative(13);
        scriptNode16.setEncodedSource("/null//null/-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "136" + "'", str23, "136");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[26]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "                              {\n                              }\n" + "'", str30, "                              {\n                              }\n");
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        functionNode1.setParens((int) (byte) 1, (int) (short) 1);
        functionNode1.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList8 = functionNode1.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope10 = functionNode1.getDefiningScope("hi!");
        boolean boolean11 = functionNode1.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol16 = scriptNode13.getSymbol("hi!");
        scriptNode13.putIntProp(3, 0);
        functionNode1.addResumptionPoint((com.google.javascript.rhino.head.Node) scriptNode13);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode22.getTop();
        functionNode22.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) functionNode22);
        int int28 = functionNode22.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.Jump jump33 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump33.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump37 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump33, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int40 = scriptNode39.getEndLineno();
        int int41 = scriptNode39.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList42 = scriptNode39.getChildScopes();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump33, (com.google.javascript.rhino.head.Node) scriptNode39);
        java.lang.String str44 = scriptNode39.getSourceName();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        functionNode1.setCompilerData((java.lang.Object) scriptNode39);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode47.getTop();
        com.google.javascript.rhino.head.ast.Name name50 = null;
        functionNode47.setFunctionName(name50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = functionNode52.getTop();
        functionNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode52);
        functionNode52.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int59 = functionNode52.addFunction(functionNode58);
        com.google.javascript.rhino.head.ast.Name name60 = null;
        functionNode52.setFunctionName(name60);
        com.google.javascript.rhino.head.Node node62 = functionNode52.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode(24);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode52, (com.google.javascript.rhino.head.Node) scriptNode64);
        boolean boolean66 = functionNode1.isExpressionClosure();
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(nodeList8);
        org.junit.Assert.assertNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(symbol16);
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(scopeList42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertNotNull(scriptNode53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        functionNodeList15.clear();
        int int19 = functionNodeList15.indexOf((java.lang.Object) 10L);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor20 = functionNodeList15.iterator();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream21 = functionNodeList15.stream();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream22 = functionNodeList15.parallelStream();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType26, "109");
        java.lang.String str30 = comment28.toSource(19);
        com.google.javascript.rhino.head.ast.Scope scope33 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 10, (com.google.javascript.rhino.head.Node) comment28, (com.google.javascript.rhino.head.Node) scope33);
        boolean boolean35 = functionNodeList15.remove((java.lang.Object) comment28);
        java.lang.String str37 = comment28.toSource((-146877426));
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = comment28.getAstRoot();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(functionNodeItor20);
        org.junit.Assert.assertNotNull(functionNodeStream21);
        org.junit.Assert.assertNotNull(functionNodeStream22);
        org.junit.Assert.assertTrue("'" + commentType26 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType26.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "                                      109" + "'", str30, "                                      109");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "109" + "'", str37, "109");
        org.junit.Assert.assertNull(astRoot38);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope6 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode7.getTop();
        functionNode7.setParens((int) (byte) 1, (int) (short) 1);
        functionNode7.setEncodedSourceStart((-1));
        functionNode7.setFunctionIsGetter();
        scope6.addChildToFront((com.google.javascript.rhino.head.Node) functionNode7);
        functionNode4.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode7);
        int int17 = functionNode0.addFunction(functionNode4);
        functionNode0.setFunctionIsSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        functionNode21.setLp((int) (short) 1);
        int int27 = functionNode21.getIntProp(4, 26);
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump(3, (com.google.javascript.rhino.head.Node) functionNode21);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) functionNode21);
        functionNode21.setFunctionType(11);
        boolean boolean32 = functionNode21.hasChildren();
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int38 = scriptNode37.getEndLineno();
        int int39 = scriptNode37.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scriptNode37.getChildScopes();
        jump35.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode37);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor42 = scriptNode37.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int44 = functionNode43.getLp();
        functionNode43.setEncodedSource("");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode37, (com.google.javascript.rhino.head.ast.Scope) functionNode43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode48.getTop();
        functionNode48.setParens((int) (byte) 1, (int) (short) 1);
        functionNode48.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList55 = functionNode48.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope57 = functionNode48.getDefiningScope("hi!");
        boolean boolean58 = functionNode48.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode59 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int60 = functionNode59.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = functionNode59.getTop();
        com.google.javascript.rhino.head.ast.Name name62 = null;
        functionNode59.setFunctionName(name62);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode64 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = functionNode64.getTop();
        functionNode59.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode64);
        int int67 = functionNode64.getRp();
        int int68 = functionNode64.getFunctionType();
        int int69 = functionNode48.addFunction(functionNode64);
        functionNode43.setCompilerData((java.lang.Object) functionNode64);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode71 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int72 = functionNode71.getLp();
        functionNode71.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope77 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode78 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = functionNode78.getTop();
        functionNode78.setParens((int) (byte) 1, (int) (short) 1);
        functionNode78.setEncodedSourceStart((-1));
        functionNode78.setFunctionIsGetter();
        scope77.addChildToFront((com.google.javascript.rhino.head.Node) functionNode78);
        functionNode75.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode78);
        int int88 = functionNode71.addFunction(functionNode75);
        int int89 = functionNode71.getEncodedSourceEnd();
        functionNode64.replaceWith((com.google.javascript.rhino.head.ast.Scope) functionNode71);
        functionNode21.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode64);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node92 = functionNode0.getChildBefore((com.google.javascript.rhino.head.Node) functionNode21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 26 + "'", int27 == 26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(scopeList40);
        org.junit.Assert.assertNotNull(nodeItor42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertNull(nodeList55);
        org.junit.Assert.assertNull(scope57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(scriptNode61);
        org.junit.Assert.assertNotNull(scriptNode65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(scriptNode79);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(193715443, 6);
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int3 = functionNode2.getBaseLineno();
        boolean boolean4 = functionNode2.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral6 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral6.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str9 = regExpLiteral6.getValue();
        regExpLiteral6.setFlags("52");
        functionNode2.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral6);
        boolean boolean13 = functionNode2.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode14.getTop();
        int int16 = functionNode14.getRegexpCount();
        int int17 = functionNode14.getParamCount();
        com.google.javascript.rhino.head.ast.AstNode astNode18 = functionNode14.getBody();
        int int19 = functionNode2.addFunction(functionNode14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode20.getTop();
        boolean boolean23 = functionNode20.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList24 = functionNode20.getSymbols();
        int int25 = functionNode20.getLength();
        boolean boolean26 = functionNode20.isGetterOrSetter();
        functionNode14.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode20);
        boolean boolean28 = functionNode20.isGenerator();
        boolean boolean29 = functionNode20.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = functionNode30.getTop();
        functionNode30.setParens((int) (byte) 1, (int) (short) 1);
        functionNode30.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList37 = functionNode30.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope39 = functionNode30.getDefiningScope("hi!");
        boolean boolean40 = functionNode30.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int42 = functionNode41.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = functionNode41.getTop();
        com.google.javascript.rhino.head.ast.Name name44 = null;
        functionNode41.setFunctionName(name44);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = functionNode46.getTop();
        functionNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode46);
        int int49 = functionNode46.getRp();
        int int50 = functionNode46.getFunctionType();
        int int51 = functionNode30.addFunction(functionNode46);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int54 = functionNode53.getLp();
        functionNode53.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int58 = functionNode57.getLp();
        functionNode57.setEncodedSource("");
        functionNode57.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode63 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int64 = functionNode63.getLp();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode53, (com.google.javascript.rhino.head.Node) functionNode57, (com.google.javascript.rhino.head.Node) functionNode63, (int) '#');
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap67 = functionNode57.getSymbolTable();
        functionNode46.setCompilerData((java.lang.Object) functionNode57);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((-1110578805), (com.google.javascript.rhino.head.Node) functionNode20, (com.google.javascript.rhino.head.Node) functionNode46, (int) (short) 100);
        com.google.javascript.rhino.head.ast.Name name71 = null;
        functionNode20.setFunctionName(name71);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(astNode18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(symbolList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scriptNode31);
        org.junit.Assert.assertNull(nodeList37);
        org.junit.Assert.assertNull(scope39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(scriptNode43);
        org.junit.Assert.assertNotNull(scriptNode47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(strMap67);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump6.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump6, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump6, (com.google.javascript.rhino.head.Node) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode12.getChildScopes();
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump(11, (com.google.javascript.rhino.head.Node) scriptNode12);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node((int) (byte) -1, (com.google.javascript.rhino.head.Node) scriptNode12, 19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode21.getTop();
        boolean boolean24 = functionNode21.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int27 = scriptNode26.getEndLineno();
        int int28 = scriptNode26.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int34 = scriptNode33.getEndLineno();
        int int35 = scriptNode33.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList36 = scriptNode33.getChildScopes();
        jump31.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode33);
        java.lang.String str38 = scriptNode33.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode26, (com.google.javascript.rhino.head.ast.Scope) scriptNode33);
        com.google.javascript.rhino.head.ast.Scope scope40 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode33.target = scope40;
        functionNode21.addChildScope(scope40);
        boolean boolean43 = functionNode21.hasConsistentReturnUsage();
        boolean boolean44 = functionNode21.hasSideEffects();
        node20.addChildToFront((com.google.javascript.rhino.head.Node) functionNode21);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node46 = functionNode21.getFinally();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(scopeList36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str38, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int18 = functionNode17.getLp();
        functionNode17.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        functionNode21.setEncodedSource("");
        functionNode21.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode17, (com.google.javascript.rhino.head.Node) functionNode21, (com.google.javascript.rhino.head.Node) functionNode27, (int) '#');
        com.google.javascript.rhino.head.ast.Comment comment31 = functionNode27.getJsDocNode();
        int int32 = functionNode27.getFunctionCount();
        java.lang.String str33 = scriptNode10.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode27);
        scriptNode10.removeProp(0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node36 = scriptNode10.getFinally();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(comment31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        functionNode0.flattenSymbolTable(false);
        java.lang.String str6 = functionNode0.getName();
        functionNode0.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode8.getTop();
        com.google.javascript.rhino.head.Node node11 = functionNode8.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList12 = functionNode8.getParams();
        functionNode0.setParams(astNodeList12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        functionNode14.setLp((int) (short) 1);
        int int20 = functionNode14.getIntProp(4, 26);
        functionNode14.flattenSymbolTable(true);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList23 = functionNode14.getParams();
        functionNode0.setParams(astNodeList23);
        functionNode0.setEndLineno(12);
        com.google.javascript.rhino.head.Token.CommentType commentType29 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType29, "109");
        java.lang.String str33 = comment31.toSource(0);
        java.lang.String str34 = comment31.getValue();
        functionNode0.setJsDocNode(comment31);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = functionNode0.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(astNodeList12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26 + "'", int20 == 26);
        org.junit.Assert.assertNotNull(astNodeList23);
        org.junit.Assert.assertTrue("'" + commentType29 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType29.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "109" + "'", str33, "109");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "109" + "'", str34, "109");
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        strMap33.clear();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        functionNode36.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope42 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = functionNode43.getTop();
        functionNode43.setParens((int) (byte) 1, (int) (short) 1);
        functionNode43.setEncodedSourceStart((-1));
        functionNode43.setFunctionIsGetter();
        scope42.addChildToFront((com.google.javascript.rhino.head.Node) functionNode43);
        functionNode40.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode43);
        int int53 = functionNode36.addFunction(functionNode40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode54 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int55 = functionNode54.getLp();
        functionNode54.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int59 = functionNode58.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode58.getTop();
        com.google.javascript.rhino.head.ast.Name name61 = null;
        functionNode58.setFunctionName(name61);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode63 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = functionNode63.getTop();
        functionNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode63);
        int int66 = functionNode63.getRp();
        int int67 = functionNode63.getFunctionType();
        functionNode54.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode63);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode69 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int70 = functionNode69.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = functionNode69.getTop();
        com.google.javascript.rhino.head.Node node72 = functionNode69.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList73 = functionNode69.getParams();
        functionNode54.setParams(astNodeList73);
        functionNode40.setParams(astNodeList73);
        java.lang.String str76 = functionNode40.getJsDoc();
        boolean boolean77 = functionNode40.isSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode78 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int79 = functionNode78.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = functionNode78.getTop();
        com.google.javascript.rhino.head.ast.Name name81 = null;
        functionNode78.setFunctionName(name81);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode83 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode84 = functionNode83.getTop();
        functionNode78.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode83);
        int int86 = functionNode83.getRp();
        java.lang.String str87 = functionNode83.getSourceName();
        boolean boolean88 = strMap33.remove((java.lang.Object) boolean77, (java.lang.Object) functionNode83);
        strMap33.clear();
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet90 = strMap33.entrySet();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(scriptNode44);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertNotNull(scriptNode64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(scriptNode71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(astNodeList73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(scriptNode80);
        org.junit.Assert.assertNotNull(scriptNode84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strEntrySet90);
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump6.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump6, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump6, (com.google.javascript.rhino.head.Node) scriptNode12);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int19 = scriptNode18.getEndLineno();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral21 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str23 = regExpLiteral21.toSource((int) (byte) 10);
        regExpLiteral21.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral21.removeProp(8);
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(10, node16, (com.google.javascript.rhino.head.Node) scriptNode18, (com.google.javascript.rhino.head.Node) regExpLiteral21, 3);
        java.lang.String str31 = regExpLiteral21.makeIndent((int) (short) 100);
        int int32 = regExpLiteral21.getType();
        boolean boolean33 = regExpLiteral21.hasSideEffects();
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump(350469479, (com.google.javascript.rhino.head.Node) regExpLiteral21, 24);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor36 = null;
        // The following exception was thrown during execution in test generation
        try {
            regExpLiteral21.visit(nodeVisitor36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                    /null/" + "'", str23, "                    /null/");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                                                                                                                        " + "'", str31, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 48 + "'", int32 == 48);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator17 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList15.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator17);
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor19 = functionNodeList15.listIterator();
        int int20 = functionNodeList15.size();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode21.getTop();
        com.google.javascript.rhino.head.ast.Name name24 = null;
        functionNode21.setFunctionName(name24);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode26.getTop();
        functionNode21.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode26);
        boolean boolean29 = functionNodeList15.remove((java.lang.Object) functionNode21);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int33 = functionNode32.getLp();
        functionNode32.setLp((int) (short) 1);
        int int38 = functionNode32.getIntProp(4, 26);
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump(3, (com.google.javascript.rhino.head.Node) functionNode32);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) functionNode32);
        functionNode32.setFunctionType(11);
        boolean boolean43 = functionNode32.hasChildren();
        com.google.javascript.rhino.head.Node node44 = functionNode32.target;
        int int45 = functionNode32.getParamCount();
        java.lang.String str46 = functionNode32.getName();
        int int47 = functionNode21.addFunction(functionNode32);
        com.google.javascript.rhino.head.ast.Name name48 = null;
        functionNode21.setFunctionName(name48);
        functionNode21.setEndLineno(15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(functionNodeItor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 26 + "'", int38 == 26);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral1 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str3 = regExpLiteral1.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = regExpLiteral1.new NodeIterator();
        java.lang.String str6 = regExpLiteral1.toSource(100);
        java.lang.String str7 = regExpLiteral1.getJsDoc();
        java.lang.String str8 = regExpLiteral1.shortName();
        // The following exception was thrown during execution in test generation
        try {
            regExpLiteral1.setString("");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.RegExpLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                    /null/" + "'", str3, "                    /null/");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "                                                                                                                                                                                                        /null/" + "'", str6, "                                                                                                                                                                                                        /null/");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RegExpLiteral" + "'", str8, "RegExpLiteral");
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        functionNode3.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        functionNode7.setEncodedSource("");
        functionNode7.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) functionNode7, (com.google.javascript.rhino.head.Node) functionNode13, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode3.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int30 = functionNode27.getRp();
        int int31 = functionNode27.getFunctionType();
        functionNode18.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.Scope scope33 = functionNode27.getEnclosingScope();
        functionNode3.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int35 = functionNode0.addFunction(functionNode3);
        com.google.javascript.rhino.head.Token.CommentType commentType38 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType38, "109");
        java.lang.String str42 = comment40.toSource(19);
        com.google.javascript.rhino.head.Token.CommentType commentType43 = comment40.getCommentType();
        int int44 = comment40.getLineno();
        functionNode3.addChildToFront((com.google.javascript.rhino.head.Node) comment40);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment40.visit(nodeVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + commentType38 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType38.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                      109" + "'", str42, "                                      109");
        org.junit.Assert.assertTrue("'" + commentType43 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType43.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump21.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump21, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode27.getChildScopes();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump21, (com.google.javascript.rhino.head.Node) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode27.getFunctions();
        functionNodeList32.clear();
        boolean boolean34 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList32);
        functionNodeList15.clear();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode37.setParens((int) (byte) 1, (int) (short) 1);
        functionNode37.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList44 = functionNode37.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope46 = functionNode37.getDefiningScope("hi!");
        boolean boolean47 = functionNode37.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int49 = functionNode48.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = functionNode48.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode51 = functionNode48.getBody();
        int int52 = functionNode48.getLength();
        com.google.javascript.rhino.head.ast.Jump jump55 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int58 = scriptNode57.getEndLineno();
        int int59 = scriptNode57.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList60 = scriptNode57.getChildScopes();
        jump55.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode57);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode63 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int64 = functionNode63.getLp();
        functionNode63.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode67 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int68 = functionNode67.getLp();
        functionNode67.setEncodedSource("");
        functionNode67.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode73 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int74 = functionNode73.getLp();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode63, (com.google.javascript.rhino.head.Node) functionNode67, (com.google.javascript.rhino.head.Node) functionNode73, (int) '#');
        jump55.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode63);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList78 = functionNode63.getStatements();
        functionNode48.setParams(astNodeList78);
        functionNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode48);
        com.google.javascript.rhino.head.Node node81 = functionNode48.getLastChild();
        com.google.javascript.rhino.head.Node node82 = functionNode48.target;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = functionNodeList15.add(functionNode48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertNull(nodeList44);
        org.junit.Assert.assertNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(scriptNode50);
        org.junit.Assert.assertNull(astNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(scopeList60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(astNodeList78);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(node82);
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        functionNodeList50.clear();
        functionNodeList50.clear();
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList68 = scriptNode63.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator69 = functionNodeList68.spliterator();
        int int71 = functionNodeList68.indexOf((java.lang.Object) (byte) 10);
        boolean boolean72 = functionNodeList50.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList68);
        boolean boolean73 = strMap33.containsKey((java.lang.Object) functionNodeList50);
        java.util.Collection<com.google.javascript.rhino.head.ast.Symbol> symbolCollection74 = strMap33.values();
        com.google.javascript.rhino.head.Node node76 = com.google.javascript.rhino.head.Node.newNumber((double) '#');
        com.google.javascript.rhino.head.ast.Symbol symbol77 = strMap33.get((java.lang.Object) '#');
        java.util.Collection<com.google.javascript.rhino.head.ast.Symbol> symbolCollection78 = strMap33.values();
        java.util.Set<java.lang.String> strSet79 = strMap33.keySet();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strMap33.putAll(strMap80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertNotNull(functionNodeList68);
        org.junit.Assert.assertNotNull(functionNodeSpliterator69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(symbolCollection74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(symbol77);
        org.junit.Assert.assertNotNull(symbolCollection78);
        org.junit.Assert.assertNotNull(strSet79);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scope1.new NodeIterator();
        com.google.javascript.rhino.head.Node node12 = nodeIterator11.next();
        int int13 = node12.getType();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 109 + "'", int13 == 109);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode3.getTop();
        com.google.javascript.rhino.head.ast.Name name6 = null;
        functionNode3.setFunctionName(name6);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode8.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int15 = functionNode8.addFunction(functionNode14);
        int int16 = jump2.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump24 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump24.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump24, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        int int32 = scriptNode30.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode30.getChildScopes();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump24, (com.google.javascript.rhino.head.Node) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode30.getFunctions();
        functionNodeList35.clear();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode47.getFunctions();
        boolean boolean53 = functionNodeList35.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList52);
        functionNode18.putProp(20, (java.lang.Object) functionNodeList35);
        int int55 = functionNode14.addFunction(functionNode18);
        boolean boolean56 = functionNode18.isGenerator();
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) (byte) 100, (com.google.javascript.rhino.head.Node) functionNode18);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int59 = functionNode58.getLp();
        functionNode58.setLineno(0);
        boolean boolean62 = functionNode58.requiresActivation();
        int int63 = functionNode58.getFunctionCount();
        boolean boolean64 = functionNode58.isGetter();
        // The following exception was thrown during execution in test generation
        try {
            int int65 = functionNode18.getIndexForNameNode((com.google.javascript.rhino.head.Node) functionNode58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        functionNode3.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        functionNode7.setEncodedSource("");
        functionNode7.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) functionNode7, (com.google.javascript.rhino.head.Node) functionNode13, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode3.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int30 = functionNode27.getRp();
        int int31 = functionNode27.getFunctionType();
        functionNode18.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.Scope scope33 = functionNode27.getEnclosingScope();
        functionNode3.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int35 = functionNode0.addFunction(functionNode3);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList36 = functionNode0.getResumptionPoints();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int38 = functionNode37.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = functionNode37.getTop();
        com.google.javascript.rhino.head.ast.Name name40 = null;
        functionNode37.setFunctionName(name40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = functionNode42.getTop();
        functionNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        functionNode42.setEncodedSourceStart(6);
        functionNode42.setRelative((-1));
        boolean boolean49 = functionNode0.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int52 = functionNode51.getLp();
        functionNode51.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int56 = functionNode55.getLp();
        functionNode55.setEncodedSource("");
        functionNode55.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode61 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int62 = functionNode61.getLp();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode51, (com.google.javascript.rhino.head.Node) functionNode55, (com.google.javascript.rhino.head.Node) functionNode61, (int) '#');
        com.google.javascript.rhino.head.ast.Comment comment65 = functionNode61.getJsDocNode();
        functionNode0.setParentScope((com.google.javascript.rhino.head.ast.Scope) functionNode61);
        java.lang.Class<?> wildcardClass67 = functionNode61.getClass();
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(nodeList36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(scriptNode39);
        org.junit.Assert.assertNotNull(scriptNode43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(comment65);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope();
        scope1.setBounds(0, 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        int int7 = functionNode5.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = functionNode5.getEnclosingFunction();
        java.lang.String str9 = scope1.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int11 = functionNode10.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = functionNode10.getTop();
        com.google.javascript.rhino.head.ast.Name name13 = null;
        functionNode10.setFunctionName(name13);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode15.getTop();
        functionNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode15);
        int int18 = functionNode15.getRp();
        functionNode15.setParens(11, 2);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = null;
        functionNode15.setTop(scriptNode22);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int26 = functionNode25.getEncodedSourceStart();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(22, (com.google.javascript.rhino.head.Node) scope1, (com.google.javascript.rhino.head.Node) functionNode15, (com.google.javascript.rhino.head.Node) functionNode25, 0);
        boolean boolean29 = functionNode15.isGenerator();
        com.google.javascript.rhino.head.Node node30 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int34 = functionNode33.getBaseLineno();
        boolean boolean35 = functionNode33.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral37 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral37.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str40 = regExpLiteral37.getValue();
        regExpLiteral37.setFlags("52");
        functionNode33.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral37);
        boolean boolean44 = functionNode33.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode49.getChildScopes();
        jump47.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode49);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor54 = scriptNode49.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int56 = functionNode55.getLp();
        functionNode55.setEncodedSource("");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode49, (com.google.javascript.rhino.head.ast.Scope) functionNode55);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (byte) 1, (com.google.javascript.rhino.head.Node) functionNode33, (com.google.javascript.rhino.head.Node) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList61 = functionNode33.getChildScopes();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int63 = functionNode62.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = functionNode62.getTop();
        com.google.javascript.rhino.head.ast.Name name65 = null;
        functionNode62.setFunctionName(name65);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode67 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = functionNode67.getTop();
        functionNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode67);
        int int70 = functionNode67.getRp();
        java.lang.String str71 = functionNode67.getSourceName();
        functionNode67.setParens(14, (int) '#');
        int int75 = functionNode33.addFunction(functionNode67);
        // The following exception was thrown during execution in test generation
        try {
            functionNode15.replaceChild(node30, (com.google.javascript.rhino.head.Node) functionNode33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(functionNode8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(scriptNode12);
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertNotNull(nodeItor54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(scopeList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(scriptNode64);
        org.junit.Assert.assertNotNull(scriptNode68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        int int7 = functionNode0.getIntProp((int) (short) 100, (int) (byte) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode8.getTop();
        boolean boolean11 = functionNode8.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        int int22 = scriptNode20.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode20.getChildScopes();
        jump18.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode20);
        java.lang.String str25 = scriptNode20.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode13, (com.google.javascript.rhino.head.ast.Scope) scriptNode20);
        com.google.javascript.rhino.head.ast.Scope scope27 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode20.target = scope27;
        functionNode8.addChildScope(scope27);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode30.getTop();
        com.google.javascript.rhino.head.ast.Name name33 = null;
        functionNode30.setFunctionName(name33);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode35.getTop();
        functionNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode35);
        com.google.javascript.rhino.head.ast.Scope scope40 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode30.replaceWith(scope40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int43 = functionNode42.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = functionNode42.getTop();
        com.google.javascript.rhino.head.ast.Name name45 = null;
        functionNode42.setFunctionName(name45);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = functionNode47.getTop();
        functionNode42.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode47);
        int int50 = functionNode30.addFunction(functionNode42);
        int int51 = functionNode8.addFunction(functionNode42);
        functionNode0.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode42);
        com.google.javascript.rhino.head.ast.Scope scope53 = com.google.javascript.rhino.head.ast.Scope.splitScope((com.google.javascript.rhino.head.ast.Scope) functionNode42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = functionNode42.toSource(11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str25, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(scriptNode44);
        org.junit.Assert.assertNotNull(scriptNode48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(scope53);
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral(6, 26);
        java.lang.String str4 = regExpLiteral2.toSource(22);
        int int5 = regExpLiteral2.getType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "                                            /null/" + "'", str4, "                                            /null/");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap2 = functionNode0.getLiveLocals();
        com.google.javascript.rhino.head.ast.Symbol symbol3 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str4 = symbol3.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope5 = symbol3.getContainingTable();
        symbol3.setIndex(10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int10 = scriptNode9.getEndLineno();
        int int11 = scriptNode9.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump14 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int17 = scriptNode16.getEndLineno();
        int int18 = scriptNode16.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode16.getChildScopes();
        jump14.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode16);
        java.lang.String str21 = scriptNode16.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode9, (com.google.javascript.rhino.head.ast.Scope) scriptNode16);
        com.google.javascript.rhino.head.ast.AstNode astNode23 = scriptNode9.getParent();
        int int24 = scriptNode9.getType();
        com.google.javascript.rhino.head.ast.Symbol symbol26 = scriptNode9.getSymbol("109");
        java.lang.String str27 = scriptNode9.toSource();
        int int28 = scriptNode9.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode29.getTop();
        functionNode29.setParens((int) (byte) 1, (int) (short) 1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor34 = functionNode29.iterator();
        functionNode29.setLp(136);
        int int37 = functionNode29.getFunctionType();
        scriptNode9.addChildrenToBack((com.google.javascript.rhino.head.Node) functionNode29);
        symbol3.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode9);
        int int40 = scriptNode9.getRegexpCount();
        functionNode0.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(nodeMap2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EOF" + "'", str4, "EOF");
        org.junit.Assert.assertNull(scope5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str21, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(astNode23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 136 + "'", int24 == 136);
        org.junit.Assert.assertNull(symbol26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n}\n" + "'", str27, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertNotNull(nodeItor34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str4 = functionNode0.toStringTree(scriptNode3);
        int int5 = scriptNode3.getRegexpCount();
        com.google.javascript.rhino.head.Node node6 = scriptNode3.getLastSibling();
        boolean boolean7 = scriptNode3.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode3.getChildScopes();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral9 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode3.addRegExp(regExpLiteral9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(scopeList8);
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        int int6 = scriptNode4.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode4.getChildScopes();
        jump2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int11 = functionNode10.getLp();
        functionNode10.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        functionNode14.setEncodedSource("");
        functionNode14.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode10, (com.google.javascript.rhino.head.Node) functionNode14, (com.google.javascript.rhino.head.Node) functionNode20, (int) '#');
        jump2.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode10);
        int int25 = functionNode10.getLength();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode26.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode29.getTop();
        functionNode29.setParens((int) (byte) 1, (int) (short) 1);
        functionNode29.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList36 = functionNode29.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope38 = functionNode29.getDefiningScope("hi!");
        boolean boolean39 = functionNode29.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.Scope scope41 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        int[] intArray48 = new int[] { 25, 17, (short) 0, 20, 19, (byte) 1 };
        functionNode29.addLiveLocals((com.google.javascript.rhino.head.Node) scope41, intArray48);
        functionNode10.addLiveLocals((com.google.javascript.rhino.head.Node) scriptNode28, intArray48);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode10.visit(nodeVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertNull(nodeList36);
        org.junit.Assert.assertNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[25, 17, 0, 20, 19, 1]");
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Symbol symbol2 = new com.google.javascript.rhino.head.ast.Symbol((-1044852625), "                                                                                                                                                                                                        /null/-1\tSCRIPT -1 1\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: -1044852625");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        int int2 = functionNode0.getRegexpCount();
        int int3 = functionNode0.getLp();
        functionNode0.setParens((int) '#', 3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode7.getTop();
        com.google.javascript.rhino.head.ast.Name name10 = null;
        functionNode7.setFunctionName(name10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode12.getTop();
        functionNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode12);
        java.lang.String str15 = functionNode7.getNextTempName();
        java.lang.String str16 = functionNode7.getEncodedSource();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        functionNode22.setEncodedSource("");
        functionNode22.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode18, (com.google.javascript.rhino.head.Node) functionNode22, (com.google.javascript.rhino.head.Node) functionNode28, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode32 = functionNode18.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int34 = functionNode33.getLp();
        functionNode33.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int38 = functionNode37.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = functionNode37.getTop();
        com.google.javascript.rhino.head.ast.Name name40 = null;
        functionNode37.setFunctionName(name40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = functionNode42.getTop();
        functionNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        int int45 = functionNode42.getRp();
        int int46 = functionNode42.getFunctionType();
        functionNode33.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        com.google.javascript.rhino.head.ast.Scope scope48 = functionNode42.getEnclosingScope();
        functionNode18.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        functionNode42.setLp(26);
        functionNode7.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode42);
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.setFinally((com.google.javascript.rhino.head.Node) functionNode42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$0" + "'", str15, "$0");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(astNode32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(scriptNode39);
        org.junit.Assert.assertNotNull(scriptNode43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(scope48);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        functionNode3.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        functionNode7.setEncodedSource("");
        functionNode7.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) functionNode7, (com.google.javascript.rhino.head.Node) functionNode13, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode3.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int30 = functionNode27.getRp();
        int int31 = functionNode27.getFunctionType();
        functionNode18.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.Scope scope33 = functionNode27.getEnclosingScope();
        functionNode3.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int35 = functionNode0.addFunction(functionNode3);
        functionNode0.setEncodedSourceEnd(350469479);
        com.google.javascript.rhino.head.Node node40 = com.google.javascript.rhino.head.Node.newString((int) (byte) 1, "$0");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int42 = functionNode41.getLp();
        functionNode41.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope47 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode48.getTop();
        functionNode48.setParens((int) (byte) 1, (int) (short) 1);
        functionNode48.setEncodedSourceStart((-1));
        functionNode48.setFunctionIsGetter();
        scope47.addChildToFront((com.google.javascript.rhino.head.Node) functionNode48);
        functionNode45.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode48);
        int int58 = functionNode41.addFunction(functionNode45);
        com.google.javascript.rhino.head.ast.Symbol symbol60 = functionNode41.getSymbol("-1\tBLOCK -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int63 = scriptNode62.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol65 = scriptNode62.getSymbol("hi!");
        scriptNode62.putIntProp(3, 0);
        functionNode41.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode62);
        java.lang.String str70 = node40.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode41);
        functionNode0.setParentScope((com.google.javascript.rhino.head.ast.Scope) functionNode41);
        com.google.javascript.rhino.head.ast.AstNode astNode72 = functionNode41.getBody();
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(symbol60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(symbol65);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(astNode72);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        strMap33.clear();
        com.google.javascript.rhino.head.ast.Symbol symbol37 = null;
        com.google.javascript.rhino.head.ast.Symbol symbol38 = strMap33.replace("Symbol (EOF) name=null", symbol37);
        com.google.javascript.rhino.head.ast.Symbol symbol40 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str41 = symbol40.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope42 = symbol40.getContainingTable();
        com.google.javascript.rhino.head.ast.Scope scope43 = symbol40.getContainingTable();
        com.google.javascript.rhino.head.ast.Symbol symbol44 = strMap33.putIfAbsent("/=", symbol40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = symbol44.getName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(symbol38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EOF" + "'", str41, "EOF");
        org.junit.Assert.assertNull(scope42);
        org.junit.Assert.assertNull(scope43);
        org.junit.Assert.assertNull(symbol44);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setLp((int) (short) 1);
        int int6 = functionNode0.getIntProp(4, 26);
        boolean boolean7 = functionNode0.hasChildren();
        java.lang.String str8 = functionNode0.getNextTempName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        com.google.javascript.rhino.head.ast.Name name11 = null;
        functionNode9.setFunctionName(name11);
        functionNode0.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode9);
        com.google.javascript.rhino.head.ast.Name name14 = null;
        functionNode9.setFunctionName(name14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode16.getTop();
        functionNode16.setParens((int) (byte) 1, (int) (short) 1);
        functionNode16.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList23 = functionNode16.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope25 = functionNode16.getDefiningScope("hi!");
        boolean boolean26 = functionNode16.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = functionNode27.getTop();
        com.google.javascript.rhino.head.ast.Name name30 = null;
        functionNode27.setFunctionName(name30);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = functionNode32.getTop();
        functionNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode32);
        int int35 = functionNode32.getRp();
        int int36 = functionNode32.getFunctionType();
        int int37 = functionNode16.addFunction(functionNode32);
        java.lang.String str38 = functionNode16.getNextTempName();
        int int39 = functionNode9.addFunction(functionNode16);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor40 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode9.visit(nodeVisitor40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 26 + "'", int6 == 26);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$0" + "'", str8, "$0");
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertNull(nodeList23);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(scriptNode29);
        org.junit.Assert.assertNotNull(scriptNode33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "$0" + "'", str38, "$0");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getName();
        com.google.javascript.rhino.head.Node node2 = symbol0.getNode();
        symbol0.setIndex(1);
        com.google.javascript.rhino.head.ast.Scope scope5 = symbol0.getContainingTable();
        java.lang.String str6 = symbol0.getName();
        int int7 = symbol0.getDeclType();
        com.google.javascript.rhino.head.Node node8 = symbol0.getNode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(scope5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str4 = functionNode0.toStringTree(scriptNode3);
        functionNode0.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode6 = functionNode0.getBody();
        functionNode0.setParens(21, (int) '#');
        int int10 = functionNode0.getLineno();
        functionNode0.setRp(9);
        functionNode0.setLineno(774094395);
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.setBaseLineno((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(astNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        int int6 = scriptNode4.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode4.getChildScopes();
        jump2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int11 = functionNode10.getLp();
        functionNode10.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        functionNode14.setEncodedSource("");
        functionNode14.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode10, (com.google.javascript.rhino.head.Node) functionNode14, (com.google.javascript.rhino.head.Node) functionNode20, (int) '#');
        jump2.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode10);
        int int25 = functionNode10.getLength();
        boolean boolean26 = functionNode10.isGenerator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = functionNode27.getTop();
        com.google.javascript.rhino.head.ast.Name name30 = null;
        functionNode27.setFunctionName(name30);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = functionNode32.getTop();
        functionNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode32);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((-3285918), (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            functionNode10.replaceChildAfter((com.google.javascript.rhino.head.Node) functionNode27, node37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(scriptNode29);
        org.junit.Assert.assertNotNull(scriptNode33);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        functionNode3.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        functionNode7.setEncodedSource("");
        functionNode7.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) functionNode7, (com.google.javascript.rhino.head.Node) functionNode13, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode3.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int30 = functionNode27.getRp();
        int int31 = functionNode27.getFunctionType();
        functionNode18.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.Scope scope33 = functionNode27.getEnclosingScope();
        functionNode3.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int35 = functionNode0.addFunction(functionNode3);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList36 = functionNode0.getResumptionPoints();
        functionNode0.setLineno(14);
        int int39 = functionNode0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.Name name40 = null;
        functionNode0.setFunctionName(name40);
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(nodeList36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral(32, (int) (byte) 0);
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        int int2 = functionNode0.getRegexpCount();
        functionNode0.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode4 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.setBody(astNode4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: arg cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(26, 26);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        scriptNode1.removeProp(0);
        scriptNode1.setSourceName("109");
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump19.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump19, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        functionNode24.setEncodedSource("");
        functionNode24.flattenSymbolTable(false);
        jump11.addChildAfter((com.google.javascript.rhino.head.Node) jump19, (com.google.javascript.rhino.head.Node) functionNode24);
        com.google.javascript.rhino.head.Node node31 = functionNode24.target;
        boolean boolean32 = functionNode24.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Scope scope33 = functionNode24.getEnclosingScope();
        java.util.List<com.google.javascript.rhino.head.Node> nodeList34 = functionNode24.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        int int51 = scriptNode45.getPosition();
        functionNode24.addParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode45);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int54 = functionNode53.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = functionNode53.getTop();
        com.google.javascript.rhino.head.Node node56 = functionNode53.getLastSibling();
        com.google.javascript.rhino.head.ast.AstNode astNode57 = functionNode53.getMemberExprNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int59 = functionNode58.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode58.getTop();
        com.google.javascript.rhino.head.ast.Name name61 = null;
        functionNode58.setFunctionName(name61);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode63 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = functionNode63.getTop();
        functionNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode63);
        functionNode63.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode69 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int70 = functionNode63.addFunction(functionNode69);
        int int71 = functionNode53.addFunction(functionNode63);
        scriptNode45.replaceWith((com.google.javascript.rhino.head.ast.Scope) functionNode63);
        scriptNode1.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode63);
        functionNode63.setIsGenerator();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(scope33);
        org.junit.Assert.assertNull(nodeList34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(scriptNode55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(astNode57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertNotNull(scriptNode64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor5 = functionNode0.iterator();
        functionNode0.setLp(136);
        int int8 = functionNode0.getFunctionType();
        com.google.javascript.rhino.head.Node node9 = functionNode0.getLastChild();
        int int10 = functionNode0.getParamCount();
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.Node node1 = symbol0.getNode();
        symbol0.setIndex(4);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int6 = scriptNode5.getEndLineno();
        int int7 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        jump10.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode12);
        java.lang.String str17 = scriptNode12.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode5, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode12.target = scope19;
        symbol0.setContainingTable(scope19);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator22 = scope19.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator22.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str17, "-1\tSCRIPT -1 1\n");
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = com.google.javascript.rhino.head.Token.CommentType.JSDOC;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 10, 20, commentType2, "                {\n                }\n");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str9 = functionNode5.toStringTree(scriptNode8);
        int int10 = scriptNode8.getRegexpCount();
        java.lang.Object obj11 = scriptNode8.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        int int22 = scriptNode20.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode20.getChildScopes();
        jump18.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode20);
        java.lang.String str25 = scriptNode20.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode13, (com.google.javascript.rhino.head.ast.Scope) scriptNode20);
        com.google.javascript.rhino.head.ast.Scope scope27 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode20.target = scope27;
        int int29 = scriptNode20.getEncodedSourceStart();
        java.lang.String str30 = scriptNode8.toStringTree(scriptNode20);
        com.google.javascript.rhino.head.Token.CommentType commentType33 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType33, "109");
        java.lang.String str37 = comment35.toSource(19);
        java.lang.String str38 = comment35.getValue();
        java.lang.String str40 = comment35.toSource(2);
        scriptNode20.setJsDocNode(comment35);
        comment4.setJsDocNode(comment35);
        java.lang.String str44 = comment35.toSource((-3));
        org.junit.Assert.assertTrue("'" + commentType2 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.JSDOC + "'", commentType2.equals(com.google.javascript.rhino.head.Token.CommentType.JSDOC));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str25, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + commentType33 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType33.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "                                      109" + "'", str37, "                                      109");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "109" + "'", str38, "109");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "    109" + "'", str40, "    109");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "109" + "'", str44, "109");
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral1 = new com.google.javascript.rhino.head.ast.RegExpLiteral(5);
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        com.google.javascript.rhino.head.Token.CommentType commentType3 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType3, "109");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        comment5.setLength((int) '4');
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode10.getTop();
        functionNode10.setParens((int) (byte) 1, (int) (short) 1);
        functionNode10.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList17 = functionNode10.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope19 = functionNode10.getDefiningScope("hi!");
        boolean boolean20 = functionNode10.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        int[] intArray29 = new int[] { 25, 17, (short) 0, 20, 19, (byte) 1 };
        functionNode10.addLiveLocals((com.google.javascript.rhino.head.Node) scope22, intArray29);
        com.google.javascript.rhino.head.Node node32 = functionNode10.setType(100);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node(10, (com.google.javascript.rhino.head.Node) functionNode10, (int) 'a');
        comment5.addChildToFront(node34);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int38 = scriptNode37.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        scriptNode37.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int44 = functionNode43.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode43.getTop();
        boolean boolean46 = functionNode43.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int49 = scriptNode48.getEndLineno();
        int int50 = scriptNode48.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump53 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int56 = scriptNode55.getEndLineno();
        int int57 = scriptNode55.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList58 = scriptNode55.getChildScopes();
        jump53.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode55);
        java.lang.String str60 = scriptNode55.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode48, (com.google.javascript.rhino.head.ast.Scope) scriptNode55);
        com.google.javascript.rhino.head.ast.Scope scope62 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode55.target = scope62;
        functionNode43.addChildScope(scope62);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode40, (com.google.javascript.rhino.head.ast.Scope) functionNode43);
        int int66 = functionNode43.getFunctionCount();
        com.google.javascript.rhino.head.ast.Scope scope67 = functionNode43.getEnclosingScope();
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (int) '#');
        functionNode43.setCompilerData((java.lang.Object) '#');
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(8, (com.google.javascript.rhino.head.Node) comment5, (com.google.javascript.rhino.head.Node) functionNode43, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = node73.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + commentType3 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType3.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + commentType6 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType6.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertNull(nodeList17);
        org.junit.Assert.assertNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[25, 17, 0, 20, 19, 1]");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(scopeList58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str60, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(scope67);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getName();
        com.google.javascript.rhino.head.Node node2 = symbol0.getNode();
        symbol0.setIndex(1);
        symbol0.setName("-1\tSCRIPT -1 1\n");
        // The following exception was thrown during execution in test generation
        try {
            symbol0.setDeclType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode1.setFunctionName(name3);
        int int5 = functionNode1.getLength();
        com.google.javascript.rhino.head.ast.Scope scope8 = new com.google.javascript.rhino.head.ast.Scope((int) '4');
        functionNode1.putProp(6, (java.lang.Object) scope8);
        int int10 = scope8.getLineno();
        com.google.javascript.rhino.head.ast.Jump jump14 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump14.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump14, 0);
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        functionNode27.setEncodedSource("");
        functionNode27.flattenSymbolTable(false);
        jump14.addChildAfter((com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) functionNode27);
        int int34 = functionNode27.getLength();
        int int35 = functionNode27.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope();
        scope38.setBounds(0, 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = functionNode42.getTop();
        int int44 = functionNode42.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = functionNode42.getEnclosingFunction();
        java.lang.String str46 = scope38.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode47.getTop();
        com.google.javascript.rhino.head.ast.Name name50 = null;
        functionNode47.setFunctionName(name50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = functionNode52.getTop();
        functionNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode52);
        int int55 = functionNode52.getRp();
        functionNode52.setParens(11, 2);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = null;
        functionNode52.setTop(scriptNode59);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int63 = functionNode62.getEncodedSourceStart();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(22, (com.google.javascript.rhino.head.Node) scope38, (com.google.javascript.rhino.head.Node) functionNode52, (com.google.javascript.rhino.head.Node) functionNode62, 0);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(48, (com.google.javascript.rhino.head.Node) scope38);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(1579347477, (com.google.javascript.rhino.head.Node) scope8, (com.google.javascript.rhino.head.Node) functionNode27, (com.google.javascript.rhino.head.Node) scope38, 97);
        java.lang.String str70 = scope8.toSource(16);
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(functionNode45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertNotNull(scriptNode53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "                                {\n                                }\n" + "'", str70, "                                {\n                                }\n");
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = functionNode1.getChildScopes();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = functionNode1.addFunction(functionNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList15);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getName();
        com.google.javascript.rhino.head.Node node2 = symbol0.getNode();
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) ' ');
        symbol0.setNode((com.google.javascript.rhino.head.Node) jump4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int8 = functionNode7.getBaseLineno();
        functionNode7.setSourceName("                                                                                                                                                                                                        /null/");
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int13 = functionNode12.getLp();
        functionNode12.setLp((int) (short) 1);
        int int18 = functionNode12.getIntProp(4, 26);
        functionNode12.flattenSymbolTable(true);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList21 = functionNode12.getParams();
        functionNode7.setParams(astNodeList21);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = functionNode7.getParamAndVarCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 26 + "'", int18 == 26);
        org.junit.Assert.assertNotNull(astNodeList21);
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode3.getTop();
        com.google.javascript.rhino.head.ast.Name name6 = null;
        functionNode3.setFunctionName(name6);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode8.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int15 = functionNode8.addFunction(functionNode14);
        int int16 = jump2.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode14);
        functionNode14.setEncodedSourceStart((int) '4');
        functionNode14.setLength(48);
        functionNode14.setFunctionType(19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        functionNode24.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        functionNode28.setEncodedSource("");
        functionNode28.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode24, (com.google.javascript.rhino.head.Node) functionNode28, (com.google.javascript.rhino.head.Node) functionNode34, (int) '#');
        boolean boolean38 = functionNode34.isGenerator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode((-1262414679));
        com.google.javascript.rhino.head.Token.CommentType commentType45 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType45, "109");
        java.lang.String str49 = comment47.toSource(19);
        java.lang.String str50 = comment47.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType51 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        comment47.setCommentType(commentType51);
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment(9, 6, commentType51, "                    ");
        functionNode40.setJsDocNode(comment54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(25, (com.google.javascript.rhino.head.Node) functionNode14, (com.google.javascript.rhino.head.Node) functionNode34, (com.google.javascript.rhino.head.Node) functionNode40, (int) (short) 10);
        functionNode14.setSourceName("                                            {\n                                            }\n");
        java.lang.Object obj61 = functionNode14.getProp(48);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + commentType45 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType45.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "                                      109" + "'", str49, "                                      109");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "109" + "'", str50, "109");
        org.junit.Assert.assertTrue("'" + commentType51 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType51.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        java.lang.String str3 = scriptNode2.getJsDoc();
        com.google.javascript.rhino.head.Node node5 = scriptNode2.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str10 = functionNode6.toStringTree(scriptNode9);
        com.google.javascript.rhino.head.ast.Scope scope12 = scriptNode9.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList13 = scriptNode9.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int16 = scriptNode15.getEndLineno();
        int int17 = scriptNode15.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode9, (com.google.javascript.rhino.head.ast.Scope) scriptNode15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int24 = scriptNode23.getEndLineno();
        scriptNode20.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode23);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode26.getTop();
        boolean boolean29 = functionNode26.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int32 = scriptNode31.getEndLineno();
        int int33 = scriptNode31.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump36 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int39 = scriptNode38.getEndLineno();
        int int40 = scriptNode38.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList41 = scriptNode38.getChildScopes();
        jump36.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode38);
        java.lang.String str43 = scriptNode38.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode31, (com.google.javascript.rhino.head.ast.Scope) scriptNode38);
        com.google.javascript.rhino.head.ast.Scope scope45 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode38.target = scope45;
        functionNode26.addChildScope(scope45);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode23, (com.google.javascript.rhino.head.ast.Scope) functionNode26);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(20, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode23);
        int int50 = scriptNode23.getEndLineno();
        scriptNode23.setLineno(11);
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(scope12);
        org.junit.Assert.assertNotNull(symbolList13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(scopeList41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str43, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator17 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList15.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator17);
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream19 = functionNodeList15.parallelStream();
        java.lang.Object[] objArray20 = functionNodeList15.toArray();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = functionNodeList15.add(functionNode21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(functionNodeStream19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name4 = null;
        functionNode1.setFunctionName(name4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode6);
        functionNode6.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int13 = functionNode6.addFunction(functionNode12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode15.getTop();
        java.lang.String str17 = scriptNode16.getJsDoc();
        com.google.javascript.rhino.head.Node node19 = scriptNode16.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        com.google.javascript.rhino.head.ast.Scope scope26 = scriptNode23.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(25, node19, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) scriptNode28);
        int int32 = functionNode12.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral34 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral34.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral34.setFlags("/null/-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode39.getTop();
        com.google.javascript.rhino.head.ast.Name name42 = null;
        functionNode39.setFunctionName(name42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        functionNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode44);
        int int47 = functionNode44.getRp();
        int int48 = functionNode44.getFunctionType();
        boolean boolean49 = functionNode44.requiresActivation();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(26, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) regExpLiteral34, (com.google.javascript.rhino.head.Node) functionNode44);
        com.google.javascript.rhino.head.ast.Name name51 = null;
        functionNode44.setFunctionName(name51);
        com.google.javascript.rhino.head.ast.Comment comment53 = functionNode44.getJsDocNode();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode44.visit(nodeVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(comment53);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Scope scope36 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode37.setParens((int) (byte) 1, (int) (short) 1);
        functionNode37.setEncodedSourceStart((-1));
        functionNode37.setFunctionIsGetter();
        scope36.addChildToFront((com.google.javascript.rhino.head.Node) functionNode37);
        functionNode37.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int57 = scriptNode56.getEndLineno();
        int int58 = scriptNode56.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode56.getChildScopes();
        jump54.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode56);
        java.lang.String str61 = scriptNode56.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode49, (com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode56.target = scope63;
        java.lang.String str65 = functionNode37.toStringTree(scriptNode56);
        java.lang.String str67 = scriptNode56.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap68 = scriptNode56.getSymbolTable();
        strMap33.putAll(strMap68);
        com.google.javascript.rhino.head.ast.Symbol symbol71 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str72 = symbol71.getName();
        symbol71.setIndex(0);
        com.google.javascript.rhino.head.ast.Symbol symbol75 = strMap33.replace("                                            /null/", symbol71);
        com.google.javascript.rhino.head.ast.Symbol symbol76 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol76.setIndex(6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int81 = scriptNode80.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode83 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int84 = scriptNode83.getEndLineno();
        scriptNode80.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode83);
        com.google.javascript.rhino.head.ast.Comment comment86 = null;
        scriptNode80.setJsDocNode(comment86);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList88 = scriptNode80.getSymbols();
        symbol76.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode80);
        int int90 = scriptNode80.getLineno();
        boolean boolean91 = strMap33.containsValue((java.lang.Object) int90);
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str61, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "                    {\n                    }\n" + "'", str67, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(symbol75);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(symbolList88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        functionNode5.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int12 = functionNode5.addFunction(functionNode11);
        java.lang.Object obj13 = functionNode5.getCompilerData();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int16 = functionNode15.getBaseLineno();
        functionNode15.setSourceName("                                                                                                                                                                                                        /null/");
        functionNode15.setRequiresActivation();
        com.google.javascript.rhino.head.Node node20 = functionNode15.target;
        int int21 = functionNode15.getLength();
        functionNode5.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = functionNode15.toSource(5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode3.getTop();
        functionNode3.setParens((int) (byte) 1, (int) (short) 1);
        functionNode3.setEncodedSourceStart((-1));
        functionNode3.setFunctionIsGetter();
        scope2.addChildToFront((com.google.javascript.rhino.head.Node) functionNode3);
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode3);
        functionNode0.setRequiresActivation();
        boolean boolean14 = functionNode0.isExpressionClosure();
        functionNode0.setSourceName("hi!");
        int int17 = functionNode0.getFunctionCount();
        com.google.javascript.rhino.head.ast.Name name18 = null;
        functionNode0.setFunctionName(name18);
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode0.replaceWith(scope10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        functionNode14.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        functionNode18.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode14, (com.google.javascript.rhino.head.Node) functionNode18, (com.google.javascript.rhino.head.Node) functionNode24, (int) '#');
        com.google.javascript.rhino.head.ast.Comment comment28 = functionNode24.getJsDocNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope31 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = functionNode32.getTop();
        functionNode32.setParens((int) (byte) 1, (int) (short) 1);
        functionNode32.setEncodedSourceStart((-1));
        functionNode32.setFunctionIsGetter();
        scope31.addChildToFront((com.google.javascript.rhino.head.Node) functionNode32);
        functionNode29.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode32);
        boolean boolean42 = functionNode24.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode29);
        int int43 = functionNode24.getFunctionCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int45 = functionNode44.getLp();
        functionNode44.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int49 = functionNode48.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = functionNode48.getTop();
        com.google.javascript.rhino.head.ast.Name name51 = null;
        functionNode48.setFunctionName(name51);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = functionNode53.getTop();
        functionNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        int int56 = functionNode53.getRp();
        int int57 = functionNode53.getFunctionType();
        functionNode44.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        com.google.javascript.rhino.head.Node node59 = functionNode44.getLastSibling();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) functionNode24, (com.google.javascript.rhino.head.Node) functionNode44);
        functionNode0.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode24);
        com.google.javascript.rhino.head.Node node63 = functionNode0.setType((-440310255));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(comment28);
        org.junit.Assert.assertNotNull(scriptNode33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(scriptNode50);
        org.junit.Assert.assertNotNull(scriptNode54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        java.util.Collection<com.google.javascript.rhino.head.ast.Symbol> symbolCollection35 = strMap33.values();
        java.util.Collection<com.google.javascript.rhino.head.ast.Symbol> symbolCollection36 = strMap33.values();
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet37 = strMap33.entrySet();
        com.google.javascript.rhino.head.ast.Symbol symbol39 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str40 = symbol39.getName();
        com.google.javascript.rhino.head.Node node41 = symbol39.getNode();
        symbol39.setIndex(1);
        com.google.javascript.rhino.head.ast.Scope scope44 = symbol39.getContainingTable();
        java.lang.String str45 = symbol39.getName();
        int int46 = symbol39.getDeclType();
        com.google.javascript.rhino.head.ast.Symbol symbol47 = strMap33.put("/null/", symbol39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = symbol47.getName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(symbolCollection35);
        org.junit.Assert.assertNotNull(symbolCollection36);
        org.junit.Assert.assertNotNull(strEntrySet37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(scope44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(symbol47);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList33 = scriptNode28.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator34 = functionNodeList33.spliterator();
        int int36 = functionNodeList33.indexOf((java.lang.Object) (byte) 10);
        boolean boolean37 = functionNodeList15.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList33);
        boolean boolean38 = functionNodeList15.isEmpty();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        int int42 = scriptNode40.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        jump45.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode47);
        java.lang.String str52 = scriptNode47.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode40, (com.google.javascript.rhino.head.ast.Scope) scriptNode47);
        int int54 = scriptNode40.getBaseLineno();
        boolean boolean55 = functionNodeList15.equals((java.lang.Object) int54);
        com.google.javascript.rhino.head.ast.Jump jump58 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int61 = scriptNode60.getEndLineno();
        int int62 = scriptNode60.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList63 = scriptNode60.getChildScopes();
        jump58.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode60);
        boolean boolean65 = functionNodeList15.equals((java.lang.Object) scriptNode60);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int68 = scriptNode67.getEndLineno();
        int int69 = scriptNode67.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump72 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int75 = scriptNode74.getEndLineno();
        int int76 = scriptNode74.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList77 = scriptNode74.getChildScopes();
        jump72.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode74);
        java.lang.String str79 = scriptNode74.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode67, (com.google.javascript.rhino.head.ast.Scope) scriptNode74);
        com.google.javascript.rhino.head.ast.AstNode astNode81 = scriptNode67.getParent();
        int int82 = scriptNode67.getType();
        com.google.javascript.rhino.head.ast.Symbol symbol84 = scriptNode67.getSymbol("109");
        java.lang.String str85 = scriptNode67.toSource();
        int int86 = scriptNode67.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode87 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode88 = functionNode87.getTop();
        functionNode87.setParens((int) (byte) 1, (int) (short) 1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor92 = functionNode87.iterator();
        functionNode87.setLp(136);
        int int95 = functionNode87.getFunctionType();
        scriptNode67.addChildrenToBack((com.google.javascript.rhino.head.Node) functionNode87);
        boolean boolean97 = functionNodeList15.remove((java.lang.Object) functionNode87);
        com.google.javascript.rhino.head.ast.AstNode astNode98 = functionNode87.getMemberExprNode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray99 = functionNode87.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertNotNull(functionNodeList33);
        org.junit.Assert.assertNotNull(functionNodeSpliterator34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str52, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(scopeList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNull(scopeList77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str79, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(astNode81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 136 + "'", int82 == 136);
        org.junit.Assert.assertNull(symbol84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{\n}\n" + "'", str85, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(scriptNode88);
        org.junit.Assert.assertNotNull(nodeItor92);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(astNode98);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode8.setParens((int) (byte) 1, (int) (short) 1);
        functionNode8.setEncodedSourceStart((-1));
        functionNode8.setFunctionIsGetter();
        scope7.addChildToFront((com.google.javascript.rhino.head.Node) functionNode8);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        int int18 = functionNode1.addFunction(functionNode5);
        java.lang.String str19 = functionNode1.toString();
        int int20 = functionNode1.getFunctionType();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int24 = functionNode23.getBaseLineno();
        boolean boolean25 = functionNode23.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral27 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral27.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str30 = regExpLiteral27.getValue();
        regExpLiteral27.setFlags("52");
        functionNode23.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral27);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node(1, (com.google.javascript.rhino.head.Node) regExpLiteral27);
        com.google.javascript.rhino.head.Node node36 = regExpLiteral27.setType(26);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        functionNode39.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int44 = functionNode43.getLp();
        functionNode43.setEncodedSource("");
        functionNode43.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode49 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int50 = functionNode49.getLp();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode39, (com.google.javascript.rhino.head.Node) functionNode43, (com.google.javascript.rhino.head.Node) functionNode49, (int) '#');
        boolean boolean53 = functionNode49.isGenerator();
        com.google.javascript.rhino.head.ast.Scope scope55 = new com.google.javascript.rhino.head.ast.Scope();
        scope55.setBounds(0, 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode59 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode59.getTop();
        int int61 = functionNode59.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = functionNode59.getEnclosingFunction();
        java.lang.String str63 = scope55.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode59);
        functionNode49.putProp(1, (java.lang.Object) functionNode59);
        functionNode49.setParens(8, (int) (byte) 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int70 = scriptNode69.getEndLineno();
        int int71 = scriptNode69.getBaseLineno();
        com.google.javascript.rhino.head.Node node72 = scriptNode69.getNext();
        com.google.javascript.rhino.head.Node node73 = scriptNode69.getFirstChild();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode74 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int75 = functionNode74.getLp();
        functionNode74.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode78 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope80 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode81 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = functionNode81.getTop();
        functionNode81.setParens((int) (byte) 1, (int) (short) 1);
        functionNode81.setEncodedSourceStart((-1));
        functionNode81.setFunctionIsGetter();
        scope80.addChildToFront((com.google.javascript.rhino.head.Node) functionNode81);
        functionNode78.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode81);
        int int91 = functionNode74.addFunction(functionNode78);
        java.lang.String str92 = functionNode74.toString();
        int int93 = scriptNode69.addFunction(functionNode74);
        com.google.javascript.rhino.head.Node node95 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) functionNode49, (com.google.javascript.rhino.head.Node) scriptNode69, 14);
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node((int) (byte) 100, (com.google.javascript.rhino.head.Node) functionNode1, node36, (com.google.javascript.rhino.head.Node) scriptNode69);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node97 = functionNode1.getDefault();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "109" + "'", str19, "109");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(functionNode62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(scriptNode82);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "109" + "'", str92, "109");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        com.google.javascript.rhino.head.ast.Jump jump1 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode2.getTop();
        com.google.javascript.rhino.head.ast.Name name5 = null;
        functionNode2.setFunctionName(name5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode7.getTop();
        functionNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode7);
        functionNode7.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int14 = functionNode7.addFunction(functionNode13);
        int int15 = jump1.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        functionNodeList34.clear();
        com.google.javascript.rhino.head.ast.Jump jump40 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump40.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump44 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump40, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int47 = scriptNode46.getEndLineno();
        int int48 = scriptNode46.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode46.getChildScopes();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump40, (com.google.javascript.rhino.head.Node) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList51 = scriptNode46.getFunctions();
        boolean boolean52 = functionNodeList34.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList51);
        functionNode17.putProp(20, (java.lang.Object) functionNodeList34);
        int int54 = functionNode13.addFunction(functionNode17);
        functionNode13.setBounds((-3285918), 0);
        boolean boolean58 = functionNode13.hasChildren();
        boolean boolean59 = functionNode13.isGetter();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertNotNull(functionNodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump6.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump6, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump6, (com.google.javascript.rhino.head.Node) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList17 = scriptNode12.getFunctions();
        int int18 = scriptNode12.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode12.getChildScopes();
        int int20 = scriptNode12.getEncodedSourceEnd();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList21 = scriptNode12.getSymbols();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        functionNode22.setEncodedSource("");
        functionNode22.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral29 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str31 = regExpLiteral29.toSource((int) (byte) 10);
        regExpLiteral29.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral29.removeProp(8);
        java.lang.String str36 = regExpLiteral29.getValue();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(7, (com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) functionNode22, (com.google.javascript.rhino.head.Node) regExpLiteral29);
        functionNode22.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.Jump jump40 = new com.google.javascript.rhino.head.ast.Jump(16, (com.google.javascript.rhino.head.Node) functionNode22);
        com.google.javascript.rhino.head.Node node41 = null;
        // The following exception was thrown during execution in test generation
        try {
            jump40.setContinue(node41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertNotNull(functionNodeList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(symbolList21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                    /null/" + "'", str31, "                    /null/");
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int3 = scriptNode2.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int6 = scriptNode5.getEndLineno();
        scriptNode2.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode8.getTop();
        boolean boolean11 = functionNode8.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        int int22 = scriptNode20.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode20.getChildScopes();
        jump18.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode20);
        java.lang.String str25 = scriptNode20.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode13, (com.google.javascript.rhino.head.ast.Scope) scriptNode20);
        com.google.javascript.rhino.head.ast.Scope scope27 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode20.target = scope27;
        functionNode8.addChildScope(scope27);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode5, (com.google.javascript.rhino.head.ast.Scope) functionNode8);
        int int31 = functionNode8.getFunctionCount();
        com.google.javascript.rhino.head.ast.Jump jump33 = new com.google.javascript.rhino.head.ast.Jump(350469479, (com.google.javascript.rhino.head.Node) functionNode8, (-3285918));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = functionNode8.getTop();
        com.google.javascript.rhino.head.Node node35 = scriptNode34.getLastSibling();
        java.lang.String str36 = scriptNode34.getJsDoc();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str25, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(scriptNode34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        int int6 = scriptNode4.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode4.getChildScopes();
        jump2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = scriptNode4.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int11 = functionNode10.getLp();
        functionNode10.setEncodedSource("");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode4, (com.google.javascript.rhino.head.ast.Scope) functionNode10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode15.getTop();
        functionNode15.setParens((int) (byte) 1, (int) (short) 1);
        functionNode15.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList22 = functionNode15.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope24 = functionNode15.getDefiningScope("hi!");
        boolean boolean25 = functionNode15.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode26.getTop();
        com.google.javascript.rhino.head.ast.Name name29 = null;
        functionNode26.setFunctionName(name29);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode31.getTop();
        functionNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode31);
        int int34 = functionNode31.getRp();
        int int35 = functionNode31.getFunctionType();
        int int36 = functionNode15.addFunction(functionNode31);
        functionNode10.setCompilerData((java.lang.Object) functionNode31);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode38 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int39 = functionNode38.getLp();
        functionNode38.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope44 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = functionNode45.getTop();
        functionNode45.setParens((int) (byte) 1, (int) (short) 1);
        functionNode45.setEncodedSourceStart((-1));
        functionNode45.setFunctionIsGetter();
        scope44.addChildToFront((com.google.javascript.rhino.head.Node) functionNode45);
        functionNode42.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        int int55 = functionNode38.addFunction(functionNode42);
        int int56 = functionNode38.getEncodedSourceEnd();
        functionNode31.replaceWith((com.google.javascript.rhino.head.ast.Scope) functionNode38);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode31.visit(nodeVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNull(nodeList22);
        org.junit.Assert.assertNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(scriptNode46);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = scriptNode0.getParamOrVarName(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList33 = scriptNode28.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator34 = functionNodeList33.spliterator();
        int int36 = functionNodeList33.indexOf((java.lang.Object) (byte) 10);
        boolean boolean37 = functionNodeList15.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList33);
        java.lang.Object obj38 = null;
        int int39 = functionNodeList33.lastIndexOf(obj38);
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator40 = functionNodeList33.spliterator();
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor41 = functionNodeList33.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList44 = functionNodeList33.subList(101, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(101) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertNotNull(functionNodeList33);
        org.junit.Assert.assertNotNull(functionNodeSpliterator34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(functionNodeSpliterator40);
        org.junit.Assert.assertNotNull(functionNodeItor41);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        int int6 = scriptNode4.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode4.getChildScopes();
        jump2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = scriptNode4.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode11.getTop();
        com.google.javascript.rhino.head.ast.Name name14 = null;
        functionNode11.setFunctionName(name14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode16.getTop();
        functionNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode16);
        functionNode16.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int23 = functionNode16.addFunction(functionNode22);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = functionNode25.getTop();
        java.lang.String str27 = scriptNode26.getJsDoc();
        com.google.javascript.rhino.head.Node node29 = scriptNode26.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str34 = functionNode30.toStringTree(scriptNode33);
        com.google.javascript.rhino.head.ast.Scope scope36 = scriptNode33.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int39 = scriptNode38.getEndLineno();
        int int40 = scriptNode38.getBaseLineno();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(25, node29, (com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scriptNode38);
        int int42 = functionNode22.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral44 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral44.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral44.setValue("hi!");
        com.google.javascript.rhino.head.ast.Jump jump52 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump52.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump56 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump52, 0);
        java.lang.String str57 = jump52.toString();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) regExpLiteral44, (com.google.javascript.rhino.head.Node) jump52);
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        functionNode60.setEncodedSource("");
        functionNode60.flattenSymbolTable(false);
        boolean boolean66 = functionNode60.requiresActivation();
        java.lang.String str67 = functionNode60.getEncodedSource();
        com.google.javascript.rhino.head.Node node69 = functionNode60.setType(19);
        functionNode60.setRp(0);
        scriptNode4.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode60);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode74 = scriptNode4.getFunctionNode((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(scope36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "52" + "'", str57, "52");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        functionNodeList15.clear();
        int int19 = functionNodeList15.indexOf((java.lang.Object) 10L);
        com.google.javascript.rhino.head.ast.Jump jump24 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump24.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump24, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        int int32 = scriptNode30.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode30.getChildScopes();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump24, (com.google.javascript.rhino.head.Node) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode30.getFunctions();
        functionNodeList35.clear();
        functionNodeList35.clear();
        com.google.javascript.rhino.head.ast.Jump jump42 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump42.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump46 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump42, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int49 = scriptNode48.getEndLineno();
        int int50 = scriptNode48.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode48.getChildScopes();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump42, (com.google.javascript.rhino.head.Node) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList53 = scriptNode48.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator54 = functionNodeList53.spliterator();
        int int56 = functionNodeList53.indexOf((java.lang.Object) (byte) 10);
        boolean boolean57 = functionNodeList35.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList53);
        boolean boolean58 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList35);
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator59 = functionNodeList35.spliterator();
        com.google.javascript.rhino.head.ast.Jump jump64 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump64.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump68 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump64, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int71 = scriptNode70.getEndLineno();
        int int72 = scriptNode70.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode70.getChildScopes();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump64, (com.google.javascript.rhino.head.Node) scriptNode70);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList75 = scriptNode70.getFunctions();
        functionNodeList75.clear();
        functionNodeList75.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor78 = functionNodeList75.iterator();
        int int79 = functionNodeList75.size();
        int int80 = functionNodeList75.size();
        boolean boolean81 = functionNodeList35.containsAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList75);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode83 = functionNodeList75.get(21);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 21");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertNotNull(functionNodeList53);
        org.junit.Assert.assertNotNull(functionNodeSpliterator54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(functionNodeSpliterator59);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertNotNull(functionNodeList75);
        org.junit.Assert.assertNotNull(functionNodeItor78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name2 = null;
        functionNode0.setFunctionName(name2);
        int int4 = functionNode0.getLength();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope((int) '4');
        functionNode0.putProp(6, (java.lang.Object) scope7);
        functionNode0.setEncodedSourceStart(9);
        com.google.javascript.rhino.head.ast.Scope scope11 = functionNode0.getParentScope();
        boolean boolean12 = functionNode0.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump18.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump18, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int25 = scriptNode24.getEndLineno();
        int int26 = scriptNode24.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList27 = scriptNode24.getChildScopes();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump18, (com.google.javascript.rhino.head.Node) scriptNode24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral33 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str35 = regExpLiteral33.toSource((int) (byte) 10);
        regExpLiteral33.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral33.removeProp(8);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(10, node28, (com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) regExpLiteral33, 3);
        java.lang.String str43 = regExpLiteral33.makeIndent((int) (short) 100);
        int int44 = regExpLiteral33.getType();
        functionNode0.addRegExp(regExpLiteral33);
        boolean boolean46 = functionNode0.isExpressionClosure();
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(scope11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(scopeList27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                    /null/" + "'", str35, "                    /null/");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "                                                                                                                                                                                                        " + "'", str43, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 48 + "'", int44 == 48);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = functionNode0.getSymbols();
        int int5 = functionNode0.getLength();
        boolean boolean6 = functionNode0.isGetterOrSetter();
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap7 = functionNode0.getLiveLocals();
        functionNode0.setFunctionType(23);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int13 = functionNode12.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode12.getTop();
        com.google.javascript.rhino.head.ast.Name name15 = null;
        functionNode12.setFunctionName(name15);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode17.getTop();
        functionNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode17);
        functionNode17.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int24 = functionNode17.addFunction(functionNode23);
        int int25 = jump11.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        scriptNode27.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode30);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int34 = functionNode33.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = functionNode33.getTop();
        boolean boolean36 = functionNode33.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int39 = scriptNode38.getEndLineno();
        int int40 = scriptNode38.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        jump43.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode45);
        java.lang.String str50 = scriptNode45.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode38, (com.google.javascript.rhino.head.ast.Scope) scriptNode45);
        com.google.javascript.rhino.head.ast.Scope scope52 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode45.target = scope52;
        functionNode33.addChildScope(scope52);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode30, (com.google.javascript.rhino.head.ast.Scope) functionNode33);
        int int56 = functionNode33.getFunctionCount();
        int int57 = functionNode33.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot58 = functionNode33.getAstRoot();
        functionNode33.setParens(10, 17);
        com.google.javascript.rhino.head.ast.Jump jump64 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.Scope scope66 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        jump64.addChildrenToBack((com.google.javascript.rhino.head.Node) scope66);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode68 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int69 = functionNode68.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = functionNode68.getTop();
        com.google.javascript.rhino.head.ast.Name name71 = null;
        functionNode68.setFunctionName(name71);
        functionNode68.setIsGenerator();
        java.lang.String str74 = functionNode68.getEncodedSource();
        scope66.target = functionNode68;
        functionNode68.setFunctionIsSetter();
        functionNode33.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode68);
        com.google.javascript.rhino.head.ast.Symbol symbol79 = functionNode33.getSymbol("                    /null/-1\tSCRIPT -1 1\n");
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList80 = functionNode33.getStatements();
        functionNode23.setParams(astNodeList80);
        functionNode0.setParams(astNodeList80);
        com.google.javascript.rhino.head.ast.Symbol symbol84 = functionNode0.getSymbol("          /null/");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(nodeMap7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(scriptNode35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str50, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(astRoot58);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(scriptNode70);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(symbol79);
        org.junit.Assert.assertNotNull(astNodeList80);
        org.junit.Assert.assertNull(symbol84);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        java.lang.String str1 = com.google.javascript.rhino.head.ast.AstNode.operatorToString((int) 'a');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "+=" + "'", str1, "+=");
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        com.google.javascript.rhino.head.Node node23 = functionNode16.target;
        boolean boolean24 = functionNode16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Scope scope25 = functionNode16.getEnclosingScope();
        java.util.List<com.google.javascript.rhino.head.Node> nodeList26 = functionNode16.getResumptionPoints();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode28.getTop();
        boolean boolean31 = functionNode28.hasSideEffects();
        java.lang.String str32 = functionNode28.toString();
        functionNode28.setParens((int) (short) 10, 8);
        com.google.javascript.rhino.head.ast.Jump jump37 = new com.google.javascript.rhino.head.ast.Jump(22, (com.google.javascript.rhino.head.Node) functionNode28, 12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        functionNode39.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int44 = functionNode43.getLp();
        functionNode43.setEncodedSource("");
        functionNode43.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode49 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int50 = functionNode49.getLp();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode39, (com.google.javascript.rhino.head.Node) functionNode43, (com.google.javascript.rhino.head.Node) functionNode49, (int) '#');
        boolean boolean53 = functionNode49.isGenerator();
        int int54 = functionNode49.getFunctionType();
        com.google.javascript.rhino.head.Node node55 = functionNode49.getFirstChild();
        boolean boolean56 = functionNode49.isGetterOrSetter();
        functionNode49.flattenSymbolTable(false);
        functionNode28.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode49);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int62 = scriptNode61.getEndLineno();
        int int63 = scriptNode61.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump66 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int69 = scriptNode68.getEndLineno();
        int int70 = scriptNode68.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList71 = scriptNode68.getChildScopes();
        jump66.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode68);
        java.lang.String str73 = scriptNode68.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode61, (com.google.javascript.rhino.head.ast.Scope) scriptNode68);
        com.google.javascript.rhino.head.ast.AstNode astNode75 = scriptNode61.getParent();
        int int76 = scriptNode61.getType();
        com.google.javascript.rhino.head.ast.Symbol symbol78 = scriptNode61.getSymbol("109");
        java.lang.String str79 = scriptNode61.toSource();
        int int80 = scriptNode61.getParamCount();
        functionNode49.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode61);
        functionNode16.setCompilerData((java.lang.Object) scriptNode61);
        scriptNode61.setBounds(12, (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNull(nodeList26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "109" + "'", str32, "109");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(scopeList71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str73, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(astNode75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 136 + "'", int76 == 136);
        org.junit.Assert.assertNull(symbol78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{\n}\n" + "'", str79, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        com.google.javascript.rhino.head.ast.Jump jump1 = new com.google.javascript.rhino.head.ast.Jump((-3285918));
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        int int18 = functionNodeList15.lastIndexOf((java.lang.Object) (-1L));
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        functionNodeList34.clear();
        int int37 = functionNodeList34.lastIndexOf((java.lang.Object) (-1L));
        boolean boolean38 = functionNodeList15.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList34);
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump43.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump43, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode49.getChildScopes();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump43, (com.google.javascript.rhino.head.Node) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode49.getFunctions();
        int int55 = functionNodeList15.indexOf((java.lang.Object) scriptNode49);
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int59 = scriptNode58.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol60 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str61 = symbol60.getName();
        com.google.javascript.rhino.head.Node node62 = symbol60.getNode();
        com.google.javascript.rhino.head.ast.Jump jump64 = new com.google.javascript.rhino.head.ast.Jump((int) ' ');
        symbol60.setNode((com.google.javascript.rhino.head.Node) jump64);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode67 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int68 = functionNode67.getBaseLineno();
        functionNode67.setSourceName("                                                                                                                                                                                                        /null/");
        symbol60.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode67);
        int int72 = functionNode67.getLp();
        int int73 = functionNode67.getType();
        java.lang.String str74 = scriptNode58.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode67);
        com.google.javascript.rhino.head.ast.AstNode astNode75 = functionNode67.getBody();
        functionNode67.setParens(24, 774094395);
        boolean boolean79 = functionNodeList15.remove((java.lang.Object) 774094395);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 109 + "'", int73 == 109);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(astNode75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str4 = regExpLiteral2.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = regExpLiteral2.new NodeIterator();
        java.lang.String str7 = regExpLiteral2.toSource(100);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode8.getTop();
        com.google.javascript.rhino.head.ast.Name name11 = null;
        functionNode8.setFunctionName(name11);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        functionNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        java.lang.String str16 = functionNode8.getNextTempName();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(350469479, (com.google.javascript.rhino.head.Node) regExpLiteral2, (com.google.javascript.rhino.head.Node) functionNode8, 7);
        functionNode8.setFunctionIsGetter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = functionNode8.getRegexpFlags(16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "                    /null/" + "'", str4, "                    /null/");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                                                                                                                                                                        /null/" + "'", str7, "                                                                                                                                                                                                        /null/");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$0" + "'", str16, "$0");
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        functionNode2.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        functionNode6.setEncodedSource("");
        functionNode6.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int13 = functionNode12.getLp();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode2, (com.google.javascript.rhino.head.Node) functionNode6, (com.google.javascript.rhino.head.Node) functionNode12, (int) '#');
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        int int22 = scriptNode20.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode20.getChildScopes();
        jump18.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode20);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor25 = scriptNode20.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        functionNode26.setEncodedSource("");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode20, (com.google.javascript.rhino.head.ast.Scope) functionNode26);
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump35.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump35, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int42 = scriptNode41.getEndLineno();
        int int43 = scriptNode41.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList44 = scriptNode41.getChildScopes();
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump35, (com.google.javascript.rhino.head.Node) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList46 = scriptNode41.getFunctions();
        functionNodeList46.clear();
        int int49 = functionNodeList46.lastIndexOf((java.lang.Object) (-1L));
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump54.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump58 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump54, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int61 = scriptNode60.getEndLineno();
        int int62 = scriptNode60.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList63 = scriptNode60.getChildScopes();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump54, (com.google.javascript.rhino.head.Node) scriptNode60);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList65 = scriptNode60.getFunctions();
        functionNodeList65.clear();
        int int68 = functionNodeList65.lastIndexOf((java.lang.Object) (-1L));
        boolean boolean69 = functionNodeList46.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList65);
        com.google.javascript.rhino.head.ast.Jump jump74 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump74.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump78 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump74, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int81 = scriptNode80.getEndLineno();
        int int82 = scriptNode80.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList83 = scriptNode80.getChildScopes();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump74, (com.google.javascript.rhino.head.Node) scriptNode80);
        com.google.javascript.rhino.head.Node node86 = scriptNode80.setType(0);
        int int87 = functionNodeList65.lastIndexOf((java.lang.Object) scriptNode80);
        functionNode12.addChildAfter((com.google.javascript.rhino.head.Node) functionNode26, (com.google.javascript.rhino.head.Node) scriptNode80);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode90 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int91 = functionNode90.getEncodedSourceStart();
        int int92 = functionNode90.getFunctionCount();
        functionNode26.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode90);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode94 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int95 = functionNode94.getLp();
        functionNode90.target = functionNode94;
        com.google.javascript.rhino.head.ast.Jump jump97 = new com.google.javascript.rhino.head.ast.Jump((-592978996), (com.google.javascript.rhino.head.Node) functionNode90);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertNotNull(nodeItor25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(scopeList44);
        org.junit.Assert.assertNotNull(functionNodeList46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(scopeList63);
        org.junit.Assert.assertNotNull(functionNodeList65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNull(scopeList83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        functionNode3.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        functionNode7.setEncodedSource("");
        functionNode7.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) functionNode7, (com.google.javascript.rhino.head.Node) functionNode13, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode3.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int30 = functionNode27.getRp();
        int int31 = functionNode27.getFunctionType();
        functionNode18.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.Scope scope33 = functionNode27.getEnclosingScope();
        functionNode3.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int35 = functionNode0.addFunction(functionNode3);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList36 = functionNode0.getResumptionPoints();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int38 = functionNode37.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = functionNode37.getTop();
        com.google.javascript.rhino.head.ast.Name name40 = null;
        functionNode37.setFunctionName(name40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = functionNode42.getTop();
        functionNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        functionNode42.setEncodedSourceStart(6);
        functionNode42.setRelative((-1));
        boolean boolean49 = functionNode0.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        functionNode0.setEncodedSourceEnd((-1));
        com.google.javascript.rhino.head.ast.Scope scope53 = functionNode0.getDefiningScope("                                                ");
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(nodeList36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(scriptNode39);
        org.junit.Assert.assertNotNull(scriptNode43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(scope53);
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.Node node3 = functionNode0.getLastSibling();
        com.google.javascript.rhino.head.ast.AstNode astNode4 = functionNode0.getMemberExprNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode5.getTop();
        com.google.javascript.rhino.head.ast.Name name8 = null;
        functionNode5.setFunctionName(name8);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode10.getTop();
        functionNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode10);
        functionNode10.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int17 = functionNode10.addFunction(functionNode16);
        int int18 = functionNode0.addFunction(functionNode10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setLp((int) (short) 1);
        int int25 = functionNode19.getIntProp(4, 26);
        boolean boolean26 = functionNode19.hasChildren();
        java.lang.String str27 = functionNode19.getNextTempName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode28.getTop();
        com.google.javascript.rhino.head.ast.Name name31 = null;
        functionNode28.setFunctionName(name31);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = functionNode33.getTop();
        functionNode28.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode33);
        functionNode33.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = functionNode40.getTop();
        com.google.javascript.rhino.head.ast.Name name43 = null;
        functionNode40.setFunctionName(name43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = functionNode45.getTop();
        functionNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        functionNode45.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int52 = functionNode45.addFunction(functionNode51);
        int int53 = jump39.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode51);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump61.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump65 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump61, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int68 = scriptNode67.getEndLineno();
        int int69 = scriptNode67.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList70 = scriptNode67.getChildScopes();
        com.google.javascript.rhino.head.Node node71 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump61, (com.google.javascript.rhino.head.Node) scriptNode67);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList72 = scriptNode67.getFunctions();
        functionNodeList72.clear();
        com.google.javascript.rhino.head.ast.Jump jump78 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump78.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump82 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump78, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode84 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int85 = scriptNode84.getEndLineno();
        int int86 = scriptNode84.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList87 = scriptNode84.getChildScopes();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump78, (com.google.javascript.rhino.head.Node) scriptNode84);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList89 = scriptNode84.getFunctions();
        boolean boolean90 = functionNodeList72.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList89);
        functionNode55.putProp(20, (java.lang.Object) functionNodeList72);
        int int92 = functionNode51.addFunction(functionNode55);
        functionNode33.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode51);
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap94 = functionNode33.getLiveLocals();
        functionNode33.setFunctionType(16);
        functionNode19.setTop((com.google.javascript.rhino.head.ast.ScriptNode) functionNode33);
        functionNode0.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode33);
        functionNode33.setIsGenerator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(astNode4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26 + "'", int25 == 26);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "$0" + "'", str27, "$0");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertNotNull(scriptNode34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(scriptNode42);
        org.junit.Assert.assertNotNull(scriptNode46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(scopeList70);
        org.junit.Assert.assertNotNull(functionNodeList72);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(scopeList87);
        org.junit.Assert.assertNotNull(functionNodeList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(nodeMap94);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.Node node2 = scriptNode1.getFirstChild();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        functionNode4.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        functionNode8.setEncodedSource("");
        functionNode8.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode4, (com.google.javascript.rhino.head.Node) functionNode8, (com.google.javascript.rhino.head.Node) functionNode14, (int) '#');
        boolean boolean18 = functionNode14.isGenerator();
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scope20.setBounds(0, 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode24.getTop();
        int int26 = functionNode24.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = functionNode24.getEnclosingFunction();
        java.lang.String str28 = scope20.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode24);
        functionNode14.putProp(1, (java.lang.Object) functionNode24);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode30.getTop();
        com.google.javascript.rhino.head.ast.Name name33 = null;
        functionNode30.setFunctionName(name33);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode35.getTop();
        functionNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode35);
        functionNode35.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int42 = functionNode35.addFunction(functionNode41);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        java.lang.String str46 = scriptNode45.getJsDoc();
        com.google.javascript.rhino.head.Node node48 = scriptNode45.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode49 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int50 = functionNode49.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str53 = functionNode49.toStringTree(scriptNode52);
        com.google.javascript.rhino.head.ast.Scope scope55 = scriptNode52.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int58 = scriptNode57.getEndLineno();
        int int59 = scriptNode57.getBaseLineno();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(25, node48, (com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scriptNode57);
        int int61 = functionNode41.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        functionNode24.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode52);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList64 = scriptNode52.getFunctions();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode52.visit(nodeVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(functionNode27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(scope55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(functionNodeList64);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name4 = null;
        functionNode1.setFunctionName(name4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode6);
        functionNode6.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int13 = functionNode6.addFunction(functionNode12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode15.getTop();
        java.lang.String str17 = scriptNode16.getJsDoc();
        com.google.javascript.rhino.head.Node node19 = scriptNode16.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        com.google.javascript.rhino.head.ast.Scope scope26 = scriptNode23.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(25, node19, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) scriptNode28);
        int int32 = functionNode12.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral34 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral34.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral34.setFlags("/null/-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode39.getTop();
        com.google.javascript.rhino.head.ast.Name name42 = null;
        functionNode39.setFunctionName(name42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        functionNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode44);
        int int47 = functionNode44.getRp();
        int int48 = functionNode44.getFunctionType();
        boolean boolean49 = functionNode44.requiresActivation();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(26, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) regExpLiteral34, (com.google.javascript.rhino.head.Node) functionNode44);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = regExpLiteral34.getEnclosingFunction();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor52 = regExpLiteral34.iterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeItor52.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(functionNode51);
        org.junit.Assert.assertNotNull(nodeItor52);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator16 = functionNodeList15.spliterator();
        int int18 = functionNodeList15.indexOf((java.lang.Object) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope((-1));
        java.lang.String str22 = scope20.toSource((int) (byte) 1);
        boolean boolean23 = functionNodeList15.equals((java.lang.Object) scope20);
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump27.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump27, 0);
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump35.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump35, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        functionNode40.setEncodedSource("");
        functionNode40.flattenSymbolTable(false);
        jump27.addChildAfter((com.google.javascript.rhino.head.Node) jump35, (com.google.javascript.rhino.head.Node) functionNode40);
        com.google.javascript.rhino.head.Node node47 = functionNode40.target;
        boolean boolean48 = functionNode40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Scope scope49 = functionNode40.getEnclosingScope();
        java.util.List<com.google.javascript.rhino.head.Node> nodeList50 = functionNode40.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Jump jump55 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump55.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump59 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump55, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int62 = scriptNode61.getEndLineno();
        int int63 = scriptNode61.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList64 = scriptNode61.getChildScopes();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump55, (com.google.javascript.rhino.head.Node) scriptNode61);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList66 = scriptNode61.getFunctions();
        int int67 = scriptNode61.getPosition();
        functionNode40.addParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode61);
        com.google.javascript.rhino.head.Node node70 = scriptNode61.setType((-18802601));
        boolean boolean71 = functionNodeList15.contains((java.lang.Object) (-18802601));
        com.google.javascript.rhino.head.ast.FunctionNode functionNode72 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int73 = functionNode72.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = functionNode72.getTop();
        com.google.javascript.rhino.head.ast.Name name75 = null;
        functionNode72.setFunctionName(name75);
        int int77 = functionNode72.getRegexpCount();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = functionNodeList15.add(functionNode72);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNotNull(functionNodeSpliterator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  {\n  }\n" + "'", str22, "  {\n  }\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(scope49);
        org.junit.Assert.assertNull(nodeList50);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(scopeList64);
        org.junit.Assert.assertNotNull(functionNodeList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(scriptNode74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode15.getTop();
        com.google.javascript.rhino.head.Node node18 = functionNode15.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList19 = functionNode15.getParams();
        functionNode0.setParams(astNodeList19);
        functionNode0.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int24 = functionNode23.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode23.getTop();
        com.google.javascript.rhino.head.ast.Name name26 = null;
        functionNode23.setFunctionName(name26);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = functionNode28.getTop();
        functionNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        int int31 = functionNode28.getRp();
        functionNode28.setParens(11, 2);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode((-1));
        int int37 = functionNode28.addFunction(functionNode36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int40 = scriptNode39.getEndLineno();
        int int41 = scriptNode39.getBaseLineno();
        scriptNode39.removeProp(0);
        scriptNode39.setEncodedSourceEnd(19);
        java.lang.String str46 = scriptNode39.toString();
        int[] intArray48 = new int[] { 26 };
        functionNode28.addLiveLocals((com.google.javascript.rhino.head.Node) scriptNode39, intArray48);
        com.google.javascript.rhino.head.Node node51 = scriptNode39.setType((int) (short) 0);
        java.lang.String str53 = scriptNode39.toSource(15);
        functionNode0.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.visit(nodeVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(astNodeList19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertNotNull(scriptNode29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "136" + "'", str46, "136");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[26]");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "                              {\n                              }\n" + "'", str53, "                              {\n                              }\n");
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.Node node1 = symbol0.getNode();
        symbol0.setIndex(4);
        symbol0.setName("");
        com.google.javascript.rhino.head.ast.Scope scope6 = symbol0.getContainingTable();
        int int7 = symbol0.getDeclType();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNull(scope6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol0.setIndex(6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int8 = scriptNode7.getEndLineno();
        scriptNode4.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode7);
        com.google.javascript.rhino.head.ast.Comment comment10 = null;
        scriptNode4.setJsDocNode(comment10);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList12 = scriptNode4.getSymbols();
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode4);
        com.google.javascript.rhino.head.ast.Scope scope14 = symbol0.getContainingTable();
        java.lang.String str15 = symbol0.getName();
        symbol0.setName("/null/-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int21 = functionNode20.getBaseLineno();
        boolean boolean22 = functionNode20.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral24 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral24.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str27 = regExpLiteral24.getValue();
        regExpLiteral24.setFlags("52");
        functionNode20.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral24);
        boolean boolean31 = functionNode20.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.Jump jump34 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int37 = scriptNode36.getEndLineno();
        int int38 = scriptNode36.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode36.getChildScopes();
        jump34.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode36);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor41 = scriptNode36.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int43 = functionNode42.getLp();
        functionNode42.setEncodedSource("");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode36, (com.google.javascript.rhino.head.ast.Scope) functionNode42);
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (byte) 1, (com.google.javascript.rhino.head.Node) functionNode20, (com.google.javascript.rhino.head.Node) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = functionNode20.getChildScopes();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode49 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int50 = functionNode49.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = functionNode49.getTop();
        com.google.javascript.rhino.head.ast.Name name52 = null;
        functionNode49.setFunctionName(name52);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode54 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = functionNode54.getTop();
        functionNode49.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode54);
        int int57 = functionNode54.getRp();
        java.lang.String str58 = functionNode54.getSourceName();
        functionNode54.setParens(14, (int) '#');
        int int62 = functionNode20.addFunction(functionNode54);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode64 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int65 = functionNode64.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str68 = functionNode64.toStringTree(scriptNode67);
        functionNode64.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode70 = functionNode64.getBody();
        functionNode64.setParens(21, (int) '#');
        int int74 = functionNode64.getLp();
        com.google.javascript.rhino.head.ast.Jump jump79 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump79.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump83 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump79, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int86 = scriptNode85.getEndLineno();
        int int87 = scriptNode85.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList88 = scriptNode85.getChildScopes();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump79, (com.google.javascript.rhino.head.Node) scriptNode85);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList90 = scriptNode85.getChildScopes();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList91 = scriptNode85.getSymbols();
        functionNode64.setSymbols(symbolList91);
        functionNode20.putProp(19, (java.lang.Object) functionNode64);
        java.lang.String str95 = functionNode20.makeIndent(16);
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode20);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(symbolList12);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertNotNull(nodeItor41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(scriptNode51);
        org.junit.Assert.assertNotNull(scriptNode55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(astNode70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 21 + "'", int74 == 21);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNull(scopeList88);
        org.junit.Assert.assertNull(scopeList90);
        org.junit.Assert.assertNotNull(symbolList91);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "                                " + "'", str95, "                                ");
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.AstNode astNode5 = null;
        functionNode0.setParent(astNode5);
        boolean boolean7 = functionNode0.isGetter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = functionNode0.toSource((-616130778));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        boolean boolean31 = functionNode2.hasConsistentReturnUsage();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = functionNode2.getChildScopes();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(scopeList32);
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(4, name1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode4.getTop();
        functionNode4.setParens((int) (byte) 1, (int) (short) 1);
        int int9 = functionNode4.getRp();
        com.google.javascript.rhino.head.Node node12 = com.google.javascript.rhino.head.Node.newString((int) (byte) 100, "");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str17 = functionNode13.toStringTree(scriptNode16);
        com.google.javascript.rhino.head.ast.Scope scope19 = scriptNode16.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList20 = scriptNode16.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int23 = scriptNode22.getEndLineno();
        int int24 = scriptNode22.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode16, (com.google.javascript.rhino.head.ast.Scope) scriptNode22);
        java.lang.String str26 = scriptNode22.getEncodedSource();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) functionNode4, node12, (com.google.javascript.rhino.head.Node) scriptNode22, (int) (short) 0);
        functionNode2.setTop(scriptNode22);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = functionNode2.getFunctionNode(3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(scope19);
        org.junit.Assert.assertNotNull(symbolList20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        com.google.javascript.rhino.head.ast.Jump jump5 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump5.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump5, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int12 = scriptNode11.getEndLineno();
        int int13 = scriptNode11.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump5, (com.google.javascript.rhino.head.Node) scriptNode11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int18 = scriptNode17.getEndLineno();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral20 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str22 = regExpLiteral20.toSource((int) (byte) 10);
        regExpLiteral20.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral20.removeProp(8);
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(10, node15, (com.google.javascript.rhino.head.Node) scriptNode17, (com.google.javascript.rhino.head.Node) regExpLiteral20, 3);
        java.lang.String str30 = regExpLiteral20.makeIndent((int) (short) 100);
        java.lang.String str32 = regExpLiteral20.toSource((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int36 = functionNode35.getLp();
        functionNode35.setLp((int) (short) 1);
        int int41 = functionNode35.getIntProp(4, 26);
        com.google.javascript.rhino.head.ast.Jump jump42 = new com.google.javascript.rhino.head.ast.Jump(3, (com.google.javascript.rhino.head.Node) functionNode35);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) functionNode35);
        functionNode35.setFunctionType(11);
        regExpLiteral20.addChildToFront((com.google.javascript.rhino.head.Node) functionNode35);
        com.google.javascript.rhino.head.ast.Jump jump49 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.Scope scope51 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        jump49.addChildrenToBack((com.google.javascript.rhino.head.Node) scope51);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int54 = functionNode53.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = functionNode53.getTop();
        com.google.javascript.rhino.head.ast.Name name56 = null;
        functionNode53.setFunctionName(name56);
        functionNode53.setIsGenerator();
        java.lang.String str59 = functionNode53.getEncodedSource();
        scope51.target = functionNode53;
        functionNode35.setTop((com.google.javascript.rhino.head.ast.ScriptNode) functionNode53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                    /null/" + "'", str22, "                    /null/");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "                                                                                                                                                                                                        " + "'", str30, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    /null/-1\tSCRIPT -1 1\n" + "'", str32, "                    /null/-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 26 + "'", int41 == 26);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(scriptNode55);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getName();
        com.google.javascript.rhino.head.Node node2 = symbol0.getNode();
        symbol0.setIndex(1);
        com.google.javascript.rhino.head.ast.Scope scope5 = symbol0.getContainingTable();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        functionNode6.setLineno(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int11 = functionNode10.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = functionNode10.getTop();
        boolean boolean13 = functionNode10.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList14 = functionNode10.getSymbols();
        functionNode10.setRp(5);
        com.google.javascript.rhino.head.ast.Scope scope17 = functionNode10.getEnclosingScope();
        functionNode10.setLineno(5);
        functionNode6.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode10);
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode6);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral22 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode6.addRegExp(regExpLiteral22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(scope5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(scriptNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(symbolList14);
        org.junit.Assert.assertNull(scope17);
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        int int18 = functionNodeList15.lastIndexOf((java.lang.Object) (-1L));
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        functionNodeList34.clear();
        int int37 = functionNodeList34.lastIndexOf((java.lang.Object) (-1L));
        boolean boolean38 = functionNodeList15.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList34);
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump43.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump43, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode49.getChildScopes();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump43, (com.google.javascript.rhino.head.Node) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode49.getFunctions();
        int int55 = functionNodeList15.indexOf((java.lang.Object) scriptNode49);
        java.lang.Object obj56 = null;
        boolean boolean57 = functionNodeList15.contains(obj56);
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream58 = functionNodeList15.stream();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode59 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int60 = functionNode59.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str63 = functionNode59.toStringTree(scriptNode62);
        functionNode59.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode65 = functionNode59.getBody();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList66 = functionNode59.getParams();
        int int67 = functionNode59.getFunctionType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = functionNodeList15.add(functionNode59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(functionNodeStream58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(astNode65);
        org.junit.Assert.assertNotNull(astNodeList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.ast.Scope scope15 = functionNode9.getEnclosingScope();
        int int16 = functionNode9.getLineno();
        boolean boolean17 = functionNode9.isExpressionClosure();
        int int18 = functionNode9.getRp();
        functionNode9.setEncodedSourceEnd(16);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int42 = functionNode39.getRp();
        java.lang.Object obj43 = functionNode39.getCompilerData();
        boolean boolean44 = strMap33.containsKey(obj43);
        com.google.javascript.rhino.head.ast.Symbol symbol46 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol46.setIndex(6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int51 = scriptNode50.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int54 = scriptNode53.getEndLineno();
        scriptNode50.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode53);
        com.google.javascript.rhino.head.ast.Comment comment56 = null;
        scriptNode50.setJsDocNode(comment56);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList58 = scriptNode50.getSymbols();
        symbol46.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode50);
        com.google.javascript.rhino.head.ast.Symbol symbol60 = strMap33.putIfAbsent("{\n}\n", symbol46);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode61 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = functionNode61.getTop();
        functionNode61.setParens((int) (byte) 1, (int) (short) 1);
        functionNode61.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList68 = functionNode61.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope70 = functionNode61.getDefiningScope("hi!");
        boolean boolean71 = functionNode61.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode72 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int73 = functionNode72.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = functionNode72.getTop();
        com.google.javascript.rhino.head.ast.Name name75 = null;
        functionNode72.setFunctionName(name75);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode77 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = functionNode77.getTop();
        functionNode72.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode77);
        int int80 = functionNode77.getRp();
        int int81 = functionNode77.getFunctionType();
        int int82 = functionNode61.addFunction(functionNode77);
        functionNode77.setRp((-1));
        java.lang.String str85 = functionNode77.getName();
        java.lang.Object obj86 = functionNode77.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol87 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.Node node88 = symbol87.getNode();
        symbol87.setIndex(4);
        com.google.javascript.rhino.head.ast.Scope scope91 = symbol87.getContainingTable();
        int int92 = symbol87.getDeclType();
        com.google.javascript.rhino.head.Node node93 = symbol87.getNode();
        com.google.javascript.rhino.head.ast.Scope scope94 = symbol87.getContainingTable();
        int int95 = symbol87.getDeclType();
        com.google.javascript.rhino.head.ast.Symbol symbol96 = strMap33.getOrDefault((java.lang.Object) functionNode77, symbol87);
        java.lang.String str97 = symbol87.getDeclTypeName();
        symbol87.setIndex(193715443);
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(symbolList58);
        org.junit.Assert.assertNull(symbol60);
        org.junit.Assert.assertNotNull(scriptNode62);
        org.junit.Assert.assertNull(nodeList68);
        org.junit.Assert.assertNull(scope70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(scriptNode74);
        org.junit.Assert.assertNotNull(scriptNode78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertNull(scope91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertNull(scope94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(symbol96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "EOF" + "'", str97, "EOF");
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        com.google.javascript.rhino.head.ast.Jump jump1 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode2.getTop();
        com.google.javascript.rhino.head.ast.Name name5 = null;
        functionNode2.setFunctionName(name5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode7.getTop();
        functionNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode7);
        functionNode7.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int14 = functionNode7.addFunction(functionNode13);
        int int15 = jump1.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        functionNodeList34.clear();
        com.google.javascript.rhino.head.ast.Jump jump40 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump40.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump44 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump40, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int47 = scriptNode46.getEndLineno();
        int int48 = scriptNode46.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode46.getChildScopes();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump40, (com.google.javascript.rhino.head.Node) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList51 = scriptNode46.getFunctions();
        boolean boolean52 = functionNodeList34.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList51);
        functionNode17.putProp(20, (java.lang.Object) functionNodeList34);
        int int54 = functionNode13.addFunction(functionNode17);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int57 = scriptNode56.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int60 = scriptNode59.getEndLineno();
        scriptNode56.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode59);
        com.google.javascript.rhino.head.ast.Scope scope62 = scriptNode59.getParentScope();
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode59.addChildrenToBack((com.google.javascript.rhino.head.Node) scope63);
        int int65 = functionNode17.compareTo((com.google.javascript.rhino.head.ast.AstNode) scope63);
        java.lang.Object obj66 = functionNode17.getCompilerData();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertNotNull(functionNodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(scope62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode3.getTop();
        com.google.javascript.rhino.head.ast.Name name6 = null;
        functionNode3.setFunctionName(name6);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode8.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int15 = functionNode8.addFunction(functionNode14);
        int int16 = jump2.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode14);
        functionNode14.setEncodedSourceStart((int) '4');
        functionNode14.setLength(48);
        functionNode14.setFunctionType(19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        functionNode24.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        functionNode28.setEncodedSource("");
        functionNode28.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode24, (com.google.javascript.rhino.head.Node) functionNode28, (com.google.javascript.rhino.head.Node) functionNode34, (int) '#');
        boolean boolean38 = functionNode34.isGenerator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode((-1262414679));
        com.google.javascript.rhino.head.Token.CommentType commentType45 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType45, "109");
        java.lang.String str49 = comment47.toSource(19);
        java.lang.String str50 = comment47.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType51 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        comment47.setCommentType(commentType51);
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment(9, 6, commentType51, "                    ");
        functionNode40.setJsDocNode(comment54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(25, (com.google.javascript.rhino.head.Node) functionNode14, (com.google.javascript.rhino.head.Node) functionNode34, (com.google.javascript.rhino.head.Node) functionNode40, (int) (short) 10);
        functionNode14.setFunctionIsSetter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = functionNode14.toSource(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + commentType45 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType45.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "                                      109" + "'", str49, "                                      109");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "109" + "'", str50, "109");
        org.junit.Assert.assertTrue("'" + commentType51 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType51.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        functionNode1.setSourceName("                                                                                                                                                                                                        /null/");
        functionNode1.setRequiresActivation();
        com.google.javascript.rhino.head.Node node6 = functionNode1.target;
        int int7 = functionNode1.getLength();
        java.lang.String str8 = functionNode1.getEncodedSource();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump9 = functionNode1.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral1 = new com.google.javascript.rhino.head.ast.RegExpLiteral((-1262414679));
        regExpLiteral1.setValue("/null//null/-1\tSCRIPT -1 1\n");
        java.lang.String str5 = regExpLiteral1.toSource(6);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "            //null//null/-1\tSCRIPT -1 1\n/" + "'", str5, "            //null//null/-1\tSCRIPT -1 1\n/");
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        functionNode5.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int12 = functionNode5.addFunction(functionNode11);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode14.getTop();
        java.lang.String str16 = scriptNode15.getJsDoc();
        com.google.javascript.rhino.head.Node node18 = scriptNode15.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str23 = functionNode19.toStringTree(scriptNode22);
        com.google.javascript.rhino.head.ast.Scope scope25 = scriptNode22.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(25, node18, (com.google.javascript.rhino.head.Node) scriptNode22, (com.google.javascript.rhino.head.Node) scriptNode27);
        int int31 = functionNode11.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode22);
        functionNode11.clearParentScope();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = functionNode34.getTop();
        functionNode34.setParens((int) (byte) 1, (int) (short) 1);
        functionNode34.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList41 = functionNode34.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope43 = functionNode34.getDefiningScope("hi!");
        boolean boolean44 = functionNode34.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int46 = functionNode45.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = functionNode45.getTop();
        com.google.javascript.rhino.head.ast.Name name48 = null;
        functionNode45.setFunctionName(name48);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode50 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = functionNode50.getTop();
        functionNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode50);
        int int53 = functionNode50.getRp();
        int int54 = functionNode50.getFunctionType();
        int int55 = functionNode34.addFunction(functionNode50);
        functionNode50.setRp((-1));
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(4, (com.google.javascript.rhino.head.Node) functionNode50, (int) '#');
        functionNode11.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode50);
        com.google.javascript.rhino.head.Token.CommentType commentType66 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment68 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType66, "109");
        java.lang.String str70 = comment68.toSource(19);
        java.lang.String str71 = comment68.getValue();
        java.lang.String str72 = comment68.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType73 = com.google.javascript.rhino.head.Token.CommentType.LINE;
        comment68.setCommentType(commentType73);
        com.google.javascript.rhino.head.ast.Comment comment76 = new com.google.javascript.rhino.head.ast.Comment(1, 1, commentType73, "                    /null/");
        java.lang.String str77 = comment76.getValue();
        java.lang.String str79 = comment76.toSource(8);
        com.google.javascript.rhino.head.ast.Jump jump81 = new com.google.javascript.rhino.head.ast.Jump((int) (byte) 100, (com.google.javascript.rhino.head.Node) comment76, (int) (short) 10);
        java.lang.String str83 = comment76.toSource((-1262414679));
        // The following exception was thrown during execution in test generation
        try {
            functionNode50.removeChild((com.google.javascript.rhino.head.Node) comment76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(scriptNode35);
        org.junit.Assert.assertNull(nodeList41);
        org.junit.Assert.assertNull(scope43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(scriptNode47);
        org.junit.Assert.assertNotNull(scriptNode51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + commentType66 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType66.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "                                      109" + "'", str70, "                                      109");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "109" + "'", str71, "109");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "109" + "'", str72, "109");
        org.junit.Assert.assertTrue("'" + commentType73 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.LINE + "'", commentType73.equals(com.google.javascript.rhino.head.Token.CommentType.LINE));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "                    /null/" + "'", str77, "                    /null/");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "                                    /null/" + "'", str79, "                                    /null/");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "                    /null/" + "'", str83, "                    /null/");
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Scope scope36 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode37.setParens((int) (byte) 1, (int) (short) 1);
        functionNode37.setEncodedSourceStart((-1));
        functionNode37.setFunctionIsGetter();
        scope36.addChildToFront((com.google.javascript.rhino.head.Node) functionNode37);
        functionNode37.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int57 = scriptNode56.getEndLineno();
        int int58 = scriptNode56.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode56.getChildScopes();
        jump54.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode56);
        java.lang.String str61 = scriptNode56.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode49, (com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode56.target = scope63;
        java.lang.String str65 = functionNode37.toStringTree(scriptNode56);
        java.lang.String str67 = scriptNode56.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap68 = scriptNode56.getSymbolTable();
        strMap33.putAll(strMap68);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode71 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int72 = functionNode71.getLp();
        functionNode71.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int76 = functionNode75.getLp();
        functionNode75.setEncodedSource("");
        functionNode75.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode81 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int82 = functionNode81.getLp();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode71, (com.google.javascript.rhino.head.Node) functionNode75, (com.google.javascript.rhino.head.Node) functionNode81, (int) '#');
        functionNode81.setEncodedSourceStart(25);
        int int87 = functionNode81.getAbsolutePosition();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator88 = functionNode81.spliterator();
        boolean boolean89 = strMap68.containsKey((java.lang.Object) nodeSpliterator88);
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str61, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "                    {\n                    }\n" + "'", str67, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(14, "                    {\n                      {\n                      }\n                    }\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        int int2 = functionNode0.getRegexpCount();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = functionNode0.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator3.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode7.getTop();
        boolean boolean10 = functionNode7.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int20 = scriptNode19.getEndLineno();
        int int21 = scriptNode19.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode19.getChildScopes();
        jump17.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode19);
        java.lang.String str24 = scriptNode19.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode12, (com.google.javascript.rhino.head.ast.Scope) scriptNode19);
        com.google.javascript.rhino.head.ast.Scope scope26 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode19.target = scope26;
        functionNode7.addChildScope(scope26);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode4, (com.google.javascript.rhino.head.ast.Scope) functionNode7);
        int int30 = functionNode7.getFunctionCount();
        int int31 = functionNode7.getEncodedSourceEnd();
        boolean boolean32 = functionNode7.isGenerator();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str24, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        boolean boolean4 = functionNode1.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int7 = scriptNode6.getEndLineno();
        int int8 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode13.getChildScopes();
        jump11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str18 = scriptNode13.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode6, (com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode13.target = scope20;
        functionNode1.addChildScope(scope20);
        boolean boolean23 = functionNode1.hasConsistentReturnUsage();
        java.lang.String str24 = functionNode1.getNextTempName();
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) (short) -1, (com.google.javascript.rhino.head.Node) functionNode1);
        boolean boolean26 = functionNode1.isExpressionClosure();
        functionNode1.putIntProp(1, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int32 = scriptNode31.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int35 = scriptNode34.getEndLineno();
        scriptNode31.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode34);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int38 = functionNode37.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = functionNode37.getTop();
        boolean boolean40 = functionNode37.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int43 = scriptNode42.getEndLineno();
        int int44 = scriptNode42.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode49.getChildScopes();
        jump47.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode49);
        java.lang.String str54 = scriptNode49.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode42, (com.google.javascript.rhino.head.ast.Scope) scriptNode49);
        com.google.javascript.rhino.head.ast.Scope scope56 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode49.target = scope56;
        functionNode37.addChildScope(scope56);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode34, (com.google.javascript.rhino.head.ast.Scope) functionNode37);
        int int60 = functionNode1.addFunction(functionNode37);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump61 = functionNode37.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str18, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$0" + "'", str24, "$0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(scriptNode39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str54, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral3 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) '4', (int) (short) -1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        boolean boolean7 = functionNode4.hasSideEffects();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode8.getTop();
        com.google.javascript.rhino.head.ast.Name name11 = null;
        functionNode8.setFunctionName(name11);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode16.getTop();
        functionNode16.setParens((int) (byte) 1, (int) (short) 1);
        functionNode16.setEncodedSourceStart((-1));
        functionNode16.setFunctionIsGetter();
        scope15.addChildToFront((com.google.javascript.rhino.head.Node) functionNode16);
        functionNode13.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode16);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode26.getTop();
        functionNode26.setParens((int) (byte) 1, (int) (short) 1);
        functionNode26.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList33 = functionNode26.getResumptionPoints();
        int int34 = functionNode26.getLp();
        functionNode13.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode26);
        functionNode8.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode26);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(10, (com.google.javascript.rhino.head.Node) regExpLiteral3, (com.google.javascript.rhino.head.Node) functionNode4, (com.google.javascript.rhino.head.Node) functionNode26);
        int int38 = node37.getLineno();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertNull(nodeList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str9 = functionNode5.toStringTree(scriptNode8);
        functionNode5.setFunctionIsGetter();
        int int11 = functionNode0.addFunction(functionNode5);
        boolean boolean12 = functionNode5.hasSideEffects();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode13.getTop();
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode17.getTop();
        int int19 = functionNode17.getRegexpCount();
        int int20 = functionNode17.getParamCount();
        int int21 = scriptNode15.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode17);
        int int22 = scriptNode15.getEncodedSourceStart();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = scriptNode15.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 195229632 + "'", int21 == 195229632);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        com.google.javascript.rhino.head.ast.Comment comment15 = functionNode11.getJsDocNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope18 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = functionNode19.getTop();
        functionNode19.setParens((int) (byte) 1, (int) (short) 1);
        functionNode19.setEncodedSourceStart((-1));
        functionNode19.setFunctionIsGetter();
        scope18.addChildToFront((com.google.javascript.rhino.head.Node) functionNode19);
        functionNode16.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode19);
        boolean boolean29 = functionNode11.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode16);
        int int30 = functionNode16.getLp();
        int int31 = functionNode16.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int34 = functionNode33.getBaseLineno();
        functionNode33.setPosition((int) '#');
        boolean boolean37 = functionNode33.isExpressionClosure();
        // The following exception was thrown during execution in test generation
        try {
            functionNode16.setDefault((com.google.javascript.rhino.head.Node) functionNode33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertNotNull(scriptNode20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        com.google.javascript.rhino.head.ast.Jump jump1 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode2.getTop();
        com.google.javascript.rhino.head.ast.Name name5 = null;
        functionNode2.setFunctionName(name5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode7.getTop();
        functionNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode7);
        functionNode7.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int14 = functionNode7.addFunction(functionNode13);
        int int15 = jump1.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        java.lang.Object obj16 = functionNode13.getCompilerData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = functionNode13.toSource((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int6 = scriptNode5.getEndLineno();
        int int7 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        jump10.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode12);
        java.lang.String str17 = scriptNode12.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode5, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode12.target = scope19;
        functionNode0.addChildScope(scope19);
        boolean boolean22 = functionNode0.hasConsistentReturnUsage();
        java.lang.String str23 = functionNode0.getNextTempName();
        functionNode0.setEncodedSourceBounds((-3285918), 17);
        int int27 = functionNode0.getFunctionCount();
        com.google.javascript.rhino.head.ast.Scope scope30 = new com.google.javascript.rhino.head.ast.Scope(15, (int) (byte) 0);
        com.google.javascript.rhino.head.ast.Symbol symbol32 = scope30.getSymbol("");
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.setLoop((com.google.javascript.rhino.head.ast.Jump) scope30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str17, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "$0" + "'", str23, "$0");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(symbol32);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol0.setIndex(6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int8 = scriptNode7.getEndLineno();
        scriptNode4.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode7);
        com.google.javascript.rhino.head.ast.Comment comment10 = null;
        scriptNode4.setJsDocNode(comment10);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList12 = scriptNode4.getSymbols();
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode4);
        com.google.javascript.rhino.head.ast.Scope scope14 = symbol0.getContainingTable();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode15.getTop();
        com.google.javascript.rhino.head.Node node18 = functionNode15.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList19 = functionNode15.getParams();
        java.lang.String str20 = functionNode15.shortName();
        scope14.target = functionNode15;
        com.google.javascript.rhino.head.ast.Scope scope23 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode24.getTop();
        functionNode24.setParens((int) (byte) 1, (int) (short) 1);
        functionNode24.setEncodedSourceStart((-1));
        functionNode24.setFunctionIsGetter();
        scope23.addChildToFront((com.google.javascript.rhino.head.Node) functionNode24);
        functionNode24.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int37 = scriptNode36.getEndLineno();
        int int38 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int44 = scriptNode43.getEndLineno();
        int int45 = scriptNode43.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList46 = scriptNode43.getChildScopes();
        jump41.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode43);
        java.lang.String str48 = scriptNode43.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode36, (com.google.javascript.rhino.head.ast.Scope) scriptNode43);
        com.google.javascript.rhino.head.ast.Scope scope50 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode43.target = scope50;
        java.lang.String str52 = functionNode24.toStringTree(scriptNode43);
        java.lang.String str54 = scriptNode43.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap55 = scriptNode43.getSymbolTable();
        int int56 = strMap55.size();
        functionNode15.setSymbolTable(strMap55);
        java.util.Collection<com.google.javascript.rhino.head.ast.Symbol> symbolCollection58 = strMap55.values();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(symbolList12);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(astNodeList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FunctionNode" + "'", str20, "FunctionNode");
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(scopeList46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str48, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "                    {\n                    }\n" + "'", str54, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(symbolCollection58);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope2 = symbol0.getContainingTable();
        symbol0.setIndex(21);
        int int5 = symbol0.getDeclType();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "EOF" + "'", str1, "EOF");
        org.junit.Assert.assertNull(scope2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.Node node3 = functionNode0.getLastSibling();
        com.google.javascript.rhino.head.ast.AstNode astNode4 = functionNode0.getMemberExprNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode5.getTop();
        com.google.javascript.rhino.head.ast.Name name8 = null;
        functionNode5.setFunctionName(name8);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode10.getTop();
        functionNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode10);
        functionNode10.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int17 = functionNode10.addFunction(functionNode16);
        int int18 = functionNode0.addFunction(functionNode10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope25 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode26.getTop();
        functionNode26.setParens((int) (byte) 1, (int) (short) 1);
        functionNode26.setEncodedSourceStart((-1));
        functionNode26.setFunctionIsGetter();
        scope25.addChildToFront((com.google.javascript.rhino.head.Node) functionNode26);
        functionNode23.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode26);
        int int36 = functionNode19.addFunction(functionNode23);
        com.google.javascript.rhino.head.ast.Symbol symbol38 = functionNode19.getSymbol("-1\tBLOCK -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol43 = scriptNode40.getSymbol("hi!");
        scriptNode40.putIntProp(3, 0);
        functionNode19.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        boolean boolean48 = functionNode0.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode19);
        functionNode0.setRequiresActivation();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor50 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.visit(nodeVisitor50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(astNode4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(symbol38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(symbol43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        boolean boolean4 = functionNode1.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int7 = scriptNode6.getEndLineno();
        int int8 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode13.getChildScopes();
        jump11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str18 = scriptNode13.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode6, (com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode13.target = scope20;
        functionNode1.addChildScope(scope20);
        boolean boolean23 = functionNode1.hasConsistentReturnUsage();
        java.lang.String str24 = functionNode1.getNextTempName();
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) (short) -1, (com.google.javascript.rhino.head.Node) functionNode1);
        boolean boolean26 = functionNode1.isExpressionClosure();
        functionNode1.putIntProp(1, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        functionNode30.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int42 = functionNode39.getRp();
        int int43 = functionNode39.getFunctionType();
        functionNode30.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        com.google.javascript.rhino.head.ast.Scope scope45 = functionNode39.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstNode astNode46 = scope45.getParent();
        com.google.javascript.rhino.head.Node node47 = scope45.getLastSibling();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int49 = functionNode48.getLp();
        functionNode48.setIsExpressionClosure(false);
        int int52 = functionNode48.getLineno();
        functionNode1.addChildAfter(node47, (com.google.javascript.rhino.head.Node) functionNode48);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral54 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode1.addRegExp(regExpLiteral54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str18, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$0" + "'", str24, "$0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNull(astNode46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType2, "109");
        java.lang.String str6 = comment4.toSource(19);
        java.lang.String str7 = comment4.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType8 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        comment4.setCommentType(commentType8);
        com.google.javascript.rhino.head.ast.AstNode astNode10 = comment4.getParent();
        org.junit.Assert.assertTrue("'" + commentType2 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType2.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "                                      109" + "'", str6, "                                      109");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "109" + "'", str7, "109");
        org.junit.Assert.assertTrue("'" + commentType8 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType8.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertNull(astNode10);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        functionNode5.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.Scope scope11 = new com.google.javascript.rhino.head.ast.Scope((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            functionNode5.setScope(scope11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator16 = functionNodeList15.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator17 = functionNodeList15.spliterator();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream18 = functionNodeList15.parallelStream();
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        functionNodeList34.clear();
        functionNodeList34.clear();
        int int37 = functionNodeList34.size();
        java.util.stream.BaseStream[] baseStreamArray39 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[] functionNodeBaseStreamArray40 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[]) baseStreamArray39;
        java.util.stream.BaseStream[] baseStreamArray42 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[] functionNodeBaseStreamArray43 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[]) baseStreamArray42;
        java.util.stream.BaseStream[] baseStreamArray45 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[] functionNodeBaseStreamArray46 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[]) baseStreamArray45;
        java.util.stream.BaseStream[] baseStreamArray48 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[] functionNodeBaseStreamArray49 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[]) baseStreamArray48;
        java.util.stream.BaseStream[] baseStreamArray51 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[] functionNodeBaseStreamArray52 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[]) baseStreamArray51;
        java.util.stream.BaseStream[][] baseStreamArray54 = new java.util.stream.BaseStream[5][];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[][] functionNodeBaseStreamArray55 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[][]) baseStreamArray54;
        functionNodeBaseStreamArray55[0] = baseStreamArray39;
        functionNodeBaseStreamArray55[1] = functionNodeBaseStreamArray43;
        functionNodeBaseStreamArray55[2] = baseStreamArray45;
        functionNodeBaseStreamArray55[3] = baseStreamArray48;
        functionNodeBaseStreamArray55[4] = baseStreamArray51;
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[][] functionNodeBaseStreamArray66 = functionNodeList34.toArray(functionNodeBaseStreamArray55);
        boolean boolean67 = functionNodeList15.containsAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList34);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode69 = functionNodeList34.get((-1110578805));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1110578805");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNotNull(functionNodeSpliterator16);
        org.junit.Assert.assertNotNull(functionNodeSpliterator17);
        org.junit.Assert.assertNotNull(functionNodeStream18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(baseStreamArray39);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray40);
        org.junit.Assert.assertNotNull(baseStreamArray42);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray43);
        org.junit.Assert.assertNotNull(baseStreamArray45);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray46);
        org.junit.Assert.assertNotNull(baseStreamArray48);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray49);
        org.junit.Assert.assertNotNull(baseStreamArray51);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray52);
        org.junit.Assert.assertNotNull(baseStreamArray54);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray55);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        functionNode3.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        functionNode7.setEncodedSource("");
        functionNode7.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) functionNode7, (com.google.javascript.rhino.head.Node) functionNode13, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode3.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int30 = functionNode27.getRp();
        int int31 = functionNode27.getFunctionType();
        functionNode18.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.Scope scope33 = functionNode27.getEnclosingScope();
        functionNode3.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int35 = functionNode0.addFunction(functionNode3);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList36 = functionNode0.getResumptionPoints();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int38 = functionNode37.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = functionNode37.getTop();
        com.google.javascript.rhino.head.ast.Name name40 = null;
        functionNode37.setFunctionName(name40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = functionNode42.getTop();
        functionNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        functionNode42.setEncodedSourceStart(6);
        functionNode42.setRelative((-1));
        boolean boolean49 = functionNode0.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int52 = functionNode51.getLp();
        functionNode51.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int56 = functionNode55.getLp();
        functionNode55.setEncodedSource("");
        functionNode55.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode61 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int62 = functionNode61.getLp();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode51, (com.google.javascript.rhino.head.Node) functionNode55, (com.google.javascript.rhino.head.Node) functionNode61, (int) '#');
        com.google.javascript.rhino.head.ast.Comment comment65 = functionNode61.getJsDocNode();
        functionNode0.setParentScope((com.google.javascript.rhino.head.ast.Scope) functionNode61);
        boolean boolean67 = functionNode0.hasSideEffects();
        com.google.javascript.rhino.head.ast.Scope scope68 = functionNode0.getParentScope();
        int int69 = scope68.getType();
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(nodeList36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(scriptNode39);
        org.junit.Assert.assertNotNull(scriptNode43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(comment65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 109 + "'", int69 == 109);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        functionNode2.setLp((int) (short) 1);
        int int8 = functionNode2.getIntProp(4, 26);
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump(3, (com.google.javascript.rhino.head.Node) functionNode2);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setFunctionType(11);
        boolean boolean13 = functionNode2.hasChildren();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode14.getTop();
        com.google.javascript.rhino.head.ast.Name name17 = null;
        functionNode14.setFunctionName(name17);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope21 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode22.getTop();
        functionNode22.setParens((int) (byte) 1, (int) (short) 1);
        functionNode22.setEncodedSourceStart((-1));
        functionNode22.setFunctionIsGetter();
        scope21.addChildToFront((com.google.javascript.rhino.head.Node) functionNode22);
        functionNode19.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode22);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = functionNode32.getTop();
        functionNode32.setParens((int) (byte) 1, (int) (short) 1);
        functionNode32.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList39 = functionNode32.getResumptionPoints();
        int int40 = functionNode32.getLp();
        functionNode19.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode32);
        functionNode14.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode32);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int44 = functionNode43.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode43.getTop();
        com.google.javascript.rhino.head.ast.Name name46 = null;
        functionNode43.setFunctionName(name46);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode48.getTop();
        functionNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode48);
        int int51 = functionNode48.getRp();
        int int52 = functionNode48.getFunctionType();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) functionNode32, (com.google.javascript.rhino.head.ast.Scope) functionNode48);
        functionNode2.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode48);
        functionNode48.setFunctionIsGetter();
        // The following exception was thrown during execution in test generation
        try {
            double double56 = functionNode48.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26 + "'", int8 == 26);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertNotNull(scriptNode33);
        org.junit.Assert.assertNull(nodeList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral1 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) '#');
        java.lang.String str2 = regExpLiteral1.shortName();
        regExpLiteral1.setFlags("-1\tBLOCK -1 1\n");
        regExpLiteral1.setFlags("                                            {\n                                            }\n");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = regExpLiteral1.iterator();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegExpLiteral" + "'", str2, "RegExpLiteral");
        org.junit.Assert.assertNotNull(nodeItor7);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode3.getTop();
        functionNode3.setParens((int) (byte) 1, (int) (short) 1);
        functionNode3.setEncodedSourceStart((-1));
        functionNode3.setFunctionIsGetter();
        scope2.addChildToFront((com.google.javascript.rhino.head.Node) functionNode3);
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        functionNode13.setParens((int) (byte) 1, (int) (short) 1);
        functionNode13.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList20 = functionNode13.getResumptionPoints();
        int int21 = functionNode13.getLp();
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        com.google.javascript.rhino.head.Node node23 = functionNode13.getNext();
        com.google.javascript.rhino.head.ast.Scope scope25 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode26.getTop();
        functionNode26.setParens((int) (byte) 1, (int) (short) 1);
        functionNode26.setEncodedSourceStart((-1));
        functionNode26.setFunctionIsGetter();
        scope25.addChildToFront((com.google.javascript.rhino.head.Node) functionNode26);
        functionNode26.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int39 = scriptNode38.getEndLineno();
        int int40 = scriptNode38.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        jump43.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode45);
        java.lang.String str50 = scriptNode45.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode38, (com.google.javascript.rhino.head.ast.Scope) scriptNode45);
        com.google.javascript.rhino.head.ast.Scope scope52 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode45.target = scope52;
        java.lang.String str54 = functionNode26.toStringTree(scriptNode45);
        java.lang.String str56 = scriptNode45.toSource((int) (short) 10);
        boolean boolean57 = functionNode13.isParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode45);
        com.google.javascript.rhino.head.ast.Scope scope59 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = functionNode60.getTop();
        functionNode60.setParens((int) (byte) 1, (int) (short) 1);
        functionNode60.setEncodedSourceStart((-1));
        functionNode60.setFunctionIsGetter();
        scope59.addChildToFront((com.google.javascript.rhino.head.Node) functionNode60);
        functionNode60.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int73 = scriptNode72.getEndLineno();
        int int74 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump77 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int80 = scriptNode79.getEndLineno();
        int int81 = scriptNode79.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList82 = scriptNode79.getChildScopes();
        jump77.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode79);
        java.lang.String str84 = scriptNode79.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode72, (com.google.javascript.rhino.head.ast.Scope) scriptNode79);
        com.google.javascript.rhino.head.ast.Scope scope86 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode79.target = scope86;
        java.lang.String str88 = functionNode60.toStringTree(scriptNode79);
        functionNode13.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode79);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope90 = scriptNode79.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNull(nodeList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str50, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "                    {\n                    }\n" + "'", str56, "                    {\n                    }\n");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(scriptNode61);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNull(scopeList82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str84, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        int int1 = symbol0.getIndex();
        symbol0.setIndex(35);
        com.google.javascript.rhino.head.ast.Scope scope4 = new com.google.javascript.rhino.head.ast.Scope();
        scope4.setBounds(0, 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        int int10 = functionNode8.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = functionNode8.getEnclosingFunction();
        java.lang.String str12 = scope4.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode8);
        com.google.javascript.rhino.head.ast.Symbol symbol14 = scope4.getSymbol("                                /null/");
        symbol0.setContainingTable(scope4);
        com.google.javascript.rhino.head.ast.Jump jump16 = null;
        // The following exception was thrown during execution in test generation
        try {
            scope4.setJumpStatement(jump16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(functionNode11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(symbol14);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = functionNode0.getSymbols();
        functionNode0.setRp(5);
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int10 = functionNode9.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode9.getTop();
        com.google.javascript.rhino.head.ast.Name name12 = null;
        functionNode9.setFunctionName(name12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode14.getTop();
        functionNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode14);
        functionNode14.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int21 = functionNode14.addFunction(functionNode20);
        int int22 = jump8.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode20);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump30 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump30.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump34 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump30, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int37 = scriptNode36.getEndLineno();
        int int38 = scriptNode36.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode36.getChildScopes();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump30, (com.google.javascript.rhino.head.Node) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList41 = scriptNode36.getFunctions();
        functionNodeList41.clear();
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump47.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump51 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump47, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int54 = scriptNode53.getEndLineno();
        int int55 = scriptNode53.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList56 = scriptNode53.getChildScopes();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump47, (com.google.javascript.rhino.head.Node) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList58 = scriptNode53.getFunctions();
        boolean boolean59 = functionNodeList41.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList58);
        functionNode24.putProp(20, (java.lang.Object) functionNodeList41);
        int int61 = functionNode20.addFunction(functionNode24);
        boolean boolean62 = functionNode24.isGenerator();
        int int63 = functionNode0.addFunction(functionNode24);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode24.visit(nodeVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertNotNull(functionNodeList41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(scopeList56);
        org.junit.Assert.assertNotNull(functionNodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode3 = functionNode0.getBody();
        int int4 = functionNode0.getLength();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap5 = null;
        functionNode0.setSymbolTable(strMap5);
        int int7 = functionNode0.getEndLineno();
        java.lang.String str8 = functionNode0.getSourceName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(astNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        functionNode5.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int12 = functionNode5.addFunction(functionNode11);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode14.getTop();
        java.lang.String str16 = scriptNode15.getJsDoc();
        com.google.javascript.rhino.head.Node node18 = scriptNode15.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str23 = functionNode19.toStringTree(scriptNode22);
        com.google.javascript.rhino.head.ast.Scope scope25 = scriptNode22.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        com.google.javascript.rhino.head.Node node30 = new com.google.javascript.rhino.head.Node(25, node18, (com.google.javascript.rhino.head.Node) scriptNode22, (com.google.javascript.rhino.head.Node) scriptNode27);
        int int31 = functionNode11.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode22);
        com.google.javascript.rhino.head.ast.Scope scope32 = functionNode11.getEnclosingScope();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray33 = functionNode11.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(scope32);
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode3.getTop();
        com.google.javascript.rhino.head.ast.Name name6 = null;
        functionNode3.setFunctionName(name6);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode8.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int15 = functionNode8.addFunction(functionNode14);
        int int16 = jump2.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode14);
        functionNode14.setEncodedSourceStart((int) '4');
        functionNode14.setLength(48);
        functionNode14.setFunctionType(19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        functionNode24.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        functionNode28.setEncodedSource("");
        functionNode28.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode24, (com.google.javascript.rhino.head.Node) functionNode28, (com.google.javascript.rhino.head.Node) functionNode34, (int) '#');
        boolean boolean38 = functionNode34.isGenerator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode((-1262414679));
        com.google.javascript.rhino.head.Token.CommentType commentType45 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType45, "109");
        java.lang.String str49 = comment47.toSource(19);
        java.lang.String str50 = comment47.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType51 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        comment47.setCommentType(commentType51);
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment(9, 6, commentType51, "                    ");
        functionNode40.setJsDocNode(comment54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(25, (com.google.javascript.rhino.head.Node) functionNode14, (com.google.javascript.rhino.head.Node) functionNode34, (com.google.javascript.rhino.head.Node) functionNode40, (int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int59 = functionNode58.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode58.getTop();
        boolean boolean61 = functionNode58.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList62 = functionNode58.getSymbols();
        int int63 = functionNode58.getLength();
        int int64 = functionNode58.getRegexpCount();
        functionNode40.target = functionNode58;
        boolean boolean66 = functionNode40.hasSideEffects();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + commentType45 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType45.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "                                      109" + "'", str49, "                                      109");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "109" + "'", str50, "109");
        org.junit.Assert.assertTrue("'" + commentType51 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType51.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(symbolList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode7.getTop();
        boolean boolean10 = functionNode7.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int20 = scriptNode19.getEndLineno();
        int int21 = scriptNode19.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode19.getChildScopes();
        jump17.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode19);
        java.lang.String str24 = scriptNode19.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode12, (com.google.javascript.rhino.head.ast.Scope) scriptNode19);
        com.google.javascript.rhino.head.ast.Scope scope26 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode19.target = scope26;
        functionNode7.addChildScope(scope26);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode4, (com.google.javascript.rhino.head.ast.Scope) functionNode7);
        int int30 = functionNode7.getFunctionCount();
        int int31 = functionNode7.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = functionNode7.getAstRoot();
        functionNode7.setParens(10, 17);
        com.google.javascript.rhino.head.ast.Jump jump38 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.Scope scope40 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        jump38.addChildrenToBack((com.google.javascript.rhino.head.Node) scope40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int43 = functionNode42.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = functionNode42.getTop();
        com.google.javascript.rhino.head.ast.Name name45 = null;
        functionNode42.setFunctionName(name45);
        functionNode42.setIsGenerator();
        java.lang.String str48 = functionNode42.getEncodedSource();
        scope40.target = functionNode42;
        functionNode42.setFunctionIsSetter();
        functionNode7.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode42);
        com.google.javascript.rhino.head.Node node52 = functionNode7.getLastChild();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral54 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str56 = regExpLiteral54.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator57 = regExpLiteral54.new NodeIterator();
        regExpLiteral54.setFlags("$0");
        regExpLiteral54.putIntProp(25, (int) (short) -1);
        functionNode7.addRegExp(regExpLiteral54);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            regExpLiteral54.visit(nodeVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str24, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(astRoot32);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(scriptNode44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "                    /null/" + "'", str56, "                    /null/");
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        java.lang.String str3 = scriptNode2.getJsDoc();
        com.google.javascript.rhino.head.Node node5 = scriptNode2.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str10 = functionNode6.toStringTree(scriptNode9);
        com.google.javascript.rhino.head.ast.Scope scope12 = scriptNode9.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(25, node5, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode14);
        boolean boolean18 = scriptNode14.hasConsistentReturnUsage();
        java.lang.String str19 = scriptNode14.getNextTempName();
        java.lang.String str20 = scriptNode14.shortName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode21.getTop();
        boolean boolean24 = functionNode21.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList25 = functionNode21.getSymbols();
        scriptNode14.setSymbols(symbolList25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int30 = functionNode29.getLp();
        functionNode29.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int34 = functionNode33.getLp();
        functionNode33.setEncodedSource("");
        functionNode33.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode29, (com.google.javascript.rhino.head.Node) functionNode33, (com.google.javascript.rhino.head.Node) functionNode39, (int) '#');
        functionNode39.setEncodedSourceStart(25);
        boolean boolean45 = functionNode39.requiresActivation();
        java.lang.String str46 = functionNode39.getNextTempName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode48.getTop();
        functionNode48.setParens((int) (byte) 1, (int) (short) 1);
        int int53 = functionNode48.getRp();
        com.google.javascript.rhino.head.Node node56 = com.google.javascript.rhino.head.Node.newString((int) (byte) 100, "");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int58 = functionNode57.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str61 = functionNode57.toStringTree(scriptNode60);
        com.google.javascript.rhino.head.ast.Scope scope63 = scriptNode60.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList64 = scriptNode60.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int67 = scriptNode66.getEndLineno();
        int int68 = scriptNode66.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode60, (com.google.javascript.rhino.head.ast.Scope) scriptNode66);
        java.lang.String str70 = scriptNode66.getEncodedSource();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) functionNode48, node56, (com.google.javascript.rhino.head.Node) scriptNode66, (int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode73 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int74 = functionNode73.getLp();
        functionNode73.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode77 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope79 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode80 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode81 = functionNode80.getTop();
        functionNode80.setParens((int) (byte) 1, (int) (short) 1);
        functionNode80.setEncodedSourceStart((-1));
        functionNode80.setFunctionIsGetter();
        scope79.addChildToFront((com.google.javascript.rhino.head.Node) functionNode80);
        functionNode77.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode80);
        int int90 = functionNode73.addFunction(functionNode77);
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) functionNode39, (com.google.javascript.rhino.head.Node) scriptNode66, (com.google.javascript.rhino.head.Node) functionNode77, 3);
        scriptNode14.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode66);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode94 = scriptNode14.getTop();
        int int95 = scriptNode14.getEndLineno();
        int int96 = scriptNode14.getFunctionCount();
        com.google.javascript.rhino.head.Node node97 = scriptNode14.getLastSibling();
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(scope12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$0" + "'", str19, "$0");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ScriptNode" + "'", str20, "ScriptNode");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(symbolList25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "$0" + "'", str46, "$0");
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(scope63);
        org.junit.Assert.assertNotNull(symbolList64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(scriptNode81);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(scriptNode94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (-1L));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = scriptNode10.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode10.getChildScopes();
        java.lang.String str18 = scriptNode10.getSourceName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray19 = scriptNode10.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode3 = functionNode0.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.Node node7 = functionNode4.getLastSibling();
        com.google.javascript.rhino.head.ast.AstNode astNode8 = functionNode4.getMemberExprNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int10 = functionNode9.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode9.getTop();
        com.google.javascript.rhino.head.ast.Name name12 = null;
        functionNode9.setFunctionName(name12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode14.getTop();
        functionNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode14);
        functionNode14.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int21 = functionNode14.addFunction(functionNode20);
        int int22 = functionNode4.addFunction(functionNode14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int24 = functionNode23.getLp();
        functionNode23.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope29 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = functionNode30.getTop();
        functionNode30.setParens((int) (byte) 1, (int) (short) 1);
        functionNode30.setEncodedSourceStart((-1));
        functionNode30.setFunctionIsGetter();
        scope29.addChildToFront((com.google.javascript.rhino.head.Node) functionNode30);
        functionNode27.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode30);
        int int40 = functionNode23.addFunction(functionNode27);
        com.google.javascript.rhino.head.ast.Symbol symbol42 = functionNode23.getSymbol("-1\tBLOCK -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int45 = scriptNode44.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol47 = scriptNode44.getSymbol("hi!");
        scriptNode44.putIntProp(3, 0);
        functionNode23.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        boolean boolean52 = functionNode4.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode23);
        com.google.javascript.rhino.head.ast.AstNode astNode53 = functionNode23.getParent();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode23);
        int int55 = functionNode23.getEncodedSourceEnd();
        functionNode23.setSourceName("                                                  ");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(astNode3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(astNode8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(scriptNode31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(symbol42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(symbol47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(astNode53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setLp((int) (short) 1);
        int int6 = functionNode0.getIntProp(4, 26);
        functionNode0.flattenSymbolTable(true);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList9 = functionNode0.getParams();
        functionNode0.setFunctionIsSetter();
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.setDouble(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 26 + "'", int6 == 26);
        org.junit.Assert.assertNotNull(astNodeList9);
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode8.setParens((int) (byte) 1, (int) (short) 1);
        functionNode8.setEncodedSourceStart((-1));
        functionNode8.setFunctionIsGetter();
        scope7.addChildToFront((com.google.javascript.rhino.head.Node) functionNode8);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode5.setFunctionIsSetter();
        int int19 = functionNode0.addFunction(functionNode5);
        boolean boolean20 = functionNode5.isGenerator();
        functionNode5.setParens(0, 3);
        boolean boolean24 = functionNode5.isSetter();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump25 = functionNode5.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int9 = scriptNode8.getEndLineno();
        int int10 = scriptNode8.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode8.getChildScopes();
        jump6.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode8);
        java.lang.String str13 = scriptNode8.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode8);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode15.getTop();
        com.google.javascript.rhino.head.ast.Name name18 = null;
        functionNode15.setFunctionName(name18);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        functionNode20.setFunctionIsGetter();
        int int26 = functionNode15.addFunction(functionNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = functionNode15.getSymbols();
        scriptNode8.setSymbols(symbolList27);
        scriptNode8.setEncodedSourceStart((int) (short) -1);
        scriptNode8.flattenSymbolTable(true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str13, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(symbolList27);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        boolean boolean3 = functionNode1.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral5 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral5.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str8 = regExpLiteral5.getValue();
        regExpLiteral5.setFlags("52");
        functionNode1.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral5);
        boolean boolean12 = functionNode1.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        int int15 = functionNode13.getRegexpCount();
        int int16 = functionNode13.getParamCount();
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode13.getBody();
        int int18 = functionNode1.addFunction(functionNode13);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = functionNode19.getTop();
        boolean boolean22 = functionNode19.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList23 = functionNode19.getSymbols();
        int int24 = functionNode19.getLength();
        boolean boolean25 = functionNode19.isGetterOrSetter();
        functionNode13.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode19);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = functionNode19.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(scriptNode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(symbolList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList1 = functionNode0.getFunctions();
        int int2 = functionNode0.getType();
        com.google.javascript.rhino.head.ast.Symbol symbol3 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol3.setIndex(6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int8 = scriptNode7.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        scriptNode7.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode10);
        com.google.javascript.rhino.head.ast.Comment comment13 = null;
        scriptNode7.setJsDocNode(comment13);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList15 = scriptNode7.getSymbols();
        symbol3.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode7);
        int int17 = scriptNode7.getLineno();
        boolean boolean18 = functionNode0.isParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        functionNode0.removeProp(20);
        org.junit.Assert.assertNotNull(functionNodeList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 109 + "'", int2 == 109);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(symbolList15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        boolean boolean3 = functionNode1.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral5 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral5.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str8 = regExpLiteral5.getValue();
        regExpLiteral5.setFlags("52");
        functionNode1.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral5);
        boolean boolean12 = functionNode1.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        int int15 = functionNode13.getRegexpCount();
        int int16 = functionNode13.getParamCount();
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode13.getBody();
        int int18 = functionNode1.addFunction(functionNode13);
        functionNode13.setEncodedSourceStart(17);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode21.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode24 = functionNode21.getBody();
        com.google.javascript.rhino.head.ast.Scope scope25 = functionNode21.getParentScope();
        int int26 = functionNode13.addFunction(functionNode21);
        int int27 = functionNode21.getLineno();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        functionNode28.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int33 = functionNode32.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = functionNode32.getTop();
        com.google.javascript.rhino.head.ast.Name name35 = null;
        functionNode32.setFunctionName(name35);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode37);
        int int40 = functionNode37.getRp();
        int int41 = functionNode37.getFunctionType();
        functionNode28.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode37);
        com.google.javascript.rhino.head.ast.Scope scope43 = functionNode37.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstNode astNode44 = scope43.getParent();
        com.google.javascript.rhino.head.Node node45 = scope43.getLastSibling();
        functionNode21.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) scope43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode47.getTop();
        com.google.javascript.rhino.head.ast.Name name50 = null;
        functionNode47.setFunctionName(name50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = functionNode52.getTop();
        functionNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode52);
        functionNode52.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int59 = functionNode52.addFunction(functionNode58);
        java.lang.Object obj60 = functionNode52.getCompilerData();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int63 = functionNode62.getBaseLineno();
        functionNode62.setSourceName("                                                                                                                                                                                                        /null/");
        functionNode62.setRequiresActivation();
        com.google.javascript.rhino.head.Node node67 = functionNode62.target;
        int int68 = functionNode62.getLength();
        functionNode52.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode62);
        functionNode21.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode62);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = functionNode21.getParamAndVarCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertNull(astNode24);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(scriptNode34);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNull(astNode44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertNotNull(scriptNode53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        int int23 = functionNode16.getLength();
        com.google.javascript.rhino.head.Node node25 = functionNode16.setType(21);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode26.getTop();
        com.google.javascript.rhino.head.ast.Name name28 = null;
        functionNode26.setFunctionName(name28);
        int int30 = functionNode26.getLength();
        functionNode26.setFunctionType(19);
        functionNode16.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode26);
        functionNode16.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        functionNode36.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = functionNode40.getTop();
        com.google.javascript.rhino.head.ast.Name name43 = null;
        functionNode40.setFunctionName(name43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = functionNode45.getTop();
        functionNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        int int48 = functionNode45.getRp();
        int int49 = functionNode45.getFunctionType();
        functionNode36.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        com.google.javascript.rhino.head.Node node51 = functionNode36.getLastSibling();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int53 = functionNode52.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = functionNode52.getTop();
        com.google.javascript.rhino.head.ast.Name name55 = null;
        functionNode52.setFunctionName(name55);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = functionNode57.getTop();
        functionNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode57);
        int int60 = functionNode57.getRp();
        int int61 = functionNode57.getFunctionType();
        boolean boolean62 = functionNode57.requiresActivation();
        functionNode57.setParens((int) ' ', 9);
        functionNode16.addChildAfter(node51, (com.google.javascript.rhino.head.Node) functionNode57);
        com.google.javascript.rhino.head.Node node67 = functionNode57.target;
        com.google.javascript.rhino.head.ast.AstNode astNode68 = functionNode57.getBody();
        int int69 = functionNode57.getEndLineno();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = functionNode57.getRegexpFlags((-14761645));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(scriptNode42);
        org.junit.Assert.assertNotNull(scriptNode46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(scriptNode54);
        org.junit.Assert.assertNotNull(scriptNode58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(astNode68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode1.setFunctionName(name3);
        boolean boolean5 = functionNode1.requiresActivation();
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump9.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump13 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump9, 0);
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump17.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump17, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        functionNode22.setEncodedSource("");
        functionNode22.flattenSymbolTable(false);
        jump9.addChildAfter((com.google.javascript.rhino.head.Node) jump17, (com.google.javascript.rhino.head.Node) functionNode22);
        com.google.javascript.rhino.head.Node node29 = functionNode22.target;
        functionNode1.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode22);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(10, (com.google.javascript.rhino.head.Node) functionNode22, 10);
        functionNode22.setFunctionIsSetter();
        functionNode22.setPosition((int) (byte) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        functionNode36.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = functionNode40.getTop();
        com.google.javascript.rhino.head.ast.Name name43 = null;
        functionNode40.setFunctionName(name43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = functionNode45.getTop();
        functionNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        int int48 = functionNode45.getRp();
        int int49 = functionNode45.getFunctionType();
        functionNode36.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        com.google.javascript.rhino.head.ast.Name name51 = functionNode36.getFunctionName();
        functionNode36.setFunctionType(7);
        boolean boolean54 = functionNode36.isGetter();
        int int55 = functionNode22.addFunction(functionNode36);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator56 = functionNode22.new NodeIterator();
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(scriptNode42);
        org.junit.Assert.assertNotNull(scriptNode46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(name51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode8.setParens((int) (byte) 1, (int) (short) 1);
        functionNode8.setEncodedSourceStart((-1));
        functionNode8.setFunctionIsGetter();
        scope7.addChildToFront((com.google.javascript.rhino.head.Node) functionNode8);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode5.setFunctionIsSetter();
        int int19 = functionNode0.addFunction(functionNode5);
        java.lang.String str20 = functionNode0.getNextTempName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int23 = functionNode22.getBaseLineno();
        functionNode22.setSourceName("                                                                                                                                                                                                        /null/");
        functionNode22.setRequiresActivation();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode22);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode28.getTop();
        boolean boolean31 = functionNode28.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int34 = scriptNode33.getEndLineno();
        int int35 = scriptNode33.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump38 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        int int42 = scriptNode40.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList43 = scriptNode40.getChildScopes();
        jump38.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode40);
        java.lang.String str45 = scriptNode40.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode33, (com.google.javascript.rhino.head.ast.Scope) scriptNode40);
        com.google.javascript.rhino.head.ast.Scope scope47 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode40.target = scope47;
        functionNode28.addChildScope(scope47);
        boolean boolean50 = functionNode28.hasConsistentReturnUsage();
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap51 = functionNode28.getLiveLocals();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int54 = functionNode53.getEncodedSourceStart();
        functionNode28.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode53);
        int int56 = functionNode53.depth();
        functionNode22.setParent((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$0" + "'", str20, "$0");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(scopeList43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str45, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(nodeMap51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getName();
        com.google.javascript.rhino.head.Node node2 = symbol0.getNode();
        java.lang.String str3 = symbol0.getDeclTypeName();
        java.lang.String str4 = symbol0.toString();
        java.lang.String str5 = symbol0.toString();
        symbol0.setName("  ");
        int int8 = symbol0.getDeclType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EOF" + "'", str3, "EOF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Symbol (EOF) name=null" + "'", str4, "Symbol (EOF) name=null");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Symbol (EOF) name=null" + "'", str5, "Symbol (EOF) name=null");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str4 = functionNode0.toStringTree(scriptNode3);
        functionNode0.setFunctionIsGetter();
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name4 = null;
        functionNode1.setFunctionName(name4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode6);
        functionNode6.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int13 = functionNode6.addFunction(functionNode12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode15.getTop();
        java.lang.String str17 = scriptNode16.getJsDoc();
        com.google.javascript.rhino.head.Node node19 = scriptNode16.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        com.google.javascript.rhino.head.ast.Scope scope26 = scriptNode23.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(25, node19, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) scriptNode28);
        int int32 = functionNode12.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral34 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral34.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral34.setFlags("/null/-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode39.getTop();
        com.google.javascript.rhino.head.ast.Name name42 = null;
        functionNode39.setFunctionName(name42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        functionNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode44);
        int int47 = functionNode44.getRp();
        int int48 = functionNode44.getFunctionType();
        boolean boolean49 = functionNode44.requiresActivation();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(26, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) regExpLiteral34, (com.google.javascript.rhino.head.Node) functionNode44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int53 = scriptNode52.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int56 = scriptNode55.getEndLineno();
        scriptNode52.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode55);
        java.lang.String str58 = scriptNode52.getNextTempName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode59 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.AstNode astNode60 = functionNode59.getParent();
        scriptNode52.setParentScope((com.google.javascript.rhino.head.ast.Scope) functionNode59);
        functionNode44.setCompilerData((java.lang.Object) scriptNode52);
        int int63 = scriptNode52.getLineno();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "$0" + "'", str58, "$0");
        org.junit.Assert.assertNull(astNode60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        functionNodeList50.clear();
        functionNodeList50.clear();
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList68 = scriptNode63.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator69 = functionNodeList68.spliterator();
        int int71 = functionNodeList68.indexOf((java.lang.Object) (byte) 10);
        boolean boolean72 = functionNodeList50.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList68);
        boolean boolean73 = strMap33.containsKey((java.lang.Object) functionNodeList50);
        boolean boolean75 = strMap33.containsKey((java.lang.Object) 1579347477);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode76 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int77 = functionNode76.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str80 = functionNode76.toStringTree(scriptNode79);
        functionNode76.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode82 = functionNode76.getBody();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList83 = functionNode76.getParams();
        boolean boolean84 = strMap33.containsKey((java.lang.Object) astNodeList83);
        strMap33.clear();
        com.google.javascript.rhino.head.ast.Symbol symbol87 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str88 = symbol87.getDeclTypeName();
        int int89 = symbol87.getDeclType();
        com.google.javascript.rhino.head.ast.Scope scope90 = symbol87.getContainingTable();
        com.google.javascript.rhino.head.ast.Symbol symbol91 = strMap33.putIfAbsent("                          ", symbol87);
        symbol87.setName("<=");
        com.google.javascript.rhino.head.Node node94 = symbol87.getNode();
        int int95 = symbol87.getIndex();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertNotNull(functionNodeList68);
        org.junit.Assert.assertNotNull(functionNodeSpliterator69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(astNode82);
        org.junit.Assert.assertNotNull(astNodeList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "EOF" + "'", str88, "EOF");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(scope90);
        org.junit.Assert.assertNull(symbol91);
        org.junit.Assert.assertNull(node94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump21.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump21, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode27.getChildScopes();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump21, (com.google.javascript.rhino.head.Node) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode27.getFunctions();
        functionNodeList32.clear();
        boolean boolean34 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList32);
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = functionNode36.getTop();
        functionNode36.setParens((int) (byte) 1, (int) (short) 1);
        functionNode36.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList43 = functionNode36.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope45 = functionNode36.getDefiningScope("hi!");
        boolean boolean46 = functionNode36.isGetterOrSetter();
        int int47 = functionNodeList15.lastIndexOf((java.lang.Object) functionNode36);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode49 = functionNodeList15.get(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scriptNode37);
        org.junit.Assert.assertNull(nodeList43);
        org.junit.Assert.assertNull(scope45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList33 = scriptNode28.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator34 = functionNodeList33.spliterator();
        int int36 = functionNodeList33.indexOf((java.lang.Object) (byte) 10);
        boolean boolean37 = functionNodeList15.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList33);
        boolean boolean38 = functionNodeList15.isEmpty();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        int int42 = scriptNode40.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        jump45.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode47);
        java.lang.String str52 = scriptNode47.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode40, (com.google.javascript.rhino.head.ast.Scope) scriptNode47);
        int int54 = scriptNode40.getBaseLineno();
        boolean boolean55 = functionNodeList15.equals((java.lang.Object) int54);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor56 = functionNodeList15.iterator();
        functionNodeList15.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList60 = functionNodeList15.subList(327364487, 18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 18");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertNotNull(functionNodeList33);
        org.junit.Assert.assertNotNull(functionNodeSpliterator34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str52, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(functionNodeItor56);
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        com.google.javascript.rhino.head.Token.CommentType commentType4 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType4, "109");
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment(136, 15, commentType4, "-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.Token.CommentType commentType9 = com.google.javascript.rhino.head.Token.CommentType.JSDOC;
        comment8.setCommentType(commentType9);
        com.google.javascript.rhino.head.Token.CommentType commentType11 = com.google.javascript.rhino.head.Token.CommentType.JSDOC;
        comment8.setCommentType(commentType11);
        java.lang.String str13 = comment8.getValue();
        org.junit.Assert.assertTrue("'" + commentType4 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType4.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + commentType9 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.JSDOC + "'", commentType9.equals(com.google.javascript.rhino.head.Token.CommentType.JSDOC));
        org.junit.Assert.assertTrue("'" + commentType11 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.JSDOC + "'", commentType11.equals(com.google.javascript.rhino.head.Token.CommentType.JSDOC));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str13, "-1\tSCRIPT -1 1\n");
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        functionNode11.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode11.visit(nodeVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        scriptNode1.setEndLineno(671469117);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode10.getTop();
        com.google.javascript.rhino.head.ast.Name name12 = null;
        functionNode10.setFunctionName(name12);
        boolean boolean14 = functionNode10.requiresActivation();
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump18.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump18, 0);
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump26.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump30 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump26, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int32 = functionNode31.getLp();
        functionNode31.setEncodedSource("");
        functionNode31.flattenSymbolTable(false);
        jump18.addChildAfter((com.google.javascript.rhino.head.Node) jump26, (com.google.javascript.rhino.head.Node) functionNode31);
        com.google.javascript.rhino.head.Node node38 = functionNode31.target;
        functionNode10.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode31);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(10, (com.google.javascript.rhino.head.Node) functionNode31, 10);
        functionNode31.setFunctionIsSetter();
        int int43 = functionNode31.getBaseLineno();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        functionNode44.setParens((int) (byte) 1, (int) (short) 1);
        int int49 = functionNode44.getRp();
        int int50 = functionNode44.getAbsolutePosition();
        com.google.javascript.rhino.head.ast.AstNode astNode51 = functionNode44.getMemberExprNode();
        int int52 = functionNode44.getBaseLineno();
        java.lang.String str53 = functionNode44.shortName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode54 = functionNode44.getEnclosingFunction();
        int int55 = functionNode31.addFunction(functionNode44);
        com.google.javascript.rhino.head.Node node56 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.replaceChildAfter((com.google.javascript.rhino.head.Node) functionNode44, node56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(astNode51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "FunctionNode" + "'", str53, "FunctionNode");
        org.junit.Assert.assertNull(functionNode54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(17, 774094395);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        functionNode0.flattenSymbolTable(false);
        java.lang.String str6 = functionNode0.getName();
        functionNode0.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode8.getTop();
        com.google.javascript.rhino.head.Node node11 = functionNode8.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList12 = functionNode8.getParams();
        functionNode0.setParams(astNodeList12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        functionNode14.setLp((int) (short) 1);
        int int20 = functionNode14.getIntProp(4, 26);
        functionNode14.flattenSymbolTable(true);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList23 = functionNode14.getParams();
        functionNode0.setParams(astNodeList23);
        functionNode0.setEndLineno(12);
        com.google.javascript.rhino.head.ast.Scope scope27 = functionNode0.getEnclosingScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        int int32 = scriptNode30.getBaseLineno();
        scriptNode30.removeProp(0);
        int int35 = scriptNode30.getFunctionCount();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode47.getFunctions();
        int int53 = scriptNode47.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList54 = scriptNode47.getChildScopes();
        int int55 = scriptNode47.getEncodedSourceEnd();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList56 = scriptNode47.getSymbols();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int58 = functionNode57.getLp();
        functionNode57.setEncodedSource("");
        functionNode57.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral64 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str66 = regExpLiteral64.toSource((int) (byte) 10);
        regExpLiteral64.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral64.removeProp(8);
        java.lang.String str71 = regExpLiteral64.getValue();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(7, (com.google.javascript.rhino.head.Node) scriptNode47, (com.google.javascript.rhino.head.Node) functionNode57, (com.google.javascript.rhino.head.Node) regExpLiteral64);
        functionNode57.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int76 = functionNode75.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = functionNode75.getTop();
        com.google.javascript.rhino.head.ast.Name name78 = null;
        functionNode75.setFunctionName(name78);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode80 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode81 = functionNode80.getTop();
        functionNode75.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode80);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList83 = functionNode75.getParams();
        functionNode75.setRequiresActivation();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = new com.google.javascript.rhino.head.ast.ScriptNode();
        int int86 = scriptNode85.getEncodedSourceEnd();
        functionNode75.addResumptionPoint((com.google.javascript.rhino.head.Node) scriptNode85);
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) functionNode57, (com.google.javascript.rhino.head.Node) functionNode75);
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.setScope((com.google.javascript.rhino.head.ast.Scope) functionNode75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(astNodeList12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26 + "'", int20 == 26);
        org.junit.Assert.assertNotNull(astNodeList23);
        org.junit.Assert.assertNull(scope27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(scopeList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(symbolList56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "                    /null/" + "'", str66, "                    /null/");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(scriptNode77);
        org.junit.Assert.assertNotNull(scriptNode81);
        org.junit.Assert.assertNotNull(astNodeList83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        int int7 = functionNode0.getIntProp((int) (short) 100, (int) (byte) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode8.getTop();
        boolean boolean11 = functionNode8.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        int int22 = scriptNode20.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode20.getChildScopes();
        jump18.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode20);
        java.lang.String str25 = scriptNode20.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode13, (com.google.javascript.rhino.head.ast.Scope) scriptNode20);
        com.google.javascript.rhino.head.ast.Scope scope27 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode20.target = scope27;
        functionNode8.addChildScope(scope27);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode30.getTop();
        com.google.javascript.rhino.head.ast.Name name33 = null;
        functionNode30.setFunctionName(name33);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode35.getTop();
        functionNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode35);
        com.google.javascript.rhino.head.ast.Scope scope40 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode30.replaceWith(scope40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int43 = functionNode42.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = functionNode42.getTop();
        com.google.javascript.rhino.head.ast.Name name45 = null;
        functionNode42.setFunctionName(name45);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = functionNode47.getTop();
        functionNode42.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode47);
        int int50 = functionNode30.addFunction(functionNode42);
        int int51 = functionNode8.addFunction(functionNode42);
        functionNode0.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode42);
        com.google.javascript.rhino.head.ast.Scope scope53 = com.google.javascript.rhino.head.ast.Scope.splitScope((com.google.javascript.rhino.head.ast.Scope) functionNode42);
        functionNode42.removeProp((-3285918));
        com.google.javascript.rhino.head.ast.Scope scope56 = com.google.javascript.rhino.head.ast.Scope.splitScope((com.google.javascript.rhino.head.ast.Scope) functionNode42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int58 = functionNode57.getLp();
        functionNode57.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode61 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int62 = functionNode61.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = functionNode61.getTop();
        com.google.javascript.rhino.head.ast.Name name64 = null;
        functionNode61.setFunctionName(name64);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode66 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = functionNode66.getTop();
        functionNode61.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode66);
        int int69 = functionNode66.getRp();
        int int70 = functionNode66.getFunctionType();
        functionNode57.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode66);
        com.google.javascript.rhino.head.ast.Scope scope72 = functionNode66.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstNode astNode73 = scope72.getParent();
        com.google.javascript.rhino.head.Node node74 = scope72.getLastSibling();
        com.google.javascript.rhino.head.ast.Scope scope75 = scope72.getEnclosingScope();
        // The following exception was thrown during execution in test generation
        try {
            scope56.setLoop((com.google.javascript.rhino.head.ast.Jump) scope75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str25, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(scriptNode44);
        org.junit.Assert.assertNotNull(scriptNode48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(scriptNode63);
        org.junit.Assert.assertNotNull(scriptNode67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertNull(astNode73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(scope75);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        boolean boolean15 = functionNode11.isGenerator();
        int int16 = functionNode11.getFunctionType();
        com.google.javascript.rhino.head.Node node17 = functionNode11.getNext();
        functionNode11.setBounds(2, 17);
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump27.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump27, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int34 = scriptNode33.getEndLineno();
        int int35 = scriptNode33.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList36 = scriptNode33.getChildScopes();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump27, (com.google.javascript.rhino.head.Node) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList38 = scriptNode33.getFunctions();
        int int39 = scriptNode33.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scriptNode33.getChildScopes();
        int int41 = scriptNode33.getEncodedSourceEnd();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList42 = scriptNode33.getSymbols();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int44 = functionNode43.getLp();
        functionNode43.setEncodedSource("");
        functionNode43.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral50 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str52 = regExpLiteral50.toSource((int) (byte) 10);
        regExpLiteral50.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral50.removeProp(8);
        java.lang.String str57 = regExpLiteral50.getValue();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(7, (com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) functionNode43, (com.google.javascript.rhino.head.Node) regExpLiteral50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode59 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode59.getTop();
        functionNode59.setParens((int) (byte) 1, (int) (short) 1);
        functionNode59.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList66 = functionNode59.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope68 = functionNode59.getDefiningScope("hi!");
        boolean boolean69 = functionNode59.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode70 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int71 = functionNode70.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = functionNode70.getTop();
        com.google.javascript.rhino.head.ast.Name name73 = null;
        functionNode70.setFunctionName(name73);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = functionNode75.getTop();
        functionNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode75);
        int int78 = functionNode75.getRp();
        int int79 = functionNode75.getFunctionType();
        int int80 = functionNode59.addFunction(functionNode75);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (byte) 100, (com.google.javascript.rhino.head.Node) regExpLiteral50, (com.google.javascript.rhino.head.Node) functionNode75, 0);
        functionNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode75);
        com.google.javascript.rhino.head.Node node85 = functionNode11.setType(10);
        int int86 = functionNode11.getParamCount();
        functionNode11.setRequiresActivation();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope88 = functionNode11.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(scopeList36);
        org.junit.Assert.assertNotNull(functionNodeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(scopeList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(symbolList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                    /null/" + "'", str52, "                    /null/");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertNull(nodeList66);
        org.junit.Assert.assertNull(scope68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(scriptNode72);
        org.junit.Assert.assertNotNull(scriptNode76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scope1.new NodeIterator();
        boolean boolean12 = nodeIterator11.hasNext();
        com.google.javascript.rhino.head.Node node13 = nodeIterator11.next();
        nodeIterator11.remove();
        nodeIterator11.remove();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.Node node3 = functionNode0.getLastSibling();
        com.google.javascript.rhino.head.ast.AstNode astNode4 = functionNode0.getMemberExprNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode5.getTop();
        com.google.javascript.rhino.head.ast.Name name8 = null;
        functionNode5.setFunctionName(name8);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode10.getTop();
        functionNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode10);
        functionNode10.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int17 = functionNode10.addFunction(functionNode16);
        int int18 = functionNode0.addFunction(functionNode10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope25 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode26.getTop();
        functionNode26.setParens((int) (byte) 1, (int) (short) 1);
        functionNode26.setEncodedSourceStart((-1));
        functionNode26.setFunctionIsGetter();
        scope25.addChildToFront((com.google.javascript.rhino.head.Node) functionNode26);
        functionNode23.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode26);
        int int36 = functionNode19.addFunction(functionNode23);
        com.google.javascript.rhino.head.ast.Symbol symbol38 = functionNode19.getSymbol("-1\tBLOCK -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol43 = scriptNode40.getSymbol("hi!");
        scriptNode40.putIntProp(3, 0);
        functionNode19.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        boolean boolean48 = functionNode0.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = functionNode19.toSource();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(astNode4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(symbol38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(symbol43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = functionNode0.getSymbols();
        functionNode0.setRp(5);
        com.google.javascript.rhino.head.ast.Scope scope7 = functionNode0.getEnclosingScope();
        functionNode0.setParens(14, 19);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = functionNode0.getFunctions();
        com.google.javascript.rhino.head.ast.Jump jump16 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump16.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump20 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump16, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int23 = scriptNode22.getEndLineno();
        int int24 = scriptNode22.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList25 = scriptNode22.getChildScopes();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump16, (com.google.javascript.rhino.head.Node) scriptNode22);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList27 = scriptNode22.getFunctions();
        int int28 = functionNodeList27.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator29 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList27.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator29);
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor31 = functionNodeList27.listIterator();
        int int32 = functionNodeList27.size();
        com.google.javascript.rhino.head.ast.Jump jump37 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump37.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump37, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int44 = scriptNode43.getEndLineno();
        int int45 = scriptNode43.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList46 = scriptNode43.getChildScopes();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump37, (com.google.javascript.rhino.head.Node) scriptNode43);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList48 = scriptNode43.getFunctions();
        int int49 = functionNodeList48.size();
        com.google.javascript.rhino.head.ast.Jump jump55 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump55.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump59 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump55, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int62 = scriptNode61.getEndLineno();
        int int63 = scriptNode61.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList64 = scriptNode61.getChildScopes();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump55, (com.google.javascript.rhino.head.Node) scriptNode61);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList66 = scriptNode61.getFunctions();
        functionNodeList66.clear();
        com.google.javascript.rhino.head.ast.Jump jump72 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump72.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump76 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump72, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int79 = scriptNode78.getEndLineno();
        int int80 = scriptNode78.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList81 = scriptNode78.getChildScopes();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump72, (com.google.javascript.rhino.head.Node) scriptNode78);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList83 = scriptNode78.getFunctions();
        boolean boolean84 = functionNodeList66.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList83);
        boolean boolean85 = functionNodeList48.addAll(0, (java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList66);
        int int86 = functionNodeList48.size();
        com.google.javascript.rhino.head.ast.Jump jump89 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump89.removeProp((int) 'a');
        com.google.javascript.rhino.head.Node node92 = jump89.getFirstChild();
        boolean boolean93 = functionNodeList48.remove((java.lang.Object) node92);
        functionNodeList48.clear();
        boolean boolean95 = functionNodeList27.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList48);
        java.lang.Object obj96 = null;
        boolean boolean97 = functionNodeList27.contains(obj96);
        boolean boolean98 = functionNodeList11.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList27);
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream99 = functionNodeList27.stream();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertNull(scope7);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(scopeList25);
        org.junit.Assert.assertNotNull(functionNodeList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(functionNodeItor31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(scopeList46);
        org.junit.Assert.assertNotNull(functionNodeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(scopeList64);
        org.junit.Assert.assertNotNull(functionNodeList66);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNull(scopeList81);
        org.junit.Assert.assertNotNull(functionNodeList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(functionNodeStream99);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = functionNode9.new NodeIterator();
        int int16 = functionNode9.getLineno();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int35 = scriptNode34.getEndLineno();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral37 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str39 = regExpLiteral37.toSource((int) (byte) 10);
        regExpLiteral37.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral37.removeProp(8);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(10, node32, (com.google.javascript.rhino.head.Node) scriptNode34, (com.google.javascript.rhino.head.Node) regExpLiteral37, 3);
        com.google.javascript.rhino.head.ast.Jump jump48 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int51 = scriptNode50.getEndLineno();
        int int52 = scriptNode50.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode50.getChildScopes();
        jump48.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode56 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int57 = functionNode56.getLp();
        functionNode56.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        functionNode60.setEncodedSource("");
        functionNode60.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode66 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int67 = functionNode66.getLp();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode56, (com.google.javascript.rhino.head.Node) functionNode60, (com.google.javascript.rhino.head.Node) functionNode66, (int) '#');
        jump48.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode56);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList71 = functionNode56.getStatements();
        functionNode9.replaceChildAfter((com.google.javascript.rhino.head.Node) scriptNode34, (com.google.javascript.rhino.head.Node) functionNode56);
        com.google.javascript.rhino.head.ast.Scope scope73 = null;
        functionNode56.setParentScope(scope73);
        boolean boolean75 = functionNode56.hasSideEffects();
        com.google.javascript.rhino.head.ast.Scope scope76 = functionNode56.getParentScope();
        com.google.javascript.rhino.head.ast.Symbol symbol77 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.ast.Jump jump82 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump82.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump86 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump82, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode88 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int89 = scriptNode88.getEndLineno();
        int int90 = scriptNode88.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList91 = scriptNode88.getChildScopes();
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump82, (com.google.javascript.rhino.head.Node) scriptNode88);
        symbol77.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode88);
        com.google.javascript.rhino.head.ast.Scope scope94 = symbol77.getContainingTable();
        java.lang.String str95 = symbol77.getName();
        com.google.javascript.rhino.head.Node node96 = symbol77.getNode();
        // The following exception was thrown during execution in test generation
        try {
            functionNode56.putSymbol(symbol77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null symbol name");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "                    /null/" + "'", str39, "                    /null/");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(astNodeList71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(scope76);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNull(scopeList91);
        org.junit.Assert.assertNotNull(scope94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNull(node96);
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode0.replaceWith(scope10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int13 = functionNode12.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode12.getTop();
        com.google.javascript.rhino.head.ast.Name name15 = null;
        functionNode12.setFunctionName(name15);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode17.getTop();
        functionNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode17);
        int int20 = functionNode0.addFunction(functionNode12);
        boolean boolean21 = functionNode12.requiresActivation();
        functionNode12.setIsExpressionClosure(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str9 = functionNode5.toStringTree(scriptNode8);
        functionNode5.setFunctionIsGetter();
        int int11 = functionNode0.addFunction(functionNode5);
        com.google.javascript.rhino.head.ast.Jump jump16 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump16.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump20 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump16, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int23 = scriptNode22.getEndLineno();
        int int24 = scriptNode22.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList25 = scriptNode22.getChildScopes();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump16, (com.google.javascript.rhino.head.Node) scriptNode22);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList27 = scriptNode22.getFunctions();
        int int28 = scriptNode22.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode22.getChildScopes();
        scriptNode22.flattenSymbolTable(false);
        functionNode0.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = functionNode0.getParamOrVarName(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(scopeList25);
        org.junit.Assert.assertNotNull(functionNodeList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(scopeList29);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope2 = symbol0.getContainingTable();
        symbol0.setIndex(21);
        java.lang.String str5 = symbol0.getName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode6.getTop();
        com.google.javascript.rhino.head.ast.Name name9 = null;
        functionNode6.setFunctionName(name9);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = functionNode11.getTop();
        functionNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode11);
        int int14 = functionNode11.getRp();
        int int15 = functionNode11.getFunctionType();
        boolean boolean16 = functionNode11.requiresActivation();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = functionNode11.getChildScopes();
        functionNode11.setFunctionType(100);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode20.getTop();
        com.google.javascript.rhino.head.ast.Name name23 = null;
        functionNode20.setFunctionName(name23);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = functionNode25.getTop();
        functionNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        com.google.javascript.rhino.head.ast.Scope scope30 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode20.replaceWith(scope30);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int33 = functionNode32.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = functionNode32.getTop();
        com.google.javascript.rhino.head.ast.Name name35 = null;
        functionNode32.setFunctionName(name35);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode37);
        int int40 = functionNode20.addFunction(functionNode32);
        int int41 = functionNode32.getLineno();
        functionNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) functionNode32);
        symbol0.setNode((com.google.javascript.rhino.head.Node) functionNode11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = functionNode11.getTop();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode11.visit(nodeVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "EOF" + "'", str1, "EOF");
        org.junit.Assert.assertNull(scope2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertNotNull(scriptNode12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(scriptNode34);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(scriptNode44);
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.Node node3 = functionNode0.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList4 = functionNode0.getParams();
        int int5 = functionNode0.getType();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator6 = functionNode0.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(astNodeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 109 + "'", int5 == 109);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.Node node2 = scriptNode1.getFirstChild();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        functionNode4.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        functionNode8.setEncodedSource("");
        functionNode8.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode4, (com.google.javascript.rhino.head.Node) functionNode8, (com.google.javascript.rhino.head.Node) functionNode14, (int) '#');
        boolean boolean18 = functionNode14.isGenerator();
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scope20.setBounds(0, 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode24.getTop();
        int int26 = functionNode24.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = functionNode24.getEnclosingFunction();
        java.lang.String str28 = scope20.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode24);
        functionNode14.putProp(1, (java.lang.Object) functionNode24);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode30.getTop();
        com.google.javascript.rhino.head.ast.Name name33 = null;
        functionNode30.setFunctionName(name33);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode35.getTop();
        functionNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode35);
        functionNode35.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int42 = functionNode35.addFunction(functionNode41);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        java.lang.String str46 = scriptNode45.getJsDoc();
        com.google.javascript.rhino.head.Node node48 = scriptNode45.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode49 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int50 = functionNode49.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str53 = functionNode49.toStringTree(scriptNode52);
        com.google.javascript.rhino.head.ast.Scope scope55 = scriptNode52.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int58 = scriptNode57.getEndLineno();
        int int59 = scriptNode57.getBaseLineno();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(25, node48, (com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scriptNode57);
        int int61 = functionNode41.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        functionNode24.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode52);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList64 = scriptNode52.getFunctions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor66 = functionNodeList64.listIterator((-793599801));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -793599801, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(functionNode27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(scope55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(functionNodeList64);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node4 = scriptNode1.getNext();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getFirstChild();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode1.getFunctions();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = scriptNode1.new NodeIterator();
        boolean boolean8 = nodeIterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        functionNode5.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int12 = functionNode5.addFunction(functionNode11);
        java.lang.Object obj13 = functionNode5.getCompilerData();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int16 = functionNode15.getBaseLineno();
        functionNode15.setSourceName("                                                                                                                                                                                                        /null/");
        functionNode15.setRequiresActivation();
        com.google.javascript.rhino.head.Node node20 = functionNode15.target;
        int int21 = functionNode15.getLength();
        functionNode5.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode15);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = functionNode5.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        com.google.javascript.rhino.head.Node node23 = functionNode16.target;
        boolean boolean24 = functionNode16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Scope scope25 = functionNode16.getEnclosingScope();
        java.util.List<com.google.javascript.rhino.head.Node> nodeList26 = functionNode16.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump31.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump31, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int38 = scriptNode37.getEndLineno();
        int int39 = scriptNode37.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scriptNode37.getChildScopes();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump31, (com.google.javascript.rhino.head.Node) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode37.getFunctions();
        int int43 = scriptNode37.getPosition();
        functionNode16.addParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        int int45 = functionNode16.getFunctionCount();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNull(nodeList26);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(scopeList40);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name4 = null;
        functionNode1.setFunctionName(name4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode6);
        int int9 = functionNode6.getRp();
        int int10 = functionNode6.getFunctionType();
        boolean boolean11 = functionNode6.requiresActivation();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = functionNode6.getChildScopes();
        int int13 = functionNode6.getFunctionType();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode14.getTop();
        com.google.javascript.rhino.head.ast.Name name17 = null;
        functionNode14.setFunctionName(name17);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = functionNode19.getTop();
        functionNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode19);
        functionNode19.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int26 = functionNode19.addFunction(functionNode25);
        com.google.javascript.rhino.head.ast.Name name27 = null;
        functionNode19.setFunctionName(name27);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode30.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode33 = functionNode30.getBody();
        int int34 = functionNode30.getLength();
        functionNode19.putProp(100, (java.lang.Object) functionNode30);
        functionNode30.setRequiresActivation();
        int int37 = functionNode30.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode38 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int39 = functionNode38.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode38.getTop();
        boolean boolean41 = functionNode38.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int44 = scriptNode43.getEndLineno();
        int int45 = scriptNode43.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump48 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int51 = scriptNode50.getEndLineno();
        int int52 = scriptNode50.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode50.getChildScopes();
        jump48.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode50);
        java.lang.String str55 = scriptNode50.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode43, (com.google.javascript.rhino.head.ast.Scope) scriptNode50);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode50.target = scope57;
        functionNode38.addChildScope(scope57);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = functionNode60.getTop();
        com.google.javascript.rhino.head.ast.Name name63 = null;
        functionNode60.setFunctionName(name63);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode65 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = functionNode65.getTop();
        functionNode60.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode65);
        com.google.javascript.rhino.head.ast.Scope scope70 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode60.replaceWith(scope70);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode72 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int73 = functionNode72.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = functionNode72.getTop();
        com.google.javascript.rhino.head.ast.Name name75 = null;
        functionNode72.setFunctionName(name75);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode77 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = functionNode77.getTop();
        functionNode72.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode77);
        int int80 = functionNode60.addFunction(functionNode72);
        int int81 = functionNode38.addFunction(functionNode72);
        com.google.javascript.rhino.head.ast.Name name82 = functionNode72.getFunctionName();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap83 = functionNode72.getSymbolTable();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (byte) 100, (com.google.javascript.rhino.head.Node) functionNode6, (com.google.javascript.rhino.head.Node) functionNode30, (com.google.javascript.rhino.head.Node) functionNode72);
        functionNode30.removeChildren();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(scopeList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNotNull(scriptNode20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertNull(astNode33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str55, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(scriptNode62);
        org.junit.Assert.assertNotNull(scriptNode66);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(scriptNode74);
        org.junit.Assert.assertNotNull(scriptNode78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(name82);
        org.junit.Assert.assertNull(strMap83);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Scope scope36 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode37.setParens((int) (byte) 1, (int) (short) 1);
        functionNode37.setEncodedSourceStart((-1));
        functionNode37.setFunctionIsGetter();
        scope36.addChildToFront((com.google.javascript.rhino.head.Node) functionNode37);
        functionNode37.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int57 = scriptNode56.getEndLineno();
        int int58 = scriptNode56.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode56.getChildScopes();
        jump54.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode56);
        java.lang.String str61 = scriptNode56.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode49, (com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode56.target = scope63;
        java.lang.String str65 = functionNode37.toStringTree(scriptNode56);
        java.lang.String str67 = scriptNode56.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap68 = scriptNode56.getSymbolTable();
        strMap33.putAll(strMap68);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet70 = strMap68.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet71 = strMap68.entrySet();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode74 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int75 = functionNode74.getLp();
        functionNode74.setLp((int) (short) 1);
        int int80 = functionNode74.getIntProp(4, 26);
        com.google.javascript.rhino.head.ast.Jump jump81 = new com.google.javascript.rhino.head.ast.Jump(3, (com.google.javascript.rhino.head.Node) functionNode74);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) functionNode74);
        functionNode74.setFunctionType(11);
        boolean boolean85 = functionNode74.hasChildren();
        com.google.javascript.rhino.head.Node node86 = functionNode74.target;
        boolean boolean87 = strMap68.containsValue((java.lang.Object) node86);
        com.google.javascript.rhino.head.ast.Symbol symbol89 = null;
        com.google.javascript.rhino.head.ast.Symbol symbol90 = strMap68.put("{\n}\n", symbol89);
        java.util.Collection<com.google.javascript.rhino.head.ast.Symbol> symbolCollection91 = strMap68.values();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str61, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "                    {\n                    }\n" + "'", str67, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strEntrySet70);
        org.junit.Assert.assertNotNull(strEntrySet71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 26 + "'", int80 == 26);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(symbol90);
        org.junit.Assert.assertNotNull(symbolCollection91);
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        com.google.javascript.rhino.head.Node node23 = functionNode16.target;
        boolean boolean24 = functionNode16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Scope scope25 = functionNode16.getEnclosingScope();
        java.util.List<com.google.javascript.rhino.head.Node> nodeList26 = functionNode16.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump31.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump31, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int38 = scriptNode37.getEndLineno();
        int int39 = scriptNode37.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scriptNode37.getChildScopes();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump31, (com.google.javascript.rhino.head.Node) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode37.getFunctions();
        int int43 = scriptNode37.getPosition();
        functionNode16.addParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int46 = functionNode45.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = functionNode45.getTop();
        com.google.javascript.rhino.head.Node node48 = functionNode45.getLastSibling();
        com.google.javascript.rhino.head.ast.AstNode astNode49 = functionNode45.getMemberExprNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode50 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int51 = functionNode50.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = functionNode50.getTop();
        com.google.javascript.rhino.head.ast.Name name53 = null;
        functionNode50.setFunctionName(name53);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = functionNode55.getTop();
        functionNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode55);
        functionNode55.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode61 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int62 = functionNode55.addFunction(functionNode61);
        int int63 = functionNode45.addFunction(functionNode55);
        scriptNode37.replaceWith((com.google.javascript.rhino.head.ast.Scope) functionNode55);
        scriptNode37.putIntProp((-2), (-3285918));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNull(nodeList26);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(scopeList40);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(scriptNode47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(astNode49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(scriptNode52);
        org.junit.Assert.assertNotNull(scriptNode56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = functionNode0.getSymbols();
        functionNode0.setRp(5);
        functionNode0.setParens((int) '#', 24);
        int int10 = functionNode0.getParamCount();
        functionNode0.setSourceName("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode13.getTop();
        com.google.javascript.rhino.head.ast.Name name16 = null;
        functionNode13.setFunctionName(name16);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str22 = functionNode18.toStringTree(scriptNode21);
        functionNode18.setFunctionIsGetter();
        int int24 = functionNode13.addFunction(functionNode18);
        boolean boolean25 = functionNode18.hasSideEffects();
        com.google.javascript.rhino.head.Node node26 = functionNode18.getLastChild();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str31 = functionNode27.toStringTree(scriptNode30);
        functionNode27.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode33 = functionNode27.getBody();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList34 = functionNode27.getParams();
        functionNode18.setParams(astNodeList34);
        int int36 = functionNode18.getAbsolutePosition();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = functionNode18.getTop();
        boolean boolean38 = functionNode0.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode18);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(astNode33);
        org.junit.Assert.assertNotNull(astNodeList34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(scriptNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str9 = functionNode5.toStringTree(scriptNode8);
        functionNode5.setFunctionIsGetter();
        int int11 = functionNode0.addFunction(functionNode5);
        boolean boolean12 = functionNode5.hasSideEffects();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode13.getTop();
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int19 = scriptNode18.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        scriptNode18.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator24 = scriptNode18.new NodeIterator();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode15, (com.google.javascript.rhino.head.ast.Scope) scriptNode18);
        scriptNode15.setSourceName("");
        com.google.javascript.rhino.head.Node node28 = scriptNode15.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = scriptNode15.getParamOrVarName((-330954035));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.ast.Name name15 = functionNode0.getFunctionName();
        functionNode0.setFunctionType(7);
        boolean boolean18 = functionNode0.isGetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str23 = functionNode19.toStringTree(scriptNode22);
        functionNode19.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode25 = functionNode19.getBody();
        functionNode19.setParens(21, (int) '#');
        int int29 = functionNode19.getLp();
        com.google.javascript.rhino.head.ast.Jump jump34 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump34.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump38 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump34, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        int int42 = scriptNode40.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList43 = scriptNode40.getChildScopes();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump34, (com.google.javascript.rhino.head.Node) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList45 = scriptNode40.getChildScopes();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList46 = scriptNode40.getSymbols();
        functionNode19.setSymbols(symbolList46);
        com.google.javascript.rhino.head.ast.AstNode astNode48 = functionNode19.getBody();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral51 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) '#');
        java.lang.String str52 = regExpLiteral51.shortName();
        regExpLiteral51.setFlags("-1\tBLOCK -1 1\n");
        functionNode19.putProp((int) (byte) -1, (java.lang.Object) "-1\tBLOCK -1 1\n");
        functionNode0.addChildToBack((com.google.javascript.rhino.head.Node) functionNode19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = functionNode19.toSource(136);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(name15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(astNode25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 21 + "'", int29 == 21);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(scopeList43);
        org.junit.Assert.assertNull(scopeList45);
        org.junit.Assert.assertNotNull(symbolList46);
        org.junit.Assert.assertNull(astNode48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "RegExpLiteral" + "'", str52, "RegExpLiteral");
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = functionNode0.getSymbols();
        functionNode0.setRp(5);
        com.google.javascript.rhino.head.ast.Scope scope7 = functionNode0.getEnclosingScope();
        functionNode0.setLineno((int) (short) -1);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList10 = functionNode0.getResumptionPoints();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertNull(scope7);
        org.junit.Assert.assertNull(nodeList10);
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.Node node3 = functionNode0.getLastSibling();
        com.google.javascript.rhino.head.ast.AstNode astNode4 = functionNode0.getMemberExprNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode5.getTop();
        com.google.javascript.rhino.head.ast.Name name8 = null;
        functionNode5.setFunctionName(name8);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode10.getTop();
        functionNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode10);
        functionNode10.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int17 = functionNode10.addFunction(functionNode16);
        int int18 = functionNode0.addFunction(functionNode10);
        functionNode0.setLp(5);
        functionNode0.setEncodedSourceStart((-146877426));
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode23.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        functionNode26.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        functionNode30.setEncodedSource("");
        functionNode30.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode26, (com.google.javascript.rhino.head.Node) functionNode30, (com.google.javascript.rhino.head.Node) functionNode36, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode40 = functionNode26.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int42 = functionNode41.getLp();
        functionNode41.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int46 = functionNode45.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = functionNode45.getTop();
        com.google.javascript.rhino.head.ast.Name name48 = null;
        functionNode45.setFunctionName(name48);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode50 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = functionNode50.getTop();
        functionNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode50);
        int int53 = functionNode50.getRp();
        int int54 = functionNode50.getFunctionType();
        functionNode41.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode50);
        com.google.javascript.rhino.head.ast.Scope scope56 = functionNode50.getEnclosingScope();
        functionNode26.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode50);
        int int58 = functionNode23.addFunction(functionNode26);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList59 = functionNode23.getResumptionPoints();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = functionNode60.getTop();
        com.google.javascript.rhino.head.ast.Name name63 = null;
        functionNode60.setFunctionName(name63);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode65 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = functionNode65.getTop();
        functionNode60.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode65);
        functionNode65.setEncodedSourceStart(6);
        functionNode65.setRelative((-1));
        boolean boolean72 = functionNode23.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode65);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = functionNode0.getIndexForNameNode((com.google.javascript.rhino.head.Node) functionNode23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(astNode4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(astNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(scriptNode47);
        org.junit.Assert.assertNotNull(scriptNode51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(nodeList59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(scriptNode62);
        org.junit.Assert.assertNotNull(scriptNode66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope3 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode4.getTop();
        functionNode4.setParens((int) (byte) 1, (int) (short) 1);
        functionNode4.setEncodedSourceStart((-1));
        functionNode4.setFunctionIsGetter();
        scope3.addChildToFront((com.google.javascript.rhino.head.Node) functionNode4);
        functionNode1.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode4);
        functionNode1.setFunctionIsSetter();
        boolean boolean15 = functionNode1.isExpressionClosure();
        functionNode1.putIntProp(7, (int) (byte) 0);
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump(4, (com.google.javascript.rhino.head.Node) functionNode1);
        functionNode1.setRequiresActivation();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode22.getTop();
        java.lang.String str24 = scriptNode23.getJsDoc();
        com.google.javascript.rhino.head.Node node26 = scriptNode23.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str31 = functionNode27.toStringTree(scriptNode30);
        com.google.javascript.rhino.head.ast.Scope scope33 = scriptNode30.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList34 = scriptNode30.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int37 = scriptNode36.getEndLineno();
        int int38 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode30, (com.google.javascript.rhino.head.ast.Scope) scriptNode36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int42 = scriptNode41.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int45 = scriptNode44.getEndLineno();
        scriptNode41.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode44);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode47.getTop();
        boolean boolean50 = functionNode47.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int53 = scriptNode52.getEndLineno();
        int int54 = scriptNode52.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int60 = scriptNode59.getEndLineno();
        int int61 = scriptNode59.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList62 = scriptNode59.getChildScopes();
        jump57.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode59);
        java.lang.String str64 = scriptNode59.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode52, (com.google.javascript.rhino.head.ast.Scope) scriptNode59);
        com.google.javascript.rhino.head.ast.Scope scope66 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode59.target = scope66;
        functionNode47.addChildScope(scope66);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode44, (com.google.javascript.rhino.head.ast.Scope) functionNode47);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(20, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) scriptNode44);
        int int71 = scriptNode44.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int74 = scriptNode73.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int77 = scriptNode76.getEndLineno();
        scriptNode73.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode76);
        java.lang.String str79 = scriptNode73.getNextTempName();
        scriptNode44.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode73);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList81 = scriptNode44.getFunctions();
        functionNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(scope33);
        org.junit.Assert.assertNotNull(symbolList34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(scopeList62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str64, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "$0" + "'", str79, "$0");
        org.junit.Assert.assertNotNull(functionNodeList81);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = functionNode0.getSymbols();
        int int5 = functionNode0.getLength();
        boolean boolean6 = functionNode0.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump10.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump14 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump10, 0);
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump18.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump18, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int24 = functionNode23.getLp();
        functionNode23.setEncodedSource("");
        functionNode23.flattenSymbolTable(false);
        jump10.addChildAfter((com.google.javascript.rhino.head.Node) jump18, (com.google.javascript.rhino.head.Node) functionNode23);
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) jump10);
        com.google.javascript.rhino.head.Token.CommentType commentType33 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType33, "109");
        comment35.putIntProp(0, 1);
        jump10.setJsDocNode(comment35);
        com.google.javascript.rhino.head.Token.CommentType commentType40 = comment35.getCommentType();
        java.lang.String str41 = comment35.getValue();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + commentType33 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType33.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + commentType40 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType40.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "109" + "'", str41, "109");
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        com.google.javascript.rhino.head.Node node23 = functionNode16.target;
        boolean boolean24 = functionNode16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Name name25 = functionNode16.getFunctionName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode29.getTop();
        functionNode29.setParens((int) (byte) 1, (int) (short) 1);
        functionNode29.setEncodedSourceStart((-1));
        functionNode29.setFunctionIsGetter();
        scope28.addChildToFront((com.google.javascript.rhino.head.Node) functionNode29);
        functionNode26.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode29);
        functionNode29.setRelative(0);
        functionNode16.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode29);
        functionNode16.setEncodedSourceStart((int) (byte) 0);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList44 = functionNode16.getFunctions();
        com.google.javascript.rhino.head.ast.Jump jump49 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump49.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump53 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump49, 0);
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int63 = functionNode62.getLp();
        functionNode62.setEncodedSource("");
        functionNode62.flattenSymbolTable(false);
        jump49.addChildAfter((com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) functionNode62);
        com.google.javascript.rhino.head.Node node69 = functionNode62.target;
        boolean boolean70 = functionNode62.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Name name71 = functionNode62.getFunctionName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode72 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope74 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = functionNode75.getTop();
        functionNode75.setParens((int) (byte) 1, (int) (short) 1);
        functionNode75.setEncodedSourceStart((-1));
        functionNode75.setFunctionIsGetter();
        scope74.addChildToFront((com.google.javascript.rhino.head.Node) functionNode75);
        functionNode72.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode75);
        functionNode75.setRelative(0);
        functionNode62.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode75);
        boolean boolean88 = functionNode62.isGenerator();
        com.google.javascript.rhino.head.ast.Comment comment89 = functionNode62.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            functionNodeList44.add((int) 'a', functionNode62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(name25);
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertNotNull(functionNodeList44);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(name71);
        org.junit.Assert.assertNotNull(scriptNode76);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(comment89);
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int6 = scriptNode5.getEndLineno();
        int int7 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        jump10.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode12);
        java.lang.String str17 = scriptNode12.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode5, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode12.target = scope19;
        functionNode0.addChildScope(scope19);
        boolean boolean22 = functionNode0.hasConsistentReturnUsage();
        java.lang.String str23 = functionNode0.getNextTempName();
        functionNode0.setEncodedSourceBounds((-3285918), 17);
        boolean boolean27 = functionNode0.isGetter();
        functionNode0.setEncodedSource("$1");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str17, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "$0" + "'", str23, "$0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode3 = functionNode0.getBody();
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump9.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump13 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump9, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int16 = scriptNode15.getEndLineno();
        int int17 = scriptNode15.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode15.getChildScopes();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump9, (com.google.javascript.rhino.head.Node) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode15.getChildScopes();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump(11, (com.google.javascript.rhino.head.Node) scriptNode15);
        functionNode0.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        com.google.javascript.rhino.head.ast.AstNode astNode23 = functionNode0.getParent();
        com.google.javascript.rhino.head.Node node24 = functionNode0.getFirstChild();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(astNode3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertNotNull(astNode23);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral3 = new com.google.javascript.rhino.head.ast.RegExpLiteral((-1), 3);
        java.lang.String str4 = regExpLiteral3.getJsDoc();
        com.google.javascript.rhino.head.Node node6 = regExpLiteral3.setType(9);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral8 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) '#');
        java.lang.String str9 = regExpLiteral8.shortName();
        regExpLiteral8.setFlags("-1\tBLOCK -1 1\n");
        regExpLiteral8.setFlags("                                            {\n                                            }\n");
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("EOF");
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = node15.new NodeIterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode17.getTop();
        functionNode17.setParens((int) (byte) 1, (int) (short) 1);
        functionNode17.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList24 = functionNode17.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope26 = functionNode17.getDefiningScope("hi!");
        boolean boolean27 = functionNode17.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol32 = scriptNode29.getSymbol("hi!");
        scriptNode29.putIntProp(3, 0);
        functionNode17.addResumptionPoint((com.google.javascript.rhino.head.Node) scriptNode29);
        java.lang.String str37 = node15.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode17);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(48, node6, (com.google.javascript.rhino.head.Node) regExpLiteral8, (com.google.javascript.rhino.head.Node) functionNode17);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode17.visit(nodeVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "RegExpLiteral" + "'", str9, "RegExpLiteral");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertNull(nodeList24);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(symbol32);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        com.google.javascript.rhino.head.Node node23 = functionNode16.target;
        boolean boolean24 = functionNode16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Scope scope25 = functionNode16.getEnclosingScope();
        java.util.List<com.google.javascript.rhino.head.Node> nodeList26 = functionNode16.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode29.getTop();
        functionNode29.setParens((int) (byte) 1, (int) (short) 1);
        functionNode29.setEncodedSourceStart((-1));
        functionNode29.setFunctionIsGetter();
        scope28.addChildToFront((com.google.javascript.rhino.head.Node) functionNode29);
        functionNode29.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int42 = scriptNode41.getEndLineno();
        int int43 = scriptNode41.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump46 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int49 = scriptNode48.getEndLineno();
        int int50 = scriptNode48.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode48.getChildScopes();
        jump46.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode48);
        java.lang.String str53 = scriptNode48.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode41, (com.google.javascript.rhino.head.ast.Scope) scriptNode48);
        com.google.javascript.rhino.head.ast.Scope scope55 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode48.target = scope55;
        java.lang.String str57 = functionNode29.toStringTree(scriptNode48);
        java.lang.String str59 = scriptNode48.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap60 = scriptNode48.getSymbolTable();
        int int61 = strMap60.size();
        strMap60.clear();
        com.google.javascript.rhino.head.ast.Symbol symbol64 = null;
        com.google.javascript.rhino.head.ast.Symbol symbol65 = strMap60.replace("Symbol (EOF) name=null", symbol64);
        com.google.javascript.rhino.head.ast.Symbol symbol67 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str68 = symbol67.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope69 = symbol67.getContainingTable();
        com.google.javascript.rhino.head.ast.Scope scope70 = symbol67.getContainingTable();
        com.google.javascript.rhino.head.ast.Symbol symbol71 = strMap60.putIfAbsent("/=", symbol67);
        functionNode16.setSymbolTable(strMap60);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int75 = scriptNode74.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int78 = scriptNode77.getEndLineno();
        scriptNode74.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode77);
        com.google.javascript.rhino.head.ast.Scope scope80 = scriptNode77.getParentScope();
        com.google.javascript.rhino.head.ast.Scope scope81 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode77.addChildrenToBack((com.google.javascript.rhino.head.Node) scope81);
        scope81.setLineno(8);
        com.google.javascript.rhino.head.Node node85 = scope81.getFirstChild();
        scope81.setPosition(10);
        // The following exception was thrown during execution in test generation
        try {
            functionNode16.setLoop((com.google.javascript.rhino.head.ast.Jump) scope81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNull(nodeList26);
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str53, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "                    {\n                    }\n" + "'", str59, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(symbol65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "EOF" + "'", str68, "EOF");
        org.junit.Assert.assertNull(scope69);
        org.junit.Assert.assertNull(scope70);
        org.junit.Assert.assertNull(symbol71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(scope80);
        org.junit.Assert.assertNull(node85);
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int3 = scriptNode2.getEndLineno();
        int int4 = scriptNode2.getBaseLineno();
        scriptNode2.removeProp(0);
        int int7 = scriptNode2.getFunctionCount();
        com.google.javascript.rhino.head.ast.Jump jump13 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump13.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump13, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int20 = scriptNode19.getEndLineno();
        int int21 = scriptNode19.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode19.getChildScopes();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump13, (com.google.javascript.rhino.head.Node) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList24 = scriptNode19.getFunctions();
        int int25 = scriptNode19.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode19.getChildScopes();
        int int27 = scriptNode19.getEncodedSourceEnd();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = scriptNode19.getSymbols();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int30 = functionNode29.getLp();
        functionNode29.setEncodedSource("");
        functionNode29.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral36 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str38 = regExpLiteral36.toSource((int) (byte) 10);
        regExpLiteral36.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral36.removeProp(8);
        java.lang.String str43 = regExpLiteral36.getValue();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node(7, (com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) functionNode29, (com.google.javascript.rhino.head.Node) regExpLiteral36);
        functionNode29.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode47.getTop();
        com.google.javascript.rhino.head.ast.Name name50 = null;
        functionNode47.setFunctionName(name50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = functionNode52.getTop();
        functionNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode52);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList55 = functionNode47.getParams();
        functionNode47.setRequiresActivation();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        int int58 = scriptNode57.getEncodedSourceEnd();
        functionNode47.addResumptionPoint((com.google.javascript.rhino.head.Node) scriptNode57);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) functionNode29, (com.google.javascript.rhino.head.Node) functionNode47);
        com.google.javascript.rhino.head.ast.Jump jump63 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int66 = scriptNode65.getEndLineno();
        int int67 = scriptNode65.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList68 = scriptNode65.getChildScopes();
        jump63.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode65);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode71 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int72 = functionNode71.getLp();
        functionNode71.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int76 = functionNode75.getLp();
        functionNode75.setEncodedSource("");
        functionNode75.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode81 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int82 = functionNode81.getLp();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode71, (com.google.javascript.rhino.head.Node) functionNode75, (com.google.javascript.rhino.head.Node) functionNode81, (int) '#');
        jump63.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode71);
        int int86 = functionNode71.getLength();
        functionNode29.target = functionNode71;
        java.lang.String str89 = functionNode29.makeIndent((-1262414679));
        boolean boolean90 = functionNode29.isExpressionClosure();
        functionNode29.setRequiresActivation();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertNotNull(functionNodeList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(symbolList28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "                    /null/" + "'", str38, "                    /null/");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertNotNull(scriptNode53);
        org.junit.Assert.assertNotNull(astNodeList55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNull(scopeList68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.ast.Scope scope15 = functionNode9.getEnclosingScope();
        functionNode9.putProp((-1110578805), (java.lang.Object) "                                /null/");
        functionNode9.setEndLineno(14);
        boolean boolean21 = functionNode9.isGenerator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node22 = functionNode9.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode3 = functionNode0.getBody();
        int int4 = functionNode0.getLength();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap5 = null;
        functionNode0.setSymbolTable(strMap5);
        functionNode0.setIsGenerator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = functionNode0.toSource((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(astNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        com.google.javascript.rhino.head.ast.Jump jump5 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump5.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump5, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int12 = scriptNode11.getEndLineno();
        int int13 = scriptNode11.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump5, (com.google.javascript.rhino.head.Node) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode11.getFunctions();
        int int17 = scriptNode11.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode11.getChildScopes();
        int int19 = scriptNode11.getEncodedSourceEnd();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList20 = scriptNode11.getSymbols();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        functionNode21.setEncodedSource("");
        functionNode21.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral28 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str30 = regExpLiteral28.toSource((int) (byte) 10);
        regExpLiteral28.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral28.removeProp(8);
        java.lang.String str35 = regExpLiteral28.getValue();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(7, (com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) functionNode21, (com.google.javascript.rhino.head.Node) regExpLiteral28);
        java.lang.Class<?> wildcardClass37 = regExpLiteral28.getClass();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(symbolList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "                    /null/" + "'", str30, "                    /null/");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int6 = scriptNode5.getEndLineno();
        int int7 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        jump10.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode12);
        java.lang.String str17 = scriptNode12.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode5, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode12.target = scope19;
        functionNode0.addChildScope(scope19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.Scope scope32 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode22.replaceWith(scope32);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int42 = functionNode22.addFunction(functionNode34);
        int int43 = functionNode0.addFunction(functionNode34);
        com.google.javascript.rhino.head.ast.Name name44 = functionNode34.getFunctionName();
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode49.getChildScopes();
        jump47.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode49);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int56 = functionNode55.getLp();
        functionNode55.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode59 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int60 = functionNode59.getLp();
        functionNode59.setEncodedSource("");
        functionNode59.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode65 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int66 = functionNode65.getLp();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode55, (com.google.javascript.rhino.head.Node) functionNode59, (com.google.javascript.rhino.head.Node) functionNode65, (int) '#');
        jump47.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode55);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList70 = functionNode55.getStatements();
        functionNode34.setParams(astNodeList70);
        com.google.javascript.rhino.head.ast.Jump jump74 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int77 = scriptNode76.getEndLineno();
        int int78 = scriptNode76.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList79 = scriptNode76.getChildScopes();
        jump74.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode76);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode82 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int83 = functionNode82.getLp();
        functionNode82.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode86 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int87 = functionNode86.getLp();
        functionNode86.setEncodedSource("");
        functionNode86.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode92 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int93 = functionNode92.getLp();
        com.google.javascript.rhino.head.Node node95 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode82, (com.google.javascript.rhino.head.Node) functionNode86, (com.google.javascript.rhino.head.Node) functionNode92, (int) '#');
        jump74.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode82);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList97 = functionNode82.getStatements();
        functionNode34.setParams(astNodeList97);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str17, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(name44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(astNodeList70);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(scopeList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(astNodeList97);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int20 = scriptNode19.getEndLineno();
        int int21 = scriptNode19.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode19.getChildScopes();
        jump17.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode19);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor24 = scriptNode19.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        functionNode25.setEncodedSource("");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode19, (com.google.javascript.rhino.head.ast.Scope) functionNode25);
        com.google.javascript.rhino.head.ast.Jump jump34 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump34.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump38 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump34, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        int int42 = scriptNode40.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList43 = scriptNode40.getChildScopes();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump34, (com.google.javascript.rhino.head.Node) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList45 = scriptNode40.getFunctions();
        functionNodeList45.clear();
        int int48 = functionNodeList45.lastIndexOf((java.lang.Object) (-1L));
        com.google.javascript.rhino.head.ast.Jump jump53 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump53.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump53, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int60 = scriptNode59.getEndLineno();
        int int61 = scriptNode59.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList62 = scriptNode59.getChildScopes();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump53, (com.google.javascript.rhino.head.Node) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList64 = scriptNode59.getFunctions();
        functionNodeList64.clear();
        int int67 = functionNodeList64.lastIndexOf((java.lang.Object) (-1L));
        boolean boolean68 = functionNodeList45.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList64);
        com.google.javascript.rhino.head.ast.Jump jump73 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump73.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump77 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump73, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int80 = scriptNode79.getEndLineno();
        int int81 = scriptNode79.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList82 = scriptNode79.getChildScopes();
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump73, (com.google.javascript.rhino.head.Node) scriptNode79);
        com.google.javascript.rhino.head.Node node85 = scriptNode79.setType(0);
        int int86 = functionNodeList64.lastIndexOf((java.lang.Object) scriptNode79);
        functionNode11.addChildAfter((com.google.javascript.rhino.head.Node) functionNode25, (com.google.javascript.rhino.head.Node) scriptNode79);
        java.lang.String str88 = functionNode11.getNextTempName();
        boolean boolean89 = functionNode11.hasSideEffects();
        com.google.javascript.rhino.head.ast.AstNode astNode90 = functionNode11.getBody();
        int int91 = functionNode11.getRegexpCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertNotNull(nodeItor24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(scopeList43);
        org.junit.Assert.assertNotNull(functionNodeList45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(scopeList62);
        org.junit.Assert.assertNotNull(functionNodeList64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNull(scopeList82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "$0" + "'", str88, "$0");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(astNode90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        functionNodeList50.clear();
        functionNodeList50.clear();
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList68 = scriptNode63.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator69 = functionNodeList68.spliterator();
        int int71 = functionNodeList68.indexOf((java.lang.Object) (byte) 10);
        boolean boolean72 = functionNodeList50.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList68);
        boolean boolean73 = strMap33.containsKey((java.lang.Object) functionNodeList50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode76 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int77 = functionNode76.getLp();
        functionNode76.setLp((int) (short) 1);
        int int82 = functionNode76.getIntProp(4, 26);
        com.google.javascript.rhino.head.ast.Jump jump83 = new com.google.javascript.rhino.head.ast.Jump(3, (com.google.javascript.rhino.head.Node) functionNode76);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) functionNode76);
        functionNode76.setRequiresActivation();
        com.google.javascript.rhino.head.Node node87 = functionNode76.setType(9);
        com.google.javascript.rhino.head.Node node88 = functionNode76.getFirstChild();
        boolean boolean89 = strMap33.containsValue((java.lang.Object) node88);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strMap33.putAll(strMap90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertNotNull(functionNodeList68);
        org.junit.Assert.assertNotNull(functionNodeSpliterator69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 26 + "'", int82 == 26);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        int int7 = functionNode0.getIntProp((int) (short) 100, (int) (byte) 10);
        com.google.javascript.rhino.head.ast.AstNode astNode8 = functionNode0.getParent();
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNull(astNode8);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        java.lang.String str4 = scriptNode3.getJsDoc();
        com.google.javascript.rhino.head.Node node6 = scriptNode3.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str11 = functionNode7.toStringTree(scriptNode10);
        com.google.javascript.rhino.head.ast.Scope scope13 = scriptNode10.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int16 = scriptNode15.getEndLineno();
        int int17 = scriptNode15.getBaseLineno();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(25, node6, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scriptNode15);
        boolean boolean19 = scriptNode15.hasConsistentReturnUsage();
        java.lang.String str20 = scriptNode15.getNextTempName();
        java.lang.String str21 = scriptNode15.shortName();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode15.getChildScopes();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        functionNode24.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        functionNode28.setEncodedSource("");
        functionNode28.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode24, (com.google.javascript.rhino.head.Node) functionNode28, (com.google.javascript.rhino.head.Node) functionNode34, (int) '#');
        boolean boolean38 = functionNode34.isGenerator();
        int int39 = functionNode34.getFunctionType();
        boolean boolean40 = functionNode34.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList41 = functionNode34.getStatements();
        boolean boolean42 = functionNode34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int45 = functionNode44.getLp();
        functionNode44.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int49 = functionNode48.getLp();
        functionNode48.setEncodedSource("");
        functionNode48.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode54 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int55 = functionNode54.getLp();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode44, (com.google.javascript.rhino.head.Node) functionNode48, (com.google.javascript.rhino.head.Node) functionNode54, (int) '#');
        com.google.javascript.rhino.head.ast.Name name58 = null;
        functionNode48.setFunctionName(name58);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((-1110578805), (com.google.javascript.rhino.head.Node) scriptNode15, (com.google.javascript.rhino.head.Node) functionNode34, (com.google.javascript.rhino.head.Node) functionNode48);
        com.google.javascript.rhino.head.ast.Scope scope61 = null;
        functionNode48.replaceWith(scope61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = functionNode48.toSource(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$0" + "'", str20, "$0");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ScriptNode" + "'", str21, "ScriptNode");
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(astNodeList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        com.google.javascript.rhino.head.ast.Scope scope2 = functionNode1.getEnclosingScope();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Comment comment3 = scope2.getJsDocNode();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scope2);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        int int18 = functionNodeList15.size();
        java.util.stream.BaseStream[] baseStreamArray20 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[] functionNodeBaseStreamArray21 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[]) baseStreamArray20;
        java.util.stream.BaseStream[] baseStreamArray23 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[] functionNodeBaseStreamArray24 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[]) baseStreamArray23;
        java.util.stream.BaseStream[] baseStreamArray26 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[] functionNodeBaseStreamArray27 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[]) baseStreamArray26;
        java.util.stream.BaseStream[] baseStreamArray29 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[] functionNodeBaseStreamArray30 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[]) baseStreamArray29;
        java.util.stream.BaseStream[] baseStreamArray32 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[] functionNodeBaseStreamArray33 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[]) baseStreamArray32;
        java.util.stream.BaseStream[][] baseStreamArray35 = new java.util.stream.BaseStream[5][];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[][] functionNodeBaseStreamArray36 = (java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[][]) baseStreamArray35;
        functionNodeBaseStreamArray36[0] = baseStreamArray20;
        functionNodeBaseStreamArray36[1] = functionNodeBaseStreamArray24;
        functionNodeBaseStreamArray36[2] = baseStreamArray26;
        functionNodeBaseStreamArray36[3] = baseStreamArray29;
        functionNodeBaseStreamArray36[4] = baseStreamArray32;
        java.util.stream.BaseStream<com.google.javascript.rhino.head.ast.FunctionNode, java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode>>[][] functionNodeBaseStreamArray47 = functionNodeList15.toArray(functionNodeBaseStreamArray36);
        java.util.function.UnaryOperator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeUnaryOperator48 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNodeList15.replaceAll(functionNodeUnaryOperator48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(baseStreamArray20);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray21);
        org.junit.Assert.assertNotNull(baseStreamArray23);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray24);
        org.junit.Assert.assertNotNull(baseStreamArray26);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray27);
        org.junit.Assert.assertNotNull(baseStreamArray29);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray30);
        org.junit.Assert.assertNotNull(baseStreamArray32);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray33);
        org.junit.Assert.assertNotNull(baseStreamArray35);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray36);
        org.junit.Assert.assertNotNull(functionNodeBaseStreamArray47);
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        functionNode0.setEncodedSourceStart((-1));
        functionNode0.setIsGenerator();
        functionNode0.setEncodedSourceBounds(26, (int) (short) 1);
        functionNode0.setRp((-1));
        org.junit.Assert.assertNotNull(scriptNode1);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode8.setParens((int) (byte) 1, (int) (short) 1);
        functionNode8.setEncodedSourceStart((-1));
        functionNode8.setFunctionIsGetter();
        scope7.addChildToFront((com.google.javascript.rhino.head.Node) functionNode8);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode5.setFunctionIsSetter();
        int int19 = functionNode0.addFunction(functionNode5);
        java.lang.String str20 = functionNode0.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int23 = scriptNode22.getEndLineno();
        int int24 = scriptNode22.getBaseLineno();
        scriptNode22.removeProp(0);
        scriptNode22.setEncodedSourceEnd(19);
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode22);
        functionNode0.setEncodedSource("                {\n                }\n");
        functionNode0.setEncodedSourceBounds(23, 0);
        int int35 = functionNode0.getRegexpCount();
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$0" + "'", str20, "$0");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump8.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump12 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump8, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode14.getChildScopes();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump8, (com.google.javascript.rhino.head.Node) scriptNode14);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral23 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str25 = regExpLiteral23.toSource((int) (byte) 10);
        regExpLiteral23.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral23.removeProp(8);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(10, node18, (com.google.javascript.rhino.head.Node) scriptNode20, (com.google.javascript.rhino.head.Node) regExpLiteral23, 3);
        java.lang.String str33 = regExpLiteral23.makeIndent((int) (short) 100);
        int int34 = regExpLiteral23.getType();
        functionNode0.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) regExpLiteral23);
        com.google.javascript.rhino.head.ast.Symbol symbol36 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        symbol36.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode47);
        com.google.javascript.rhino.head.ast.Scope scope53 = symbol36.getContainingTable();
        symbol36.setName("                    /null/");
        com.google.javascript.rhino.head.ast.Scope scope56 = symbol36.getContainingTable();
        functionNode0.target = scope56;
        functionNode0.setParens((-14761645), 830992929);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "                    /null/" + "'", str25, "                    /null/");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 48 + "'", int34 == 48);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope56);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol0.setIndex(6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int8 = scriptNode7.getEndLineno();
        scriptNode4.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode7);
        com.google.javascript.rhino.head.ast.Comment comment10 = null;
        scriptNode4.setJsDocNode(comment10);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList12 = scriptNode4.getSymbols();
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode4);
        com.google.javascript.rhino.head.ast.Scope scope14 = symbol0.getContainingTable();
        java.lang.String str15 = symbol0.getName();
        symbol0.setName("/null/-1\tSCRIPT -1 1\n");
        // The following exception was thrown during execution in test generation
        try {
            symbol0.setDeclType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(symbolList12);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int4 = scriptNode3.getEndLineno();
        int int5 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        jump8.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode10);
        java.lang.String str15 = scriptNode10.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode3, (com.google.javascript.rhino.head.ast.Scope) scriptNode10);
        int int17 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump20 = new com.google.javascript.rhino.head.ast.Jump(3, 13);
        functionNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) jump20);
        scriptNode3.setEncodedSourceEnd(11);
        int int24 = scriptNode3.getEncodedSourceEnd();
        scriptNode3.flattenSymbolTable(false);
        scriptNode3.putIntProp(16, 23);
        java.lang.String str31 = scriptNode3.toSource((-616130778));
        scriptNode3.removeChildren();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str15, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{\n}\n" + "'", str31, "{\n}\n");
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump21.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump21, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode27.getChildScopes();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump21, (com.google.javascript.rhino.head.Node) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode27.getFunctions();
        boolean boolean33 = functionNodeList15.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList32);
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator34 = functionNodeList15.spliterator();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream35 = functionNodeList15.stream();
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor37 = functionNodeList15.listIterator(0);
        java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor38 = functionNodeList15.listIterator();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(functionNodeSpliterator34);
        org.junit.Assert.assertNotNull(functionNodeStream35);
        org.junit.Assert.assertNotNull(functionNodeItor37);
        org.junit.Assert.assertNotNull(functionNodeItor38);
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope2 = symbol0.getContainingTable();
        int int3 = symbol0.getIndex();
        // The following exception was thrown during execution in test generation
        try {
            symbol0.setDeclType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "EOF" + "'", str1, "EOF");
        org.junit.Assert.assertNull(scope2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        functionNode4.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        functionNode8.setEncodedSource("");
        functionNode8.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode4, (com.google.javascript.rhino.head.Node) functionNode8, (com.google.javascript.rhino.head.Node) functionNode14, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode18 = functionNode4.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int24 = functionNode23.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode23.getTop();
        com.google.javascript.rhino.head.ast.Name name26 = null;
        functionNode23.setFunctionName(name26);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = functionNode28.getTop();
        functionNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        int int31 = functionNode28.getRp();
        int int32 = functionNode28.getFunctionType();
        functionNode19.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        com.google.javascript.rhino.head.ast.Scope scope34 = functionNode28.getEnclosingScope();
        functionNode4.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        int int36 = functionNode1.addFunction(functionNode4);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList37 = functionNode1.getResumptionPoints();
        functionNode1.setLineno(14);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(109, (com.google.javascript.rhino.head.Node) functionNode1, 830992929);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int44 = functionNode43.getLp();
        functionNode43.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        functionNode47.setEncodedSource("");
        functionNode47.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int54 = functionNode53.getLp();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode43, (com.google.javascript.rhino.head.Node) functionNode47, (com.google.javascript.rhino.head.Node) functionNode53, (int) '#');
        boolean boolean57 = functionNode53.isGenerator();
        int int58 = functionNode53.getFunctionType();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        functionNode60.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode64 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int65 = functionNode64.getLp();
        functionNode64.setEncodedSource("");
        functionNode64.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode70 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int71 = functionNode70.getLp();
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode60, (com.google.javascript.rhino.head.Node) functionNode64, (com.google.javascript.rhino.head.Node) functionNode70, (int) '#');
        boolean boolean74 = functionNode70.isGenerator();
        int int75 = functionNode70.getFunctionType();
        com.google.javascript.rhino.head.Node node76 = functionNode70.getFirstChild();
        boolean boolean77 = functionNode70.isGetterOrSetter();
        functionNode53.setParentScope((com.google.javascript.rhino.head.ast.Scope) functionNode70);
        com.google.javascript.rhino.head.ast.Scope scope79 = functionNode53.getParentScope();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        int int81 = functionNode53.getFunctionType();
        com.google.javascript.rhino.head.Node node82 = functionNode53.target;
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(astNode18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertNotNull(scriptNode29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(nodeList37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(scope79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(node82);
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        functionNodeList15.clear();
        int int19 = functionNodeList15.indexOf((java.lang.Object) 10L);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor20 = functionNodeList15.iterator();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream21 = functionNodeList15.stream();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream22 = functionNodeList15.parallelStream();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType26, "109");
        java.lang.String str30 = comment28.toSource(19);
        com.google.javascript.rhino.head.ast.Scope scope33 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 10, (com.google.javascript.rhino.head.Node) comment28, (com.google.javascript.rhino.head.Node) scope33);
        boolean boolean35 = functionNodeList15.remove((java.lang.Object) comment28);
        int int36 = comment28.getLineno();
        java.lang.String str37 = comment28.getValue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(functionNodeItor20);
        org.junit.Assert.assertNotNull(functionNodeStream21);
        org.junit.Assert.assertNotNull(functionNodeStream22);
        org.junit.Assert.assertTrue("'" + commentType26 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType26.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "                                      109" + "'", str30, "                                      109");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "109" + "'", str37, "109");
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name2 = null;
        functionNode0.setFunctionName(name2);
        int int4 = functionNode0.getLength();
        functionNode0.setFunctionType(19);
        int int7 = functionNode0.getFunctionType();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.visit(nodeVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = functionNode2.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode12.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        functionNode15.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setEncodedSource("");
        functionNode19.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode15, (com.google.javascript.rhino.head.Node) functionNode19, (com.google.javascript.rhino.head.Node) functionNode25, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode29 = functionNode15.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        functionNode30.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int42 = functionNode39.getRp();
        int int43 = functionNode39.getFunctionType();
        functionNode30.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        com.google.javascript.rhino.head.ast.Scope scope45 = functionNode39.getEnclosingScope();
        functionNode15.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int47 = functionNode12.addFunction(functionNode15);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList48 = functionNode12.getResumptionPoints();
        boolean boolean49 = functionNode12.hasSideEffects();
        functionNode2.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = functionNode2.toSource();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNull(functionNode11);
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(astNode29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(nodeList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType2, "109");
        java.lang.String str6 = comment4.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment4.visit(nodeVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + commentType2 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType2.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "                    109" + "'", str6, "                    109");
        org.junit.Assert.assertTrue("'" + commentType7 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType7.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        functionNodeList50.clear();
        functionNodeList50.clear();
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList68 = scriptNode63.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator69 = functionNodeList68.spliterator();
        int int71 = functionNodeList68.indexOf((java.lang.Object) (byte) 10);
        boolean boolean72 = functionNodeList50.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList68);
        boolean boolean73 = strMap33.containsKey((java.lang.Object) functionNodeList50);
        boolean boolean74 = strMap33.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet75 = strMap33.entrySet();
        int int76 = strMap33.size();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode77 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int78 = functionNode77.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = functionNode77.getTop();
        boolean boolean80 = functionNode77.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList81 = functionNode77.getSymbols();
        int int82 = functionNode77.getLength();
        boolean boolean83 = functionNode77.isGetterOrSetter();
        functionNode77.setIsExpressionClosure(true);
        boolean boolean86 = strMap33.equals((java.lang.Object) functionNode77);
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertNotNull(functionNodeList68);
        org.junit.Assert.assertNotNull(functionNodeSpliterator69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strEntrySet75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(scriptNode79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(symbolList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump(23, 9);
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str4 = functionNode0.toStringTree(scriptNode3);
        int int5 = scriptNode3.getRegexpCount();
        java.lang.Object obj6 = scriptNode3.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int9 = scriptNode8.getEndLineno();
        int int10 = scriptNode8.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump13 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int16 = scriptNode15.getEndLineno();
        int int17 = scriptNode15.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode15.getChildScopes();
        jump13.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode15);
        java.lang.String str20 = scriptNode15.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode8, (com.google.javascript.rhino.head.ast.Scope) scriptNode15);
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode15.target = scope22;
        int int24 = scriptNode15.getEncodedSourceStart();
        java.lang.String str25 = scriptNode3.toStringTree(scriptNode15);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode26.getTop();
        com.google.javascript.rhino.head.ast.Name name29 = null;
        functionNode26.setFunctionName(name29);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode31.getTop();
        functionNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode31);
        functionNode31.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int38 = functionNode31.addFunction(functionNode37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode40.getTop();
        java.lang.String str42 = scriptNode41.getJsDoc();
        com.google.javascript.rhino.head.Node node44 = scriptNode41.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int46 = functionNode45.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str49 = functionNode45.toStringTree(scriptNode48);
        com.google.javascript.rhino.head.ast.Scope scope51 = scriptNode48.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int54 = scriptNode53.getEndLineno();
        int int55 = scriptNode53.getBaseLineno();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(25, node44, (com.google.javascript.rhino.head.Node) scriptNode48, (com.google.javascript.rhino.head.Node) scriptNode53);
        int int57 = functionNode37.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int59 = functionNode58.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode58.getTop();
        com.google.javascript.rhino.head.ast.Name name61 = null;
        functionNode58.setFunctionName(name61);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode63 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int64 = functionNode63.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str67 = functionNode63.toStringTree(scriptNode66);
        functionNode63.setFunctionIsGetter();
        int int69 = functionNode58.addFunction(functionNode63);
        boolean boolean70 = functionNode63.hasSideEffects();
        scriptNode48.setParent((com.google.javascript.rhino.head.ast.AstNode) functionNode63);
        // The following exception was thrown during execution in test generation
        try {
            scriptNode3.setDefault((com.google.javascript.rhino.head.Node) scriptNode48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str20, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(scope51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Symbol symbol2 = new com.google.javascript.rhino.head.ast.Symbol((-440310255), "                          EOF");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: -440310255");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral1 = new com.google.javascript.rhino.head.ast.RegExpLiteral(819764875);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = functionNode9.new NodeIterator();
        int int16 = functionNode9.getLineno();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int35 = scriptNode34.getEndLineno();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral37 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str39 = regExpLiteral37.toSource((int) (byte) 10);
        regExpLiteral37.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral37.removeProp(8);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(10, node32, (com.google.javascript.rhino.head.Node) scriptNode34, (com.google.javascript.rhino.head.Node) regExpLiteral37, 3);
        com.google.javascript.rhino.head.ast.Jump jump48 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int51 = scriptNode50.getEndLineno();
        int int52 = scriptNode50.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode50.getChildScopes();
        jump48.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode56 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int57 = functionNode56.getLp();
        functionNode56.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        functionNode60.setEncodedSource("");
        functionNode60.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode66 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int67 = functionNode66.getLp();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode56, (com.google.javascript.rhino.head.Node) functionNode60, (com.google.javascript.rhino.head.Node) functionNode66, (int) '#');
        jump48.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode56);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList71 = functionNode56.getStatements();
        functionNode9.replaceChildAfter((com.google.javascript.rhino.head.Node) scriptNode34, (com.google.javascript.rhino.head.Node) functionNode56);
        com.google.javascript.rhino.head.ast.Scope scope73 = null;
        functionNode56.setParentScope(scope73);
        functionNode56.clearParentScope();
        com.google.javascript.rhino.head.ast.Jump jump77 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode78 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int79 = functionNode78.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = functionNode78.getTop();
        com.google.javascript.rhino.head.ast.Name name81 = null;
        functionNode78.setFunctionName(name81);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode83 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode84 = functionNode83.getTop();
        functionNode78.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode83);
        functionNode83.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode89 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int90 = functionNode83.addFunction(functionNode89);
        int int91 = jump77.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode89);
        java.lang.Object obj92 = functionNode89.getCompilerData();
        int int93 = functionNode56.addFunction(functionNode89);
        boolean boolean94 = functionNode56.isGetterOrSetter();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "                    /null/" + "'", str39, "                    /null/");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(astNodeList71);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(scriptNode80);
        org.junit.Assert.assertNotNull(scriptNode84);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode3.getTop();
        com.google.javascript.rhino.head.ast.Name name6 = null;
        functionNode3.setFunctionName(name6);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode8.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int15 = functionNode8.addFunction(functionNode14);
        int int16 = jump2.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump24 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump24.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump24, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        int int32 = scriptNode30.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode30.getChildScopes();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump24, (com.google.javascript.rhino.head.Node) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode30.getFunctions();
        functionNodeList35.clear();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode47.getFunctions();
        boolean boolean53 = functionNodeList35.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList52);
        functionNode18.putProp(20, (java.lang.Object) functionNodeList35);
        int int55 = functionNode14.addFunction(functionNode18);
        boolean boolean56 = functionNode18.isGenerator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int59 = functionNode58.getBaseLineno();
        boolean boolean60 = functionNode58.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral62 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral62.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str65 = regExpLiteral62.getValue();
        regExpLiteral62.setFlags("52");
        functionNode58.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral62);
        functionNode18.addRegExp(regExpLiteral62);
        int int70 = functionNode18.getEncodedSourceStart();
        functionNode18.setEncodedSourceBounds(109, 22);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-1262414679), (com.google.javascript.rhino.head.Node) functionNode18, (int) (byte) -1);
        java.lang.String str76 = node75.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1262414679" + "'", str76, "-1262414679");
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.Node node1 = symbol0.getNode();
        symbol0.setIndex(4);
        symbol0.setName("");
        com.google.javascript.rhino.head.ast.Scope scope6 = symbol0.getContainingTable();
        // The following exception was thrown during execution in test generation
        try {
            symbol0.setDeclType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNull(scope6);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol0.setIndex(6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int8 = scriptNode7.getEndLineno();
        scriptNode4.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode7);
        com.google.javascript.rhino.head.ast.Comment comment10 = null;
        scriptNode4.setJsDocNode(comment10);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList12 = scriptNode4.getSymbols();
        symbol0.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode4);
        com.google.javascript.rhino.head.ast.Scope scope14 = symbol0.getContainingTable();
        symbol0.setIndex(15);
        com.google.javascript.rhino.head.Node node17 = symbol0.getNode();
        com.google.javascript.rhino.head.ast.Scope scope18 = symbol0.getContainingTable();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(symbolList12);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(scope18);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode15 = functionNode1.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode20.getTop();
        com.google.javascript.rhino.head.ast.Name name23 = null;
        functionNode20.setFunctionName(name23);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = functionNode25.getTop();
        functionNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        int int28 = functionNode25.getRp();
        int int29 = functionNode25.getFunctionType();
        functionNode16.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        com.google.javascript.rhino.head.ast.Scope scope31 = functionNode25.getEnclosingScope();
        functionNode1.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        int int33 = functionNode1.getType();
        com.google.javascript.rhino.head.Node node34 = functionNode1.getLastSibling();
        functionNode1.setLength((-817814412));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(astNode15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 109 + "'", int33 == 109);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        functionNode3.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        functionNode7.setEncodedSource("");
        functionNode7.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) functionNode7, (com.google.javascript.rhino.head.Node) functionNode13, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode3.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int30 = functionNode27.getRp();
        int int31 = functionNode27.getFunctionType();
        functionNode18.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.Scope scope33 = functionNode27.getEnclosingScope();
        functionNode3.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int35 = functionNode0.addFunction(functionNode3);
        com.google.javascript.rhino.head.Token.CommentType commentType38 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType38, "109");
        java.lang.String str42 = comment40.toSource(19);
        com.google.javascript.rhino.head.Token.CommentType commentType43 = comment40.getCommentType();
        int int44 = comment40.getLineno();
        functionNode3.addChildToFront((com.google.javascript.rhino.head.Node) comment40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = functionNode3.getRegexpFlags((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + commentType38 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType38.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                      109" + "'", str42, "                                      109");
        org.junit.Assert.assertTrue("'" + commentType43 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType43.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        com.google.javascript.rhino.head.Node node23 = functionNode16.target;
        boolean boolean24 = functionNode16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Scope scope25 = functionNode16.getEnclosingScope();
        java.util.List<com.google.javascript.rhino.head.Node> nodeList26 = functionNode16.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump31.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump31, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int38 = scriptNode37.getEndLineno();
        int int39 = scriptNode37.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scriptNode37.getChildScopes();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump31, (com.google.javascript.rhino.head.Node) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode37.getFunctions();
        int int43 = scriptNode37.getPosition();
        functionNode16.addParam((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        // The following exception was thrown during execution in test generation
        try {
            functionNode16.labelId(19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNull(nodeList26);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(scopeList40);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral1 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str3 = regExpLiteral1.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = regExpLiteral1.new NodeIterator();
        regExpLiteral1.setFlags("$0");
        int int7 = regExpLiteral1.getLineno();
        java.lang.String str9 = regExpLiteral1.toSource(6);
        regExpLiteral1.setBounds((-18802601), 11);
        // The following exception was thrown during execution in test generation
        try {
            regExpLiteral1.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                    /null/" + "'", str3, "                    /null/");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "            /null/$0" + "'", str9, "            /null/$0");
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str4 = regExpLiteral2.toSource((int) (byte) 10);
        regExpLiteral2.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str8 = regExpLiteral2.toSource(100);
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode11.getTop();
        com.google.javascript.rhino.head.ast.Name name14 = null;
        functionNode11.setFunctionName(name14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode16.getTop();
        functionNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode16);
        functionNode16.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int23 = functionNode16.addFunction(functionNode22);
        int int24 = jump10.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode22);
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) regExpLiteral2, (com.google.javascript.rhino.head.Node) jump10);
        com.google.javascript.rhino.head.Node node26 = null;
        // The following exception was thrown during execution in test generation
        try {
            jump10.setContinue(node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "                    /null/" + "'", str4, "                    /null/");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "                                                                                                                                                                                                        /null/-1\tSCRIPT -1 1\n" + "'", str8, "                                                                                                                                                                                                        /null/-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setLp((int) (short) 1);
        int int6 = functionNode0.getIntProp(4, 26);
        boolean boolean7 = functionNode0.hasChildren();
        java.lang.String str8 = functionNode0.getNextTempName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        com.google.javascript.rhino.head.ast.Name name11 = null;
        functionNode9.setFunctionName(name11);
        functionNode0.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode9);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode14.getTop();
        boolean boolean17 = functionNode14.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int20 = scriptNode19.getEndLineno();
        int int21 = scriptNode19.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump24 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int27 = scriptNode26.getEndLineno();
        int int28 = scriptNode26.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode26.getChildScopes();
        jump24.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode26);
        java.lang.String str31 = scriptNode26.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode19, (com.google.javascript.rhino.head.ast.Scope) scriptNode26);
        com.google.javascript.rhino.head.ast.Scope scope33 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode26.target = scope33;
        functionNode14.addChildScope(scope33);
        boolean boolean36 = functionNode14.hasConsistentReturnUsage();
        functionNode0.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode14);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int40 = scriptNode39.getEndLineno();
        int int41 = scriptNode39.getBaseLineno();
        com.google.javascript.rhino.head.Node node42 = scriptNode39.getNext();
        scriptNode39.setPosition((int) (byte) -1);
        functionNode0.addResumptionPoint((com.google.javascript.rhino.head.Node) scriptNode39);
        functionNode0.setRelative((-1044852625));
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int50 = functionNode0.getIndexForNameNode(node49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 26 + "'", int6 == 26);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$0" + "'", str8, "$0");
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str31, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        com.google.javascript.rhino.head.ast.Scope scope36 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode37.setParens((int) (byte) 1, (int) (short) 1);
        functionNode37.setEncodedSourceStart((-1));
        functionNode37.setFunctionIsGetter();
        scope36.addChildToFront((com.google.javascript.rhino.head.Node) functionNode37);
        functionNode37.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int57 = scriptNode56.getEndLineno();
        int int58 = scriptNode56.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode56.getChildScopes();
        jump54.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode56);
        java.lang.String str61 = scriptNode56.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode49, (com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode56.target = scope63;
        java.lang.String str65 = functionNode37.toStringTree(scriptNode56);
        java.lang.String str67 = scriptNode56.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap68 = scriptNode56.getSymbolTable();
        strMap33.putAll(strMap68);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet70 = strMap68.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet71 = strMap68.entrySet();
        com.google.javascript.rhino.head.ast.Symbol symbol73 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.ast.Jump jump78 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump78.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump82 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump78, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode84 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int85 = scriptNode84.getEndLineno();
        int int86 = scriptNode84.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList87 = scriptNode84.getChildScopes();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump78, (com.google.javascript.rhino.head.Node) scriptNode84);
        symbol73.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode84);
        com.google.javascript.rhino.head.ast.Symbol symbol90 = strMap68.put("RegExpLiteral", symbol73);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope91 = symbol90.getContainingTable();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str61, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "                    {\n                    }\n" + "'", str67, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strEntrySet70);
        org.junit.Assert.assertNotNull(strEntrySet71);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(scopeList87);
        org.junit.Assert.assertNull(symbol90);
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        functionNode3.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        functionNode7.setEncodedSource("");
        functionNode7.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int14 = functionNode13.getLp();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode3, (com.google.javascript.rhino.head.Node) functionNode7, (com.google.javascript.rhino.head.Node) functionNode13, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode3.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int30 = functionNode27.getRp();
        int int31 = functionNode27.getFunctionType();
        functionNode18.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.Scope scope33 = functionNode27.getEnclosingScope();
        functionNode3.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        int int35 = functionNode0.addFunction(functionNode3);
        functionNode0.setEncodedSourceEnd(350469479);
        com.google.javascript.rhino.head.ast.Scope scope39 = new com.google.javascript.rhino.head.ast.Scope((int) (byte) -1);
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scope39);
        int int41 = functionNode0.getLength();
        int int42 = functionNode0.getLineno();
        com.google.javascript.rhino.head.ast.Jump jump43 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.setLoop(jump43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode0.replaceWith(scope10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int13 = functionNode12.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode12.getTop();
        com.google.javascript.rhino.head.ast.Name name15 = null;
        functionNode12.setFunctionName(name15);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode17.getTop();
        functionNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode17);
        int int20 = functionNode0.addFunction(functionNode12);
        boolean boolean21 = functionNode12.requiresActivation();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = functionNode12.toSource((-440310255));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        functionNode1.setPosition((int) '#');
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        java.lang.String str8 = scriptNode7.getJsDoc();
        com.google.javascript.rhino.head.Node node10 = scriptNode7.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str15 = functionNode11.toStringTree(scriptNode14);
        com.google.javascript.rhino.head.ast.Scope scope17 = scriptNode14.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int20 = scriptNode19.getEndLineno();
        int int21 = scriptNode19.getBaseLineno();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(25, node10, (com.google.javascript.rhino.head.Node) scriptNode14, (com.google.javascript.rhino.head.Node) scriptNode19);
        functionNode1.setTop(scriptNode14);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList24 = functionNode1.getResumptionPoints();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(scope17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(nodeList24);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        com.google.javascript.rhino.head.ast.Scope scope0 = new com.google.javascript.rhino.head.ast.Scope();
        scope0.setBounds(0, 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode4.getTop();
        int int6 = functionNode4.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = functionNode4.getEnclosingFunction();
        java.lang.String str8 = scope0.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode4);
        scope0.setRelative(25);
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(functionNode7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        int int8 = functionNode5.getRp();
        functionNode5.setParens(11, 2);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int13 = functionNode12.getLp();
        functionNode12.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode16.getTop();
        com.google.javascript.rhino.head.ast.Name name19 = null;
        functionNode16.setFunctionName(name19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode21.getTop();
        functionNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode21);
        int int24 = functionNode21.getRp();
        int int25 = functionNode21.getFunctionType();
        functionNode12.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode21);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = functionNode27.getTop();
        com.google.javascript.rhino.head.Node node30 = functionNode27.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList31 = functionNode27.getParams();
        functionNode12.setParams(astNodeList31);
        functionNode5.setParams(astNodeList31);
        com.google.javascript.rhino.head.ast.Scope scope35 = functionNode5.getDefiningScope("");
        functionNode5.setRp((int) (short) 100);
        int int38 = functionNode5.getPosition();
        java.lang.String str39 = functionNode5.getEncodedSource();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(scriptNode29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(astNodeList31);
        org.junit.Assert.assertNull(scope35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        int int6 = scriptNode4.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode4.getChildScopes();
        jump2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator9 = scriptNode4.spliterator();
        java.lang.String str10 = scriptNode4.getNextTempName();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList11 = scriptNode4.getStatements();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node12 = scriptNode4.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$0" + "'", str10, "$0");
        org.junit.Assert.assertNotNull(astNodeList11);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name2 = null;
        functionNode0.setFunctionName(name2);
        boolean boolean4 = functionNode0.requiresActivation();
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump8.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump12 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump8, 0);
        com.google.javascript.rhino.head.ast.Jump jump16 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump16.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump20 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump16, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        functionNode21.setEncodedSource("");
        functionNode21.flattenSymbolTable(false);
        jump8.addChildAfter((com.google.javascript.rhino.head.Node) jump16, (com.google.javascript.rhino.head.Node) functionNode21);
        com.google.javascript.rhino.head.Node node28 = functionNode21.target;
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode21);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.visit(nodeVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getName();
        com.google.javascript.rhino.head.Node node2 = symbol0.getNode();
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) ' ');
        symbol0.setNode((com.google.javascript.rhino.head.Node) jump4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode6.getTop();
        boolean boolean9 = functionNode6.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList10 = functionNode6.getSymbols();
        functionNode6.setRp(5);
        com.google.javascript.rhino.head.ast.Scope scope13 = functionNode6.getEnclosingScope();
        // The following exception was thrown during execution in test generation
        try {
            jump4.setContinue((com.google.javascript.rhino.head.Node) scope13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(symbolList10);
        org.junit.Assert.assertNull(scope13);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        java.lang.Object obj35 = null;
        java.lang.Object obj36 = null;
        boolean boolean37 = strMap33.remove(obj35, obj36);
        com.google.javascript.rhino.head.ast.Symbol symbol39 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str40 = symbol39.getName();
        com.google.javascript.rhino.head.Node node41 = symbol39.getNode();
        java.lang.String str42 = symbol39.getDeclTypeName();
        java.lang.String str43 = symbol39.toString();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int45 = functionNode44.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = functionNode44.getTop();
        boolean boolean47 = functionNode44.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int57 = scriptNode56.getEndLineno();
        int int58 = scriptNode56.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode56.getChildScopes();
        jump54.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode56);
        java.lang.String str61 = scriptNode56.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode49, (com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode56.target = scope63;
        functionNode44.addChildScope(scope63);
        boolean boolean66 = functionNode44.hasConsistentReturnUsage();
        java.lang.String str67 = functionNode44.getNextTempName();
        functionNode44.removeProp(5);
        symbol39.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode44);
        symbol39.setIndex(0);
        com.google.javascript.rhino.head.ast.Symbol symbol73 = strMap33.put("", symbol39);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = symbol73.getIndex();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "EOF" + "'", str42, "EOF");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Symbol (EOF) name=null" + "'", str43, "Symbol (EOF) name=null");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(scriptNode46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str61, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "$0" + "'", str67, "$0");
        org.junit.Assert.assertNull(symbol73);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        int int23 = functionNode16.getLength();
        int int24 = functionNode16.getLineno();
        boolean boolean25 = functionNode16.isGetter();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.ast.Scope scope15 = functionNode0.getParentScope();
        int int16 = functionNode0.getBaseLineno();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int9 = scriptNode8.getEndLineno();
        int int10 = scriptNode8.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode8.getChildScopes();
        jump6.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode8);
        java.lang.String str13 = scriptNode8.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode8);
        com.google.javascript.rhino.head.ast.AstNode astNode15 = scriptNode1.getParent();
        int int16 = scriptNode1.getType();
        com.google.javascript.rhino.head.ast.Symbol symbol18 = scriptNode1.getSymbol("109");
        java.lang.String str19 = scriptNode1.toSource();
        int int20 = scriptNode1.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode21.getTop();
        functionNode21.setParens((int) (byte) 1, (int) (short) 1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor26 = functionNode21.iterator();
        functionNode21.setLp(136);
        int int29 = functionNode21.getFunctionType();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) functionNode21);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator31 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode(13);
        int int34 = functionNode33.getType();
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) functionNode33);
        java.lang.String str36 = scriptNode1.getNextTempName();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.visit(nodeVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str13, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(astNode15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 136 + "'", int16 == 136);
        org.junit.Assert.assertNull(symbol18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n}\n" + "'", str19, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertNotNull(nodeItor26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 109 + "'", int34 == 109);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "$0" + "'", str36, "$0");
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        int int23 = functionNode16.getLength();
        com.google.javascript.rhino.head.Node node25 = functionNode16.setType(21);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode26.getTop();
        com.google.javascript.rhino.head.ast.Name name28 = null;
        functionNode26.setFunctionName(name28);
        int int30 = functionNode26.getLength();
        functionNode26.setFunctionType(19);
        functionNode16.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode26);
        functionNode16.removeProp((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        functionNode36.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = functionNode40.getTop();
        com.google.javascript.rhino.head.ast.Name name43 = null;
        functionNode40.setFunctionName(name43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = functionNode45.getTop();
        functionNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        int int48 = functionNode45.getRp();
        int int49 = functionNode45.getFunctionType();
        functionNode36.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        com.google.javascript.rhino.head.Node node51 = functionNode36.getLastSibling();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int53 = functionNode52.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = functionNode52.getTop();
        com.google.javascript.rhino.head.ast.Name name55 = null;
        functionNode52.setFunctionName(name55);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = functionNode57.getTop();
        functionNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode57);
        int int60 = functionNode57.getRp();
        int int61 = functionNode57.getFunctionType();
        boolean boolean62 = functionNode57.requiresActivation();
        functionNode57.setParens((int) ' ', 9);
        functionNode16.addChildAfter(node51, (com.google.javascript.rhino.head.Node) functionNode57);
        com.google.javascript.rhino.head.Node node67 = functionNode57.target;
        com.google.javascript.rhino.head.ast.AstNode astNode68 = functionNode57.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode70 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int71 = functionNode70.getBaseLineno();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode73 = new com.google.javascript.rhino.head.ast.FunctionNode((-1));
        functionNode70.setParentScope((com.google.javascript.rhino.head.ast.Scope) functionNode73);
        functionNode70.setRp(22);
        int int77 = functionNode57.addFunction(functionNode70);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode70.visit(nodeVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(scriptNode42);
        org.junit.Assert.assertNotNull(scriptNode46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(scriptNode54);
        org.junit.Assert.assertNotNull(scriptNode58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(astNode68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        boolean boolean4 = functionNode1.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int7 = scriptNode6.getEndLineno();
        int int8 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int14 = scriptNode13.getEndLineno();
        int int15 = scriptNode13.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode13.getChildScopes();
        jump11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str18 = scriptNode13.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode6, (com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode13.target = scope20;
        functionNode1.addChildScope(scope20);
        boolean boolean23 = functionNode1.hasConsistentReturnUsage();
        java.lang.String str24 = functionNode1.getNextTempName();
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) (short) -1, (com.google.javascript.rhino.head.Node) functionNode1);
        boolean boolean26 = functionNode1.isExpressionClosure();
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int30 = functionNode29.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = functionNode29.getTop();
        com.google.javascript.rhino.head.ast.Name name32 = null;
        functionNode29.setFunctionName(name32);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = functionNode34.getTop();
        functionNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode34);
        functionNode34.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int41 = functionNode34.addFunction(functionNode40);
        int int42 = jump28.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump50 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump50.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump50, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int57 = scriptNode56.getEndLineno();
        int int58 = scriptNode56.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode56.getChildScopes();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump50, (com.google.javascript.rhino.head.Node) scriptNode56);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList61 = scriptNode56.getFunctions();
        functionNodeList61.clear();
        com.google.javascript.rhino.head.ast.Jump jump67 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump67.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump71 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump67, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int74 = scriptNode73.getEndLineno();
        int int75 = scriptNode73.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList76 = scriptNode73.getChildScopes();
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump67, (com.google.javascript.rhino.head.Node) scriptNode73);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList78 = scriptNode73.getFunctions();
        boolean boolean79 = functionNodeList61.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList78);
        functionNode44.putProp(20, (java.lang.Object) functionNodeList61);
        int int81 = functionNode40.addFunction(functionNode44);
        boolean boolean82 = functionNode44.isGenerator();
        functionNode1.setTop((com.google.javascript.rhino.head.ast.ScriptNode) functionNode44);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode1.visit(nodeVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str18, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$0" + "'", str24, "$0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(scriptNode31);
        org.junit.Assert.assertNotNull(scriptNode35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertNotNull(functionNodeList61);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNull(scopeList76);
        org.junit.Assert.assertNotNull(functionNodeList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral1 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str3 = regExpLiteral1.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = regExpLiteral1.new NodeIterator();
        regExpLiteral1.setLength((int) '4');
        regExpLiteral1.setFlags("                {\n                }\n");
        // The following exception was thrown during execution in test generation
        try {
            double double9 = regExpLiteral1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.RegExpLiteral cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                    /null/" + "'", str3, "                    /null/");
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        strMap33.clear();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode36.getTop();
        boolean boolean39 = functionNode36.hasSideEffects();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = functionNode40.getTop();
        com.google.javascript.rhino.head.ast.Name name43 = null;
        functionNode40.setFunctionName(name43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = functionNode45.getTop();
        functionNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        int int48 = functionNode45.getRp();
        functionNode45.setParens(11, 2);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode((-1));
        int int54 = functionNode45.addFunction(functionNode53);
        functionNode36.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        com.google.javascript.rhino.head.ast.Symbol symbol56 = strMap33.remove((java.lang.Object) functionNode45);
        functionNode45.clearParentScope();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = functionNode45.getRegexpString((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(scriptNode42);
        org.junit.Assert.assertNotNull(scriptNode46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(symbol56);
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode3 = functionNode0.getBody();
        int int4 = functionNode0.getLength();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap5 = null;
        functionNode0.setSymbolTable(strMap5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode7.getTop();
        com.google.javascript.rhino.head.ast.Name name10 = null;
        functionNode7.setFunctionName(name10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode12.getTop();
        functionNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode12);
        int int15 = functionNode12.getRp();
        int int16 = functionNode12.getFunctionType();
        boolean boolean17 = functionNode12.isExpressionClosure();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode20.getTop();
        com.google.javascript.rhino.head.ast.Name name23 = null;
        functionNode20.setFunctionName(name23);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = functionNode25.getTop();
        functionNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        functionNode25.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int32 = functionNode25.addFunction(functionNode31);
        int int33 = jump19.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode31);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode47.getFunctions();
        functionNodeList52.clear();
        com.google.javascript.rhino.head.ast.Jump jump58 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump58.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump62 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump58, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int65 = scriptNode64.getEndLineno();
        int int66 = scriptNode64.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList67 = scriptNode64.getChildScopes();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump58, (com.google.javascript.rhino.head.Node) scriptNode64);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList69 = scriptNode64.getFunctions();
        boolean boolean70 = functionNodeList52.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList69);
        functionNode35.putProp(20, (java.lang.Object) functionNodeList52);
        int int72 = functionNode31.addFunction(functionNode35);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode73 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = functionNode73.getTop();
        functionNode73.setParens((int) (byte) 1, (int) (short) 1);
        functionNode73.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList80 = functionNode73.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope82 = functionNode73.getDefiningScope("hi!");
        boolean boolean83 = functionNode73.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.Scope scope85 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        int[] intArray92 = new int[] { 25, 17, (short) 0, 20, 19, (byte) 1 };
        functionNode73.addLiveLocals((com.google.javascript.rhino.head.Node) scope85, intArray92);
        functionNode12.addLiveLocals((com.google.javascript.rhino.head.Node) functionNode35, intArray92);
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(astNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(scopeList67);
        org.junit.Assert.assertNotNull(functionNodeList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(scriptNode74);
        org.junit.Assert.assertNull(nodeList80);
        org.junit.Assert.assertNull(scope82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[25, 17, 0, 20, 19, 1]");
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        functionNode1.setSourceName("                                                                                                                                                                                                        /null/");
        com.google.javascript.rhino.head.ast.AstNode astNode5 = functionNode1.getBody();
        functionNode1.setLp(26);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(astNode5);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral((-1), 3);
        com.google.javascript.rhino.head.Node node4 = regExpLiteral2.setType((int) (short) 100);
        java.lang.String str5 = regExpLiteral2.getJsDoc();
        java.lang.String str7 = regExpLiteral2.toSource(4);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "        /null/" + "'", str7, "        /null/");
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(22, "                                ");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        boolean boolean15 = functionNode11.isGenerator();
        int int16 = functionNode11.getFunctionType();
        com.google.javascript.rhino.head.Node node17 = functionNode11.getNext();
        functionNode11.setFunctionIsSetter();
        functionNode11.clearParentScope();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode20.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode23 = functionNode20.getBody();
        com.google.javascript.rhino.head.ast.Jump jump29 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump29.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump33 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump29, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int36 = scriptNode35.getEndLineno();
        int int37 = scriptNode35.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode35.getChildScopes();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump29, (com.google.javascript.rhino.head.Node) scriptNode35);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scriptNode35.getChildScopes();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump(11, (com.google.javascript.rhino.head.Node) scriptNode35);
        functionNode20.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        scriptNode35.setLength(20);
        functionNode11.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode35);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList46 = functionNode11.getStatements();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertNull(astNode23);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertNull(scopeList40);
        org.junit.Assert.assertNotNull(astNodeList46);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name4 = null;
        functionNode1.setFunctionName(name4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode6);
        functionNode6.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int13 = functionNode6.addFunction(functionNode12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode15.getTop();
        java.lang.String str17 = scriptNode16.getJsDoc();
        com.google.javascript.rhino.head.Node node19 = scriptNode16.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        com.google.javascript.rhino.head.ast.Scope scope26 = scriptNode23.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(25, node19, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) scriptNode28);
        int int32 = functionNode12.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral34 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral34.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral34.setFlags("/null/-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode39.getTop();
        com.google.javascript.rhino.head.ast.Name name42 = null;
        functionNode39.setFunctionName(name42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        functionNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode44);
        int int47 = functionNode44.getRp();
        int int48 = functionNode44.getFunctionType();
        boolean boolean49 = functionNode44.requiresActivation();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(26, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) regExpLiteral34, (com.google.javascript.rhino.head.Node) functionNode44);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int53 = functionNode52.getBaseLineno();
        functionNode52.setSourceName("                                                                                                                                                                                                        /null/");
        com.google.javascript.rhino.head.ast.AstNode astNode56 = functionNode52.getBody();
        functionNode44.replaceWith((com.google.javascript.rhino.head.ast.Scope) functionNode52);
        com.google.javascript.rhino.head.ast.Symbol symbol58 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol58.setIndex(6);
        java.lang.String str61 = symbol58.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope62 = symbol58.getContainingTable();
        com.google.javascript.rhino.head.Node node63 = symbol58.getNode();
        // The following exception was thrown during execution in test generation
        try {
            functionNode52.setCompilerData((java.lang.Object) node63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: arg cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(astNode56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "EOF" + "'", str61, "EOF");
        org.junit.Assert.assertNull(scope62);
        org.junit.Assert.assertNull(node63);
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        java.lang.String str8 = functionNode0.getNextTempName();
        java.lang.String str9 = functionNode0.getEncodedSource();
        functionNode0.setIsGenerator();
        functionNode0.setBaseLineno(48);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        functionNode14.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        functionNode18.setEncodedSource("");
        functionNode18.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode14, (com.google.javascript.rhino.head.Node) functionNode18, (com.google.javascript.rhino.head.Node) functionNode24, (int) '#');
        functionNode24.setEncodedSourceStart(25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode31.getTop();
        functionNode31.setParens((int) (byte) 1, (int) (short) 1);
        int int36 = functionNode31.getRp();
        com.google.javascript.rhino.head.Node node39 = com.google.javascript.rhino.head.Node.newString((int) (byte) 100, "");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str44 = functionNode40.toStringTree(scriptNode43);
        com.google.javascript.rhino.head.ast.Scope scope46 = scriptNode43.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList47 = scriptNode43.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode43, (com.google.javascript.rhino.head.ast.Scope) scriptNode49);
        java.lang.String str53 = scriptNode49.getEncodedSource();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) functionNode31, node39, (com.google.javascript.rhino.head.Node) scriptNode49, (int) (short) 0);
        functionNode24.setParent((com.google.javascript.rhino.head.ast.AstNode) functionNode31);
        functionNode0.target = functionNode24;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int59 = functionNode58.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode58.getTop();
        boolean boolean61 = functionNode58.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump68 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int71 = scriptNode70.getEndLineno();
        int int72 = scriptNode70.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode70.getChildScopes();
        jump68.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode70);
        java.lang.String str75 = scriptNode70.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode63, (com.google.javascript.rhino.head.ast.Scope) scriptNode70);
        com.google.javascript.rhino.head.ast.Scope scope77 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode70.target = scope77;
        functionNode58.addChildScope(scope77);
        int int80 = functionNode0.compareTo((com.google.javascript.rhino.head.ast.AstNode) scope77);
        functionNode0.setBounds((int) (byte) 10, 18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = functionNode0.toSource((-1110578805));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$0" + "'", str8, "$0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(scope46);
        org.junit.Assert.assertNotNull(symbolList47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str75, "-1\tSCRIPT -1 1\n");
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-831781330) + "'", int80 == (-831781330));
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = functionNode0.getSymbols();
        functionNode0.setRp(5);
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int10 = functionNode9.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode9.getTop();
        com.google.javascript.rhino.head.ast.Name name12 = null;
        functionNode9.setFunctionName(name12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = functionNode14.getTop();
        functionNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode14);
        functionNode14.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int21 = functionNode14.addFunction(functionNode20);
        int int22 = jump8.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode20);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump30 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump30.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump34 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump30, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int37 = scriptNode36.getEndLineno();
        int int38 = scriptNode36.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode36.getChildScopes();
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump30, (com.google.javascript.rhino.head.Node) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList41 = scriptNode36.getFunctions();
        functionNodeList41.clear();
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump47.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump51 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump47, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int54 = scriptNode53.getEndLineno();
        int int55 = scriptNode53.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList56 = scriptNode53.getChildScopes();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump47, (com.google.javascript.rhino.head.Node) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList58 = scriptNode53.getFunctions();
        boolean boolean59 = functionNodeList41.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList58);
        functionNode24.putProp(20, (java.lang.Object) functionNodeList41);
        int int61 = functionNode20.addFunction(functionNode24);
        boolean boolean62 = functionNode24.isGenerator();
        int int63 = functionNode0.addFunction(functionNode24);
        functionNode0.setBaseLineno(10);
        functionNode0.setIsGenerator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertNotNull(functionNodeList41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(scopeList56);
        org.junit.Assert.assertNotNull(functionNodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(17, name1);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str7 = functionNode3.toStringTree(scriptNode6);
        int int8 = scriptNode6.getRegexpCount();
        java.lang.Object obj9 = scriptNode6.getCompilerData();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList10 = scriptNode6.getStatements();
        java.lang.String str11 = functionNode2.toStringTree(scriptNode6);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode6.visit(nodeVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(astNodeList10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int20 = scriptNode19.getEndLineno();
        int int21 = scriptNode19.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode19.getChildScopes();
        jump17.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode19);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor24 = scriptNode19.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        functionNode25.setEncodedSource("");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode19, (com.google.javascript.rhino.head.ast.Scope) functionNode25);
        com.google.javascript.rhino.head.ast.Jump jump34 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump34.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump38 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump34, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        int int42 = scriptNode40.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList43 = scriptNode40.getChildScopes();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump34, (com.google.javascript.rhino.head.Node) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList45 = scriptNode40.getFunctions();
        functionNodeList45.clear();
        int int48 = functionNodeList45.lastIndexOf((java.lang.Object) (-1L));
        com.google.javascript.rhino.head.ast.Jump jump53 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump53.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump53, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int60 = scriptNode59.getEndLineno();
        int int61 = scriptNode59.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList62 = scriptNode59.getChildScopes();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump53, (com.google.javascript.rhino.head.Node) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList64 = scriptNode59.getFunctions();
        functionNodeList64.clear();
        int int67 = functionNodeList64.lastIndexOf((java.lang.Object) (-1L));
        boolean boolean68 = functionNodeList45.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList64);
        com.google.javascript.rhino.head.ast.Jump jump73 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump73.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump77 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump73, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int80 = scriptNode79.getEndLineno();
        int int81 = scriptNode79.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList82 = scriptNode79.getChildScopes();
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump73, (com.google.javascript.rhino.head.Node) scriptNode79);
        com.google.javascript.rhino.head.Node node85 = scriptNode79.setType(0);
        int int86 = functionNodeList64.lastIndexOf((java.lang.Object) scriptNode79);
        functionNode11.addChildAfter((com.google.javascript.rhino.head.Node) functionNode25, (com.google.javascript.rhino.head.Node) scriptNode79);
        java.lang.String str88 = functionNode11.getNextTempName();
        boolean boolean89 = functionNode11.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType93 = com.google.javascript.rhino.head.Token.CommentType.LINE;
        com.google.javascript.rhino.head.ast.Comment comment95 = new com.google.javascript.rhino.head.ast.Comment((int) (short) 1, (int) (byte) 100, commentType93, "                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node(109, (com.google.javascript.rhino.head.Node) comment95);
        // The following exception was thrown during execution in test generation
        try {
            functionNode11.setDefault((com.google.javascript.rhino.head.Node) comment95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertNotNull(nodeItor24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(scopeList43);
        org.junit.Assert.assertNotNull(functionNodeList45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(scopeList62);
        org.junit.Assert.assertNotNull(functionNodeList64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNull(scopeList82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "$0" + "'", str88, "$0");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + commentType93 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.LINE + "'", commentType93.equals(com.google.javascript.rhino.head.Token.CommentType.LINE));
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        strMap33.clear();
        com.google.javascript.rhino.head.ast.Symbol symbol37 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.ast.Jump jump42 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump42.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump46 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump42, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int49 = scriptNode48.getEndLineno();
        int int50 = scriptNode48.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode48.getChildScopes();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump42, (com.google.javascript.rhino.head.Node) scriptNode48);
        symbol37.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode48);
        int int54 = symbol37.getIndex();
        com.google.javascript.rhino.head.ast.Symbol symbol55 = strMap33.put("20\tCOMMENT 20 1\n", symbol37);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = symbol55.getIndex();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(symbol55);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode((-1262414679));
        java.lang.String str2 = functionNode1.getNextTempName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        functionNode3.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode7.getTop();
        com.google.javascript.rhino.head.ast.Name name10 = null;
        functionNode7.setFunctionName(name10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode12.getTop();
        functionNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode12);
        int int15 = functionNode12.getRp();
        int int16 = functionNode12.getFunctionType();
        functionNode3.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode12);
        int int18 = functionNode1.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = functionNode3.toSource(161);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "$0" + "'", str2, "$0");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        functionNode4.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        functionNode8.setEncodedSource("");
        functionNode8.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode4, (com.google.javascript.rhino.head.Node) functionNode8, (com.google.javascript.rhino.head.Node) functionNode14, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode18 = functionNode4.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int24 = functionNode23.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = functionNode23.getTop();
        com.google.javascript.rhino.head.ast.Name name26 = null;
        functionNode23.setFunctionName(name26);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = functionNode28.getTop();
        functionNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        int int31 = functionNode28.getRp();
        int int32 = functionNode28.getFunctionType();
        functionNode19.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        com.google.javascript.rhino.head.ast.Scope scope34 = functionNode28.getEnclosingScope();
        functionNode4.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        int int36 = functionNode1.addFunction(functionNode4);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList37 = functionNode1.getResumptionPoints();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode38 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int39 = functionNode38.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode38.getTop();
        com.google.javascript.rhino.head.ast.Name name41 = null;
        functionNode38.setFunctionName(name41);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = functionNode43.getTop();
        functionNode38.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode43);
        functionNode43.setEncodedSourceStart(6);
        functionNode43.setRelative((-1));
        boolean boolean50 = functionNode1.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode43);
        functionNode1.setEncodedSourceEnd((-1));
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList68 = scriptNode63.getFunctions();
        int int69 = scriptNode63.getPosition();
        scriptNode63.clearParentScope();
        com.google.javascript.rhino.head.ast.Name name72 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode73 = new com.google.javascript.rhino.head.ast.FunctionNode(18, name72);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((-3285918), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) scriptNode63, (com.google.javascript.rhino.head.Node) functionNode73);
        scriptNode63.flattenSymbolTable(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = scriptNode63.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(astNode18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertNotNull(scriptNode29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(nodeList37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertNotNull(scriptNode44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertNotNull(functionNodeList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int6 = scriptNode5.getEndLineno();
        int int7 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        jump10.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode12);
        java.lang.String str17 = scriptNode12.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode5, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode12.target = scope19;
        functionNode0.addChildScope(scope19);
        boolean boolean22 = functionNode0.hasConsistentReturnUsage();
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap23 = functionNode0.getLiveLocals();
        com.google.javascript.rhino.head.Node node24 = functionNode0.getLastChild();
        java.lang.String str25 = functionNode0.getNextTempName();
        boolean boolean26 = functionNode0.requiresActivation();
        functionNode0.setEncodedSourceStart(32);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int30 = functionNode29.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = functionNode29.getTop();
        com.google.javascript.rhino.head.Node node32 = functionNode29.getLastSibling();
        com.google.javascript.rhino.head.ast.AstNode astNode33 = functionNode29.getMemberExprNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        functionNode39.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int46 = functionNode39.addFunction(functionNode45);
        int int47 = functionNode29.addFunction(functionNode39);
        int int48 = functionNode29.getBaseLineno();
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.setLoop((com.google.javascript.rhino.head.ast.Jump) functionNode29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str17, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(nodeMap23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$0" + "'", str25, "$0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(scriptNode31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(astNode33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str4 = functionNode0.toStringTree(scriptNode3);
        com.google.javascript.rhino.head.ast.Scope scope6 = scriptNode3.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList7 = scriptNode3.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int10 = scriptNode9.getEndLineno();
        int int11 = scriptNode9.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode3, (com.google.javascript.rhino.head.ast.Scope) scriptNode9);
        java.lang.String str13 = scriptNode9.getEncodedSource();
        scriptNode9.setEncodedSourceBounds(13, 193715443);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode9.visit(nodeVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(scope6);
        org.junit.Assert.assertNotNull(symbolList7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode((-18802601), name1);
        com.google.javascript.rhino.head.ast.Scope scope4 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode5.setParens((int) (byte) 1, (int) (short) 1);
        functionNode5.setEncodedSourceStart((-1));
        functionNode5.setFunctionIsGetter();
        scope4.addChildToFront((com.google.javascript.rhino.head.Node) functionNode5);
        functionNode5.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int18 = scriptNode17.getEndLineno();
        int int19 = scriptNode17.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int25 = scriptNode24.getEndLineno();
        int int26 = scriptNode24.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList27 = scriptNode24.getChildScopes();
        jump22.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode24);
        java.lang.String str29 = scriptNode24.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode17, (com.google.javascript.rhino.head.ast.Scope) scriptNode24);
        com.google.javascript.rhino.head.ast.Scope scope31 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode24.target = scope31;
        java.lang.String str33 = functionNode5.toStringTree(scriptNode24);
        java.lang.String str35 = scriptNode24.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap36 = scriptNode24.getSymbolTable();
        int int37 = strMap36.size();
        com.google.javascript.rhino.head.ast.Scope scope39 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode40.getTop();
        functionNode40.setParens((int) (byte) 1, (int) (short) 1);
        functionNode40.setEncodedSourceStart((-1));
        functionNode40.setFunctionIsGetter();
        scope39.addChildToFront((com.google.javascript.rhino.head.Node) functionNode40);
        functionNode40.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int53 = scriptNode52.getEndLineno();
        int int54 = scriptNode52.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int60 = scriptNode59.getEndLineno();
        int int61 = scriptNode59.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList62 = scriptNode59.getChildScopes();
        jump57.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode59);
        java.lang.String str64 = scriptNode59.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode52, (com.google.javascript.rhino.head.ast.Scope) scriptNode59);
        com.google.javascript.rhino.head.ast.Scope scope66 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode59.target = scope66;
        java.lang.String str68 = functionNode40.toStringTree(scriptNode59);
        java.lang.String str70 = scriptNode59.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap71 = scriptNode59.getSymbolTable();
        strMap36.putAll(strMap71);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet73 = strMap71.entrySet();
        java.util.Collection<com.google.javascript.rhino.head.ast.Symbol> symbolCollection74 = strMap71.values();
        com.google.javascript.rhino.head.Token.CommentType commentType77 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment79 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType77, "109");
        java.lang.String str81 = comment79.toSource((int) (byte) 10);
        java.lang.String str82 = comment79.getValue();
        boolean boolean83 = strMap71.equals((java.lang.Object) comment79);
        int int84 = comment79.getLength();
        java.lang.String str85 = comment79.getValue();
        functionNode2.setJsDocNode(comment79);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(scopeList27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str29, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                    {\n                    }\n" + "'", str35, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(scopeList62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str64, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "                    {\n                    }\n" + "'", str70, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strEntrySet73);
        org.junit.Assert.assertNotNull(symbolCollection74);
        org.junit.Assert.assertTrue("'" + commentType77 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType77.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "                    109" + "'", str81, "                    109");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "109" + "'", str82, "109");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "109" + "'", str85, "109");
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.Scope scope3 = functionNode0.getDefiningScope("109");
        boolean boolean4 = functionNode0.isGetterOrSetter();
        functionNode0.setIsExpressionClosure(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = scriptNode10.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode10.getChildScopes();
        int int18 = scriptNode10.getEncodedSourceEnd();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList19 = scriptNode10.getSymbols();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode20.getTop();
        com.google.javascript.rhino.head.ast.Name name23 = null;
        functionNode20.setFunctionName(name23);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = functionNode25.getTop();
        functionNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        functionNode25.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.Jump jump31 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int33 = functionNode32.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = functionNode32.getTop();
        com.google.javascript.rhino.head.ast.Name name35 = null;
        functionNode32.setFunctionName(name35);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode37);
        functionNode37.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int44 = functionNode37.addFunction(functionNode43);
        int int45 = jump31.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump53 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump53.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump53, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int60 = scriptNode59.getEndLineno();
        int int61 = scriptNode59.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList62 = scriptNode59.getChildScopes();
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump53, (com.google.javascript.rhino.head.Node) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList64 = scriptNode59.getFunctions();
        functionNodeList64.clear();
        com.google.javascript.rhino.head.ast.Jump jump70 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump70.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump74 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump70, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int77 = scriptNode76.getEndLineno();
        int int78 = scriptNode76.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList79 = scriptNode76.getChildScopes();
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump70, (com.google.javascript.rhino.head.Node) scriptNode76);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList81 = scriptNode76.getFunctions();
        boolean boolean82 = functionNodeList64.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList81);
        functionNode47.putProp(20, (java.lang.Object) functionNodeList64);
        int int84 = functionNode43.addFunction(functionNode47);
        functionNode25.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode43);
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap86 = functionNode25.getLiveLocals();
        boolean boolean87 = functionNode25.isExpressionClosure();
        functionNode25.setFunctionIsGetter();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode10.setFinally((com.google.javascript.rhino.head.Node) functionNode25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(symbolList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(scriptNode34);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(scopeList62);
        org.junit.Assert.assertNotNull(functionNodeList64);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(scopeList79);
        org.junit.Assert.assertNotNull(functionNodeList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(nodeMap86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator17 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList15.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator17);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator19 = positionComparator17.reversed();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = functionNode20.getTop();
        com.google.javascript.rhino.head.ast.Name name22 = null;
        functionNode20.setFunctionName(name22);
        boolean boolean24 = functionNode20.requiresActivation();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral26 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str28 = regExpLiteral26.toSource((int) (byte) 10);
        regExpLiteral26.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral26.removeProp(8);
        java.lang.String str33 = regExpLiteral26.getValue();
        regExpLiteral26.setLineno(10);
        regExpLiteral26.removeChildren();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor37 = regExpLiteral26.iterator();
        functionNode20.addRegExp(regExpLiteral26);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        functionNode39.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope45 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = functionNode46.getTop();
        functionNode46.setParens((int) (byte) 1, (int) (short) 1);
        functionNode46.setEncodedSourceStart((-1));
        functionNode46.setFunctionIsGetter();
        scope45.addChildToFront((com.google.javascript.rhino.head.Node) functionNode46);
        functionNode43.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode46);
        int int56 = functionNode39.addFunction(functionNode43);
        functionNode20.addChildToBack((com.google.javascript.rhino.head.Node) functionNode39);
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump61.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump65 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump61, 0);
        com.google.javascript.rhino.head.ast.Jump jump69 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump69.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump73 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump69, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode74 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int75 = functionNode74.getLp();
        functionNode74.setEncodedSource("");
        functionNode74.flattenSymbolTable(false);
        jump61.addChildAfter((com.google.javascript.rhino.head.Node) jump69, (com.google.javascript.rhino.head.Node) functionNode74);
        com.google.javascript.rhino.head.Node node81 = functionNode74.target;
        int int82 = positionComparator17.compare((com.google.javascript.rhino.head.ast.AstNode) functionNode20, (com.google.javascript.rhino.head.ast.AstNode) functionNode74);
        java.lang.String str83 = functionNode20.getSourceName();
        // The following exception was thrown during execution in test generation
        try {
            functionNode20.setEndLineno((-616130778));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator19);
        org.junit.Assert.assertNotNull(scriptNode21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "                    /null/" + "'", str28, "                    /null/");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(nodeItor37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(scriptNode47);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node4 = scriptNode1.getNext();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getFirstChild();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode1.getFunctions();
        com.google.javascript.rhino.head.ast.Scope scope7 = scriptNode1.getParentScope();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = scope7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNull(scope7);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str4 = functionNode0.toStringTree(scriptNode3);
        java.lang.String str5 = functionNode0.shortName();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.visit(nodeVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FunctionNode" + "'", str5, "FunctionNode");
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int9 = scriptNode8.getEndLineno();
        int int10 = scriptNode8.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode8.getChildScopes();
        jump6.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode8);
        java.lang.String str13 = scriptNode8.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode8);
        com.google.javascript.rhino.head.Node node15 = scriptNode1.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray16 = scriptNode1.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str13, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int3 = functionNode2.getEncodedSourceStart();
        int int4 = functionNode2.getFunctionCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode5.setParens((int) (byte) 1, (int) (short) 1);
        int int10 = functionNode5.getRp();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(17, (com.google.javascript.rhino.head.Node) functionNode2, (com.google.javascript.rhino.head.Node) functionNode5, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump18.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump18, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int25 = scriptNode24.getEndLineno();
        int int26 = scriptNode24.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList27 = scriptNode24.getChildScopes();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump18, (com.google.javascript.rhino.head.Node) scriptNode24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral33 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str35 = regExpLiteral33.toSource((int) (byte) 10);
        regExpLiteral33.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral33.removeProp(8);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(10, node28, (com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) regExpLiteral33, 3);
        java.lang.String str43 = regExpLiteral33.makeIndent((int) (short) 100);
        int int44 = regExpLiteral33.getType();
        boolean boolean45 = regExpLiteral33.hasSideEffects();
        java.lang.String str46 = regExpLiteral33.getFlags();
        int int47 = functionNode2.compareTo((com.google.javascript.rhino.head.ast.AstNode) regExpLiteral33);
        functionNode2.setBaseLineno((int) (short) 1);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator50 = functionNode2.spliterator();
        int int51 = functionNode2.getPosition();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.AstNode astNode53 = functionNode52.getParent();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode54 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = functionNode54.getTop();
        functionNode54.setParens((int) (byte) 1, (int) (short) 1);
        functionNode54.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList61 = functionNode54.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope63 = functionNode54.getDefiningScope("hi!");
        boolean boolean64 = functionNode54.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode65 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int66 = functionNode65.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = functionNode65.getTop();
        com.google.javascript.rhino.head.ast.Name name68 = null;
        functionNode65.setFunctionName(name68);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode70 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = functionNode70.getTop();
        functionNode65.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode70);
        int int73 = functionNode70.getRp();
        int int74 = functionNode70.getFunctionType();
        int int75 = functionNode54.addFunction(functionNode70);
        functionNode52.setTop((com.google.javascript.rhino.head.ast.ScriptNode) functionNode70);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = functionNode2.getIndexForNameNode((com.google.javascript.rhino.head.Node) functionNode52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(scopeList27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                    /null/" + "'", str35, "                    /null/");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "                                                                                                                                                                                                        " + "'", str43, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 48 + "'", int44 == 48);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str46, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(nodeSpliterator50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNull(astNode53);
        org.junit.Assert.assertNotNull(scriptNode55);
        org.junit.Assert.assertNull(nodeList61);
        org.junit.Assert.assertNull(scope63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(scriptNode67);
        org.junit.Assert.assertNotNull(scriptNode71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.Jump jump5 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump5.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump5, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int12 = scriptNode11.getEndLineno();
        int int13 = scriptNode11.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump5, (com.google.javascript.rhino.head.Node) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode11.getFunctions();
        int int17 = scriptNode11.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode11.getChildScopes();
        java.lang.String str19 = scriptNode11.getSourceName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        functionNode21.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        functionNode25.setEncodedSource("");
        functionNode25.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int32 = functionNode31.getLp();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode21, (com.google.javascript.rhino.head.Node) functionNode25, (com.google.javascript.rhino.head.Node) functionNode31, (int) '#');
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap35 = functionNode25.getSymbolTable();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump47.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump51 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump47, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int53 = functionNode52.getLp();
        functionNode52.setEncodedSource("");
        functionNode52.flattenSymbolTable(false);
        jump39.addChildAfter((com.google.javascript.rhino.head.Node) jump47, (com.google.javascript.rhino.head.Node) functionNode52);
        functionNode25.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode52);
        int int60 = positionComparator0.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode11, (com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = scriptNode11.getParamOrVarName((-13));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(strMap35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral(0, 6);
        regExpLiteral2.setValue("");
        regExpLiteral2.setValue("                                            109");
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral((-1), 3);
        java.lang.String str3 = regExpLiteral2.getJsDoc();
        com.google.javascript.rhino.head.Node node5 = regExpLiteral2.setType(9);
        boolean boolean6 = regExpLiteral2.hasSideEffects();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        int int1 = scriptNode0.getEncodedSourceEnd();
        java.lang.String str3 = scriptNode0.toSource((int) (byte) 10);
        scriptNode0.setEncodedSourceEnd((int) (short) -1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode0.getFunctions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray7 = scriptNode0.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                    {\n                    }\n" + "'", str3, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(functionNodeList6);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        boolean boolean3 = functionNode1.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral5 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral5.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str8 = regExpLiteral5.getValue();
        regExpLiteral5.setFlags("52");
        functionNode1.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral5);
        functionNode1.setEncodedSourceStart(5);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope(26);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        functionNode16.setFunctionIsGetter();
        int int18 = functionNode16.getType();
        // The following exception was thrown during execution in test generation
        try {
            functionNode1.addChildBefore((com.google.javascript.rhino.head.Node) scope15, (com.google.javascript.rhino.head.Node) functionNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 109 + "'", int18 == 109);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Symbol symbol2 = new com.google.javascript.rhino.head.ast.Symbol(0, "109");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = functionNode2.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode12.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        functionNode15.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setEncodedSource("");
        functionNode19.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode15, (com.google.javascript.rhino.head.Node) functionNode19, (com.google.javascript.rhino.head.Node) functionNode25, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode29 = functionNode15.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        functionNode30.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int42 = functionNode39.getRp();
        int int43 = functionNode39.getFunctionType();
        functionNode30.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        com.google.javascript.rhino.head.ast.Scope scope45 = functionNode39.getEnclosingScope();
        functionNode15.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int47 = functionNode12.addFunction(functionNode15);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList48 = functionNode12.getResumptionPoints();
        boolean boolean49 = functionNode12.hasSideEffects();
        functionNode2.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode12);
        functionNode12.clearParentScope();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNull(functionNode11);
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(astNode29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(nodeList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("                                            {\n                                            }\n");
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name4 = null;
        functionNode1.setFunctionName(name4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode6.getTop();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode6);
        functionNode6.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int13 = functionNode6.addFunction(functionNode12);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = functionNode15.getTop();
        java.lang.String str17 = scriptNode16.getJsDoc();
        com.google.javascript.rhino.head.Node node19 = scriptNode16.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        com.google.javascript.rhino.head.ast.Scope scope26 = scriptNode23.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(25, node19, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) scriptNode28);
        int int32 = functionNode12.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral34 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral34.setFlags("-1\tSCRIPT -1 1\n");
        regExpLiteral34.setFlags("/null/-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode39.getTop();
        com.google.javascript.rhino.head.ast.Name name42 = null;
        functionNode39.setFunctionName(name42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        functionNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode44);
        int int47 = functionNode44.getRp();
        int int48 = functionNode44.getFunctionType();
        boolean boolean49 = functionNode44.requiresActivation();
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(26, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) regExpLiteral34, (com.google.javascript.rhino.head.Node) functionNode44);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int53 = functionNode52.getBaseLineno();
        functionNode52.setSourceName("                                                                                                                                                                                                        /null/");
        com.google.javascript.rhino.head.ast.AstNode astNode56 = functionNode52.getBody();
        functionNode44.replaceWith((com.google.javascript.rhino.head.ast.Scope) functionNode52);
        boolean boolean58 = functionNode44.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.Name name59 = functionNode44.getFunctionName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode61 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int62 = functionNode61.getLp();
        functionNode61.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode65 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int66 = functionNode65.getLp();
        functionNode65.setEncodedSource("");
        functionNode65.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode71 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int72 = functionNode71.getLp();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode61, (com.google.javascript.rhino.head.Node) functionNode65, (com.google.javascript.rhino.head.Node) functionNode71, (int) '#');
        boolean boolean75 = functionNode71.isGenerator();
        int int76 = functionNode71.getFunctionType();
        boolean boolean77 = functionNode71.hasSideEffects();
        // The following exception was thrown during execution in test generation
        try {
            functionNode44.setFinally((com.google.javascript.rhino.head.Node) functionNode71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(scriptNode16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(scope26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(astNode56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(name59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral(327364487, 12802714);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int9 = scriptNode8.getEndLineno();
        int int10 = scriptNode8.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode8.getChildScopes();
        jump6.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode8);
        java.lang.String str13 = scriptNode8.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode8);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode15.getTop();
        com.google.javascript.rhino.head.ast.Name name18 = null;
        functionNode15.setFunctionName(name18);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str24 = functionNode20.toStringTree(scriptNode23);
        functionNode20.setFunctionIsGetter();
        int int26 = functionNode15.addFunction(functionNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = functionNode15.getSymbols();
        scriptNode8.setSymbols(symbolList27);
        scriptNode8.clearParentScope();
        int int30 = scriptNode8.getBaseLineno();
        int int31 = scriptNode8.getLength();
        scriptNode8.setEndLineno(819764875);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str13, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(symbolList27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        com.google.javascript.rhino.head.Token.CommentType commentType4 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType4, "109");
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment(136, 15, commentType4, "-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.Token.CommentType commentType9 = com.google.javascript.rhino.head.Token.CommentType.JSDOC;
        comment8.setCommentType(commentType9);
        com.google.javascript.rhino.head.Token.CommentType commentType11 = com.google.javascript.rhino.head.Token.CommentType.JSDOC;
        comment8.setCommentType(commentType11);
        java.lang.String str14 = comment8.toSource(14);
        java.lang.String str16 = comment8.toSource(6);
        org.junit.Assert.assertTrue("'" + commentType4 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType4.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + commentType9 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.JSDOC + "'", commentType9.equals(com.google.javascript.rhino.head.Token.CommentType.JSDOC));
        org.junit.Assert.assertTrue("'" + commentType11 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.JSDOC + "'", commentType11.equals(com.google.javascript.rhino.head.Token.CommentType.JSDOC));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "                            -1\tSCRIPT -1 1\n" + "'", str14, "                            -1\tSCRIPT -1 1\n");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "            -1\tSCRIPT -1 1\n" + "'", str16, "            -1\tSCRIPT -1 1\n");
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = functionNode0.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        int int6 = scriptNode5.getEncodedSourceEnd();
        java.lang.String str8 = scriptNode5.toSource((int) (byte) 10);
        scriptNode5.setEncodedSourceEnd((int) (short) -1);
        java.lang.String str11 = functionNode0.toStringTree(scriptNode5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        java.lang.String str15 = scriptNode14.getJsDoc();
        com.google.javascript.rhino.head.Node node17 = scriptNode14.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str22 = functionNode18.toStringTree(scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope24 = scriptNode21.getDefiningScope("");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int27 = scriptNode26.getEndLineno();
        int int28 = scriptNode26.getBaseLineno();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(25, node17, (com.google.javascript.rhino.head.Node) scriptNode21, (com.google.javascript.rhino.head.Node) scriptNode26);
        boolean boolean30 = scriptNode26.hasConsistentReturnUsage();
        java.lang.String str31 = scriptNode26.getNextTempName();
        java.lang.String str32 = scriptNode26.shortName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int34 = functionNode33.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = functionNode33.getTop();
        boolean boolean36 = functionNode33.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList37 = functionNode33.getSymbols();
        scriptNode26.setSymbols(symbolList37);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator39 = scriptNode26.spliterator();
        scriptNode5.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode26);
        int int41 = scriptNode26.getFunctionCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "                    {\n                    }\n" + "'", str8, "                    {\n                    }\n");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(scope24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "$0" + "'", str31, "$0");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ScriptNode" + "'", str32, "ScriptNode");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(scriptNode35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(symbolList37);
        org.junit.Assert.assertNotNull(nodeSpliterator39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList33 = scriptNode28.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator34 = functionNodeList33.spliterator();
        int int36 = functionNodeList33.indexOf((java.lang.Object) (byte) 10);
        boolean boolean37 = functionNodeList15.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList33);
        boolean boolean38 = functionNodeList15.isEmpty();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        int int42 = scriptNode40.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        jump45.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode47);
        java.lang.String str52 = scriptNode47.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode40, (com.google.javascript.rhino.head.ast.Scope) scriptNode47);
        int int54 = scriptNode40.getBaseLineno();
        boolean boolean55 = functionNodeList15.equals((java.lang.Object) int54);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor56 = functionNodeList15.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor58 = functionNodeList15.listIterator(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 12, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertNotNull(functionNodeList33);
        org.junit.Assert.assertNotNull(functionNodeSpliterator34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str52, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(functionNodeItor56);
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        strMap33.clear();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode36.getTop();
        boolean boolean39 = functionNode36.hasSideEffects();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = functionNode40.getTop();
        com.google.javascript.rhino.head.ast.Name name43 = null;
        functionNode40.setFunctionName(name43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = functionNode45.getTop();
        functionNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        int int48 = functionNode45.getRp();
        functionNode45.setParens(11, 2);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode((-1));
        int int54 = functionNode45.addFunction(functionNode53);
        functionNode36.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode45);
        com.google.javascript.rhino.head.ast.Symbol symbol56 = strMap33.remove((java.lang.Object) functionNode45);
        functionNode45.clearParentScope();
        com.google.javascript.rhino.head.ast.Name name58 = null;
        functionNode45.setFunctionName(name58);
        java.lang.String str60 = functionNode45.toString();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(scriptNode42);
        org.junit.Assert.assertNotNull(scriptNode46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(symbol56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "109" + "'", str60, "109");
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral1 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str3 = regExpLiteral1.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = regExpLiteral1.new NodeIterator();
        boolean boolean5 = nodeIterator4.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node6 = nodeIterator4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                    /null/" + "'", str3, "                    /null/");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int3 = scriptNode2.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol5 = scriptNode2.getSymbol("hi!");
        java.lang.String str6 = scriptNode2.getEncodedSource();
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode2.getChildScopes();
        scriptNode2.setEncodedSourceStart((-1110578805));
        com.google.javascript.rhino.head.ast.Jump jump13 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        jump13.addChildrenToBack((com.google.javascript.rhino.head.Node) scope15);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int18 = functionNode17.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = functionNode17.getTop();
        com.google.javascript.rhino.head.ast.Name name20 = null;
        functionNode17.setFunctionName(name20);
        functionNode17.setIsGenerator();
        java.lang.String str23 = functionNode17.getEncodedSource();
        scope15.target = functionNode17;
        functionNode17.setFunctionIsSetter();
        com.google.javascript.rhino.head.ast.Symbol symbol27 = functionNode17.getSymbol("                    109");
        // The following exception was thrown during execution in test generation
        try {
            scriptNode2.setScope((com.google.javascript.rhino.head.ast.Scope) functionNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(symbol5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(scriptNode19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(symbol27);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int4 = scriptNode3.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int7 = scriptNode6.getEndLineno();
        scriptNode3.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode6);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int10 = functionNode9.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode9.getTop();
        boolean boolean12 = functionNode9.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        functionNode9.addChildScope(scope28);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode6, (com.google.javascript.rhino.head.ast.Scope) functionNode9);
        int int32 = functionNode9.getFunctionCount();
        com.google.javascript.rhino.head.ast.Jump jump34 = new com.google.javascript.rhino.head.ast.Jump(350469479, (com.google.javascript.rhino.head.Node) functionNode9, (-3285918));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = functionNode9.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = scriptNode35.getEnclosingFunction();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump38 = new com.google.javascript.rhino.head.ast.Jump(1, (com.google.javascript.rhino.head.Node) functionNode36, (-22));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(scriptNode35);
        org.junit.Assert.assertNull(functionNode36);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        functionNodeList15.clear();
        int int19 = functionNodeList15.indexOf((java.lang.Object) 10L);
        com.google.javascript.rhino.head.ast.Jump jump24 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump24.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump24, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        int int32 = scriptNode30.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode30.getChildScopes();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump24, (com.google.javascript.rhino.head.Node) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode30.getFunctions();
        functionNodeList35.clear();
        functionNodeList35.clear();
        com.google.javascript.rhino.head.ast.Jump jump42 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump42.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump46 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump42, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int49 = scriptNode48.getEndLineno();
        int int50 = scriptNode48.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode48.getChildScopes();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump42, (com.google.javascript.rhino.head.Node) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList53 = scriptNode48.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator54 = functionNodeList53.spliterator();
        int int56 = functionNodeList53.indexOf((java.lang.Object) (byte) 10);
        boolean boolean57 = functionNodeList35.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList53);
        boolean boolean58 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList35);
        java.lang.Object[] objArray59 = functionNodeList35.toArray();
        com.google.javascript.rhino.head.ast.Jump jump64 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump64.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump68 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump64, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int71 = scriptNode70.getEndLineno();
        int int72 = scriptNode70.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode70.getChildScopes();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump64, (com.google.javascript.rhino.head.Node) scriptNode70);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList75 = scriptNode70.getFunctions();
        int int76 = functionNodeList75.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator77 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList75.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator77);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator79 = positionComparator77.reversed();
        functionNodeList35.sort(astNodeComparator79);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertNotNull(functionNodeList53);
        org.junit.Assert.assertNotNull(functionNodeSpliterator54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertNotNull(functionNodeList75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator79);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode1.setFunctionName(name3);
        boolean boolean5 = functionNode1.requiresActivation();
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump9.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump13 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump9, 0);
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump17.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump17, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        functionNode22.setEncodedSource("");
        functionNode22.flattenSymbolTable(false);
        jump9.addChildAfter((com.google.javascript.rhino.head.Node) jump17, (com.google.javascript.rhino.head.Node) functionNode22);
        com.google.javascript.rhino.head.Node node29 = functionNode22.target;
        functionNode1.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode22);
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node(10, (com.google.javascript.rhino.head.Node) functionNode22, 10);
        functionNode22.setFunctionIsSetter();
        functionNode22.setBaseLineno(11);
        com.google.javascript.rhino.head.Node node36 = functionNode22.getLastSibling();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode22.visit(nodeVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        functionNode11.setEncodedSourceStart(25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = functionNode18.getTop();
        functionNode18.setParens((int) (byte) 1, (int) (short) 1);
        int int23 = functionNode18.getRp();
        com.google.javascript.rhino.head.Node node26 = com.google.javascript.rhino.head.Node.newString((int) (byte) 100, "");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str31 = functionNode27.toStringTree(scriptNode30);
        com.google.javascript.rhino.head.ast.Scope scope33 = scriptNode30.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList34 = scriptNode30.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int37 = scriptNode36.getEndLineno();
        int int38 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode30, (com.google.javascript.rhino.head.ast.Scope) scriptNode36);
        java.lang.String str40 = scriptNode36.getEncodedSource();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) functionNode18, node26, (com.google.javascript.rhino.head.Node) scriptNode36, (int) (short) 0);
        functionNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) functionNode18);
        functionNode11.setRelative(9);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(scriptNode19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(scope33);
        org.junit.Assert.assertNotNull(symbolList34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope2 = symbol0.getContainingTable();
        symbol0.setIndex(21);
        java.lang.String str5 = symbol0.getName();
        java.lang.String str6 = symbol0.getDeclTypeName();
        java.lang.String str7 = symbol0.getName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "EOF" + "'", str1, "EOF");
        org.junit.Assert.assertNull(scope2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EOF" + "'", str6, "EOF");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        strMap33.clear();
        com.google.javascript.rhino.head.ast.Symbol symbol37 = null;
        com.google.javascript.rhino.head.ast.Symbol symbol38 = strMap33.replace("Symbol (EOF) name=null", symbol37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int41 = scriptNode40.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int44 = scriptNode43.getEndLineno();
        scriptNode40.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int47 = functionNode46.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = functionNode46.getTop();
        boolean boolean49 = functionNode46.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int52 = scriptNode51.getEndLineno();
        int int53 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump56 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int59 = scriptNode58.getEndLineno();
        int int60 = scriptNode58.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList61 = scriptNode58.getChildScopes();
        jump56.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode58);
        java.lang.String str63 = scriptNode58.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode51, (com.google.javascript.rhino.head.ast.Scope) scriptNode58);
        com.google.javascript.rhino.head.ast.Scope scope65 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode58.target = scope65;
        functionNode46.addChildScope(scope65);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode43, (com.google.javascript.rhino.head.ast.Scope) functionNode46);
        int int69 = functionNode46.getFunctionCount();
        int int70 = functionNode46.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot71 = functionNode46.getAstRoot();
        functionNode46.setParens(10, 17);
        com.google.javascript.rhino.head.ast.Symbol symbol75 = strMap33.get((java.lang.Object) functionNode46);
        com.google.javascript.rhino.head.ast.Symbol symbol77 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.Node node78 = symbol77.getNode();
        symbol77.setIndex(4);
        com.google.javascript.rhino.head.ast.Scope scope81 = symbol77.getContainingTable();
        int int82 = symbol77.getDeclType();
        com.google.javascript.rhino.head.Node node83 = symbol77.getNode();
        com.google.javascript.rhino.head.ast.Symbol symbol84 = strMap33.put("  ", symbol77);
        strMap33.clear();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(symbol38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(scriptNode48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(scopeList61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str63, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(astRoot71);
        org.junit.Assert.assertNull(symbol75);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNull(scope81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNull(symbol84);
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        functionNodeList15.clear();
        int int19 = functionNodeList15.indexOf((java.lang.Object) 10L);
        com.google.javascript.rhino.head.ast.Jump jump24 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump24.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump24, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        int int32 = scriptNode30.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode30.getChildScopes();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump24, (com.google.javascript.rhino.head.Node) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode30.getFunctions();
        functionNodeList35.clear();
        functionNodeList35.clear();
        com.google.javascript.rhino.head.ast.Jump jump42 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump42.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump46 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump42, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int49 = scriptNode48.getEndLineno();
        int int50 = scriptNode48.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode48.getChildScopes();
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump42, (com.google.javascript.rhino.head.Node) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList53 = scriptNode48.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator54 = functionNodeList53.spliterator();
        int int56 = functionNodeList53.indexOf((java.lang.Object) (byte) 10);
        boolean boolean57 = functionNodeList35.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList53);
        boolean boolean58 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList35);
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator59 = functionNodeList35.spliterator();
        com.google.javascript.rhino.head.ast.Jump jump64 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump64.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump68 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump64, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int71 = scriptNode70.getEndLineno();
        int int72 = scriptNode70.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode70.getChildScopes();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump64, (com.google.javascript.rhino.head.Node) scriptNode70);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList75 = scriptNode70.getFunctions();
        functionNodeList75.clear();
        functionNodeList75.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor78 = functionNodeList75.iterator();
        int int79 = functionNodeList75.size();
        int int80 = functionNodeList75.size();
        boolean boolean81 = functionNodeList35.containsAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList75);
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream82 = functionNodeList35.parallelStream();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertNotNull(functionNodeList53);
        org.junit.Assert.assertNotNull(functionNodeSpliterator54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(functionNodeSpliterator59);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertNotNull(functionNodeList75);
        org.junit.Assert.assertNotNull(functionNodeItor78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(functionNodeStream82);
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        boolean boolean3 = functionNode0.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int6 = scriptNode5.getEndLineno();
        int int7 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        jump10.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode12);
        java.lang.String str17 = scriptNode12.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode5, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode12.target = scope19;
        functionNode0.addChildScope(scope19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode22.getTop();
        com.google.javascript.rhino.head.ast.Name name25 = null;
        functionNode22.setFunctionName(name25);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        functionNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.Scope scope32 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode22.replaceWith(scope32);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int42 = functionNode22.addFunction(functionNode34);
        int int43 = functionNode0.addFunction(functionNode34);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral45 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str47 = regExpLiteral45.toSource((int) (byte) 10);
        functionNode0.addRegExp(regExpLiteral45);
        com.google.javascript.rhino.head.Node node50 = functionNode0.setType((int) 'a');
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = node50.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator51.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str17, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "                    /null/" + "'", str47, "                    /null/");
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        com.google.javascript.rhino.head.ast.Name name4 = null;
        functionNode2.setFunctionName(name4);
        boolean boolean6 = functionNode2.requiresActivation();
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump10.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump14 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump10, 0);
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump18.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump18, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int24 = functionNode23.getLp();
        functionNode23.setEncodedSource("");
        functionNode23.flattenSymbolTable(false);
        jump10.addChildAfter((com.google.javascript.rhino.head.Node) jump18, (com.google.javascript.rhino.head.Node) functionNode23);
        com.google.javascript.rhino.head.Node node30 = functionNode23.target;
        functionNode2.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode23);
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(10, (com.google.javascript.rhino.head.Node) functionNode23, 10);
        boolean boolean34 = functionNode23.isExpressionClosure();
        com.google.javascript.rhino.head.ast.Jump jump36 = new com.google.javascript.rhino.head.ast.Jump((-1), (com.google.javascript.rhino.head.Node) functionNode23, 21);
        jump36.removeProp((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = jump36.toSource((-398329421));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: -1");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        com.google.javascript.rhino.head.ast.Jump jump5 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump5.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump5, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int12 = scriptNode11.getEndLineno();
        int int13 = scriptNode11.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.Node node15 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump5, (com.google.javascript.rhino.head.Node) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode11.getFunctions();
        int int17 = scriptNode11.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode11.getChildScopes();
        scriptNode11.flattenSymbolTable(false);
        boolean boolean21 = scriptNode11.hasSideEffects();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = scriptNode11.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.Scope scope23 = scriptNode11.getParentScope();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((-330954035), (com.google.javascript.rhino.head.Node) scope23, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(functionNode22);
        org.junit.Assert.assertNull(scope23);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.Node node1 = symbol0.getNode();
        com.google.javascript.rhino.head.Node node2 = symbol0.getNode();
        java.lang.String str3 = symbol0.getDeclTypeName();
        int int4 = symbol0.getIndex();
        // The following exception was thrown during execution in test generation
        try {
            symbol0.setDeclType((-22));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid declType: -22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EOF" + "'", str3, "EOF");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node4 = scriptNode1.getNext();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getFirstChild();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode1.getFunctions();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        com.google.javascript.rhino.head.ast.Comment comment10 = scriptNode9.getJsDocNode();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        boolean boolean12 = functionNodeList6.addAll(0, (java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList11);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        functionNode15.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setEncodedSource("");
        functionNode19.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode15, (com.google.javascript.rhino.head.Node) functionNode19, (com.google.javascript.rhino.head.Node) functionNode25, (int) '#');
        com.google.javascript.rhino.head.ast.Comment comment29 = functionNode25.getJsDocNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope32 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = functionNode33.getTop();
        functionNode33.setParens((int) (byte) 1, (int) (short) 1);
        functionNode33.setEncodedSourceStart((-1));
        functionNode33.setFunctionIsGetter();
        scope32.addChildToFront((com.google.javascript.rhino.head.Node) functionNode33);
        functionNode30.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode33);
        boolean boolean43 = functionNode25.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode30);
        com.google.javascript.rhino.head.ast.Jump jump44 = new com.google.javascript.rhino.head.ast.Jump(8, (com.google.javascript.rhino.head.Node) functionNode25);
        boolean boolean45 = functionNodeList6.contains((java.lang.Object) jump44);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor47 = functionNodeList6.listIterator(365513504);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 365513504, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNull(comment10);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(comment29);
        org.junit.Assert.assertNotNull(scriptNode34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = scriptNode1.new NodeIterator();
        int int8 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.visit(nodeVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        functionNode0.setParens((int) (byte) 1, (int) (short) 1);
        functionNode0.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList7 = functionNode0.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope9 = functionNode0.getDefiningScope("hi!");
        boolean boolean10 = functionNode0.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode11.getTop();
        com.google.javascript.rhino.head.ast.Name name14 = null;
        functionNode11.setFunctionName(name14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode16.getTop();
        functionNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode16);
        int int19 = functionNode16.getRp();
        int int20 = functionNode16.getFunctionType();
        int int21 = functionNode0.addFunction(functionNode16);
        functionNode16.setRp((-1));
        // The following exception was thrown during execution in test generation
        try {
            functionNode16.setString("109");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.FunctionNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertNull(nodeList7);
        org.junit.Assert.assertNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode0.replaceWith(scope10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int13 = functionNode12.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode12.getTop();
        com.google.javascript.rhino.head.ast.Name name15 = null;
        functionNode12.setFunctionName(name15);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode17.getTop();
        functionNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode17);
        int int20 = functionNode0.addFunction(functionNode12);
        functionNode0.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode23.getTop();
        functionNode23.setParens((int) (byte) 1, (int) (short) 1);
        functionNode23.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList30 = functionNode23.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope32 = functionNode23.getDefiningScope("hi!");
        boolean boolean33 = functionNode23.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int42 = functionNode39.getRp();
        int int43 = functionNode39.getFunctionType();
        int int44 = functionNode23.addFunction(functionNode39);
        functionNode39.setRp((-1));
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        com.google.javascript.rhino.head.ast.Name name48 = null;
        functionNode0.setFunctionName(name48);
        functionNode0.setSourceName("FunctionNode");
        com.google.javascript.rhino.head.Node node53 = com.google.javascript.rhino.head.Node.newString("FunctionNode");
        functionNode0.addChildToBack(node53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = functionNode0.toSource(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNull(nodeList30);
        org.junit.Assert.assertNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        functionNode1.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) functionNode1);
        int int7 = functionNode1.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.Jump jump12 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump12.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump16 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump12, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int19 = scriptNode18.getEndLineno();
        int int20 = scriptNode18.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode18.getChildScopes();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump12, (com.google.javascript.rhino.head.Node) scriptNode18);
        java.lang.String str23 = scriptNode18.getSourceName();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope27 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = functionNode28.getTop();
        functionNode28.setParens((int) (byte) 1, (int) (short) 1);
        functionNode28.setEncodedSourceStart((-1));
        functionNode28.setFunctionIsGetter();
        scope27.addChildToFront((com.google.javascript.rhino.head.Node) functionNode28);
        functionNode25.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode28);
        int int38 = functionNode25.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode39.getTop();
        com.google.javascript.rhino.head.ast.Name name42 = null;
        functionNode39.setFunctionName(name42);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode44.getTop();
        functionNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode44);
        int int47 = functionNode44.getRp();
        functionNode44.setParens(11, 2);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode((-1));
        int int53 = functionNode44.addFunction(functionNode52);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int56 = scriptNode55.getEndLineno();
        int int57 = scriptNode55.getBaseLineno();
        scriptNode55.removeProp(0);
        scriptNode55.setEncodedSourceEnd(19);
        java.lang.String str62 = scriptNode55.toString();
        int[] intArray64 = new int[] { 26 };
        functionNode44.addLiveLocals((com.google.javascript.rhino.head.Node) scriptNode55, intArray64);
        functionNode25.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode44);
        functionNode1.target = functionNode44;
        com.google.javascript.rhino.head.Node node68 = functionNode44.getFirstChild();
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(scriptNode29);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "136" + "'", str62, "136");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[26]");
        org.junit.Assert.assertNull(node68);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int42 = functionNode39.getRp();
        java.lang.Object obj43 = functionNode39.getCompilerData();
        boolean boolean44 = strMap33.containsKey(obj43);
        com.google.javascript.rhino.head.ast.Symbol symbol46 = new com.google.javascript.rhino.head.ast.Symbol();
        symbol46.setIndex(6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int51 = scriptNode50.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int54 = scriptNode53.getEndLineno();
        scriptNode50.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode53);
        com.google.javascript.rhino.head.ast.Comment comment56 = null;
        scriptNode50.setJsDocNode(comment56);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList58 = scriptNode50.getSymbols();
        symbol46.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode50);
        com.google.javascript.rhino.head.ast.Symbol symbol60 = strMap33.putIfAbsent("{\n}\n", symbol46);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode61 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = functionNode61.getTop();
        functionNode61.setParens((int) (byte) 1, (int) (short) 1);
        functionNode61.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList68 = functionNode61.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope70 = functionNode61.getDefiningScope("hi!");
        boolean boolean71 = functionNode61.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode72 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int73 = functionNode72.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = functionNode72.getTop();
        com.google.javascript.rhino.head.ast.Name name75 = null;
        functionNode72.setFunctionName(name75);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode77 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = functionNode77.getTop();
        functionNode72.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode77);
        int int80 = functionNode77.getRp();
        int int81 = functionNode77.getFunctionType();
        int int82 = functionNode61.addFunction(functionNode77);
        functionNode77.setRp((-1));
        java.lang.String str85 = functionNode77.getName();
        java.lang.Object obj86 = functionNode77.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol87 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.Node node88 = symbol87.getNode();
        symbol87.setIndex(4);
        com.google.javascript.rhino.head.ast.Scope scope91 = symbol87.getContainingTable();
        int int92 = symbol87.getDeclType();
        com.google.javascript.rhino.head.Node node93 = symbol87.getNode();
        com.google.javascript.rhino.head.ast.Scope scope94 = symbol87.getContainingTable();
        int int95 = symbol87.getDeclType();
        com.google.javascript.rhino.head.ast.Symbol symbol96 = strMap33.getOrDefault((java.lang.Object) functionNode77, symbol87);
        java.util.Collection<com.google.javascript.rhino.head.ast.Symbol> symbolCollection97 = strMap33.values();
        java.util.Set<java.lang.String> strSet98 = strMap33.keySet();
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(symbolList58);
        org.junit.Assert.assertNull(symbol60);
        org.junit.Assert.assertNotNull(scriptNode62);
        org.junit.Assert.assertNull(nodeList68);
        org.junit.Assert.assertNull(scope70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(scriptNode74);
        org.junit.Assert.assertNotNull(scriptNode78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertNull(scope91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertNull(scope94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(symbol96);
        org.junit.Assert.assertNotNull(symbolCollection97);
        org.junit.Assert.assertNotNull(strSet98);
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList33 = scriptNode28.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator34 = functionNodeList33.spliterator();
        int int36 = functionNodeList33.indexOf((java.lang.Object) (byte) 10);
        boolean boolean37 = functionNodeList15.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList33);
        java.lang.Object[] objArray38 = functionNodeList15.toArray();
        functionNodeList15.clear();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = functionNodeList15.get((-330954035));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -330954035");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertNotNull(functionNodeList33);
        org.junit.Assert.assertNotNull(functionNodeSpliterator34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode15.getTop();
        com.google.javascript.rhino.head.Node node18 = functionNode15.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList19 = functionNode15.getParams();
        functionNode0.setParams(astNodeList19);
        functionNode0.setIsExpressionClosure(true);
        int int25 = functionNode0.getIntProp(6, 4);
        int int26 = functionNode0.getRp();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode27.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        functionNode30.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        functionNode34.setEncodedSource("");
        functionNode34.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode30, (com.google.javascript.rhino.head.Node) functionNode34, (com.google.javascript.rhino.head.Node) functionNode40, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode44 = functionNode30.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int46 = functionNode45.getLp();
        functionNode45.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode49 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int50 = functionNode49.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = functionNode49.getTop();
        com.google.javascript.rhino.head.ast.Name name52 = null;
        functionNode49.setFunctionName(name52);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode54 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = functionNode54.getTop();
        functionNode49.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode54);
        int int57 = functionNode54.getRp();
        int int58 = functionNode54.getFunctionType();
        functionNode45.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode54);
        com.google.javascript.rhino.head.ast.Scope scope60 = functionNode54.getEnclosingScope();
        functionNode30.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode54);
        int int62 = functionNode27.addFunction(functionNode30);
        functionNode27.setEncodedSourceEnd(350469479);
        com.google.javascript.rhino.head.Node node67 = com.google.javascript.rhino.head.Node.newString((int) (byte) 1, "$0");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode68 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int69 = functionNode68.getLp();
        functionNode68.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode72 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope74 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = functionNode75.getTop();
        functionNode75.setParens((int) (byte) 1, (int) (short) 1);
        functionNode75.setEncodedSourceStart((-1));
        functionNode75.setFunctionIsGetter();
        scope74.addChildToFront((com.google.javascript.rhino.head.Node) functionNode75);
        functionNode72.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode75);
        int int85 = functionNode68.addFunction(functionNode72);
        com.google.javascript.rhino.head.ast.Symbol symbol87 = functionNode68.getSymbol("-1\tBLOCK -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode89 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int90 = scriptNode89.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol92 = scriptNode89.getSymbol("hi!");
        scriptNode89.putIntProp(3, 0);
        functionNode68.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode89);
        java.lang.String str97 = node67.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) functionNode68);
        functionNode27.setParentScope((com.google.javascript.rhino.head.ast.Scope) functionNode68);
        // The following exception was thrown during execution in test generation
        try {
            int int99 = functionNode0.getIndexForNameNode((com.google.javascript.rhino.head.Node) functionNode68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(astNodeList19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(astNode44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(scriptNode51);
        org.junit.Assert.assertNotNull(scriptNode55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(scriptNode76);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(symbol87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNull(symbol92);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str4 = regExpLiteral2.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = regExpLiteral2.new NodeIterator();
        java.lang.String str7 = regExpLiteral2.toSource(100);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode8.getTop();
        com.google.javascript.rhino.head.ast.Name name11 = null;
        functionNode8.setFunctionName(name11);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        functionNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        java.lang.String str16 = functionNode8.getNextTempName();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(350469479, (com.google.javascript.rhino.head.Node) regExpLiteral2, (com.google.javascript.rhino.head.Node) functionNode8, 7);
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int24 = scriptNode23.getEndLineno();
        int int25 = scriptNode23.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode23.getChildScopes();
        jump21.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode23);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int30 = functionNode29.getLp();
        functionNode29.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int34 = functionNode33.getLp();
        functionNode33.setEncodedSource("");
        functionNode33.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode29, (com.google.javascript.rhino.head.Node) functionNode33, (com.google.javascript.rhino.head.Node) functionNode39, (int) '#');
        jump21.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode29);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int45 = functionNode44.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str48 = functionNode44.toStringTree(scriptNode47);
        com.google.javascript.rhino.head.ast.Scope scope50 = scriptNode47.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList51 = scriptNode47.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int54 = scriptNode53.getEndLineno();
        int int55 = scriptNode53.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode47, (com.google.javascript.rhino.head.ast.Scope) scriptNode53);
        jump21.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode47);
        java.lang.String str58 = scriptNode47.getJsDoc();
        // The following exception was thrown during execution in test generation
        try {
            functionNode8.setScope((com.google.javascript.rhino.head.ast.Scope) scriptNode47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "                    /null/" + "'", str4, "                    /null/");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                                                                                                                                                                        /null/" + "'", str7, "                                                                                                                                                                                                        /null/");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$0" + "'", str16, "$0");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(scope50);
        org.junit.Assert.assertNotNull(symbolList51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str9 = functionNode5.toStringTree(scriptNode8);
        functionNode5.setFunctionIsGetter();
        int int11 = functionNode0.addFunction(functionNode5);
        com.google.javascript.rhino.head.ast.Jump jump16 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump16.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump20 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump16, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int23 = scriptNode22.getEndLineno();
        int int24 = scriptNode22.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList25 = scriptNode22.getChildScopes();
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump16, (com.google.javascript.rhino.head.Node) scriptNode22);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList27 = scriptNode22.getFunctions();
        int int28 = scriptNode22.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode22.getChildScopes();
        scriptNode22.flattenSymbolTable(false);
        functionNode0.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode22);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = functionNode33.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        functionNode36.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        functionNode40.setEncodedSource("");
        functionNode40.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int47 = functionNode46.getLp();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode36, (com.google.javascript.rhino.head.Node) functionNode40, (com.google.javascript.rhino.head.Node) functionNode46, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode50 = functionNode36.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int52 = functionNode51.getLp();
        functionNode51.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int56 = functionNode55.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = functionNode55.getTop();
        com.google.javascript.rhino.head.ast.Name name58 = null;
        functionNode55.setFunctionName(name58);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = functionNode60.getTop();
        functionNode55.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode60);
        int int63 = functionNode60.getRp();
        int int64 = functionNode60.getFunctionType();
        functionNode51.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode60);
        com.google.javascript.rhino.head.ast.Scope scope66 = functionNode60.getEnclosingScope();
        functionNode36.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode60);
        int int68 = functionNode33.addFunction(functionNode36);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList69 = functionNode33.getResumptionPoints();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode70 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int71 = functionNode70.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = functionNode70.getTop();
        com.google.javascript.rhino.head.ast.Name name73 = null;
        functionNode70.setFunctionName(name73);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode75 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = functionNode75.getTop();
        functionNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode75);
        functionNode75.setEncodedSourceStart(6);
        functionNode75.setRelative((-1));
        boolean boolean82 = functionNode33.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode75);
        functionNode33.setEncodedSourceEnd((-1));
        int int85 = functionNode0.addFunction(functionNode33);
        java.lang.String str87 = functionNode0.makeIndent(26);
        boolean boolean88 = functionNode0.isGetterOrSetter();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(scopeList25);
        org.junit.Assert.assertNotNull(functionNodeList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertNotNull(scriptNode34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(astNode50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(scriptNode57);
        org.junit.Assert.assertNotNull(scriptNode61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(nodeList69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(scriptNode72);
        org.junit.Assert.assertNotNull(scriptNode76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "                                                    " + "'", str87, "                                                    ");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode2.getTop();
        boolean boolean5 = functionNode2.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int8 = scriptNode7.getEndLineno();
        int int9 = scriptNode7.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump12 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode14.getChildScopes();
        jump12.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.String str19 = scriptNode14.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode7, (com.google.javascript.rhino.head.ast.Scope) scriptNode14);
        com.google.javascript.rhino.head.ast.Scope scope21 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode14.target = scope21;
        functionNode2.addChildScope(scope21);
        boolean boolean24 = functionNode2.hasConsistentReturnUsage();
        java.lang.String str25 = functionNode2.getNextTempName();
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) (short) -1, (com.google.javascript.rhino.head.Node) functionNode2);
        boolean boolean27 = functionNode2.isExpressionClosure();
        functionNode2.putIntProp(1, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int32 = functionNode31.getLp();
        functionNode31.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int36 = functionNode35.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = functionNode35.getTop();
        com.google.javascript.rhino.head.ast.Name name38 = null;
        functionNode35.setFunctionName(name38);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = functionNode40.getTop();
        functionNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode40);
        int int43 = functionNode40.getRp();
        int int44 = functionNode40.getFunctionType();
        functionNode31.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode40);
        com.google.javascript.rhino.head.ast.Scope scope46 = functionNode40.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstNode astNode47 = scope46.getParent();
        com.google.javascript.rhino.head.Node node48 = scope46.getLastSibling();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode49 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int50 = functionNode49.getLp();
        functionNode49.setIsExpressionClosure(false);
        int int53 = functionNode49.getLineno();
        functionNode2.addChildAfter(node48, (com.google.javascript.rhino.head.Node) functionNode49);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode56 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int57 = functionNode56.getLp();
        functionNode56.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int61 = functionNode60.getLp();
        functionNode60.setEncodedSource("");
        functionNode60.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode66 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int67 = functionNode66.getLp();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode56, (com.google.javascript.rhino.head.Node) functionNode60, (com.google.javascript.rhino.head.Node) functionNode66, (int) '#');
        boolean boolean70 = functionNode66.isGenerator();
        int int71 = functionNode66.getFunctionType();
        com.google.javascript.rhino.head.Node node72 = functionNode66.getNext();
        int int73 = functionNode2.addFunction(functionNode66);
        com.google.javascript.rhino.head.ast.Jump jump74 = new com.google.javascript.rhino.head.ast.Jump((-1), (com.google.javascript.rhino.head.Node) functionNode2);
        int int75 = functionNode2.getFunctionType();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str19, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$0" + "'", str25, "$0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(scriptNode37);
        org.junit.Assert.assertNotNull(scriptNode41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNull(astNode47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        functionNode5.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int13 = functionNode12.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode12.getTop();
        com.google.javascript.rhino.head.ast.Name name15 = null;
        functionNode12.setFunctionName(name15);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode17.getTop();
        functionNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode17);
        functionNode17.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int24 = functionNode17.addFunction(functionNode23);
        int int25 = jump11.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode23);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump33 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump33.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump37 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump33, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int40 = scriptNode39.getEndLineno();
        int int41 = scriptNode39.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList42 = scriptNode39.getChildScopes();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump33, (com.google.javascript.rhino.head.Node) scriptNode39);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList44 = scriptNode39.getFunctions();
        functionNodeList44.clear();
        com.google.javascript.rhino.head.ast.Jump jump50 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump50.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump50, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int57 = scriptNode56.getEndLineno();
        int int58 = scriptNode56.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode56.getChildScopes();
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump50, (com.google.javascript.rhino.head.Node) scriptNode56);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList61 = scriptNode56.getFunctions();
        boolean boolean62 = functionNodeList44.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList61);
        functionNode27.putProp(20, (java.lang.Object) functionNodeList44);
        int int64 = functionNode23.addFunction(functionNode27);
        functionNode5.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode23);
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap66 = functionNode5.getLiveLocals();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode68 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int69 = functionNode68.getBaseLineno();
        boolean boolean70 = functionNode68.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral72 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral72.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str75 = regExpLiteral72.getValue();
        regExpLiteral72.setFlags("52");
        functionNode68.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral72);
        boolean boolean79 = functionNode68.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode80 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode81 = functionNode80.getTop();
        int int82 = functionNode80.getRegexpCount();
        int int83 = functionNode80.getParamCount();
        com.google.javascript.rhino.head.ast.AstNode astNode84 = functionNode80.getBody();
        int int85 = functionNode68.addFunction(functionNode80);
        boolean boolean86 = functionNode80.hasChildren();
        functionNode80.setLp((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            functionNode5.setContinue((com.google.javascript.rhino.head.Node) functionNode80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(scopeList42);
        org.junit.Assert.assertNotNull(functionNodeList44);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertNotNull(functionNodeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(nodeMap66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(scriptNode81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(astNode84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        com.google.javascript.rhino.head.ast.AstNode astNode2 = functionNode1.getMemberExprNode();
        org.junit.Assert.assertNull(astNode2);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode3 = functionNode0.getBody();
        int int4 = functionNode0.getLength();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        functionNode6.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int11 = functionNode10.getLp();
        functionNode10.setEncodedSource("");
        functionNode10.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode6, (com.google.javascript.rhino.head.Node) functionNode10, (com.google.javascript.rhino.head.Node) functionNode16, (int) '#');
        boolean boolean20 = functionNode16.isGenerator();
        int int21 = functionNode16.getFunctionType();
        com.google.javascript.rhino.head.Node node22 = functionNode16.getNext();
        com.google.javascript.rhino.head.ast.AstRoot astRoot23 = functionNode16.getAstRoot();
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.setJumpStatement((com.google.javascript.rhino.head.ast.Jump) functionNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(astNode3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(astRoot23);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        int int6 = scriptNode4.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode4.getChildScopes();
        jump2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int11 = functionNode10.getLp();
        functionNode10.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int15 = functionNode14.getLp();
        functionNode14.setEncodedSource("");
        functionNode14.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.Node node23 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode10, (com.google.javascript.rhino.head.Node) functionNode14, (com.google.javascript.rhino.head.Node) functionNode20, (int) '#');
        jump2.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode10);
        int int25 = functionNode10.getLength();
        functionNode10.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode28.getTop();
        com.google.javascript.rhino.head.ast.Name name31 = null;
        functionNode28.setFunctionName(name31);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = functionNode33.getTop();
        functionNode28.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode33);
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode28.replaceWith(scope38);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int43 = functionNode42.getLp();
        functionNode42.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int47 = functionNode46.getLp();
        functionNode46.setEncodedSource("");
        functionNode46.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int53 = functionNode52.getLp();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode42, (com.google.javascript.rhino.head.Node) functionNode46, (com.google.javascript.rhino.head.Node) functionNode52, (int) '#');
        com.google.javascript.rhino.head.ast.Comment comment56 = functionNode52.getJsDocNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope59 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode60 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = functionNode60.getTop();
        functionNode60.setParens((int) (byte) 1, (int) (short) 1);
        functionNode60.setEncodedSourceStart((-1));
        functionNode60.setFunctionIsGetter();
        scope59.addChildToFront((com.google.javascript.rhino.head.Node) functionNode60);
        functionNode57.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode60);
        boolean boolean70 = functionNode52.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode57);
        int int71 = functionNode52.getFunctionCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode72 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int73 = functionNode72.getLp();
        functionNode72.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode76 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int77 = functionNode76.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = functionNode76.getTop();
        com.google.javascript.rhino.head.ast.Name name79 = null;
        functionNode76.setFunctionName(name79);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode81 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = functionNode81.getTop();
        functionNode76.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode81);
        int int84 = functionNode81.getRp();
        int int85 = functionNode81.getFunctionType();
        functionNode72.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode81);
        com.google.javascript.rhino.head.Node node87 = functionNode72.getLastSibling();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) functionNode52, (com.google.javascript.rhino.head.Node) functionNode72);
        functionNode28.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode52);
        functionNode10.addChildrenToBack((com.google.javascript.rhino.head.Node) functionNode52);
        functionNode10.removeChildren();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertNotNull(scriptNode34);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(comment56);
        org.junit.Assert.assertNotNull(scriptNode61);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(scriptNode78);
        org.junit.Assert.assertNotNull(scriptNode82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int2 = functionNode1.getBaseLineno();
        boolean boolean3 = functionNode1.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral5 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral5.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str8 = regExpLiteral5.getValue();
        regExpLiteral5.setFlags("52");
        functionNode1.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral5);
        boolean boolean12 = functionNode1.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        int int15 = functionNode13.getRegexpCount();
        int int16 = functionNode13.getParamCount();
        com.google.javascript.rhino.head.ast.AstNode astNode17 = functionNode13.getBody();
        int int18 = functionNode1.addFunction(functionNode13);
        functionNode13.setEncodedSourceStart(17);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int22 = functionNode21.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode21.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode24 = functionNode21.getBody();
        com.google.javascript.rhino.head.ast.Scope scope25 = functionNode21.getParentScope();
        int int26 = functionNode13.addFunction(functionNode21);
        int int27 = functionNode21.getLineno();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode28 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int29 = functionNode28.getLp();
        functionNode28.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int33 = functionNode32.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = functionNode32.getTop();
        com.google.javascript.rhino.head.ast.Name name35 = null;
        functionNode32.setFunctionName(name35);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode37 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode37.getTop();
        functionNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode37);
        int int40 = functionNode37.getRp();
        int int41 = functionNode37.getFunctionType();
        functionNode28.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode37);
        com.google.javascript.rhino.head.ast.Scope scope43 = functionNode37.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstNode astNode44 = scope43.getParent();
        com.google.javascript.rhino.head.Node node45 = scope43.getLastSibling();
        functionNode21.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) scope43);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int48 = functionNode47.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode47.getTop();
        com.google.javascript.rhino.head.ast.Name name50 = null;
        functionNode47.setFunctionName(name50);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = functionNode52.getTop();
        functionNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode52);
        functionNode52.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int59 = functionNode52.addFunction(functionNode58);
        java.lang.Object obj60 = functionNode52.getCompilerData();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int63 = functionNode62.getBaseLineno();
        functionNode62.setSourceName("                                                                                                                                                                                                        /null/");
        functionNode62.setRequiresActivation();
        com.google.javascript.rhino.head.Node node67 = functionNode62.target;
        int int68 = functionNode62.getLength();
        functionNode52.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode62);
        functionNode21.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = functionNode21.toSource();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(astNode17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertNull(astNode24);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(scriptNode34);
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNull(astNode44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertNotNull(scriptNode53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.Scope scope7 = scriptNode4.getParentScope();
        com.google.javascript.rhino.head.ast.Scope scope8 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildrenToBack((com.google.javascript.rhino.head.Node) scope8);
        scope8.setLineno(8);
        com.google.javascript.rhino.head.Node node12 = scope8.getFirstChild();
        scope8.setPosition(10);
        com.google.javascript.rhino.head.Token.CommentType commentType19 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType19, "109");
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment(11, 35, commentType19, "                    109");
        com.google.javascript.rhino.head.Token.CommentType commentType24 = comment23.getCommentType();
        int int25 = comment23.getType();
        scope8.setJsDocNode(comment23);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(scope7);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + commentType19 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType19.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + commentType24 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType24.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 161 + "'", int25 == 161);
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        functionNode1.flattenSymbolTable(false);
        java.lang.String str7 = functionNode1.getName();
        functionNode1.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int10 = functionNode9.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode9.getTop();
        boolean boolean12 = functionNode9.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList13 = functionNode9.getSymbols();
        functionNode9.setRp(5);
        com.google.javascript.rhino.head.ast.Scope scope16 = functionNode9.getEnclosingScope();
        functionNode9.setLineno(5);
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode9, 1);
        functionNode9.setSourceName("                                                                                                                                                                                                        /null/-1\tSCRIPT -1 1\n");
        functionNode9.setLp((-860972433));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(symbolList13);
        org.junit.Assert.assertNull(scope16);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode3.getTop();
        functionNode3.setParens((int) (byte) 1, (int) (short) 1);
        functionNode3.setEncodedSourceStart((-1));
        functionNode3.setFunctionIsGetter();
        scope2.addChildToFront((com.google.javascript.rhino.head.Node) functionNode3);
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        functionNode13.setParens((int) (byte) 1, (int) (short) 1);
        functionNode13.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList20 = functionNode13.getResumptionPoints();
        int int21 = functionNode13.getLp();
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        functionNode13.setLp((int) (short) 0);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral25 = new com.google.javascript.rhino.head.ast.RegExpLiteral();
        java.lang.String str27 = regExpLiteral25.toSource(100);
        functionNode13.addRegExp(regExpLiteral25);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node29 = functionNode13.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertNull(nodeList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "                                                                                                                                                                                                        /null/" + "'", str27, "                                                                                                                                                                                                        /null/");
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.labelId(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = functionNode5.getTop();
        com.google.javascript.rhino.head.ast.Name name8 = null;
        functionNode5.setFunctionName(name8);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = functionNode10.getTop();
        functionNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode10);
        int int13 = functionNode10.getRp();
        int int14 = functionNode10.getFunctionType();
        functionNode1.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode10);
        com.google.javascript.rhino.head.ast.Name name16 = functionNode1.getFunctionName();
        functionNode1.setFunctionType(7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = functionNode19.getTop();
        boolean boolean22 = functionNode19.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int25 = scriptNode24.getEndLineno();
        int int26 = scriptNode24.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump29 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int32 = scriptNode31.getEndLineno();
        int int33 = scriptNode31.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode31.getChildScopes();
        jump29.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode31);
        java.lang.String str36 = scriptNode31.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode24, (com.google.javascript.rhino.head.ast.Scope) scriptNode31);
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode31.target = scope38;
        functionNode19.addChildScope(scope38);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int42 = functionNode41.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = functionNode41.getTop();
        com.google.javascript.rhino.head.ast.Name name44 = null;
        functionNode41.setFunctionName(name44);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = functionNode46.getTop();
        functionNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode46);
        com.google.javascript.rhino.head.ast.Scope scope51 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode41.replaceWith(scope51);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int54 = functionNode53.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = functionNode53.getTop();
        com.google.javascript.rhino.head.ast.Name name56 = null;
        functionNode53.setFunctionName(name56);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = functionNode58.getTop();
        functionNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode58);
        int int61 = functionNode41.addFunction(functionNode53);
        int int62 = functionNode19.addFunction(functionNode53);
        functionNode53.putIntProp(22, 2);
        boolean boolean66 = functionNode1.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode68 = new com.google.javascript.rhino.head.ast.FunctionNode(5);
        com.google.javascript.rhino.head.ast.Name name69 = functionNode68.getFunctionName();
        functionNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode68);
        com.google.javascript.rhino.head.Node node71 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(1579347477, (com.google.javascript.rhino.head.Node) functionNode1, node71, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(scriptNode7);
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(name16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(scriptNode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str36, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(scriptNode43);
        org.junit.Assert.assertNotNull(scriptNode47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(scriptNode55);
        org.junit.Assert.assertNotNull(scriptNode59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(name69);
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        com.google.javascript.rhino.head.ast.Jump jump1 = new com.google.javascript.rhino.head.ast.Jump(32);
        com.google.javascript.rhino.head.Node node2 = jump1.getNext();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode3.getTop();
        boolean boolean6 = functionNode3.hasSideEffects();
        java.lang.String str7 = functionNode3.toString();
        functionNode3.setParens((int) (short) 10, 8);
        // The following exception was thrown during execution in test generation
        try {
            jump1.setFinally((com.google.javascript.rhino.head.Node) functionNode3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "109" + "'", str7, "109");
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        com.google.javascript.rhino.head.ast.Symbol symbol0 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str1 = symbol0.getDeclTypeName();
        int int2 = symbol0.getDeclType();
        com.google.javascript.rhino.head.ast.Scope scope3 = symbol0.getContainingTable();
        java.lang.String str4 = symbol0.getDeclTypeName();
        com.google.javascript.rhino.head.Node node5 = symbol0.getNode();
        com.google.javascript.rhino.head.ast.Scope scope6 = symbol0.getContainingTable();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "EOF" + "'", str1, "EOF");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "EOF" + "'", str4, "EOF");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(scope6);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) -1, name1);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList3 = functionNode2.getResumptionPoints();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = functionNode2.getSymbols();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str9 = functionNode5.toStringTree(scriptNode8);
        functionNode5.setFunctionIsGetter();
        com.google.javascript.rhino.head.ast.AstNode astNode11 = functionNode5.getBody();
        functionNode5.setParens(21, (int) '#');
        int int15 = functionNode5.getLineno();
        functionNode5.setRp(9);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode5.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = functionNode19.getTop();
        boolean boolean22 = functionNode19.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int25 = scriptNode24.getEndLineno();
        int int26 = scriptNode24.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump29 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int32 = scriptNode31.getEndLineno();
        int int33 = scriptNode31.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode31.getChildScopes();
        jump29.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode31);
        java.lang.String str36 = scriptNode31.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode24, (com.google.javascript.rhino.head.ast.Scope) scriptNode31);
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode31.target = scope38;
        functionNode19.addChildScope(scope38);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int42 = functionNode41.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = functionNode41.getTop();
        com.google.javascript.rhino.head.ast.Name name44 = null;
        functionNode41.setFunctionName(name44);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = functionNode46.getTop();
        functionNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode46);
        com.google.javascript.rhino.head.ast.Scope scope51 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode41.replaceWith(scope51);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int54 = functionNode53.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = functionNode53.getTop();
        com.google.javascript.rhino.head.ast.Name name56 = null;
        functionNode53.setFunctionName(name56);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = functionNode58.getTop();
        functionNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode58);
        int int61 = functionNode41.addFunction(functionNode53);
        int int62 = functionNode19.addFunction(functionNode53);
        functionNode5.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode53);
        int int64 = functionNode2.addFunction(functionNode53);
        functionNode2.setSourceName("48");
        org.junit.Assert.assertNull(nodeList3);
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(astNode11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(scriptNode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str36, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(scriptNode43);
        org.junit.Assert.assertNotNull(scriptNode47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(scriptNode55);
        org.junit.Assert.assertNotNull(scriptNode59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope scope3 = scriptNode1.getParentScope();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType6, "109");
        java.lang.String str10 = comment8.toSource(19);
        com.google.javascript.rhino.head.Token.CommentType commentType11 = comment8.getCommentType();
        int int12 = comment8.getLineno();
        comment8.setLineno(109);
        // The following exception was thrown during execution in test generation
        try {
            scope3.setJsDocNode(comment8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertTrue("'" + commentType6 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType6.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "                                      109" + "'", str10, "                                      109");
        org.junit.Assert.assertTrue("'" + commentType11 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType11.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump21.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump21, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode27.getChildScopes();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump21, (com.google.javascript.rhino.head.Node) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode27.getFunctions();
        boolean boolean33 = functionNodeList15.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList32);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator34 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        int int51 = functionNodeList50.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator52 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList50.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator52);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator54 = positionComparator52.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator55 = astNodeComparator54.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator56 = positionComparator34.thenComparing(astNodeComparator54);
        functionNodeList15.sort(astNodeComparator54);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = functionNode58.getTop();
        com.google.javascript.rhino.head.ast.Name name60 = null;
        functionNode58.setFunctionName(name60);
        boolean boolean62 = functionNode58.requiresActivation();
        com.google.javascript.rhino.head.ast.Jump jump66 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump66.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump70 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump66, 0);
        com.google.javascript.rhino.head.ast.Jump jump74 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump74.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump78 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump74, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode79 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int80 = functionNode79.getLp();
        functionNode79.setEncodedSource("");
        functionNode79.flattenSymbolTable(false);
        jump66.addChildAfter((com.google.javascript.rhino.head.Node) jump74, (com.google.javascript.rhino.head.Node) functionNode79);
        com.google.javascript.rhino.head.Node node86 = functionNode79.target;
        functionNode58.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode79);
        int int88 = functionNode79.getEncodedSourceStart();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList89 = functionNode79.getFunctions();
        boolean boolean90 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList89);
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream91 = functionNodeList89.stream();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator92 = functionNodeList89.spliterator();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator54);
        org.junit.Assert.assertNotNull(astNodeComparator55);
        org.junit.Assert.assertNotNull(astNodeComparator56);
        org.junit.Assert.assertNotNull(scriptNode59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(functionNodeStream91);
        org.junit.Assert.assertNotNull(functionNodeSpliterator92);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str4 = regExpLiteral2.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = regExpLiteral2.new NodeIterator();
        java.lang.String str7 = regExpLiteral2.toSource(100);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int9 = functionNode8.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode8.getTop();
        com.google.javascript.rhino.head.ast.Name name11 = null;
        functionNode8.setFunctionName(name11);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        functionNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        java.lang.String str16 = functionNode8.getNextTempName();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(350469479, (com.google.javascript.rhino.head.Node) regExpLiteral2, (com.google.javascript.rhino.head.Node) functionNode8, 7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = functionNode8.debugPrint();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "                    /null/" + "'", str4, "                    /null/");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                                                                                                                                                                        /null/" + "'", str7, "                                                                                                                                                                                                        /null/");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$0" + "'", str16, "$0");
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope(20);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node2 = scope1.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(25);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name2 = null;
        functionNode0.setFunctionName(name2);
        int int4 = functionNode0.getLength();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope((int) '4');
        functionNode0.putProp(6, (java.lang.Object) scope7);
        functionNode0.setEncodedSourceStart(9);
        com.google.javascript.rhino.head.ast.Scope scope11 = functionNode0.getParentScope();
        // The following exception was thrown during execution in test generation
        try {
            functionNode0.labelId(18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(scope11);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral2 = new com.google.javascript.rhino.head.ast.RegExpLiteral((-1), 3);
        java.lang.String str3 = regExpLiteral2.getJsDoc();
        com.google.javascript.rhino.head.Node node5 = regExpLiteral2.setType(9);
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral7 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str9 = regExpLiteral7.toSource((int) (byte) 10);
        regExpLiteral7.setLineno(0);
        regExpLiteral7.setValue("EOF");
        regExpLiteral7.setLength((int) (byte) 0);
        java.lang.String str16 = regExpLiteral7.getFlags();
        regExpLiteral2.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral7);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "                    /null/" + "'", str9, "                    /null/");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(16, name1);
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap3 = functionNode2.getLiveLocals();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = functionNode2.toSource((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(nodeMap3);
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode15 = functionNode1.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode20.getTop();
        com.google.javascript.rhino.head.ast.Name name23 = null;
        functionNode20.setFunctionName(name23);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = functionNode25.getTop();
        functionNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        int int28 = functionNode25.getRp();
        int int29 = functionNode25.getFunctionType();
        functionNode16.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        com.google.javascript.rhino.head.ast.Scope scope31 = functionNode25.getEnclosingScope();
        functionNode1.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        int int33 = functionNode1.getType();
        com.google.javascript.rhino.head.Node node34 = functionNode1.getLastSibling();
        int int35 = functionNode1.getPosition();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(astNode15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 109 + "'", int33 == 109);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        com.google.javascript.rhino.head.ast.Jump jump1 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode2.getTop();
        com.google.javascript.rhino.head.ast.Name name5 = null;
        functionNode2.setFunctionName(name5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = functionNode7.getTop();
        functionNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode7);
        functionNode7.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int14 = functionNode7.addFunction(functionNode13);
        int int15 = jump1.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        functionNode13.setEncodedSourceStart((int) '4');
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = functionNode18.getTop();
        com.google.javascript.rhino.head.ast.Name name21 = null;
        functionNode18.setFunctionName(name21);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode23 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = functionNode23.getTop();
        functionNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode23);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope((int) (short) -1, 0);
        functionNode18.replaceWith(scope28);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = functionNode30.getTop();
        com.google.javascript.rhino.head.ast.Name name33 = null;
        functionNode30.setFunctionName(name33);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode35.getTop();
        functionNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode35);
        int int38 = functionNode18.addFunction(functionNode30);
        functionNode13.addChildToBack((com.google.javascript.rhino.head.Node) functionNode30);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode40 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int41 = functionNode40.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = functionNode40.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode43 = functionNode40.getBody();
        com.google.javascript.rhino.head.ast.Jump jump49 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump49.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump53 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump49, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int56 = scriptNode55.getEndLineno();
        int int57 = scriptNode55.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList58 = scriptNode55.getChildScopes();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump49, (com.google.javascript.rhino.head.Node) scriptNode55);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList60 = scriptNode55.getChildScopes();
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump(11, (com.google.javascript.rhino.head.Node) scriptNode55);
        functionNode40.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode55);
        functionNode13.setParent((com.google.javascript.rhino.head.ast.AstNode) functionNode40);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor64 = functionNode40.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int65 = functionNode40.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertNotNull(scriptNode8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(scriptNode20);
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(scriptNode42);
        org.junit.Assert.assertNull(astNode43);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(scopeList58);
        org.junit.Assert.assertNull(scopeList60);
        org.junit.Assert.assertNotNull(nodeItor64);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        com.google.javascript.rhino.head.ast.Name name1 = null;
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(15, name1);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList3 = functionNode2.getParams();
        int int6 = functionNode2.getIntProp(35, (int) (short) 10);
        java.lang.String str7 = functionNode2.getNextTempName();
        org.junit.Assert.assertNotNull(astNodeList3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$0" + "'", str7, "$0");
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList33 = scriptNode28.getFunctions();
        functionNodeList33.clear();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        boolean boolean51 = functionNodeList33.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList50);
        boolean boolean52 = functionNodeList15.addAll(0, (java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList33);
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList68 = scriptNode63.getFunctions();
        int int69 = functionNodeList68.size();
        functionNodeList68.clear();
        int int72 = functionNodeList68.indexOf((java.lang.Object) 10L);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor73 = functionNodeList68.iterator();
        boolean boolean74 = functionNodeList15.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList68);
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream75 = functionNodeList68.parallelStream();
        java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeCollection77 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = functionNodeList68.addAll(6, functionNodeCollection77);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertNotNull(functionNodeList33);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertNotNull(functionNodeList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(functionNodeItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(functionNodeStream75);
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = functionNode15.getTop();
        com.google.javascript.rhino.head.Node node18 = functionNode15.getLastSibling();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList19 = functionNode15.getParams();
        functionNode0.setParams(astNodeList19);
        functionNode0.setIsExpressionClosure(true);
        functionNode0.setEncodedSourceStart(7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode25.getTop();
        com.google.javascript.rhino.head.ast.Name name28 = null;
        functionNode25.setFunctionName(name28);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = functionNode30.getTop();
        functionNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode30);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList33 = functionNode25.getParams();
        functionNode25.setRequiresActivation();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        int int36 = scriptNode35.getEncodedSourceEnd();
        functionNode25.addResumptionPoint((com.google.javascript.rhino.head.Node) scriptNode35);
        functionNode0.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode35);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node39 = functionNode0.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(astNodeList19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertNotNull(scriptNode31);
        org.junit.Assert.assertNotNull(astNodeList33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        com.google.javascript.rhino.head.ast.Jump jump3 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump3.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump7 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump3, 0);
        com.google.javascript.rhino.head.ast.Jump jump11 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump11.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump11, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        functionNode16.setEncodedSource("");
        functionNode16.flattenSymbolTable(false);
        jump3.addChildAfter((com.google.javascript.rhino.head.Node) jump11, (com.google.javascript.rhino.head.Node) functionNode16);
        com.google.javascript.rhino.head.Node node23 = functionNode16.target;
        boolean boolean24 = functionNode16.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Name name25 = functionNode16.getFunctionName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode29.getTop();
        functionNode29.setParens((int) (byte) 1, (int) (short) 1);
        functionNode29.setEncodedSourceStart((-1));
        functionNode29.setFunctionIsGetter();
        scope28.addChildToFront((com.google.javascript.rhino.head.Node) functionNode29);
        functionNode26.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode29);
        functionNode29.setRelative(0);
        functionNode16.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode29);
        functionNode16.setEncodedSourceStart((int) (byte) 0);
        com.google.javascript.rhino.head.ast.AstNode astNode44 = functionNode16.getBody();
        int int45 = functionNode16.getLp();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(name25);
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertNotNull(astNode44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.Jump jump12 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump12.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump16 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump12, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int18 = functionNode17.getLp();
        functionNode17.setEncodedSource("");
        functionNode17.flattenSymbolTable(false);
        jump4.addChildAfter((com.google.javascript.rhino.head.Node) jump12, (com.google.javascript.rhino.head.Node) functionNode17);
        com.google.javascript.rhino.head.Node node24 = functionNode17.target;
        boolean boolean25 = functionNode17.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = functionNode26.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int30 = functionNode29.getLp();
        functionNode29.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int34 = functionNode33.getLp();
        functionNode33.setEncodedSource("");
        functionNode33.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode29, (com.google.javascript.rhino.head.Node) functionNode33, (com.google.javascript.rhino.head.Node) functionNode39, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode43 = functionNode29.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int45 = functionNode44.getLp();
        functionNode44.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int49 = functionNode48.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = functionNode48.getTop();
        com.google.javascript.rhino.head.ast.Name name51 = null;
        functionNode48.setFunctionName(name51);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = functionNode53.getTop();
        functionNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        int int56 = functionNode53.getRp();
        int int57 = functionNode53.getFunctionType();
        functionNode44.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        com.google.javascript.rhino.head.ast.Scope scope59 = functionNode53.getEnclosingScope();
        functionNode29.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        int int61 = functionNode26.addFunction(functionNode29);
        int int62 = functionNode17.addFunction(functionNode29);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) functionNode17);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node64 = functionNode17.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(astNode43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(scriptNode50);
        org.junit.Assert.assertNotNull(scriptNode54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int3 = functionNode2.getLp();
        functionNode2.setLp((int) (short) 1);
        int int8 = functionNode2.getIntProp(4, 26);
        com.google.javascript.rhino.head.ast.Jump jump9 = new com.google.javascript.rhino.head.ast.Jump(3, (com.google.javascript.rhino.head.Node) functionNode2);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setFunctionType(11);
        boolean boolean13 = functionNode2.hasChildren();
        com.google.javascript.rhino.head.Node node14 = functionNode2.target;
        int int15 = functionNode2.getParamCount();
        com.google.javascript.rhino.head.ast.Jump jump18 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        int int22 = scriptNode20.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode20.getChildScopes();
        jump18.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode20);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        functionNode26.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        functionNode30.setEncodedSource("");
        functionNode30.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode26, (com.google.javascript.rhino.head.Node) functionNode30, (com.google.javascript.rhino.head.Node) functionNode36, (int) '#');
        jump18.addChildrenToFront((com.google.javascript.rhino.head.Node) functionNode26);
        int int43 = functionNode26.getIntProp((int) '#', (-1110578805));
        functionNode2.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode26);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList45 = functionNode2.getFunctions();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral48 = new com.google.javascript.rhino.head.ast.RegExpLiteral((-1), 3);
        boolean boolean49 = functionNodeList45.contains((java.lang.Object) (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26 + "'", int8 == 26);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1110578805) + "'", int43 == (-1110578805));
        org.junit.Assert.assertNotNull(functionNodeList45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        int int12 = functionNode9.getRp();
        int int13 = functionNode9.getFunctionType();
        functionNode0.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = functionNode9.new NodeIterator();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList16 = functionNode9.getStatements();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int21 = functionNode20.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode20.getTop();
        com.google.javascript.rhino.head.ast.Name name23 = null;
        functionNode20.setFunctionName(name23);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = functionNode25.getTop();
        functionNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode25);
        functionNode25.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int32 = functionNode25.addFunction(functionNode31);
        int int33 = jump19.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode31);
        functionNode31.setEncodedSourceStart((int) '4');
        functionNode31.setLength(48);
        functionNode31.setFunctionType(19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int42 = functionNode41.getLp();
        functionNode41.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode45 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int46 = functionNode45.getLp();
        functionNode45.setEncodedSource("");
        functionNode45.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int52 = functionNode51.getLp();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode41, (com.google.javascript.rhino.head.Node) functionNode45, (com.google.javascript.rhino.head.Node) functionNode51, (int) '#');
        boolean boolean55 = functionNode51.isGenerator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = new com.google.javascript.rhino.head.ast.FunctionNode((-1262414679));
        com.google.javascript.rhino.head.Token.CommentType commentType62 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment64 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType62, "109");
        java.lang.String str66 = comment64.toSource(19);
        java.lang.String str67 = comment64.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType68 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        comment64.setCommentType(commentType68);
        com.google.javascript.rhino.head.ast.Comment comment71 = new com.google.javascript.rhino.head.ast.Comment(9, 6, commentType68, "                    ");
        functionNode57.setJsDocNode(comment71);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(25, (com.google.javascript.rhino.head.Node) functionNode31, (com.google.javascript.rhino.head.Node) functionNode51, (com.google.javascript.rhino.head.Node) functionNode57, (int) (short) 10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList75 = functionNode51.getFunctions();
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap76 = functionNode51.getLiveLocals();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) functionNode9, (com.google.javascript.rhino.head.ast.Scope) functionNode51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray78 = functionNode51.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(astNodeList16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + commentType62 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType62.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "                                      109" + "'", str66, "                                      109");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "109" + "'", str67, "109");
        org.junit.Assert.assertTrue("'" + commentType68 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType68.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertNotNull(functionNodeList75);
        org.junit.Assert.assertNull(nodeMap76);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(365513504);
        scriptNode1.setBounds((int) ' ', 0);
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        functionNode0.setLineno(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode4 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int5 = functionNode4.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode4.getTop();
        com.google.javascript.rhino.head.ast.Name name7 = null;
        functionNode4.setFunctionName(name7);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode9);
        functionNode9.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.Jump jump15 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int17 = functionNode16.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = functionNode16.getTop();
        com.google.javascript.rhino.head.ast.Name name19 = null;
        functionNode16.setFunctionName(name19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode21 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = functionNode21.getTop();
        functionNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode21);
        functionNode21.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int28 = functionNode21.addFunction(functionNode27);
        int int29 = jump15.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode31 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump37 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump37.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump37, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int44 = scriptNode43.getEndLineno();
        int int45 = scriptNode43.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList46 = scriptNode43.getChildScopes();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump37, (com.google.javascript.rhino.head.Node) scriptNode43);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList48 = scriptNode43.getFunctions();
        functionNodeList48.clear();
        com.google.javascript.rhino.head.ast.Jump jump54 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump54.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump58 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump54, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int61 = scriptNode60.getEndLineno();
        int int62 = scriptNode60.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList63 = scriptNode60.getChildScopes();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump54, (com.google.javascript.rhino.head.Node) scriptNode60);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList65 = scriptNode60.getFunctions();
        boolean boolean66 = functionNodeList48.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList65);
        functionNode31.putProp(20, (java.lang.Object) functionNodeList48);
        int int68 = functionNode27.addFunction(functionNode31);
        functionNode9.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode27);
        functionNode0.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode27);
        boolean boolean71 = functionNode0.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int74 = scriptNode73.getEndLineno();
        int int75 = scriptNode73.getBaseLineno();
        scriptNode73.removeProp(0);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList78 = scriptNode73.getSymbols();
        functionNode0.setSymbols(symbolList78);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(scriptNode18);
        org.junit.Assert.assertNotNull(scriptNode22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(scopeList46);
        org.junit.Assert.assertNotNull(functionNodeList48);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(scopeList63);
        org.junit.Assert.assertNotNull(functionNodeList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(symbolList78);
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int9 = scriptNode8.getEndLineno();
        int int10 = scriptNode8.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode8.getChildScopes();
        jump6.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode8);
        java.lang.String str13 = scriptNode8.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode8);
        com.google.javascript.rhino.head.ast.AstNode astNode15 = scriptNode1.getParent();
        int int16 = scriptNode1.getType();
        com.google.javascript.rhino.head.ast.Symbol symbol18 = scriptNode1.getSymbol("109");
        java.lang.String str19 = scriptNode1.getEncodedSource();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str13, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(astNode15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 136 + "'", int16 == 136);
        org.junit.Assert.assertNull(symbol18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump6.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump10 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump6, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode12.getChildScopes();
        com.google.javascript.rhino.head.Node node16 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump6, (com.google.javascript.rhino.head.Node) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList17 = scriptNode12.getFunctions();
        int int18 = scriptNode12.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode12.getChildScopes();
        java.lang.String str20 = scriptNode12.getSourceName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int23 = functionNode22.getLp();
        functionNode22.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        functionNode26.setEncodedSource("");
        functionNode26.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int33 = functionNode32.getLp();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode22, (com.google.javascript.rhino.head.Node) functionNode26, (com.google.javascript.rhino.head.Node) functionNode32, (int) '#');
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap36 = functionNode26.getSymbolTable();
        com.google.javascript.rhino.head.ast.Jump jump40 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump40.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump44 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump40, 0);
        com.google.javascript.rhino.head.ast.Jump jump48 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump48.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump52 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump48, 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int54 = functionNode53.getLp();
        functionNode53.setEncodedSource("");
        functionNode53.flattenSymbolTable(false);
        jump40.addChildAfter((com.google.javascript.rhino.head.Node) jump48, (com.google.javascript.rhino.head.Node) functionNode53);
        functionNode26.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode53);
        int int61 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode12, (com.google.javascript.rhino.head.ast.AstNode) functionNode26);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator62 = positionComparator1.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator63 = positionComparator0.thenComparing(astNodeComparator62);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator64 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.Jump jump69 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump69.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump73 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump69, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int76 = scriptNode75.getEndLineno();
        int int77 = scriptNode75.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList78 = scriptNode75.getChildScopes();
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump69, (com.google.javascript.rhino.head.Node) scriptNode75);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList80 = scriptNode75.getFunctions();
        int int81 = functionNodeList80.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator82 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList80.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator82);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator84 = positionComparator82.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator85 = astNodeComparator84.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator86 = positionComparator64.thenComparing(astNodeComparator84);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator87 = positionComparator64.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator88 = astNodeComparator87.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator89 = positionComparator0.thenComparing(astNodeComparator87);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertNotNull(functionNodeList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(strMap36);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator62);
        org.junit.Assert.assertNotNull(astNodeComparator63);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNull(scopeList78);
        org.junit.Assert.assertNotNull(functionNodeList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator84);
        org.junit.Assert.assertNotNull(astNodeComparator85);
        org.junit.Assert.assertNotNull(astNodeComparator86);
        org.junit.Assert.assertNotNull(astNodeComparator87);
        org.junit.Assert.assertNotNull(astNodeComparator88);
        org.junit.Assert.assertNotNull(astNodeComparator89);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int5 = scriptNode4.getEndLineno();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int8 = functionNode7.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode7.getTop();
        boolean boolean10 = functionNode7.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int13 = scriptNode12.getEndLineno();
        int int14 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump17 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int20 = scriptNode19.getEndLineno();
        int int21 = scriptNode19.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode19.getChildScopes();
        jump17.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode19);
        java.lang.String str24 = scriptNode19.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode12, (com.google.javascript.rhino.head.ast.Scope) scriptNode19);
        com.google.javascript.rhino.head.ast.Scope scope26 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode19.target = scope26;
        functionNode7.addChildScope(scope26);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode4, (com.google.javascript.rhino.head.ast.Scope) functionNode7);
        int int30 = functionNode7.getFunctionCount();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList31 = functionNode7.getParams();
        boolean boolean32 = functionNode7.isExpressionClosure();
        functionNode7.setBaseLineno(0);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode7.visit(nodeVisitor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str24, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(astNodeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump(17, 16);
        // The following exception was thrown during execution in test generation
        try {
            jump2.setDouble((double) (-1110578805));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Jump cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int4 = scriptNode3.getEndLineno();
        int int5 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        jump8.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode10);
        java.lang.String str15 = scriptNode10.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode3, (com.google.javascript.rhino.head.ast.Scope) scriptNode10);
        int int17 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump20 = new com.google.javascript.rhino.head.ast.Jump(3, 13);
        functionNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) jump20);
        scriptNode3.setEncodedSourceEnd(11);
        int int24 = scriptNode3.getEncodedSourceEnd();
        scriptNode3.flattenSymbolTable(false);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = scriptNode3.getSymbols();
        scriptNode3.setRelative(671469117);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str15, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(symbolList27);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode35.getTop();
        functionNode35.setParens((int) (byte) 1, (int) (short) 1);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) functionNode35);
        functionNode35.setRequiresActivation();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator42 = functionNode35.new NodeIterator();
        boolean boolean43 = strMap33.containsValue((java.lang.Object) nodeIterator42);
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator42.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int3 = functionNode2.getEncodedSourceStart();
        int int4 = functionNode2.getFunctionCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode5.setParens((int) (byte) 1, (int) (short) 1);
        int int10 = functionNode5.getRp();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(17, (com.google.javascript.rhino.head.Node) functionNode2, (com.google.javascript.rhino.head.Node) functionNode5, (int) (short) 0);
        com.google.javascript.rhino.head.ast.Symbol symbol14 = functionNode5.getSymbol("$0");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        functionNode15.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope21 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode22 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = functionNode22.getTop();
        functionNode22.setParens((int) (byte) 1, (int) (short) 1);
        functionNode22.setEncodedSourceStart((-1));
        functionNode22.setFunctionIsGetter();
        scope21.addChildToFront((com.google.javascript.rhino.head.Node) functionNode22);
        functionNode19.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode22);
        int int32 = functionNode15.addFunction(functionNode19);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode15);
        java.lang.String str34 = functionNode5.getNextTempName();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral36 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str38 = regExpLiteral36.toSource((int) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator39 = regExpLiteral36.new NodeIterator();
        java.lang.String str41 = regExpLiteral36.toSource(100);
        java.lang.String str42 = regExpLiteral36.getJsDoc();
        functionNode5.addRegExp(regExpLiteral36);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode44 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int45 = functionNode44.getLp();
        functionNode44.setLp((int) (short) 1);
        int int50 = functionNode44.getIntProp(4, 26);
        boolean boolean51 = functionNode44.hasChildren();
        java.lang.String str52 = functionNode44.getNextTempName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode53 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = functionNode53.getTop();
        com.google.javascript.rhino.head.ast.Name name55 = null;
        functionNode53.setFunctionName(name55);
        functionNode44.addChildScope((com.google.javascript.rhino.head.ast.Scope) functionNode53);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int59 = functionNode58.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = functionNode58.getTop();
        boolean boolean61 = functionNode58.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump68 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int71 = scriptNode70.getEndLineno();
        int int72 = scriptNode70.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode70.getChildScopes();
        jump68.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode70);
        java.lang.String str75 = scriptNode70.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode63, (com.google.javascript.rhino.head.ast.Scope) scriptNode70);
        com.google.javascript.rhino.head.ast.Scope scope77 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode70.target = scope77;
        functionNode58.addChildScope(scope77);
        boolean boolean80 = functionNode58.hasConsistentReturnUsage();
        functionNode44.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode58);
        java.lang.String str82 = functionNode58.getName();
        // The following exception was thrown during execution in test generation
        try {
            functionNode5.setDefault((com.google.javascript.rhino.head.Node) functionNode58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(symbol14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(scriptNode23);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "$0" + "'", str34, "$0");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "                    /null/" + "'", str38, "                    /null/");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        /null/" + "'", str41, "                                                                                                                                                                                                        /null/");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 26 + "'", int50 == 26);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "$0" + "'", str52, "$0");
        org.junit.Assert.assertNotNull(scriptNode54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(scriptNode60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str75, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setLp((int) (short) 1);
        int int11 = functionNode5.getIntProp(4, 26);
        com.google.javascript.rhino.head.ast.Jump jump12 = new com.google.javascript.rhino.head.ast.Jump(3, (com.google.javascript.rhino.head.Node) functionNode5);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) functionNode5);
        functionNode5.setFunctionType(11);
        boolean boolean16 = functionNode5.hasChildren();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor26 = scriptNode21.iterator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int28 = functionNode27.getLp();
        functionNode27.setEncodedSource("");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode21, (com.google.javascript.rhino.head.ast.Scope) functionNode27);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode32 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = functionNode32.getTop();
        functionNode32.setParens((int) (byte) 1, (int) (short) 1);
        functionNode32.setEncodedSourceStart((-1));
        java.util.List<com.google.javascript.rhino.head.Node> nodeList39 = functionNode32.getResumptionPoints();
        com.google.javascript.rhino.head.ast.Scope scope41 = functionNode32.getDefiningScope("hi!");
        boolean boolean42 = functionNode32.isGetterOrSetter();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int44 = functionNode43.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = functionNode43.getTop();
        com.google.javascript.rhino.head.ast.Name name46 = null;
        functionNode43.setFunctionName(name46);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode48 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = functionNode48.getTop();
        functionNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode48);
        int int51 = functionNode48.getRp();
        int int52 = functionNode48.getFunctionType();
        int int53 = functionNode32.addFunction(functionNode48);
        functionNode27.setCompilerData((java.lang.Object) functionNode48);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode55 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int56 = functionNode55.getLp();
        functionNode55.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode59 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope61 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = functionNode62.getTop();
        functionNode62.setParens((int) (byte) 1, (int) (short) 1);
        functionNode62.setEncodedSourceStart((-1));
        functionNode62.setFunctionIsGetter();
        scope61.addChildToFront((com.google.javascript.rhino.head.Node) functionNode62);
        functionNode59.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode62);
        int int72 = functionNode55.addFunction(functionNode59);
        int int73 = functionNode55.getEncodedSourceEnd();
        functionNode48.replaceWith((com.google.javascript.rhino.head.ast.Scope) functionNode55);
        functionNode5.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode48);
        java.lang.String str76 = functionNode48.shortName();
        scriptNode1.target = functionNode48;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.labelId((-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 26 + "'", int11 == 26);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertNotNull(nodeItor26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(scriptNode33);
        org.junit.Assert.assertNull(nodeList39);
        org.junit.Assert.assertNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertNotNull(scriptNode49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(scriptNode63);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "FunctionNode" + "'", str76, "FunctionNode");
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode0.getTop();
        com.google.javascript.rhino.head.ast.Name name3 = null;
        functionNode0.setFunctionName(name3);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = functionNode5.getTop();
        functionNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode5);
        int int8 = functionNode5.getRp();
        java.lang.String str9 = functionNode5.getSourceName();
        functionNode5.setParens(14, (int) '#');
        com.google.javascript.rhino.head.ast.FunctionNode functionNode13 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = functionNode13.getTop();
        int int15 = functionNode13.getRegexpCount();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = functionNode13.getEnclosingFunction();
        functionNode13.setBaseLineno(0);
        functionNode5.setMemberExprNode((com.google.javascript.rhino.head.ast.AstNode) functionNode13);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump20 = functionNode13.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(scriptNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(functionNode16);
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = functionNode2.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = functionNode12.getTop();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int16 = functionNode15.getLp();
        functionNode15.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int20 = functionNode19.getLp();
        functionNode19.setEncodedSource("");
        functionNode19.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int26 = functionNode25.getLp();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode15, (com.google.javascript.rhino.head.Node) functionNode19, (com.google.javascript.rhino.head.Node) functionNode25, (int) '#');
        com.google.javascript.rhino.head.ast.AstNode astNode29 = functionNode15.getBody();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode30 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int31 = functionNode30.getLp();
        functionNode30.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode34 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int35 = functionNode34.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = functionNode34.getTop();
        com.google.javascript.rhino.head.ast.Name name37 = null;
        functionNode34.setFunctionName(name37);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = functionNode39.getTop();
        functionNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int42 = functionNode39.getRp();
        int int43 = functionNode39.getFunctionType();
        functionNode30.addParam((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        com.google.javascript.rhino.head.ast.Scope scope45 = functionNode39.getEnclosingScope();
        functionNode15.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode39);
        int int47 = functionNode12.addFunction(functionNode15);
        java.util.List<com.google.javascript.rhino.head.Node> nodeList48 = functionNode12.getResumptionPoints();
        boolean boolean49 = functionNode12.hasSideEffects();
        functionNode2.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode12);
        com.google.javascript.rhino.head.ast.Comment comment51 = functionNode12.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            comment51.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNull(functionNode11);
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(astNode29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(scriptNode36);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(nodeList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(comment51);
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump8.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump12 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump8, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode14.getChildScopes();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList19 = scriptNode14.getFunctions();
        functionNodeList19.clear();
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump25.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump29 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump25, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int32 = scriptNode31.getEndLineno();
        int int33 = scriptNode31.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode31.getChildScopes();
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump25, (com.google.javascript.rhino.head.Node) scriptNode31);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList36 = scriptNode31.getFunctions();
        boolean boolean37 = functionNodeList19.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList36);
        functionNode2.putProp(20, (java.lang.Object) functionNodeList19);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode39 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int40 = functionNode39.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str43 = functionNode39.toStringTree(scriptNode42);
        int int44 = functionNode2.addFunction(functionNode39);
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap45 = functionNode2.getLiveLocals();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode46 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int47 = functionNode46.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = functionNode46.getTop();
        com.google.javascript.rhino.head.ast.Name name49 = null;
        functionNode46.setFunctionName(name49);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = functionNode51.getTop();
        functionNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode51);
        int int54 = functionNode51.getRp();
        functionNode51.setParens(11, 2);
        com.google.javascript.rhino.head.ast.Jump jump60 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int63 = scriptNode62.getEndLineno();
        int int64 = scriptNode62.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList65 = scriptNode62.getChildScopes();
        jump60.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode62);
        boolean boolean67 = jump60.hasChildren();
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(26, (com.google.javascript.rhino.head.Node) functionNode2, (com.google.javascript.rhino.head.Node) functionNode51, (com.google.javascript.rhino.head.Node) jump60, (int) ' ');
        com.google.javascript.rhino.head.ast.FunctionNode functionNode70 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int71 = functionNode70.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = functionNode70.getTop();
        boolean boolean73 = functionNode70.hasSideEffects();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) functionNode2, (com.google.javascript.rhino.head.ast.Scope) functionNode70);
        functionNode2.setFunctionType(2);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump77 = functionNode2.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertNotNull(functionNodeList19);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertNotNull(functionNodeList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(nodeMap45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(scriptNode48);
        org.junit.Assert.assertNotNull(scriptNode52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(scopeList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(scriptNode72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str4 = functionNode0.toStringTree(scriptNode3);
        java.lang.String str5 = functionNode0.shortName();
        boolean boolean6 = functionNode0.isGetter();
        com.google.javascript.rhino.head.ast.Scope scope8 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = functionNode9.getTop();
        functionNode9.setParens((int) (byte) 1, (int) (short) 1);
        functionNode9.setEncodedSourceStart((-1));
        functionNode9.setFunctionIsGetter();
        scope8.addChildToFront((com.google.javascript.rhino.head.Node) functionNode9);
        functionNode9.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        jump26.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode28);
        java.lang.String str33 = scriptNode28.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode21, (com.google.javascript.rhino.head.ast.Scope) scriptNode28);
        com.google.javascript.rhino.head.ast.Scope scope35 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode28.target = scope35;
        java.lang.String str37 = functionNode9.toStringTree(scriptNode28);
        java.lang.String str39 = scriptNode28.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap40 = scriptNode28.getSymbolTable();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int43 = scriptNode42.getEndLineno();
        int int44 = scriptNode42.getBaseLineno();
        scriptNode42.removeProp(0);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList47 = scriptNode42.getSymbols();
        boolean boolean48 = strMap40.containsValue((java.lang.Object) symbolList47);
        com.google.javascript.rhino.head.ast.Symbol symbol50 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str51 = symbol50.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Scope scope52 = symbol50.getContainingTable();
        symbol50.setName("                                      109");
        com.google.javascript.rhino.head.Node node55 = symbol50.getNode();
        com.google.javascript.rhino.head.ast.Symbol symbol56 = new com.google.javascript.rhino.head.ast.Symbol();
        com.google.javascript.rhino.head.Node node57 = symbol56.getNode();
        symbol56.setIndex(4);
        java.lang.String str60 = symbol56.getDeclTypeName();
        java.lang.String str61 = symbol56.toString();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode62 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int63 = functionNode62.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = functionNode62.getTop();
        boolean boolean65 = functionNode62.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int68 = scriptNode67.getEndLineno();
        int int69 = scriptNode67.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump72 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int75 = scriptNode74.getEndLineno();
        int int76 = scriptNode74.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList77 = scriptNode74.getChildScopes();
        jump72.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode74);
        java.lang.String str79 = scriptNode74.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode67, (com.google.javascript.rhino.head.ast.Scope) scriptNode74);
        com.google.javascript.rhino.head.ast.Scope scope81 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode74.target = scope81;
        functionNode62.addChildScope(scope81);
        boolean boolean84 = functionNode62.isGetter();
        symbol56.setNode((com.google.javascript.rhino.head.Node) functionNode62);
        boolean boolean86 = strMap40.replace("{\n}\n", symbol50, symbol56);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.head.ast.Symbol>> strEntrySet87 = strMap40.entrySet();
        int int88 = strMap40.size();
        functionNode0.setSymbolTable(strMap40);
        com.google.javascript.rhino.head.Token.CommentType commentType92 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment94 = new com.google.javascript.rhino.head.ast.Comment(20, (int) (short) -1, commentType92, "EOF");
        java.lang.String str95 = comment94.getValue();
        boolean boolean96 = strMap40.containsValue((java.lang.Object) str95);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FunctionNode" + "'", str5, "FunctionNode");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str33, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "                    {\n                    }\n" + "'", str39, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(symbolList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "EOF" + "'", str51, "EOF");
        org.junit.Assert.assertNull(scope52);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "EOF" + "'", str60, "EOF");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Symbol (EOF) name=null" + "'", str61, "Symbol (EOF) name=null");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(scriptNode64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNull(scopeList77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str79, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strEntrySet87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + commentType92 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType92.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "EOF" + "'", str95, "EOF");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(327364487, 12);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        com.google.javascript.rhino.head.ast.Comment comment15 = functionNode11.getJsDocNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode16 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope18 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode19 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = functionNode19.getTop();
        functionNode19.setParens((int) (byte) 1, (int) (short) 1);
        functionNode19.setEncodedSourceStart((-1));
        functionNode19.setFunctionIsGetter();
        scope18.addChildToFront((com.google.javascript.rhino.head.Node) functionNode19);
        functionNode16.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode19);
        boolean boolean29 = functionNode11.isParam((com.google.javascript.rhino.head.ast.AstNode) functionNode16);
        int int30 = functionNode16.getLp();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = functionNode16.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node32 = nodeIterator31.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(comment15);
        org.junit.Assert.assertNotNull(scriptNode20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        int int16 = functionNodeList15.size();
        functionNodeList15.clear();
        int int19 = functionNodeList15.indexOf((java.lang.Object) 10L);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor20 = functionNodeList15.iterator();
        java.util.stream.Stream<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeStream21 = functionNodeList15.stream();
        boolean boolean22 = functionNodeList15.isEmpty();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode24 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int25 = functionNode24.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = functionNode24.getTop();
        com.google.javascript.rhino.head.ast.Name name27 = null;
        functionNode24.setFunctionName(name27);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode29 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = functionNode29.getTop();
        functionNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode29);
        functionNode29.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.Jump jump35 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int37 = functionNode36.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = functionNode36.getTop();
        com.google.javascript.rhino.head.ast.Name name39 = null;
        functionNode36.setFunctionName(name39);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode41 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = functionNode41.getTop();
        functionNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode41);
        functionNode41.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode47 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int48 = functionNode41.addFunction(functionNode47);
        int int49 = jump35.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode47);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode51 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump57 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump57.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump61 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump57, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int64 = scriptNode63.getEndLineno();
        int int65 = scriptNode63.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode63.getChildScopes();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump57, (com.google.javascript.rhino.head.Node) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList68 = scriptNode63.getFunctions();
        functionNodeList68.clear();
        com.google.javascript.rhino.head.ast.Jump jump74 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump74.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump78 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump74, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int81 = scriptNode80.getEndLineno();
        int int82 = scriptNode80.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList83 = scriptNode80.getChildScopes();
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump74, (com.google.javascript.rhino.head.Node) scriptNode80);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList85 = scriptNode80.getFunctions();
        boolean boolean86 = functionNodeList68.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList85);
        functionNode51.putProp(20, (java.lang.Object) functionNodeList68);
        int int88 = functionNode47.addFunction(functionNode51);
        functionNode29.addResumptionPoint((com.google.javascript.rhino.head.Node) functionNode47);
        java.util.Map<com.google.javascript.rhino.head.Node, int[]> nodeMap90 = functionNode29.getLiveLocals();
        functionNode29.setParens((int) 'a', 0);
        // The following exception was thrown during execution in test generation
        try {
            functionNodeList15.add(13, functionNode29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(functionNodeItor20);
        org.junit.Assert.assertNotNull(functionNodeStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertNotNull(scriptNode30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(scriptNode38);
        org.junit.Assert.assertNotNull(scriptNode42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertNotNull(functionNodeList68);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNull(scopeList83);
        org.junit.Assert.assertNotNull(functionNodeList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNull(nodeMap90);
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int2 = functionNode1.getLp();
        functionNode1.setEncodedSource("");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode5 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int6 = functionNode5.getLp();
        functionNode5.setEncodedSource("");
        functionNode5.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int12 = functionNode11.getLp();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((-1), (com.google.javascript.rhino.head.Node) functionNode1, (com.google.javascript.rhino.head.Node) functionNode5, (com.google.javascript.rhino.head.Node) functionNode11, (int) '#');
        boolean boolean15 = functionNode11.isGenerator();
        com.google.javascript.rhino.head.ast.Name name16 = null;
        functionNode11.setFunctionName(name16);
        java.lang.Class<?> wildcardClass18 = functionNode11.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        java.util.Set<java.lang.String> strSet35 = strMap33.keySet();
        com.google.javascript.rhino.head.ast.Symbol symbol37 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str38 = symbol37.getDeclTypeName();
        int int39 = symbol37.getDeclType();
        com.google.javascript.rhino.head.ast.Scope scope40 = symbol37.getContainingTable();
        java.lang.String str41 = symbol37.getDeclTypeName();
        com.google.javascript.rhino.head.ast.Symbol symbol42 = strMap33.put("                          ", symbol37);
        // The following exception was thrown during execution in test generation
        try {
            symbol42.setIndex(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "EOF" + "'", str38, "EOF");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(scope40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EOF" + "'", str41, "EOF");
        org.junit.Assert.assertNull(symbol42);
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor11 = functionNode2.iterator();
        com.google.javascript.rhino.head.ast.Jump jump13 = new com.google.javascript.rhino.head.ast.Jump((-440310255));
        com.google.javascript.rhino.head.ast.FunctionNode functionNode15 = new com.google.javascript.rhino.head.ast.FunctionNode(18);
        jump13.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode15);
        functionNode2.setTop((com.google.javascript.rhino.head.ast.ScriptNode) functionNode15);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = functionNode15.getExistingIntProp(101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertNotNull(nodeItor11);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int1 = functionNode0.getLp();
        com.google.javascript.rhino.head.ast.Scope scope3 = functionNode0.getDefiningScope("109");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node4 = functionNode0.getDefault();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(scope3);
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump22 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump22.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump26 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump22, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int29 = scriptNode28.getEndLineno();
        int int30 = scriptNode28.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode28.getChildScopes();
        com.google.javascript.rhino.head.Node node32 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump22, (com.google.javascript.rhino.head.Node) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList33 = scriptNode28.getFunctions();
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator34 = functionNodeList33.spliterator();
        int int36 = functionNodeList33.indexOf((java.lang.Object) (byte) 10);
        boolean boolean37 = functionNodeList15.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList33);
        java.lang.Object obj38 = null;
        int int39 = functionNodeList33.lastIndexOf(obj38);
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator40 = functionNodeList33.spliterator();
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump45.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump49 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump45, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int52 = scriptNode51.getEndLineno();
        int int53 = scriptNode51.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList54 = scriptNode51.getChildScopes();
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump45, (com.google.javascript.rhino.head.Node) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList56 = scriptNode51.getFunctions();
        functionNodeList56.clear();
        com.google.javascript.rhino.head.ast.Jump jump62 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump62.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump66 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump62, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int69 = scriptNode68.getEndLineno();
        int int70 = scriptNode68.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList71 = scriptNode68.getChildScopes();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump62, (com.google.javascript.rhino.head.Node) scriptNode68);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList73 = scriptNode68.getFunctions();
        functionNodeList73.clear();
        boolean boolean75 = functionNodeList56.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList73);
        functionNodeList56.clear();
        functionNodeList56.clear();
        boolean boolean78 = functionNodeList33.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList56);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor79 = functionNodeList56.iterator();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertNotNull(functionNodeList33);
        org.junit.Assert.assertNotNull(functionNodeSpliterator34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(functionNodeSpliterator40);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(scopeList54);
        org.junit.Assert.assertNotNull(functionNodeList56);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(scopeList71);
        org.junit.Assert.assertNotNull(functionNodeList73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(functionNodeItor79);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = functionNode2.getTop();
        functionNode2.setParens((int) (byte) 1, (int) (short) 1);
        functionNode2.setEncodedSourceStart((-1));
        functionNode2.setFunctionIsGetter();
        scope1.addChildToFront((com.google.javascript.rhino.head.Node) functionNode2);
        functionNode2.setRp(19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int15 = scriptNode14.getEndLineno();
        int int16 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump19 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int22 = scriptNode21.getEndLineno();
        int int23 = scriptNode21.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode21.getChildScopes();
        jump19.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode21);
        java.lang.String str26 = scriptNode21.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.target = scope28;
        java.lang.String str30 = functionNode2.toStringTree(scriptNode21);
        java.lang.String str32 = scriptNode21.toSource((int) (short) 10);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap33 = scriptNode21.getSymbolTable();
        int int34 = strMap33.size();
        java.util.Collection<com.google.javascript.rhino.head.ast.Symbol> symbolCollection35 = strMap33.values();
        com.google.javascript.rhino.head.ast.Symbol symbol37 = new com.google.javascript.rhino.head.ast.Symbol();
        java.lang.String str38 = symbol37.getName();
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump43.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump47 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump43, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int50 = scriptNode49.getEndLineno();
        int int51 = scriptNode49.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode49.getChildScopes();
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump43, (com.google.javascript.rhino.head.Node) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList54 = scriptNode49.getChildScopes();
        symbol37.setContainingTable((com.google.javascript.rhino.head.ast.Scope) scriptNode49);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode56 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int57 = functionNode56.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = functionNode56.getTop();
        com.google.javascript.rhino.head.ast.Name name59 = null;
        functionNode56.setFunctionName(name59);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode61 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = functionNode61.getTop();
        functionNode56.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode61);
        functionNode61.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode67 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int68 = functionNode61.addFunction(functionNode67);
        symbol37.setContainingTable((com.google.javascript.rhino.head.ast.Scope) functionNode61);
        com.google.javascript.rhino.head.Node node70 = null;
        symbol37.setNode(node70);
        com.google.javascript.rhino.head.ast.Symbol symbol72 = strMap33.putIfAbsent("                          ", symbol37);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node73 = symbol72.getNode();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                    {\n                    }\n" + "'", str32, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(symbolCollection35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertNull(scopeList54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(scriptNode58);
        org.junit.Assert.assertNotNull(scriptNode62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(symbol72);
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        functionNodeList15.clear();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor18 = functionNodeList15.iterator();
        com.google.javascript.rhino.head.ast.Jump jump23 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump23.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump27 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump23, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int30 = scriptNode29.getEndLineno();
        int int31 = scriptNode29.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode29.getChildScopes();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump23, (com.google.javascript.rhino.head.Node) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode29.getFunctions();
        int int35 = functionNodeList34.size();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode47.getFunctions();
        functionNodeList52.clear();
        com.google.javascript.rhino.head.ast.Jump jump58 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump58.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump62 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump58, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int65 = scriptNode64.getEndLineno();
        int int66 = scriptNode64.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList67 = scriptNode64.getChildScopes();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump58, (com.google.javascript.rhino.head.Node) scriptNode64);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList69 = scriptNode64.getFunctions();
        boolean boolean70 = functionNodeList52.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList69);
        boolean boolean71 = functionNodeList34.addAll(0, (java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList52);
        com.google.javascript.rhino.head.ast.Jump jump76 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump76.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump80 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump76, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int83 = scriptNode82.getEndLineno();
        int int84 = scriptNode82.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList85 = scriptNode82.getChildScopes();
        com.google.javascript.rhino.head.Node node86 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump76, (com.google.javascript.rhino.head.Node) scriptNode82);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList87 = scriptNode82.getFunctions();
        int int88 = functionNodeList87.size();
        functionNodeList87.clear();
        int int91 = functionNodeList87.indexOf((java.lang.Object) 10L);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor92 = functionNodeList87.iterator();
        boolean boolean93 = functionNodeList34.retainAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList87);
        boolean boolean94 = functionNodeList15.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList87);
        java.util.Spliterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeSpliterator95 = functionNodeList87.spliterator();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor96 = functionNodeList87.iterator();
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor97 = functionNodeList87.iterator();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNotNull(functionNodeItor18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(scopeList67);
        org.junit.Assert.assertNotNull(functionNodeList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNull(scopeList85);
        org.junit.Assert.assertNotNull(functionNodeList87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(functionNodeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(functionNodeSpliterator95);
        org.junit.Assert.assertNotNull(functionNodeItor96);
        org.junit.Assert.assertNotNull(functionNodeItor97);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = com.google.javascript.rhino.head.Token.CommentType.HTML;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(20, 1, commentType2, "109");
        java.lang.String str6 = comment4.toSource(19);
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        java.lang.String str9 = comment4.toSource((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + commentType2 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType2.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "                                      109" + "'", str6, "                                      109");
        org.junit.Assert.assertTrue("'" + commentType7 + "' != '" + com.google.javascript.rhino.head.Token.CommentType.HTML + "'", commentType7.equals(com.google.javascript.rhino.head.Token.CommentType.HTML));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "                                                                                                                                                                                                        109" + "'", str9, "                                                                                                                                                                                                        109");
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral3 = new com.google.javascript.rhino.head.ast.RegExpLiteral(35, 22);
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump(6, (com.google.javascript.rhino.head.Node) regExpLiteral3);
        jump4.setRelative(21);
        jump4.setRelative(13);
        java.lang.Class<?> wildcardClass9 = jump4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        com.google.javascript.rhino.head.ast.Jump jump4 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump4.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump8 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump4, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int11 = scriptNode10.getEndLineno();
        int int12 = scriptNode10.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump4, (com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode10.getFunctions();
        functionNodeList15.clear();
        com.google.javascript.rhino.head.ast.Jump jump21 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump21.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump25 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump21, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int28 = scriptNode27.getEndLineno();
        int int29 = scriptNode27.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode27.getChildScopes();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump21, (com.google.javascript.rhino.head.Node) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode27.getFunctions();
        boolean boolean33 = functionNodeList15.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList32);
        java.util.Iterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor34 = functionNodeList32.iterator();
        com.google.javascript.rhino.head.ast.Jump jump39 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump39.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump43 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump39, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int46 = scriptNode45.getEndLineno();
        int int47 = scriptNode45.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode45.getChildScopes();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode45.getFunctions();
        int int51 = functionNodeList50.size();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator52 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        functionNodeList50.sort((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator52);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator54 = positionComparator52.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator55 = astNodeComparator54.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator56 = astNodeComparator55.reversed();
        functionNodeList32.sort(astNodeComparator55);
        com.google.javascript.rhino.head.ast.Jump jump64 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump64.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump68 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump64, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int71 = scriptNode70.getEndLineno();
        int int72 = scriptNode70.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode70.getChildScopes();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump64, (com.google.javascript.rhino.head.Node) scriptNode70);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList75 = scriptNode70.getChildScopes();
        com.google.javascript.rhino.head.ast.Jump jump76 = new com.google.javascript.rhino.head.ast.Jump(11, (com.google.javascript.rhino.head.Node) scriptNode70);
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node((int) (byte) -1, (com.google.javascript.rhino.head.Node) scriptNode70, 19);
        com.google.javascript.rhino.head.Node node79 = scriptNode70.getFirstChild();
        boolean boolean80 = functionNodeList32.equals((java.lang.Object) node79);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeItor82 = functionNodeList32.listIterator((-592978996));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -592978996, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(functionNodeItor34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator54);
        org.junit.Assert.assertNotNull(astNodeComparator55);
        org.junit.Assert.assertNotNull(astNodeComparator56);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertNull(scopeList75);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) (short) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int4 = functionNode3.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = functionNode3.getTop();
        com.google.javascript.rhino.head.ast.Name name6 = null;
        functionNode3.setFunctionName(name6);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode8 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = functionNode8.getTop();
        functionNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) functionNode8);
        functionNode8.setIsExpressionClosure(true);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = new com.google.javascript.rhino.head.ast.FunctionNode((int) (byte) 100);
        int int15 = functionNode8.addFunction(functionNode14);
        int int16 = jump2.compareTo((com.google.javascript.rhino.head.ast.AstNode) functionNode14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        com.google.javascript.rhino.head.ast.Jump jump24 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump24.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump28 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump24, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int31 = scriptNode30.getEndLineno();
        int int32 = scriptNode30.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode30.getChildScopes();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump24, (com.google.javascript.rhino.head.Node) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode30.getFunctions();
        functionNodeList35.clear();
        com.google.javascript.rhino.head.ast.Jump jump41 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        jump41.removeProp((int) 'a');
        com.google.javascript.rhino.head.ast.Jump jump45 = new com.google.javascript.rhino.head.ast.Jump((int) '#', (com.google.javascript.rhino.head.Node) jump41, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int48 = scriptNode47.getEndLineno();
        int int49 = scriptNode47.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode47.getChildScopes();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) jump41, (com.google.javascript.rhino.head.Node) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode47.getFunctions();
        boolean boolean53 = functionNodeList35.removeAll((java.util.Collection<com.google.javascript.rhino.head.ast.FunctionNode>) functionNodeList52);
        functionNode18.putProp(20, (java.lang.Object) functionNodeList35);
        int int55 = functionNode14.addFunction(functionNode18);
        boolean boolean56 = functionNode18.isGenerator();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode58 = new com.google.javascript.rhino.head.ast.FunctionNode(0);
        int int59 = functionNode58.getBaseLineno();
        boolean boolean60 = functionNode58.isGetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral62 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        regExpLiteral62.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str65 = regExpLiteral62.getValue();
        regExpLiteral62.setFlags("52");
        functionNode58.addChildrenToFront((com.google.javascript.rhino.head.Node) regExpLiteral62);
        functionNode18.addRegExp(regExpLiteral62);
        int int70 = functionNode18.getEncodedSourceStart();
        functionNode18.setEncodedSourceBounds(109, 22);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-1262414679), (com.google.javascript.rhino.head.Node) functionNode18, (int) (byte) -1);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionNode18.visit(nodeVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scriptNode5);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral1 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str3 = regExpLiteral1.toSource((int) (byte) 10);
        regExpLiteral1.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str7 = regExpLiteral1.toSource((int) (short) -1);
        regExpLiteral1.setFlags("EOF");
        java.lang.String str11 = regExpLiteral1.makeIndent(10);
        int int12 = regExpLiteral1.getLineno();
        java.lang.String str13 = regExpLiteral1.getValue();
        regExpLiteral1.setPosition(97);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                    /null/" + "'", str3, "                    /null/");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/null/-1\tSCRIPT -1 1\n" + "'", str7, "/null/-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "                    " + "'", str11, "                    ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        com.google.javascript.rhino.head.ast.Jump jump2 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.Scope scope4 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        jump2.addChildrenToBack((com.google.javascript.rhino.head.Node) scope4);
        com.google.javascript.rhino.head.Node node6 = jump2.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = jump2.debugPrint();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: 52");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (-1044852625));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = functionNode1.getTop();
        java.lang.String str3 = scriptNode2.getJsDoc();
        com.google.javascript.rhino.head.Node node5 = scriptNode2.setType(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int7 = functionNode6.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str10 = functionNode6.toStringTree(scriptNode9);
        com.google.javascript.rhino.head.ast.Scope scope12 = scriptNode9.getDefiningScope("");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList13 = scriptNode9.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int16 = scriptNode15.getEndLineno();
        int int17 = scriptNode15.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode9, (com.google.javascript.rhino.head.ast.Scope) scriptNode15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int21 = scriptNode20.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int24 = scriptNode23.getEndLineno();
        scriptNode20.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode23);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode26 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int27 = functionNode26.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = functionNode26.getTop();
        boolean boolean29 = functionNode26.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int32 = scriptNode31.getEndLineno();
        int int33 = scriptNode31.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump36 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int39 = scriptNode38.getEndLineno();
        int int40 = scriptNode38.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList41 = scriptNode38.getChildScopes();
        jump36.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode38);
        java.lang.String str43 = scriptNode38.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode31, (com.google.javascript.rhino.head.ast.Scope) scriptNode38);
        com.google.javascript.rhino.head.ast.Scope scope45 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode38.target = scope45;
        functionNode26.addChildScope(scope45);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode23, (com.google.javascript.rhino.head.ast.Scope) functionNode26);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(20, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode23);
        boolean boolean50 = scriptNode2.hasSideEffects();
        com.google.javascript.rhino.head.Node node51 = scriptNode2.target;
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList52 = scriptNode2.getStatements();
        com.google.javascript.rhino.head.ast.Jump jump55 = new com.google.javascript.rhino.head.ast.Jump((-146877426), 0);
        // The following exception was thrown during execution in test generation
        try {
            scriptNode2.setFinally((com.google.javascript.rhino.head.Node) jump55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(scope12);
        org.junit.Assert.assertNotNull(symbolList13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(scriptNode28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(scopeList41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str43, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(astNodeList52);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        com.google.javascript.rhino.head.ast.FunctionNode functionNode0 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode3 = new com.google.javascript.rhino.head.ast.FunctionNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = functionNode3.getTop();
        functionNode3.setParens((int) (byte) 1, (int) (short) 1);
        functionNode3.setEncodedSourceStart((-1));
        functionNode3.setFunctionIsGetter();
        scope2.addChildToFront((com.google.javascript.rhino.head.Node) functionNode3);
        functionNode0.setBody((com.google.javascript.rhino.head.ast.AstNode) functionNode3);
        functionNode0.setFunctionIsSetter();
        boolean boolean14 = functionNode0.isExpressionClosure();
        functionNode0.putIntProp(7, (int) (byte) 0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = new com.google.javascript.rhino.head.ast.FunctionNode();
        int int19 = functionNode18.getLp();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        java.lang.String str22 = functionNode18.toStringTree(scriptNode21);
        int int23 = scriptNode21.getRegexpCount();
        java.lang.Object obj24 = scriptNode21.getCompilerData();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList25 = scriptNode21.getStatements();
        functionNode0.setTop(scriptNode21);
        functionNode0.setFunctionIsSetter();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral29 = new com.google.javascript.rhino.head.ast.RegExpLiteral((int) (short) 1);
        java.lang.String str31 = regExpLiteral29.toSource((int) (byte) 10);
        regExpLiteral29.setFlags("-1\tSCRIPT -1 1\n");
        java.lang.String str35 = regExpLiteral29.toSource((int) (short) -1);
        java.lang.String str37 = regExpLiteral29.toSource(35);
        functionNode0.addChildrenToBack((com.google.javascript.rhino.head.Node) regExpLiteral29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = functionNode0.getParamOrVarName((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scriptNode4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(astNodeList25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                    /null/" + "'", str31, "                    /null/");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/null/-1\tSCRIPT -1 1\n" + "'", str35, "/null/-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "                                                                      /null/-1\tSCRIPT -1 1\n" + "'", str37, "                                                                      /null/-1\tSCRIPT -1 1\n");
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int2 = scriptNode1.getEndLineno();
        int int3 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.Jump jump6 = new com.google.javascript.rhino.head.ast.Jump((int) '4', 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (byte) -1);
        int int9 = scriptNode8.getEndLineno();
        int int10 = scriptNode8.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode8.getChildScopes();
        jump6.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode8);
        java.lang.String str13 = scriptNode8.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode8);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode8.target = scope15;
        int int17 = scope15.getAbsolutePosition();
        scope15.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump19 = scope15.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str13, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }
}
